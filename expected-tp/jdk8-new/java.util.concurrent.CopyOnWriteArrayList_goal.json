[
  {
    "signature": "java.util.concurrent.CopyOnWriteArrayList()",
    "name": "java.util.concurrent.CopyOnWriteArrayList",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.concurrent.CopyOnWriteArrayList()",
      "comment": "Creates an empty list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.CopyOnWriteArrayList(java.util.Collection<? extends E> c)",
    "name": "java.util.concurrent.CopyOnWriteArrayList",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.CopyOnWriteArrayList(java.util.Collection<? extends E> c)",
      "comment": "Creates a list containing the elements of the specified collection, in the order they are returned by the collection's iterator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.CopyOnWriteArrayList(E[] toCopyIn)",
    "name": "java.util.concurrent.CopyOnWriteArrayList",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "toCopyIn"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.CopyOnWriteArrayList(E[] toCopyIn)",
      "comment": "Creates a list holding a copy of the given array.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getArray()",
    "name": "getArray",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object[]",
      "name": "java.lang.Object[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getArray()",
      "comment": "Gets the array. Non-private so as to also be accessible from CopyOnWriteArraySet class.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setArray(java.lang.Object[] a)",
    "name": "setArray",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "a"
      }
    ],
    "protocol": {
      "member": "setArray(java.lang.Object[] a)",
      "comment": "Sets the array.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "size()",
      "comment": "Returns the number of elements in this list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isEmpty()",
      "comment": "Returns true if this list contains no elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contains(java.lang.Object o)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "contains(java.lang.Object o)",
      "comment": "Returns true if this list contains the specified element. More formally, returns true if and only if this list contains at least one element e such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "indexOf(java.lang.Object o)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "indexOf(java.lang.Object o)",
      "comment": "{@inheritDoc}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "indexOf(E e, int index)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "indexOf(E e, int index)",
      "comment": "Returns the index of the first occurrence of the specified element in this list, searching forwards from index, or returns -1 if the element is not found. More formally, returns the lowest index i such that (i&nbsp;>=&nbsp;index&nbsp;&&&nbsp;(e==null&nbsp;?&nbsp;method_0==null&nbsp;:&nbsp;emethod_2(method_0))), or -1 if there is no such index.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lastIndexOf(java.lang.Object o)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "lastIndexOf(java.lang.Object o)",
      "comment": "{@inheritDoc}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lastIndexOf(E e, int index)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "lastIndexOf(E e, int index)",
      "comment": "Returns the index of the last occurrence of the specified element in this list, searching backwards from index, or returns -1 if the element is not found. More formally, returns the highest index i such that (i&nbsp;<=&nbsp;index&nbsp;&&&nbsp;(e==null&nbsp;?&nbsp;method_0==null&nbsp;:&nbsp;emethod_2(method_0))), or -1 if there is no such index.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clone()",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clone()",
      "comment": "Returns a shallow copy of this list. (The elements themselves are not copied.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray()",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object[]",
      "name": "java.lang.Object[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "toArray()",
      "comment": "Returns an array containing all of the elements in this list in proper sequence (from first to last element). The returned array will be \"safe\" in that no references to it are maintained by this list. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray(T[] a)",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "a"
      }
    ],
    "protocol": {
      "member": "toArray(T[] a)",
      "comment": "Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array. If the list fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list. If this list fits in the specified array with room to spare (imethod_4., the array has more elements than this list), the element in the array immediately following the end of the list is set to null. (This is useful in determining the length of this list only if the caller knows that this list does not contain any null elements.) Like the method_0 method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a list known to contain only strings. The following code can be used to dump the list into a newly allocated array of String}:  {@code String[] y = method_1; Note that method_2 is identical in function to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(int index)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "get(int index)",
      "comment": "{@inheritDoc}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "set(int index, E element)",
    "name": "set",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "set(int index, E element)",
      "comment": "Replaces the element at the specified position in this list with the specified element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(E e)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "add(E e)",
      "comment": "Appends the specified element to the end of this list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(int index, E element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "add(int index, E element)",
      "comment": "Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(int index)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "remove(int index)",
      "comment": "Removes the element at the specified position in this list. Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(java.lang.Object o)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "remove(java.lang.Object o)",
      "comment": "Removes the first occurrence of the specified element from this list, if it is present. If this list does not contain the element, it is unchanged. More formally, removes the element with the lowest index i such that (o==null&nbsp;?&nbsp;method_0==null&nbsp;:&nbsp;omethod_2(method_0)) (if such an element exists). Returns true if this list contained the specified element (or equivalently, if this list changed as a result of the call).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeRange(int fromIndex, int toIndex)",
    "name": "removeRange",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "fromIndex"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "toIndex"
      }
    ],
    "protocol": {
      "member": "removeRange(int fromIndex, int toIndex)",
      "comment": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (toIndex - fromIndex) elements. (If toIndex==fromIndex, this operation has no effect.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addIfAbsent(E e)",
    "name": "addIfAbsent",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "addIfAbsent(E e)",
      "comment": "Appends the element, if not present.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "containsAll(java.util.Collection<?> c)",
    "name": "containsAll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "containsAll(java.util.Collection<?> c)",
      "comment": "Returns true if this list contains all of the elements of the specified collection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeAll(java.util.Collection<?> c)",
    "name": "removeAll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "removeAll(java.util.Collection<?> c)",
      "comment": "Removes from this list all of its elements that are contained in the specified collection. This is a particularly expensive operation in this class because of the need for an internal temporary array.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "retainAll(java.util.Collection<?> c)",
    "name": "retainAll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "retainAll(java.util.Collection<?> c)",
      "comment": "Retains only the elements in this list that are contained in the specified collection. In other words, removes from this list all of its elements that are not contained in the specified collection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addAllAbsent(java.util.Collection<? extends E> c)",
    "name": "addAllAbsent",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "addAllAbsent(java.util.Collection<? extends E> c)",
      "comment": "Appends all of the elements in the specified collection that are not already contained in this list, to the end of this list, in the order that they are returned by the specified collection's iterator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clear()",
      "comment": "Removes all of the elements from this list. The list will be empty after this call returns.",
      "kind": "FreeText",
      "condition": "receiverObjectID.isEmpty()<-receiverObjectID.isEmpty()"
    }
  },
  {
    "signature": "addAll(java.util.Collection<? extends E> c)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "addAll(java.util.Collection<? extends E> c)",
      "comment": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addAll(int index, java.util.Collection<? extends E> c)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "addAll(int index, java.util.Collection<? extends E> c)",
      "comment": "Inserts all of the elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forEach(java.util.function.Consumer<? super E> action)",
    "name": "forEach",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Consumer",
          "name": "Consumer",
          "isArray": false
        },
        "name": "action"
      }
    ],
    "protocol": {
      "member": "forEach(java.util.function.Consumer<? super E> action)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeIf(java.util.function.Predicate<? super E> filter)",
    "name": "removeIf",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "filter"
      }
    ],
    "protocol": {
      "member": "removeIf(java.util.function.Predicate<? super E> filter)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceAll(java.util.function.UnaryOperator<E> operator)",
    "name": "replaceAll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.UnaryOperator",
          "name": "UnaryOperator",
          "isArray": false
        },
        "name": "operator"
      }
    ],
    "protocol": {
      "member": "replaceAll(java.util.function.UnaryOperator<E> operator)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sort(java.util.Comparator<? super E> c)",
    "name": "sort",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "sort(java.util.Comparator<? super E> c)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns a string representation of this list. The string representation consists of the string representations of the list's elements in the order they are returned by its iterator, enclosed in square brackets (\"[]\"}). Adjacent elements are separated by the characters {@code \", \" (comma and space). Elements are converted to strings as by method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object o)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "equals(java.lang.Object o)",
      "comment": "Compares the specified object with this list for equality. Returns true if the specified object is the same object as this object, or if it is also a List and the sequence of elements returned by an method_0 iterator over the specified list is the same as the sequence returned by an iterator over this list. The two sequences are considered to be the same if they have the same length and corresponding elements at the same position in the sequence are equal. Two elements e1 and e2 are considered equal if (e1==null ? e2==null : method_1.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hashCode()",
      "comment": "Returns the hash code value for this list. This implementation uses the definition in method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "iterator()",
      "comment": "Returns an iterator over the elements in this list in proper sequence. The returned iterator provides a snapshot of the state of the list when the iterator was constructed. No synchronization is needed while traversing the iterator. The iterator does NOT support the remove method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listIterator()",
    "name": "listIterator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ListIterator<E>",
      "name": "java.util.ListIterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "listIterator()",
      "comment": "{@inheritDoc} The returned iterator provides a snapshot of the state of the list when the iterator was constructed. No synchronization is needed while traversing the iterator. The iterator does NOT support the remove, set or add methods.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listIterator(int index)",
    "name": "listIterator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ListIterator<E>",
      "name": "java.util.ListIterator<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "listIterator(int index)",
      "comment": "{@inheritDoc} The returned iterator provides a snapshot of the state of the list when the iterator was constructed. No synchronization is needed while traversing the iterator. The iterator does NOT support the remove, set or add methods.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "spliterator()",
    "name": "spliterator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator<E>",
      "name": "java.util.Spliterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "spliterator()",
      "comment": "Returns a Spliterator over the elements in this list. The Spliterator reports method_0, method_1, method_2, and method_3. The spliterator provides a snapshot of the state of the list when the spliterator was constructed. No synchronization is needed while operating on the spliterator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subList(int fromIndex, int toIndex)",
    "name": "subList",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArrayList",
      "name": "CopyOnWriteArrayList",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<E>",
      "name": "java.util.List<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "fromIndex"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "toIndex"
      }
    ],
    "protocol": {
      "member": "subList(int fromIndex, int toIndex)",
      "comment": "Returns a view of the portion of this list between fromIndex, inclusive, and toIndex, exclusive. The returned list is backed by this list, so changes in the returned list are reflected in this list. The semantics of the list returned by this method become undefined if the backing list (imethod_0., this list) is modified in any way other than via the returned list.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]