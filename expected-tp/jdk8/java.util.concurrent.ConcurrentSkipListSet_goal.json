[
  {
    "signature": "java.util.concurrent.ConcurrentSkipListSet()",
    "name": "java.util.concurrent.ConcurrentSkipListSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.concurrent.ConcurrentSkipListSet()",
      "comment": "Constructs a new, empty set that orders its elements according to their Comparable natural ordering.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.ConcurrentSkipListSet(java.util.Comparator<? super E> comparator)",
    "name": "java.util.concurrent.ConcurrentSkipListSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.ConcurrentSkipListSet(java.util.Comparator<? super E> comparator)",
      "comment": "Constructs a new, empty set that orders its elements according to the specified comparator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.ConcurrentSkipListSet(java.util.Collection<? extends E> c)",
    "name": "java.util.concurrent.ConcurrentSkipListSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.ConcurrentSkipListSet(java.util.Collection<? extends E> c)",
      "comment": "Constructs a new set containing the elements in the specified collection, that orders its elements according to their Comparable natural ordering.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.ConcurrentSkipListSet(java.util.SortedSet<E> s)",
    "name": "java.util.concurrent.ConcurrentSkipListSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.SortedSet",
          "name": "SortedSet",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.ConcurrentSkipListSet(java.util.SortedSet<E> s)",
      "comment": "Constructs a new set containing the same elements and using the same ordering as the specified sorted set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.ConcurrentSkipListSet(java.util.concurrent.ConcurrentNavigableMap<E, java.lang.Object> m)",
    "name": "java.util.concurrent.ConcurrentSkipListSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.ConcurrentNavigableMap",
          "name": "ConcurrentNavigableMap",
          "isArray": false
        },
        "name": "m"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.ConcurrentSkipListSet(java.util.concurrent.ConcurrentNavigableMap<E, java.lang.Object> m)",
      "comment": "For use by submaps",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clone()",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet<E>",
      "name": "java.util.concurrent.ConcurrentSkipListSet<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clone()",
      "comment": "Returns a shallow copy of this ConcurrentSkipListSet instance. (The elements themselves are not cloned.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "size()",
      "comment": "Returns the number of elements in this set. If this set contains more than method_0 elements, it returns method_0. Beware that, unlike in most collections, this method is NOT a constant-time operation. Because of the asynchronous nature of these sets, determining the current number of elements requires traversing them all to count them. Additionally, it is possible for the size to change during execution of this method, in which case the returned result will be inaccurate. Thus, this method is typically not very useful in concurrent applications.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isEmpty()",
      "comment": "Returns true if this set contains no elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contains(java.lang.Object o)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "contains(java.lang.Object o)",
      "comment": "Returns true if this set contains the specified element. More formally, returns true if and only if this set contains an element e such that method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(E e)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "add(E e)",
      "comment": "Adds the specified element to this set if it is not already present. More formally, adds the specified element e to this set if the set contains no element e2 such that method_0. If this set already contains the element, the call leaves the set unchanged and returns false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(java.lang.Object o)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "remove(java.lang.Object o)",
      "comment": "Removes the specified element from this set if it is present. More formally, removes an element e such that method_0, if this set contains such an element. Returns true if this set contained the element (or equivalently, if this set changed as a result of the call). (This set will not contain the element once the call returns.)",
      "kind": "FreeText",
      "condition": "receiverObjectID.remove(args[0])->!receiverObjectID.contains(args[0])"
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clear()",
      "comment": "Removes all of the elements from this set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "iterator()",
      "comment": "Returns an iterator over the elements in this set in ascending order.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "descendingIterator()",
    "name": "descendingIterator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "descendingIterator()",
      "comment": "Returns an iterator over the elements in this set in descending order.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object o)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "equals(java.lang.Object o)",
      "comment": "Compares the specified object with this set for equality. Returns true if the specified object is also a set, the two sets have the same size, and every member of the specified set is contained in this set (or equivalently, every member of this set is contained in the specified set). This definition ensures that the equals method works properly across different implementations of the set interface.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeAll(java.util.Collection<?> c)",
    "name": "removeAll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "removeAll(java.util.Collection<?> c)",
      "comment": "Removes from this set all of its elements that are contained in the specified collection. If the specified collection is also a set, this operation effectively modifies this set so that its value is the asymmetric set difference of the two sets.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lower(E e)",
    "name": "lower",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "lower(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "floor(E e)",
    "name": "floor",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "floor(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ceiling(E e)",
    "name": "ceiling",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "ceiling(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "higher(E e)",
    "name": "higher",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "higher(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollFirst()",
    "name": "pollFirst",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "pollFirst()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollLast()",
    "name": "pollLast",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "pollLast()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "comparator()",
    "name": "comparator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Comparator<? super E>",
      "name": "java.util.Comparator<? super E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "comparator()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "first()",
    "name": "first",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "first()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "last()",
    "name": "last",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "last()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)",
    "name": "subSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromElement"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "fromInclusive"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toElement"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "toInclusive"
      }
    ],
    "protocol": {
      "member": "subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "headSet(E toElement, boolean inclusive)",
    "name": "headSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toElement"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "inclusive"
      }
    ],
    "protocol": {
      "member": "headSet(E toElement, boolean inclusive)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tailSet(E fromElement, boolean inclusive)",
    "name": "tailSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromElement"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "inclusive"
      }
    ],
    "protocol": {
      "member": "tailSet(E fromElement, boolean inclusive)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subSet(E fromElement, E toElement)",
    "name": "subSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromElement"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toElement"
      }
    ],
    "protocol": {
      "member": "subSet(E fromElement, E toElement)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "headSet(E toElement)",
    "name": "headSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toElement"
      }
    ],
    "protocol": {
      "member": "headSet(E toElement)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tailSet(E fromElement)",
    "name": "tailSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromElement"
      }
    ],
    "protocol": {
      "member": "tailSet(E fromElement)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "descendingSet()",
    "name": "descendingSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "descendingSet()",
      "comment": "Returns a reverse order view of the elements contained in this set. The descending set is backed by this set, so changes to the set are reflected in the descending set, and vice-versa. The returned set has an ordering equivalent to method_0 method_5(method_1. The expression method_2method_3 returns a view of s essentially equivalent to s.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "spliterator()",
    "name": "spliterator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ConcurrentSkipListSet",
      "name": "ConcurrentSkipListSet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ConcurrentSkipListSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator<E>",
      "name": "java.util.Spliterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "spliterator()",
      "comment": "Returns a Spliterator over the elements in this set. The Spliterator reports method_2, method_3, method_4, method_5 and method_6, with an encounter order that is ascending order. Overriding implementations should document the reporting of additional characteristic values. The spliterator's comparator (see java.method_0) is null if the set's comparator (see method_1) is null. Otherwise, the spliterator's comparator is the same as or imposes the same total ordering as the set's comparator.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]