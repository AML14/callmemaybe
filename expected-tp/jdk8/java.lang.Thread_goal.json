[
  {
    "signature": "java.lang.Thread()",
    "name": "java.lang.Thread",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.lang.Thread()",
      "comment": "Allocates a new Thread object. This constructor has the same effect as #Thread(ThreadGroup,Runnable,String) Thread (null, null, gname), where gname is a newly generated name. Automatically generated names are of the form \"Thread-\"+n, where n is an integer.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.lang.Thread(java.lang.Runnable target)",
    "name": "java.lang.Thread",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Runnable",
          "name": "Runnable",
          "isArray": false
        },
        "name": "target"
      }
    ],
    "protocol": {
      "member": "java.lang.Thread(java.lang.Runnable target)",
      "comment": "Allocates a new Thread object. This constructor has the same effect as #Thread(ThreadGroup,Runnable,String) Thread (null, target, gname), where gname is a newly generated name. Automatically generated names are of the form \"Thread-\"+n, where n is an integer.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.lang.Thread(java.lang.Runnable target, java.security.AccessControlContext acc)",
    "name": "java.lang.Thread",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Runnable",
          "name": "Runnable",
          "isArray": false
        },
        "name": "target"
      },
      {
        "type": {
          "qualifiedName": "java.security.AccessControlContext",
          "name": "AccessControlContext",
          "isArray": false
        },
        "name": "acc"
      }
    ],
    "protocol": {
      "member": "java.lang.Thread(java.lang.Runnable target, java.security.AccessControlContext acc)",
      "comment": "Creates a new Thread that inherits the given AccessControlContext. This is not a public constructor.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.lang.Thread(java.lang.ThreadGroup group, java.lang.Runnable target)",
    "name": "java.lang.Thread",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.ThreadGroup",
          "name": "ThreadGroup",
          "isArray": false
        },
        "name": "group"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Runnable",
          "name": "Runnable",
          "isArray": false
        },
        "name": "target"
      }
    ],
    "protocol": {
      "member": "java.lang.Thread(java.lang.ThreadGroup group, java.lang.Runnable target)",
      "comment": "Allocates a new Thread object. This constructor has the same effect as #Thread(ThreadGroup,Runnable,String) Thread (group, target, gname) ,where gname is a newly generated name. Automatically generated names are of the form \"Thread-\"+n, where n is an integer.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.lang.Thread(java.lang.String name)",
    "name": "java.lang.Thread",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "protocol": {
      "member": "java.lang.Thread(java.lang.String name)",
      "comment": "Allocates a new Thread object. This constructor has the same effect as #Thread(ThreadGroup,Runnable,String) Thread (null, null, name).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.lang.Thread(java.lang.ThreadGroup group, java.lang.String name)",
    "name": "java.lang.Thread",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.ThreadGroup",
          "name": "ThreadGroup",
          "isArray": false
        },
        "name": "group"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "protocol": {
      "member": "java.lang.Thread(java.lang.ThreadGroup group, java.lang.String name)",
      "comment": "Allocates a new Thread object. This constructor has the same effect as #Thread(ThreadGroup,Runnable,String) Thread (group, null, name).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.lang.Thread(java.lang.Runnable target, java.lang.String name)",
    "name": "java.lang.Thread",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Runnable",
          "name": "Runnable",
          "isArray": false
        },
        "name": "target"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "protocol": {
      "member": "java.lang.Thread(java.lang.Runnable target, java.lang.String name)",
      "comment": "Allocates a new Thread object. This constructor has the same effect as #Thread(ThreadGroup,Runnable,String) Thread (null, target, name).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.lang.Thread(java.lang.ThreadGroup group, java.lang.Runnable target, java.lang.String name)",
    "name": "java.lang.Thread",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.ThreadGroup",
          "name": "ThreadGroup",
          "isArray": false
        },
        "name": "group"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Runnable",
          "name": "Runnable",
          "isArray": false
        },
        "name": "target"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "protocol": {
      "member": "java.lang.Thread(java.lang.ThreadGroup group, java.lang.Runnable target, java.lang.String name)",
      "comment": "Allocates a new Thread object so that it has target as its run object, has the specified name as its name, and belongs to the thread group referred to by group. If there is a security manager, its SecurityManager#checkAccess(ThreadGroup) checkAccess method is invoked with the ThreadGroup as its argument. In addition, its checkPermission method is invoked with the RuntimePermission(\"enableContextClassLoaderOverride\") permission when invoked directly or indirectly by the constructor of a subclass which overrides the getContextClassLoader or setContextClassLoader methods. The priority of the newly created thread is set equal to the priority of the thread creating it, that is, the currently running thread. The method #setPriority setPriority may be used to change the priority to a new value. The newly created thread is initially marked as being a daemon thread if and only if the thread creating it is currently marked as a daemon thread. The method #setDaemon setDaemon may be used to change whether or not a thread is a daemon.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.lang.Thread(java.lang.ThreadGroup group, java.lang.Runnable target, java.lang.String name, long stackSize)",
    "name": "java.lang.Thread",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.ThreadGroup",
          "name": "ThreadGroup",
          "isArray": false
        },
        "name": "group"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Runnable",
          "name": "Runnable",
          "isArray": false
        },
        "name": "target"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "stackSize"
      }
    ],
    "protocol": {
      "member": "java.lang.Thread(java.lang.ThreadGroup group, java.lang.Runnable target, java.lang.String name, long stackSize)",
      "comment": "Allocates a new Thread object so that it has target as its run object, has the specified name as its name, and belongs to the thread group referred to by group, and has the specified stack size. This constructor is identical to #Thread(ThreadGroup,Runnable,String) with the exception of the fact that it allows the thread stack size to be specified. The stack size is the approximate number of bytes of address space that the virtual machine is to allocate for this thread's stack. The effect of the stackSize parameter, if any, is highly platform dependent. On some platforms, specifying a higher value for the stackSize parameter may allow a thread to achieve greater recursion depth before throwing a StackOverflowError. Similarly, specifying a lower value may allow a greater number of threads to exist concurrently without throwing an OutOfMemoryError (or other internal error). The details of the relationship between the value of the stackSize parameter and the maximum recursion depth and concurrency level are platform-dependent. On some platforms, the value of the stackSize parameter may have no effect whatsoever. The virtual machine is free to treat the stackSize parameter as a suggestion. If the specified value is unreasonably low for the platform, the virtual machine may instead use some platform-specific minimum value; if the specified value is unreasonably high, the virtual machine may instead use some platform-specific maximum. Likewise, the virtual machine is free to round the specified value up or down as it sees fit (or to ignore it completely). Specifying a value of zero for the stackSize parameter will cause this constructor to behave exactly like the Thread(ThreadGroup, Runnable, String) constructor. Due to the platform-dependent nature of the behavior of this constructor, extreme care should be exercised in its use. The thread stack size necessary to perform a given computation will likely vary from one JRE implementation to another. In light of this variation, careful tuning of the stack size parameter may be required, and the tuning may need to be repeated for each JRE implementation on which an application is to run. Implementation note: Java platform implementers are encouraged to document their implementation's behavior with respect to the stackSize parameter.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "blockedOn(sun.nio.ch.Interruptible b)",
    "name": "blockedOn",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "sun.nio.ch.Interruptible",
          "name": "Interruptible",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "protocol": {
      "member": "blockedOn(sun.nio.ch.Interruptible b)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "currentThread()",
    "name": "currentThread",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Thread",
      "name": "java.lang.Thread",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "currentThread()",
      "comment": "Returns a reference to the currently executing thread object.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "yield()",
    "name": "yield",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "yield()",
      "comment": "A hint to the scheduler that the current thread is willing to yield its current use of a processor. The scheduler is free to ignore this hint.  Yield is a heuristic attempt to improve relative progression between threads that would otherwise over-utilise a CPU. Its use should be combined with detailed profiling and benchmarking to ensure that it actually has the desired effect.  It is rarely appropriate to use this method. It may be useful for debugging or testing purposes, where it may help to reproduce bugs due to race conditions. It may also be useful when designing concurrency control constructs such as the ones in the java.util.concurrent.locks package.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sleep(long millis)",
    "name": "sleep",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "millis"
      }
    ],
    "protocol": {
      "member": "sleep(long millis)",
      "comment": "Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers. The thread does not lose ownership of any monitors.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sleep(long millis, int nanos)",
    "name": "sleep",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "millis"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "nanos"
      }
    ],
    "protocol": {
      "member": "sleep(long millis, int nanos)",
      "comment": "Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers. The thread does not lose ownership of any monitors.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clone()",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clone()",
      "comment": "Throws CloneNotSupportedException as a Thread can not be meaningfully cloned. Construct a new Thread instead.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "start()",
    "name": "start",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "start()",
      "comment": "Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread.  The result is that two threads are running concurrently: the current thread (which returns from the call to the start method) and the other thread (which executes its run method).  It is never legal to start a thread more than once. In particular, a thread may not be restarted once it has completed execution. @exception IllegalThreadStateException if the thread was already started.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "run()",
    "name": "run",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "run()",
      "comment": "If this thread was constructed using a separate Runnable run object, then that Runnable object's run method is called; otherwise, this method does nothing and returns.  Subclasses of Thread should override this method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "stop()",
    "name": "stop",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "stop()",
      "comment": "Forces the thread to stop executing.  If there is a security manager installed, its checkAccess method is called with this as its argument. This may result in a SecurityException being raised (in the current thread).  If this thread is different from the current thread (that is, the current thread is trying to stop a thread other than itself), the security manager's checkPermission method (with a RuntimePermission(\"stopThread\") argument) is called in addition. Again, this may result in throwing a SecurityException (in the current thread).  The thread represented by this thread is forced to stop whatever it is doing abnormally and to throw a newly created ThreadDeath object as an exception.  It is permitted to stop a thread that has not yet been started. If the thread is eventually started, it immediately terminates.  An application should not normally try to catch ThreadDeath unless it must do some extraordinary cleanup operation (note that the throwing of ThreadDeath causes finally clauses of try statements to be executed before the thread officially dies). If a catch clause catches a ThreadDeath object, it is important to rethrow the object so that the thread actually dies.  The top-level error handler that reacts to otherwise uncaught exceptions does not print out a message or otherwise notify the application if the uncaught exception is an instance of ThreadDeath. @exception SecurityException if the current thread cannot modify this thread.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "stop(java.lang.Throwable obj)",
    "name": "stop",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Throwable",
          "name": "Throwable",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "protocol": {
      "member": "stop(java.lang.Throwable obj)",
      "comment": "Throws UnsupportedOperationException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "interrupt()",
    "name": "interrupt",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "interrupt()",
      "comment": "Interrupts this thread.  Unless the current thread is interrupting itself, which is always permitted, the #checkAccess() checkAccess method of this thread is invoked, which may cause a SecurityException to be thrown. <p> If this thread is blocked in an invocation of the Objectwait(), Objectwait(long), or Objectwait(long, int) methods of the Object class, or of the #join(), #join(long), #join(long, int), #sleep(long), or #sleep(long, int), methods of this class, then its interrupt status will be cleared and it will receive an InterruptedException. <p> If this thread is blocked in an I/O operation upon an java.nio.channels.InterruptibleChannel InterruptibleChannel then the channel will be closed, the thread's interrupt status will be set, and the thread will receive a java.nio.channels.ClosedByInterruptException. <p> If this thread is blocked in a java.nio.channels.Selector then the thread's interrupt status will be set and it will return immediately from the selection operation, possibly with a non-zero value, just as if the selector's java.nio.channels.Selector#wakeup wakeup method were invoked. <p> If none of the previous conditions hold then this thread's interrupt status will be set.  <p> Interrupting a thread that is not alive need not have any effect.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "interrupted()",
    "name": "interrupted",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "interrupted()",
      "comment": "Tests whether the current thread has been interrupted. The interrupted status of the thread is cleared by this method. In other words, if this method were to be called twice in succession, the second call would return false (unless the current thread were interrupted again, after the first call had cleared its interrupted status and before the second call had examined it). A thread interruption ignored because a thread was not alive at the time of the interrupt will be reflected by this method returning false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isInterrupted()",
    "name": "isInterrupted",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isInterrupted()",
      "comment": "Tests whether this thread has been interrupted. The interrupted status of the thread is unaffected by this method. A thread interruption ignored because a thread was not alive at the time of the interrupt will be reflected by this method returning false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "destroy()",
    "name": "destroy",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "destroy()",
      "comment": "Throws NoSuchMethodError. @deprecated This method was originally designed to destroy this thread without any cleanup. Any monitors it held would have remained locked. However, the method was never implemented. If if were to be implemented, it would be deadlock-prone in much the manner of #suspend. If the target thread held a lock protecting a critical system resource when it was destroyed, no thread could ever access this resource again. If another thread ever attempted to lock this resource, deadlock would result. Such deadlocks typically manifest themselves as \"frozen\" processes. For more information, see  Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isAlive()",
    "name": "isAlive",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isAlive()",
      "comment": "Tests if this thread is alive. A thread is alive if it has been started and has not yet died.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "suspend()",
    "name": "suspend",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "suspend()",
      "comment": "Suspends this thread.  First, the checkAccess method of this thread is called with no arguments. This may result in throwing a SecurityException (in the current thread).  If the thread is alive, it is suspended and makes no further progress unless and until it is resumed. @exception SecurityException if the current thread cannot modify this thread.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "resume()",
    "name": "resume",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "resume()",
      "comment": "Resumes a suspended thread.  First, the checkAccess method of this thread is called with no arguments. This may result in throwing a SecurityException (in the current thread).  If the thread is alive but suspended, it is resumed and is permitted to make progress in its execution. @exception SecurityException if the current thread cannot modify this thread.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setPriority(int newPriority)",
    "name": "setPriority",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "newPriority"
      }
    ],
    "protocol": {
      "member": "setPriority(int newPriority)",
      "comment": "Changes the priority of this thread.  First the checkAccess method of this thread is called with no arguments. This may result in throwing a SecurityException.  Otherwise, the priority of this thread is set to the smaller of the specified newPriority and the maximum permitted priority of the thread's thread group.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getPriority()",
    "name": "getPriority",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getPriority()",
      "comment": "Returns this thread's priority.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setName(java.lang.String name)",
    "name": "setName",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "protocol": {
      "member": "setName(java.lang.String name)",
      "comment": "Changes the name of this thread to be equal to the argument name.  First the checkAccess method of this thread is called with no arguments. This may result in throwing a SecurityException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getName()",
    "name": "getName",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getName()",
      "comment": "Returns this thread's name.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getThreadGroup()",
    "name": "getThreadGroup",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.ThreadGroup",
      "name": "java.lang.ThreadGroup",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getThreadGroup()",
      "comment": "Returns the thread group to which this thread belongs. This method returns null if this thread has died (been stopped).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "activeCount()",
    "name": "activeCount",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "activeCount()",
      "comment": "Returns an estimate of the number of active threads in the current thread's java.lang.ThreadGroup thread group and its subgroups. Recursively iterates over all subgroups in the current thread's thread group.  The value returned is only an estimate because the number of threads may change dynamically while this method traverses internal data structures, and might be affected by the presence of certain system threads. This method is intended primarily for debugging and monitoring purposes.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "enumerate(java.lang.Thread[] tarray)",
    "name": "enumerate",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Thread;",
          "name": "Thread[]",
          "isArray": true
        },
        "name": "tarray"
      }
    ],
    "protocol": {
      "member": "enumerate(java.lang.Thread[] tarray)",
      "comment": "Copies into the specified array every active thread in the current thread's thread group and its subgroups. This method simply invokes the java.lang.ThreadGroup#enumerate(Thread[]) method of the current thread's thread group.  An application might use the #activeCount activeCount method to get an estimate of how big the array should be, however if the array is too short to hold all the threads, the extra threads are silently ignored. If it is critical to obtain every active thread in the current thread's thread group and its subgroups, the invoker should verify that the returned int value is strictly less than the length of tarray.  Due to the inherent race condition in this method, it is recommended that the method only be used for debugging and monitoring purposes.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "countStackFrames()",
    "name": "countStackFrames",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "countStackFrames()",
      "comment": "Counts the number of stack frames in this thread. The thread must be suspended.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "join(long millis)",
    "name": "join",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "millis"
      }
    ],
    "protocol": {
      "member": "join(long millis)",
      "comment": "Waits at most millis milliseconds for this thread to die. A timeout of 0 means to wait forever.  This implementation uses a loop of this.wait calls conditioned on this.isAlive. As a thread terminates the this.notifyAll method is invoked. It is recommended that applications not use wait, notify, or notifyAll on Thread instances.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "join(long millis, int nanos)",
    "name": "join",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "millis"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "nanos"
      }
    ],
    "protocol": {
      "member": "join(long millis, int nanos)",
      "comment": "Waits at most millis milliseconds plus nanos nanoseconds for this thread to die.  This implementation uses a loop of this.wait calls conditioned on this.isAlive. As a thread terminates the this.notifyAll method is invoked. It is recommended that applications not use wait, notify, or notifyAll on Thread instances.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "join()",
    "name": "join",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "join()",
      "comment": "Waits for this thread to die.  An invocation of this method behaves in exactly the same way as the invocation  #join(long) join(0)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "dumpStack()",
    "name": "dumpStack",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "dumpStack()",
      "comment": "Prints a stack trace of the current thread to the standard error stream. This method is used only for debugging.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setDaemon(boolean on)",
    "name": "setDaemon",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "on"
      }
    ],
    "protocol": {
      "member": "setDaemon(boolean on)",
      "comment": "Marks this thread as either a #isDaemon daemon thread or a user thread. The Java Virtual Machine exits when the only threads running are all daemon threads.  This method must be invoked before the thread is started.",
      "kind": "FreeText",
      "condition": "receiverObjectID.setDaemon(args[0])->receiverObjectID.start()"
    }
  },
  {
    "signature": "isDaemon()",
    "name": "isDaemon",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isDaemon()",
      "comment": "Tests if this thread is a daemon thread.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "checkAccess()",
    "name": "checkAccess",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "checkAccess()",
      "comment": "Determines if the currently running thread has permission to modify this thread.  If there is a security manager, its checkAccess method is called with this thread as its argument. This may result in throwing a SecurityException. @exception SecurityException if the current thread is not allowed to access this thread.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns a string representation of this thread, including the thread's name, priority, and thread group.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getContextClassLoader()",
    "name": "getContextClassLoader",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.ClassLoader",
      "name": "java.lang.ClassLoader",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getContextClassLoader()",
      "comment": "Returns the context ClassLoader for this Thread. The context ClassLoader is provided by the creator of the thread for use by code running in this thread when loading classes and resources. If not #setContextClassLoader set, the default is the ClassLoader context of the parent Thread. The context ClassLoader of the primordial thread is typically set to the class loader used to load the application. If a security manager is present, and the invoker's class loader is not null and is not the same as or an ancestor of the context class loader, then this method invokes the security manager's SecurityManager#checkPermission(java.security.Permission) checkPermission method with a RuntimePermission RuntimePermission(\"getClassLoader\") permission to verify that retrieval of the context class loader is permitted.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setContextClassLoader(java.lang.ClassLoader cl)",
    "name": "setContextClassLoader",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.ClassLoader",
          "name": "ClassLoader",
          "isArray": false
        },
        "name": "cl"
      }
    ],
    "protocol": {
      "member": "setContextClassLoader(java.lang.ClassLoader cl)",
      "comment": "Sets the context ClassLoader for this Thread. The context ClassLoader can be set when a thread is created, and allows the creator of the thread to provide the appropriate class loader, through getContextClassLoader, to code running in the thread when loading classes and resources. If a security manager is present, its SecurityManager#checkPermission(java.security.Permission) checkPermission method is invoked with a RuntimePermission RuntimePermission(\"setContextClassLoader\") permission to see if setting the context ClassLoader is permitted.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "holdsLock(java.lang.Object obj)",
    "name": "holdsLock",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "protocol": {
      "member": "holdsLock(java.lang.Object obj)",
      "comment": "Returns true if and only if the current thread holds the monitor lock on the specified object. This method is designed to allow a program to assert that the current thread already holds a specified lock:  assert Thread.holdsLock(obj);",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getStackTrace()",
    "name": "getStackTrace",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.StackTraceElement[]",
      "name": "java.lang.StackTraceElement[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getStackTrace()",
      "comment": "Returns an array of stack trace elements representing the stack dump of this thread. This method will return a zero-length array if this thread has not started, has started but has not yet been scheduled to run by the system, or has terminated. If the returned array is of non-zero length then the first element of the array represents the top of the stack, which is the most recent method invocation in the sequence. The last element of the array represents the bottom of the stack, which is the least recent method invocation in the sequence. If there is a security manager, and this thread is not the current thread, then the security manager's checkPermission method is called with a RuntimePermission(\"getStackTrace\") permission to see if it's ok to get the stack trace. Some virtual machines may, under some circumstances, omit one or more stack frames from the stack trace. In the extreme case, a virtual machine that has no stack trace information concerning this thread is permitted to return a zero-length array from this method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getAllStackTraces()",
    "name": "getAllStackTraces",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>",
      "name": "java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getAllStackTraces()",
      "comment": "Returns a map of stack traces for all live threads. The map keys are threads and each map value is an array of StackTraceElement that represents the stack dump of the corresponding Thread. The returned stack traces are in the format specified for the #getStackTrace getStackTrace method. The threads may be executing while this method is called. The stack trace of each thread only represents a snapshot and each stack trace may be obtained at different time. A zero-length array will be returned in the map value if the virtual machine has no stack trace information about a thread. If there is a security manager, then the security manager's checkPermission method is called with a RuntimePermission(\"getStackTrace\") permission as well as RuntimePermission(\"modifyThreadGroup\") permission to see if it is ok to get the stack trace of all threads.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getId()",
    "name": "getId",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getId()",
      "comment": "Returns the identifier of this Thread. The thread ID is a positive long number generated when this thread was created. The thread ID is unique and remains unchanged during its lifetime. When a thread is terminated, this thread ID may be reused.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getState()",
    "name": "getState",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Thread$State",
      "name": "java.lang.Thread$State",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getState()",
      "comment": "Returns the state of this thread. This method is designed for use in monitoring of the system state, not for synchronization control.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler eh)",
    "name": "setDefaultUncaughtExceptionHandler",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Thread$UncaughtExceptionHandler",
          "name": "UncaughtExceptionHandler",
          "isArray": false
        },
        "name": "eh"
      }
    ],
    "protocol": {
      "member": "setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler eh)",
      "comment": "Set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread. Uncaught exception handling is controlled first by the thread, then by the thread's ThreadGroup object and finally by the default uncaught exception handler. If the thread does not have an explicit uncaught exception handler set, and the thread's thread group (including parent thread groups) does not specialize its uncaughtException method, then the default handler's uncaughtException method will be invoked. By setting the default uncaught exception handler, an application can change the way in which uncaught exceptions are handled (such as logging to a specific device, or file) for those threads that would already accept whatever &quot;default&quot; behavior the system provided. Note that the default uncaught exception handler should not usually defer to the thread's ThreadGroup object, as that could cause infinite recursion.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDefaultUncaughtExceptionHandler()",
    "name": "getDefaultUncaughtExceptionHandler",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Thread$UncaughtExceptionHandler",
      "name": "java.lang.Thread$UncaughtExceptionHandler",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getDefaultUncaughtExceptionHandler()",
      "comment": "Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception. If the returned value is null, there is no default.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getUncaughtExceptionHandler()",
    "name": "getUncaughtExceptionHandler",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Thread$UncaughtExceptionHandler",
      "name": "java.lang.Thread$UncaughtExceptionHandler",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getUncaughtExceptionHandler()",
      "comment": "Returns the handler invoked when this thread abruptly terminates due to an uncaught exception. If this thread has not had an uncaught exception handler explicitly set then this thread's ThreadGroup object is returned, unless this thread has terminated, in which case null is returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler eh)",
    "name": "setUncaughtExceptionHandler",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Thread$UncaughtExceptionHandler",
          "name": "UncaughtExceptionHandler",
          "isArray": false
        },
        "name": "eh"
      }
    ],
    "protocol": {
      "member": "setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler eh)",
      "comment": "Set the handler invoked when this thread abruptly terminates due to an uncaught exception. A thread can take full control of how it responds to uncaught exceptions by having its uncaught exception handler explicitly set. If no such handler is set then the thread's ThreadGroup object acts as its handler.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "processQueue(java.lang.ref.ReferenceQueue<java.lang.Class<?>> queue, java.util.concurrent.ConcurrentMap<? extends java.lang.ref.WeakReference<java.lang.Class<?>>, ?> map)",
    "name": "processQueue",
    "containingClass": {
      "qualifiedName": "java.lang.Thread",
      "name": "Thread",
      "isArray": false
    },
    "targetClass": "java.lang.Thread",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.ref.ReferenceQueue",
          "name": "ReferenceQueue",
          "isArray": false
        },
        "name": "queue"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.ConcurrentMap",
          "name": "ConcurrentMap",
          "isArray": false
        },
        "name": "map"
      }
    ],
    "protocol": {
      "member": "processQueue(java.lang.ref.ReferenceQueue<java.lang.Class<?>> queue, java.util.concurrent.ConcurrentMap<? extends java.lang.ref.WeakReference<java.lang.Class<?>>, ?> map)",
      "comment": "Removes from the specified map any keys that have been enqueued on the specified reference queue.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]