[
  {
    "signature": "weka.classifiers.trees.m5.Rule()",
    "name": "weka.classifiers.trees.m5.Rule",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "weka.classifiers.trees.m5.Rule()",
      "comment": "Constructor declaration",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "buildClassifier(weka.core.Instances data)",
    "name": "buildClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "buildClassifier(weka.core.Instances data)",
      "comment": "Generates a single rule or m5 model tree.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "classifyInstance(weka.core.Instance instance)",
    "name": "classifyInstance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "instance"
      }
    ],
    "protocol": {
      "member": "classifyInstance(weka.core.Instance instance)",
      "comment": "Calculates a prediction for an instance using this rule or M5 model tree",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "topOfTree()",
    "name": "topOfTree",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.classifiers.trees.m5.RuleNode",
      "name": "weka.classifiers.trees.m5.RuleNode",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "topOfTree()",
      "comment": "Returns the top of the tree.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Return a description of the m5 tree or rule",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setUnpruned(boolean unpruned)",
    "name": "setUnpruned",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "unpruned"
      }
    ],
    "protocol": {
      "member": "setUnpruned(boolean unpruned)",
      "comment": "Use unpruned tree/rules",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getUnpruned()",
    "name": "getUnpruned",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getUnpruned()",
      "comment": "Get whether unpruned tree/rules are being generated",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setUseTree(boolean u)",
    "name": "setUseTree",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "u"
      }
    ],
    "protocol": {
      "member": "setUseTree(boolean u)",
      "comment": "Use an m5 tree rather than generate rules",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getUseTree()",
    "name": "getUseTree",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getUseTree()",
      "comment": "get whether an m5 tree is being used rather than rules",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSmoothing(boolean s)",
    "name": "setSmoothing",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "protocol": {
      "member": "setSmoothing(boolean s)",
      "comment": "Smooth predictions",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSmoothing()",
    "name": "getSmoothing",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getSmoothing()",
      "comment": "Get whether or not smoothing has been turned on",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "notCoveredInstances()",
    "name": "notCoveredInstances",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.Instances",
      "name": "weka.core.Instances",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "notCoveredInstances()",
      "comment": "Get the instances not covered by this rule",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "freeNotCoveredInstances()",
    "name": "freeNotCoveredInstances",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "freeNotCoveredInstances()",
      "comment": "Free up memory consumed by the set of instances not covered by this rule.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "stdDev(int attr, weka.core.Instances inst)",
    "name": "stdDev",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "attr"
      },
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "inst"
      }
    ],
    "protocol": {
      "member": "stdDev(int attr, weka.core.Instances inst)",
      "comment": "Returns the standard deviation value of the supplied attribute index.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "absDev(int attr, weka.core.Instances inst)",
    "name": "absDev",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "attr"
      },
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "inst"
      }
    ],
    "protocol": {
      "member": "absDev(int attr, weka.core.Instances inst)",
      "comment": "Returns the absolute deviation value of the supplied attribute index.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSaveInstances(boolean save)",
    "name": "setSaveInstances",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "save"
      }
    ],
    "protocol": {
      "member": "setSaveInstances(boolean save)",
      "comment": "Sets whether instances at each node in an M5 tree should be saved for visualization purposes. Default is to save memory.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRegressionTree()",
    "name": "getRegressionTree",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRegressionTree()",
      "comment": "Get the value of regressionTree.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setRegressionTree(boolean newregressionTree)",
    "name": "setRegressionTree",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "newregressionTree"
      }
    ],
    "protocol": {
      "member": "setRegressionTree(boolean newregressionTree)",
      "comment": "Set the value of regressionTree.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMinNumInstances(double minNum)",
    "name": "setMinNumInstances",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "minNum"
      }
    ],
    "protocol": {
      "member": "setMinNumInstances(double minNum)",
      "comment": "Set the minumum number of instances to allow at a leaf node",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMinNumInstances()",
    "name": "getMinNumInstances",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMinNumInstances()",
      "comment": "Get the minimum number of instances to allow at a leaf node",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getM5RootNode()",
    "name": "getM5RootNode",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.classifiers.trees.m5.RuleNode",
      "name": "weka.classifiers.trees.m5.RuleNode",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getM5RootNode()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRevision()",
    "name": "getRevision",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.Rule",
      "name": "Rule",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.Rule",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRevision()",
      "comment": "Returns the revision string.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]