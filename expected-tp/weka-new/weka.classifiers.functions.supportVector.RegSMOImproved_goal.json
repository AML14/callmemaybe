[
  {
    "signature": "globalInfo()",
    "name": "globalInfo",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "globalInfo()",
      "comment": "Returns a string describing the object",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTechnicalInformation()",
    "name": "getTechnicalInformation",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.TechnicalInformation",
      "name": "weka.core.TechnicalInformation",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTechnicalInformation()",
      "comment": "Returns an instance of a TechnicalInformation object, containing detailed information about the technical background of this class, emethod_0., paper reference or book this class is based on.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listOptions()",
    "name": "listOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<weka.core.Option>",
      "name": "java.util.Enumeration<weka.core.Option>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "listOptions()",
      "comment": "Returns an enumeration describing the available options",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setOptions(java.lang.String[] options)",
    "name": "setOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "options"
      }
    ],
    "protocol": {
      "member": "setOptions(java.lang.String[] options)",
      "comment": "Parses a given list of options.   -T <double> The tolerance parameter for checking the stopping criterion. (default 0method_0)   -V Use variant 1 of the algorithm when true, otherwise use variant 2. (default true)   -P <double> The epsilon for round-off error. (default 1method_1-12)   -L <double> The epsilon parameter in epsilon-insensitive loss function. (default 1method_1-3)   -W <double> The random number seed. (default 1)  <!-- options-end -->",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOptions()",
    "name": "getOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getOptions()",
      "comment": "Gets the current settings of the object.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toleranceTipText()",
    "name": "toleranceTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toleranceTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTolerance()",
    "name": "getTolerance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTolerance()",
      "comment": "returns the current tolerance",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setTolerance(double d)",
    "name": "setTolerance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "d"
      }
    ],
    "protocol": {
      "member": "setTolerance(double d)",
      "comment": "sets the tolerance",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "useVariant1TipText()",
    "name": "useVariant1TipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "useVariant1TipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isUseVariant1()",
    "name": "isUseVariant1",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isUseVariant1()",
      "comment": "Whether variant 1 is used",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setUseVariant1(boolean b)",
    "name": "setUseVariant1",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "protocol": {
      "member": "setUseVariant1(boolean b)",
      "comment": "Sets whether to use variant 1",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "takeStep(int i1, int i2, double alpha2, double alpha2Star, double phi2)",
    "name": "takeStep",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "i1"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "i2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "alpha2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "alpha2Star"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "phi2"
      }
    ],
    "protocol": {
      "member": "takeStep(int i1, int i2, double alpha2, double alpha2Star, double phi2)",
      "comment": "takeStep method from Shevade et almethod_0 paper. parameters correspond to pseudocode from paper.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "updateIndexSetFor(int i, double C)",
    "name": "updateIndexSetFor",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "i"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "C"
      }
    ],
    "protocol": {
      "member": "updateIndexSetFor(int i, double C)",
      "comment": "updates the index sets I0a, IOb, I1, I2 and I3 for vector i",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "updateBoundaries(int i2, double F2)",
    "name": "updateBoundaries",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "i2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "F2"
      }
    ],
    "protocol": {
      "member": "updateBoundaries(int i2, double F2)",
      "comment": "updates boundaries bLow and bHi and corresponding indexes",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "examineExample(int i2)",
    "name": "examineExample",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "i2"
      }
    ],
    "protocol": {
      "member": "examineExample(int i2)",
      "comment": "parameters correspond to pseudocode from paper.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "init(weka.core.Instances data)",
    "name": "init",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "init(weka.core.Instances data)",
      "comment": "initialize various variables before starting the actual optimizer",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "optimize1()",
    "name": "optimize1",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "optimize1()",
      "comment": "use variant 1 of Shevade's et almethod_0 paper",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "optimize2()",
    "name": "optimize2",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "optimize2()",
      "comment": "use variant 2 of Shevade's et almethod_0 paper",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "wrapUp()",
    "name": "wrapUp",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "wrapUp()",
      "comment": "wrap up various variables to save memeory and do some housekeeping after optimization has finished.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "buildClassifier(weka.core.Instances instances)",
    "name": "buildClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "instances"
      }
    ],
    "protocol": {
      "member": "buildClassifier(weka.core.Instances instances)",
      "comment": "learn SVM parameters from data using Keerthi's SMO algorithm. Subclasses should implement something more interesting.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRevision()",
    "name": "getRevision",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMOImproved",
      "name": "RegSMOImproved",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMOImproved",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRevision()",
      "comment": "Returns the revision string.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]