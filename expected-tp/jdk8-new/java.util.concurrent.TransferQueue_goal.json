[
  {
    "signature": "tryTransfer(E e)",
    "name": "tryTransfer",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.TransferQueue",
      "name": "TransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.TransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "tryTransfer(E e)",
      "comment": "Transfers the element to a waiting consumer immediately, if possible. More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in method_1 or timed method_0 poll), otherwise returning false without enqueuing the element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "transfer(E e)",
    "name": "transfer",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.TransferQueue",
      "name": "TransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.TransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "transfer(E e)",
      "comment": "Transfers the element to a consumer, waiting if necessary to do so. More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in method_1 or timed method_0 poll), else waits until the element is received by a consumer.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryTransfer(E e, long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "tryTransfer",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.TransferQueue",
      "name": "TransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.TransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "tryTransfer(E e, long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "Transfers the element to a consumer if it is possible to do so before the timeout elapses. More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in method_1 or timed method_0 poll), else waits until the element is received by a consumer, returning false if the specified wait time elapses before the element can be transferred.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasWaitingConsumer()",
    "name": "hasWaitingConsumer",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.TransferQueue",
      "name": "TransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.TransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasWaitingConsumer()",
      "comment": "Returns true if there is at least one consumer waiting to receive an element via method_1 or timed method_0 poll. The return value represents a momentary state of affairs.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWaitingConsumerCount()",
    "name": "getWaitingConsumerCount",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.TransferQueue",
      "name": "TransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.TransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWaitingConsumerCount()",
      "comment": "Returns an estimate of the number of consumers waiting to receive elements via method_1 or timed method_0 poll. The return value is an approximation of a momentary state of affairs, that may be inaccurate if consumers have completed or given up waiting. The value may be useful for monitoring and heuristics, but not for synchronization control. Implementations of this method are likely to be noticeably slower than those for method_3.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]