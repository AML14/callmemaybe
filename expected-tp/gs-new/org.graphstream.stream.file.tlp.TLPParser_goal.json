[
  {
    "signature": "org.graphstream.stream.file.tlp.TLPParser(org.graphstream.stream.file.FileSourceTLP tlp, java.io.InputStream stream)",
    "name": "org.graphstream.stream.file.tlp.TLPParser",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.stream.file.FileSourceTLP",
          "name": "FileSourceTLP",
          "isArray": false
        },
        "name": "tlp"
      },
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "stream"
      }
    ],
    "protocol": {
      "member": "org.graphstream.stream.file.tlp.TLPParser(org.graphstream.stream.file.FileSourceTLP tlp, java.io.InputStream stream)",
      "comment": "Create a new parser associated with a TLP source from an input stream.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.graphstream.stream.file.tlp.TLPParser(org.graphstream.stream.file.FileSourceTLP tlp, java.io.Reader stream)",
    "name": "org.graphstream.stream.file.tlp.TLPParser",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.stream.file.FileSourceTLP",
          "name": "FileSourceTLP",
          "isArray": false
        },
        "name": "tlp"
      },
      {
        "type": {
          "qualifiedName": "java.io.Reader",
          "name": "Reader",
          "isArray": false
        },
        "name": "stream"
      }
    ],
    "protocol": {
      "member": "org.graphstream.stream.file.tlp.TLPParser(org.graphstream.stream.file.FileSourceTLP tlp, java.io.Reader stream)",
      "comment": "Create a new parser associated with a DOT source from a reader.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.graphstream.stream.file.tlp.TLPParser(java.io.InputStream stream)",
    "name": "org.graphstream.stream.file.tlp.TLPParser",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "stream"
      }
    ],
    "protocol": {
      "member": "org.graphstream.stream.file.tlp.TLPParser(java.io.InputStream stream)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.graphstream.stream.file.tlp.TLPParser(java.io.InputStream stream, java.lang.String encoding)",
    "name": "org.graphstream.stream.file.tlp.TLPParser",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "stream"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "encoding"
      }
    ],
    "protocol": {
      "member": "org.graphstream.stream.file.tlp.TLPParser(java.io.InputStream stream, java.lang.String encoding)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.graphstream.stream.file.tlp.TLPParser(java.io.Reader stream)",
    "name": "org.graphstream.stream.file.tlp.TLPParser",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Reader",
          "name": "Reader",
          "isArray": false
        },
        "name": "stream"
      }
    ],
    "protocol": {
      "member": "org.graphstream.stream.file.tlp.TLPParser(java.io.Reader stream)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.graphstream.stream.file.tlp.TLPParser(org.graphstream.stream.file.tlp.TLPParserTokenManager tm)",
    "name": "org.graphstream.stream.file.tlp.TLPParser",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.stream.file.tlp.TLPParserTokenManager",
          "name": "TLPParserTokenManager",
          "isArray": false
        },
        "name": "tm"
      }
    ],
    "protocol": {
      "member": "org.graphstream.stream.file.tlp.TLPParser(org.graphstream.stream.file.tlp.TLPParserTokenManager tm)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "close()",
    "name": "close",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "close()",
      "comment": "Closes the parser, closing the opened stream.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "all()",
    "name": "all",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "all()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "next()",
    "name": "next",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "next()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "open()",
    "name": "open",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "open()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ReInit(java.io.InputStream stream)",
    "name": "ReInit",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "stream"
      }
    ],
    "protocol": {
      "member": "ReInit(java.io.InputStream stream)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ReInit(java.io.InputStream stream, java.lang.String encoding)",
    "name": "ReInit",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "stream"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "encoding"
      }
    ],
    "protocol": {
      "member": "ReInit(java.io.InputStream stream, java.lang.String encoding)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ReInit(java.io.Reader stream)",
    "name": "ReInit",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Reader",
          "name": "Reader",
          "isArray": false
        },
        "name": "stream"
      }
    ],
    "protocol": {
      "member": "ReInit(java.io.Reader stream)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ReInit(org.graphstream.stream.file.tlp.TLPParserTokenManager tm)",
    "name": "ReInit",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.stream.file.tlp.TLPParserTokenManager",
          "name": "TLPParserTokenManager",
          "isArray": false
        },
        "name": "tm"
      }
    ],
    "protocol": {
      "member": "ReInit(org.graphstream.stream.file.tlp.TLPParserTokenManager tm)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNextToken()",
    "name": "getNextToken",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.util.parser.Token",
      "name": "org.graphstream.util.parser.Token",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getNextToken()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getToken(int index)",
    "name": "getToken",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.util.parser.Token",
      "name": "org.graphstream.util.parser.Token",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "getToken(int index)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "generateParseException()",
    "name": "generateParseException",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.util.parser.ParseException",
      "name": "org.graphstream.util.parser.ParseException",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "generateParseException()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "enable_tracing()",
    "name": "enable_tracing",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "enable_tracing()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "disable_tracing()",
    "name": "disable_tracing",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.tlp.TLPParser",
      "name": "TLPParser",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.tlp.TLPParser",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "disable_tracing()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]