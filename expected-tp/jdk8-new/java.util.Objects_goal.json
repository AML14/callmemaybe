[
  {
    "signature": "equals(java.lang.Object a, java.lang.Object b)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "java.util.Objects",
      "name": "Objects",
      "isArray": false
    },
    "targetClass": "java.util.Objects",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "protocol": {
      "member": "equals(java.lang.Object a, java.lang.Object b)",
      "comment": "Returns true if the arguments are equal to each other and false otherwise. Consequently, if both arguments are null, true is returned and if exactly one argument is null, false is returned. Otherwise, equality is determined by using the method_0 equals method of the first argument.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "deepEquals(java.lang.Object a, java.lang.Object b)",
    "name": "deepEquals",
    "containingClass": {
      "qualifiedName": "java.util.Objects",
      "name": "Objects",
      "isArray": false
    },
    "targetClass": "java.util.Objects",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "protocol": {
      "member": "deepEquals(java.lang.Object a, java.lang.Object b)",
      "comment": "Returns true if the arguments are deeply equal to each other and false otherwise. Two null values are deeply equal. If both arguments are arrays, the algorithm in method_0 method_2 is used to determine equality. Otherwise, equality is determined by using the method_3 equals method of the first argument.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hashCode(java.lang.Object o)",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "java.util.Objects",
      "name": "Objects",
      "isArray": false
    },
    "targetClass": "java.util.Objects",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "hashCode(java.lang.Object o)",
      "comment": "Returns the hash code of a non-null argument and 0 for a null argument.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hash(java.lang.Object... values)",
    "name": "hash",
    "containingClass": {
      "qualifiedName": "java.util.Objects",
      "name": "Objects",
      "isArray": false
    },
    "targetClass": "java.util.Objects",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "protocol": {
      "member": "hash(java.lang.Object... values)",
      "comment": "Generates a hash code for a sequence of input values. The hash code is generated as if all the input values were placed into an array, and that array were hashed by calling method_0. This method is useful for implementing method_1 on objects containing multiple fields. For example, if an object that has three fields, x, y, and z, one could write: <pre> &method_7;Override public int method_2 { return method_3; } </pre> Warning: When a single object reference is supplied, the returned value does not equal the hash code of that object reference. This value can be computed by calling method_4.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString(java.lang.Object o)",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.util.Objects",
      "name": "Objects",
      "isArray": false
    },
    "targetClass": "java.util.Objects",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "toString(java.lang.Object o)",
      "comment": "Returns the result of calling toString for a non-null argument and \"null\" for a null argument.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString(java.lang.Object o, java.lang.String nullDefault)",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.util.Objects",
      "name": "Objects",
      "isArray": false
    },
    "targetClass": "java.util.Objects",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "nullDefault"
      }
    ],
    "protocol": {
      "member": "toString(java.lang.Object o, java.lang.String nullDefault)",
      "comment": "Returns the result of calling toString on the first argument if the first argument is not null and returns the second argument otherwise.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "compare(T a, T b, java.util.Comparator<? super T> c)",
    "name": "compare",
    "containingClass": {
      "qualifiedName": "java.util.Objects",
      "name": "Objects",
      "isArray": false
    },
    "targetClass": "java.util.Objects",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "compare(T a, T b, java.util.Comparator<? super T> c)",
      "comment": "Returns 0 if the arguments are identical and method_0 otherwise. Consequently, if both arguments are null 0 is returned. Note that if one of the arguments is null, a NullPointerException may or may not be thrown depending on what ordering policy, if any, the Comparator Comparator chooses to have for null values.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "requireNonNull(T obj)",
    "name": "requireNonNull",
    "containingClass": {
      "qualifiedName": "java.util.Objects",
      "name": "Objects",
      "isArray": false
    },
    "targetClass": "java.util.Objects",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "protocol": {
      "member": "requireNonNull(T obj)",
      "comment": "Checks that the specified object reference is not null. This method is designed primarily for doing parameter validation in methods and constructors, as demonstrated below: <pre> public method_0 { thismethod_2 = method_1; } </pre>",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "requireNonNull(T obj, java.lang.String message)",
    "name": "requireNonNull",
    "containingClass": {
      "qualifiedName": "java.util.Objects",
      "name": "Objects",
      "isArray": false
    },
    "targetClass": "java.util.Objects",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "message"
      }
    ],
    "protocol": {
      "member": "requireNonNull(T obj, java.lang.String message)",
      "comment": "Checks that the specified object reference is not null and throws a customized NullPointerException if it is. This method is designed primarily for doing parameter validation in methods and constructors with multiple parameters, as demonstrated below: <pre> public method_0 { thismethod_3 = method_1; thismethod_5 = method_2; } </pre>",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isNull(java.lang.Object obj)",
    "name": "isNull",
    "containingClass": {
      "qualifiedName": "java.util.Objects",
      "name": "Objects",
      "isArray": false
    },
    "targetClass": "java.util.Objects",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "protocol": {
      "member": "isNull(java.lang.Object obj)",
      "comment": "Returns true if the provided reference is null otherwise returns false. @apiNote This method exists to be used as a javamethod_1method_2method_3, method_0",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nonNull(java.lang.Object obj)",
    "name": "nonNull",
    "containingClass": {
      "qualifiedName": "java.util.Objects",
      "name": "Objects",
      "isArray": false
    },
    "targetClass": "java.util.Objects",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "protocol": {
      "member": "nonNull(java.lang.Object obj)",
      "comment": "Returns true if the provided reference is non-null otherwise returns false. @apiNote This method exists to be used as a javamethod_1method_2method_3, method_0",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "requireNonNull(T obj, java.util.function.Supplier<java.lang.String> messageSupplier)",
    "name": "requireNonNull",
    "containingClass": {
      "qualifiedName": "java.util.Objects",
      "name": "Objects",
      "isArray": false
    },
    "targetClass": "java.util.Objects",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Supplier",
          "name": "Supplier",
          "isArray": false
        },
        "name": "messageSupplier"
      }
    ],
    "protocol": {
      "member": "requireNonNull(T obj, java.util.function.Supplier<java.lang.String> messageSupplier)",
      "comment": "Checks that the specified object reference is not null and throws a customized NullPointerException if it is. Unlike the method method_0, this method allows creation of the message to be deferred until after the null check is made. While this may confer a performance advantage in the non-null case, when deciding to call this method care should be taken that the costs of creating the message supplier are less than the cost of just creating the string message directly.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]