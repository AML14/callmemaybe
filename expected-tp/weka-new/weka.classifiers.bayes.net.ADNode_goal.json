[
  {
    "signature": "weka.classifiers.bayes.net.ADNode()",
    "name": "weka.classifiers.bayes.net.ADNode",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.net.ADNode",
      "name": "ADNode",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.net.ADNode",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "weka.classifiers.bayes.net.ADNode()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTechnicalInformation()",
    "name": "getTechnicalInformation",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.net.ADNode",
      "name": "ADNode",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.net.ADNode",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.TechnicalInformation",
      "name": "weka.core.TechnicalInformation",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTechnicalInformation()",
      "comment": "Returns an instance of a TechnicalInformation object, containing detailed information about the technical background of this class, emethod_0., paper reference or book this class is based on.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "makeVaryNode(int iNode, java.util.ArrayList<java.lang.Integer> nRecords, weka.core.Instances instances)",
    "name": "makeVaryNode",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.net.ADNode",
      "name": "ADNode",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.net.ADNode",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.classifiers.bayes.net.VaryNode",
      "name": "weka.classifiers.bayes.net.VaryNode",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "iNode"
      },
      {
        "type": {
          "qualifiedName": "java.util.ArrayList",
          "name": "ArrayList",
          "isArray": false
        },
        "name": "nRecords"
      },
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "instances"
      }
    ],
    "protocol": {
      "member": "makeVaryNode(int iNode, java.util.ArrayList<java.lang.Integer> nRecords, weka.core.Instances instances)",
      "comment": "create sub tree",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "makeADTree(int iNode, java.util.ArrayList<java.lang.Integer> nRecords, weka.core.Instances instances)",
    "name": "makeADTree",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.net.ADNode",
      "name": "ADNode",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.net.ADNode",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.classifiers.bayes.net.ADNode",
      "name": "weka.classifiers.bayes.net.ADNode",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "iNode"
      },
      {
        "type": {
          "qualifiedName": "java.util.ArrayList",
          "name": "ArrayList",
          "isArray": false
        },
        "name": "nRecords"
      },
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "instances"
      }
    ],
    "protocol": {
      "member": "makeADTree(int iNode, java.util.ArrayList<java.lang.Integer> nRecords, weka.core.Instances instances)",
      "comment": "create sub tree",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "makeADTree(weka.core.Instances instances)",
    "name": "makeADTree",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.net.ADNode",
      "name": "ADNode",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.net.ADNode",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.classifiers.bayes.net.ADNode",
      "name": "weka.classifiers.bayes.net.ADNode",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "instances"
      }
    ],
    "protocol": {
      "member": "makeADTree(weka.core.Instances instances)",
      "comment": "create AD tree from set of instances",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCounts(int[] nCounts, int[] nNodes, int[] nOffsets, int iNode, int iOffset, boolean bSubstract)",
    "name": "getCounts",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.net.ADNode",
      "name": "ADNode",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.net.ADNode",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "nCounts"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "nNodes"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "nOffsets"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "iNode"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "iOffset"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "bSubstract"
      }
    ],
    "protocol": {
      "member": "getCounts(int[] nCounts, int[] nNodes, int[] nOffsets, int iNode, int iOffset, boolean bSubstract)",
      "comment": "get counts for specific instantiation of a set of nodes",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "print()",
    "name": "print",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.net.ADNode",
      "name": "ADNode",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.net.ADNode",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "print()",
      "comment": "print is used for debugging only and shows the ADTree in ASCII graphics",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "main(java.lang.String[] argv)",
    "name": "main",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.net.ADNode",
      "name": "ADNode",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.net.ADNode",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "argv"
      }
    ],
    "protocol": {
      "member": "main(java.lang.String[] argv)",
      "comment": "for testing only",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRevision()",
    "name": "getRevision",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.net.ADNode",
      "name": "ADNode",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.net.ADNode",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRevision()",
      "comment": "Returns the revision string.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]