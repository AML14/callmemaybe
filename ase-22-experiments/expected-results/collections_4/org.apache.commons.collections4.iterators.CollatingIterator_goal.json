[
  {
    "signature": "org.apache.commons.collections4.iterators.CollatingIterator()",
    "name": "org.apache.commons.collections4.iterators.CollatingIterator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.CollatingIterator",
      "name": "CollatingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.CollatingIterator",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "org.apache.commons.collections4.iterators.CollatingIterator()",
      "comment": "Constructs a new <code>CollatingIterator</code>. A comparator must be set by calling {@link #setComparator(Comparator)} before invoking {@link #hasNext()}, or {@link #next()} for the first time. Child iterators will have to be manually added using the {@link #addIterator(Iterator)} method. ",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.apache.commons.collections4.iterators.CollatingIterator(java.util.Comparator<? super E> comp)",
    "name": "org.apache.commons.collections4.iterators.CollatingIterator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.CollatingIterator",
      "name": "CollatingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.CollatingIterator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comp"
      }
    ],
    "protocol": {
      "member": "org.apache.commons.collections4.iterators.CollatingIterator(java.util.Comparator<? super E> comp)",
      "comment": "Constructs a new <code>CollatingIterator</code> that will used the specified comparator for ordering. Child iterators will have to be manually added using the {@link #addIterator(Iterator)} method. ",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.apache.commons.collections4.iterators.CollatingIterator(java.util.Comparator<? super E> comp, int initIterCapacity)",
    "name": "org.apache.commons.collections4.iterators.CollatingIterator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.CollatingIterator",
      "name": "CollatingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.CollatingIterator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comp"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "initIterCapacity"
      }
    ],
    "protocol": {
      "member": "org.apache.commons.collections4.iterators.CollatingIterator(java.util.Comparator<? super E> comp, int initIterCapacity)",
      "comment": "Constructs a new <code>CollatingIterator</code> that will used the specified comparator for ordering and have the specified initial capacity. Child iterators will have to be manually added using the {@link #addIterator(Iterator)} method. ",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.apache.commons.collections4.iterators.CollatingIterator(java.util.Comparator<? super E> comp, java.util.Iterator<? extends E> a, java.util.Iterator<? extends E> b)",
    "name": "org.apache.commons.collections4.iterators.CollatingIterator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.CollatingIterator",
      "name": "CollatingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.CollatingIterator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comp"
      },
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "protocol": {
      "member": "org.apache.commons.collections4.iterators.CollatingIterator(java.util.Comparator<? super E> comp, java.util.Iterator<? extends E> a, java.util.Iterator<? extends E> b)",
      "comment": "Constructs a new <code>CollatingIterator</code> that will use the specified comparator to provide ordered iteration over the two given iterators. ",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.apache.commons.collections4.iterators.CollatingIterator(java.util.Comparator<? super E> comp, java.util.Iterator<? extends E>[] iterators)",
    "name": "org.apache.commons.collections4.iterators.CollatingIterator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.CollatingIterator",
      "name": "CollatingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.CollatingIterator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comp"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.util.Iterator;",
          "name": "Iterator[]",
          "isArray": true
        },
        "name": "iterators"
      }
    ],
    "protocol": {
      "member": "org.apache.commons.collections4.iterators.CollatingIterator(java.util.Comparator<? super E> comp, java.util.Iterator<? extends E>[] iterators)",
      "comment": "Constructs a new <code>CollatingIterator</code> that will use the specified comparator to provide ordered iteration over the array of iterators. ",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.apache.commons.collections4.iterators.CollatingIterator(java.util.Comparator<? super E> comp, java.util.Collection<java.util.Iterator<? extends E>> iterators)",
    "name": "org.apache.commons.collections4.iterators.CollatingIterator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.CollatingIterator",
      "name": "CollatingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.CollatingIterator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comp"
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "iterators"
      }
    ],
    "protocol": {
      "member": "org.apache.commons.collections4.iterators.CollatingIterator(java.util.Comparator<? super E> comp, java.util.Collection<java.util.Iterator<? extends E>> iterators)",
      "comment": "Constructs a new <code>CollatingIterator</code> that will use the specified comparator to provide ordered iteration over the collection of iterators. ",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addIterator(java.util.Iterator<? extends E> iterator)",
    "name": "addIterator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.CollatingIterator",
      "name": "CollatingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.CollatingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "protocol": {
      "member": "addIterator(java.util.Iterator<? extends E> iterator)",
      "comment": "Adds the given {@link Iterator} to the iterators being collated. ",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setIterator(int index, java.util.Iterator<? extends E> iterator)",
    "name": "setIterator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.CollatingIterator",
      "name": "CollatingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.CollatingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "protocol": {
      "member": "setIterator(int index, java.util.Iterator<? extends E> iterator)",
      "comment": "Sets the iterator at the given index. ",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getIterators()",
    "name": "getIterators",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.CollatingIterator",
      "name": "CollatingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.CollatingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<java.util.Iterator<? extends E>>",
      "name": "java.util.List<java.util.Iterator<? extends E>>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getIterators()",
      "comment": "Gets the list of Iterators (unmodifiable). ",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getComparator()",
    "name": "getComparator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.CollatingIterator",
      "name": "CollatingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.CollatingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Comparator<? super E>",
      "name": "java.util.Comparator<? super E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getComparator()",
      "comment": "Gets the {@link Comparator} by which collatation occurs. ",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setComparator(java.util.Comparator<? super E> comp)",
    "name": "setComparator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.CollatingIterator",
      "name": "CollatingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.CollatingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comp"
      }
    ],
    "protocol": {
      "member": "setComparator(java.util.Comparator<? super E> comp)",
      "comment": "Sets the {@link Comparator} by which collation occurs. If you would like to use the natural sort order (or, in other words, if the elements in the iterators are implementing the {@link java.lang.Comparable} interface), then use the {@link org.apache.commons.collections4.comparators.ComparableComparator}. ",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNext()",
    "name": "hasNext",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.CollatingIterator",
      "name": "CollatingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.CollatingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasNext()",
      "comment": "Returns <code>true</code> if any child iterator has remaining elements. ",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "next()",
    "name": "next",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.CollatingIterator",
      "name": "CollatingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.CollatingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "next()",
      "comment": "Returns the next ordered element from a child iterator. ",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove()",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.CollatingIterator",
      "name": "CollatingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.CollatingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "remove()",
      "comment": "Removes the last returned element from the child iterator that produced it. ",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getIteratorIndex()",
    "name": "getIteratorIndex",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.CollatingIterator",
      "name": "CollatingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.CollatingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getIteratorIndex()",
      "comment": "Returns the index of the iterator that returned the last element. ",
      "kind": "FreeText",
      "condition": ""
    }
  }
]