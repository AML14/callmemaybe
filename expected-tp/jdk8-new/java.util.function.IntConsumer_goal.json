[
  {
    "signature": "accept(int value)",
    "name": "accept",
    "containingClass": {
      "qualifiedName": "java.util.function.IntConsumer",
      "name": "IntConsumer",
      "isArray": false
    },
    "targetClass": "java.util.function.IntConsumer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "accept(int value)",
      "comment": "Performs this operation on the given argument.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "andThen(java.util.function.IntConsumer after)",
    "name": "andThen",
    "containingClass": {
      "qualifiedName": "java.util.function.IntConsumer",
      "name": "IntConsumer",
      "isArray": false
    },
    "targetClass": "java.util.function.IntConsumer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.function.IntConsumer",
      "name": "java.util.function.IntConsumer",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.IntConsumer",
          "name": "IntConsumer",
          "isArray": false
        },
        "name": "after"
      }
    ],
    "protocol": {
      "member": "andThen(java.util.function.IntConsumer after)",
      "comment": "Returns a composed IntConsumer that performs, in sequence, this operation followed by the after operation. If performing either operation throws an exception, it is relayed to the caller of the composed operation. If performing this operation throws an exception, the after operation will not be performed.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]