[
  {
    "signature": "java.util.StringTokenizer(java.lang.String str, java.lang.String delim, boolean returnDelims)",
    "name": "java.util.StringTokenizer",
    "containingClass": {
      "qualifiedName": "java.util.StringTokenizer",
      "name": "StringTokenizer",
      "isArray": false
    },
    "targetClass": "java.util.StringTokenizer",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "delim"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "returnDelims"
      }
    ],
    "protocol": {
      "member": "java.util.StringTokenizer(java.lang.String str, java.lang.String delim, boolean returnDelims)",
      "comment": "Constructs a string tokenizer for the specified string. All characters in the delim argument are the delimiters for separating tokens.  If the returnDelims flag is true, then the delimiter characters are also returned as tokens. Each delimiter is returned as a string of length one. If the flag is false, the delimiter characters are skipped and only serve as separators between tokens.  Note that if delim is null, this constructor does not throw an exception. However, trying to invoke other methods on the resulting StringTokenizer may result in a NullPointerException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.StringTokenizer(java.lang.String str, java.lang.String delim)",
    "name": "java.util.StringTokenizer",
    "containingClass": {
      "qualifiedName": "java.util.StringTokenizer",
      "name": "StringTokenizer",
      "isArray": false
    },
    "targetClass": "java.util.StringTokenizer",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "delim"
      }
    ],
    "protocol": {
      "member": "java.util.StringTokenizer(java.lang.String str, java.lang.String delim)",
      "comment": "Constructs a string tokenizer for the specified string. The characters in the delim argument are the delimiters for separating tokens. Delimiter characters themselves will not be treated as tokens.  Note that if delim is null, this constructor does not throw an exception. However, trying to invoke other methods on the resulting StringTokenizer may result in a NullPointerException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.StringTokenizer(java.lang.String str)",
    "name": "java.util.StringTokenizer",
    "containingClass": {
      "qualifiedName": "java.util.StringTokenizer",
      "name": "StringTokenizer",
      "isArray": false
    },
    "targetClass": "java.util.StringTokenizer",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "protocol": {
      "member": "java.util.StringTokenizer(java.lang.String str)",
      "comment": "Constructs a string tokenizer for the specified string. The tokenizer uses the default delimiter set, which is \"&nbsp;&method_0;t&method_0;n&method_0;r&method_0;f\": the space character, the tab character, the newline character, the carriage-return character, and the form-feed character. Delimiter characters themselves will not be treated as tokens.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasMoreTokens()",
    "name": "hasMoreTokens",
    "containingClass": {
      "qualifiedName": "java.util.StringTokenizer",
      "name": "StringTokenizer",
      "isArray": false
    },
    "targetClass": "java.util.StringTokenizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasMoreTokens()",
      "comment": "Tests if there are more tokens available from this tokenizer's string. If this method returns true, then a subsequent call to nextToken with no argument will successfully return a token.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextToken()",
    "name": "nextToken",
    "containingClass": {
      "qualifiedName": "java.util.StringTokenizer",
      "name": "StringTokenizer",
      "isArray": false
    },
    "targetClass": "java.util.StringTokenizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextToken()",
      "comment": "Returns the next token from this string tokenizer.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextToken(java.lang.String delim)",
    "name": "nextToken",
    "containingClass": {
      "qualifiedName": "java.util.StringTokenizer",
      "name": "StringTokenizer",
      "isArray": false
    },
    "targetClass": "java.util.StringTokenizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "delim"
      }
    ],
    "protocol": {
      "member": "nextToken(java.lang.String delim)",
      "comment": "Returns the next token in this string tokenizer's string. First, the set of characters considered to be delimiters by this StringTokenizer object is changed to be the characters in the string delim. Then the next token in the string after the current position is returned. The current position is advanced beyond the recognized token. The new delimiter set remains the default after this call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasMoreElements()",
    "name": "hasMoreElements",
    "containingClass": {
      "qualifiedName": "java.util.StringTokenizer",
      "name": "StringTokenizer",
      "isArray": false
    },
    "targetClass": "java.util.StringTokenizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasMoreElements()",
      "comment": "Returns the same value as the hasMoreTokens method. It exists so that this class can implement the Enumeration interface.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextElement()",
    "name": "nextElement",
    "containingClass": {
      "qualifiedName": "java.util.StringTokenizer",
      "name": "StringTokenizer",
      "isArray": false
    },
    "targetClass": "java.util.StringTokenizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextElement()",
      "comment": "Returns the same value as the nextToken method, except that its declared return value is Object rather than String. It exists so that this class can implement the Enumeration interface.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "countTokens()",
    "name": "countTokens",
    "containingClass": {
      "qualifiedName": "java.util.StringTokenizer",
      "name": "StringTokenizer",
      "isArray": false
    },
    "targetClass": "java.util.StringTokenizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "countTokens()",
      "comment": "Calculates the number of times that this tokenizer's nextToken method can be called before it generates an exception. The current position is not advanced.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]