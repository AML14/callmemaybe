[
  {
    "signature": "lowerEntry(K key)",
    "name": "lowerEntry",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map$Entry<K, V>",
      "name": "java.util.Map$Entry<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "lowerEntry(K key)",
      "comment": "Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lowerKey(K key)",
    "name": "lowerKey",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "K",
      "name": "K",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "lowerKey(K key)",
      "comment": "Returns the greatest key strictly less than the given key, or null if there is no such key.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "floorEntry(K key)",
    "name": "floorEntry",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map$Entry<K, V>",
      "name": "java.util.Map$Entry<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "floorEntry(K key)",
      "comment": "Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "floorKey(K key)",
    "name": "floorKey",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "K",
      "name": "K",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "floorKey(K key)",
      "comment": "Returns the greatest key less than or equal to the given key, or null if there is no such key.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ceilingEntry(K key)",
    "name": "ceilingEntry",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map$Entry<K, V>",
      "name": "java.util.Map$Entry<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "ceilingEntry(K key)",
      "comment": "Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ceilingKey(K key)",
    "name": "ceilingKey",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "K",
      "name": "K",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "ceilingKey(K key)",
      "comment": "Returns the least key greater than or equal to the given key, or null if there is no such key.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "higherEntry(K key)",
    "name": "higherEntry",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map$Entry<K, V>",
      "name": "java.util.Map$Entry<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "higherEntry(K key)",
      "comment": "Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "higherKey(K key)",
    "name": "higherKey",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "K",
      "name": "K",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "higherKey(K key)",
      "comment": "Returns the least key strictly greater than the given key, or null if there is no such key.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "firstEntry()",
    "name": "firstEntry",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map$Entry<K, V>",
      "name": "java.util.Map$Entry<K, V>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "firstEntry()",
      "comment": "Returns a key-value mapping associated with the least key in this map, or null if the map is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lastEntry()",
    "name": "lastEntry",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map$Entry<K, V>",
      "name": "java.util.Map$Entry<K, V>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "lastEntry()",
      "comment": "Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollFirstEntry()",
    "name": "pollFirstEntry",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map$Entry<K, V>",
      "name": "java.util.Map$Entry<K, V>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "pollFirstEntry()",
      "comment": "Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollLastEntry()",
    "name": "pollLastEntry",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map$Entry<K, V>",
      "name": "java.util.Map$Entry<K, V>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "pollLastEntry()",
      "comment": "Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "descendingMap()",
    "name": "descendingMap",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableMap<K, V>",
      "name": "java.util.NavigableMap<K, V>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "descendingMap()",
      "comment": "Returns a reverse order view of the mappings contained in this map. The descending map is backed by this map, so changes to the map are reflected in the descending map, and vice-versa. If either map is modified while an iteration over a collection view of either map is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The returned map has an ordering equivalent to method_0 method_5(method_1. The expression method_2method_3 returns a view of m essentially equivalent to m.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "navigableKeySet()",
    "name": "navigableKeySet",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<K>",
      "name": "java.util.NavigableSet<K>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "navigableKeySet()",
      "comment": "Returns a NavigableSet view of the keys contained in this map. The set's iterator returns the keys in ascending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the method_0, method_1, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "descendingKeySet()",
    "name": "descendingKeySet",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<K>",
      "name": "java.util.NavigableSet<K>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "descendingKeySet()",
      "comment": "Returns a reverse order NavigableSet view of the keys contained in this map. The set's iterator returns the keys in descending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the method_0, method_1, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)",
    "name": "subMap",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableMap<K, V>",
      "name": "java.util.NavigableMap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromKey"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "fromInclusive"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toKey"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "toInclusive"
      }
    ],
    "protocol": {
      "member": "subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)",
      "comment": "Returns a view of the portion of this map whose keys range from fromKey to toKey. If fromKey and toKey are equal, the returned map is empty unless fromInclusive and toInclusive are both true. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside of its range, or to construct a submap either of whose endpoints lie outside its range.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "headMap(K toKey, boolean inclusive)",
    "name": "headMap",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableMap<K, V>",
      "name": "java.util.NavigableMap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toKey"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "inclusive"
      }
    ],
    "protocol": {
      "member": "headMap(K toKey, boolean inclusive)",
      "comment": "Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tailMap(K fromKey, boolean inclusive)",
    "name": "tailMap",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableMap<K, V>",
      "name": "java.util.NavigableMap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromKey"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "inclusive"
      }
    ],
    "protocol": {
      "member": "tailMap(K fromKey, boolean inclusive)",
      "comment": "Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subMap(K fromKey, K toKey)",
    "name": "subMap",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedMap<K, V>",
      "name": "java.util.SortedMap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromKey"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toKey"
      }
    ],
    "protocol": {
      "member": "subMap(K fromKey, K toKey)",
      "comment": "{@inheritDoc} Equivalent to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "headMap(K toKey)",
    "name": "headMap",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedMap<K, V>",
      "name": "java.util.SortedMap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toKey"
      }
    ],
    "protocol": {
      "member": "headMap(K toKey)",
      "comment": "{@inheritDoc} Equivalent to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tailMap(K fromKey)",
    "name": "tailMap",
    "containingClass": {
      "qualifiedName": "java.util.NavigableMap",
      "name": "NavigableMap",
      "isArray": false
    },
    "targetClass": "java.util.NavigableMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedMap<K, V>",
      "name": "java.util.SortedMap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromKey"
      }
    ],
    "protocol": {
      "member": "tailMap(K fromKey)",
      "comment": "{@inheritDoc} Equivalent to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]