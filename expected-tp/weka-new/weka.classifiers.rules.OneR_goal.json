[
  {
    "signature": "globalInfo()",
    "name": "globalInfo",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "globalInfo()",
      "comment": "Returns a string describing classifier",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTechnicalInformation()",
    "name": "getTechnicalInformation",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.TechnicalInformation",
      "name": "weka.core.TechnicalInformation",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTechnicalInformation()",
      "comment": "Returns an instance of a TechnicalInformation object, containing detailed information about the technical background of this class, emethod_0., paper reference or book this class is based on.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "classifyInstance(weka.core.Instance inst)",
    "name": "classifyInstance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "inst"
      }
    ],
    "protocol": {
      "member": "classifyInstance(weka.core.Instance inst)",
      "comment": "Classifies a given instance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCapabilities()",
    "name": "getCapabilities",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.Capabilities",
      "name": "weka.core.Capabilities",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getCapabilities()",
      "comment": "Returns default capabilities of the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "buildClassifier(weka.core.Instances instances)",
    "name": "buildClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "instances"
      }
    ],
    "protocol": {
      "member": "buildClassifier(weka.core.Instances instances)",
      "comment": "Generates the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "newRule(weka.core.Attribute attr, weka.core.Instances data)",
    "name": "newRule",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.classifiers.rules.OneR$OneRRule",
      "name": "weka.classifiers.rules.OneR$OneRRule",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Attribute",
          "name": "Attribute",
          "isArray": false
        },
        "name": "attr"
      },
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "newRule(weka.core.Attribute attr, weka.core.Instances data)",
      "comment": "Create a rule branching on this attribute.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "newNominalRule(weka.core.Attribute attr, weka.core.Instances data, int[] missingValueCounts)",
    "name": "newNominalRule",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.classifiers.rules.OneR$OneRRule",
      "name": "weka.classifiers.rules.OneR$OneRRule",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Attribute",
          "name": "Attribute",
          "isArray": false
        },
        "name": "attr"
      },
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "missingValueCounts"
      }
    ],
    "protocol": {
      "member": "newNominalRule(weka.core.Attribute attr, weka.core.Instances data, int[] missingValueCounts)",
      "comment": "Create a rule branching on this nominal attribute.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "newNumericRule(weka.core.Attribute attr, weka.core.Instances data, int[] missingValueCounts)",
    "name": "newNumericRule",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.classifiers.rules.OneR$OneRRule",
      "name": "weka.classifiers.rules.OneR$OneRRule",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Attribute",
          "name": "Attribute",
          "isArray": false
        },
        "name": "attr"
      },
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "missingValueCounts"
      }
    ],
    "protocol": {
      "member": "newNumericRule(weka.core.Attribute attr, weka.core.Instances data, int[] missingValueCounts)",
      "comment": "Create a rule branching on this numeric attribute",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listOptions()",
    "name": "listOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<weka.core.Option>",
      "name": "java.util.Enumeration<weka.core.Option>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "listOptions()",
      "comment": "Returns an enumeration describing the available options..",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setOptions(java.lang.String[] options)",
    "name": "setOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "options"
      }
    ],
    "protocol": {
      "member": "setOptions(java.lang.String[] options)",
      "comment": "Parses a given list of options.   -B <minimum bucket size> The minimum number of objects in a bucket (default: 6).  <!-- options-end -->",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOptions()",
    "name": "getOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getOptions()",
      "comment": "Gets the current settings of the OneR classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toSource(java.lang.String className)",
    "name": "toSource",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "className"
      }
    ],
    "protocol": {
      "member": "toSource(java.lang.String className)",
      "comment": "Returns a string that describes the classifier as source. The classifier will be contained in a class with the given name (there may be auxiliary classes), and will contain a method with the signature:   public static double method_0;   where the array i contains elements that are either Double, String, with missing values represented as null. The generated code is public domain and comes with no warranty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns a description of the classifier",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minBucketSizeTipText()",
    "name": "minBucketSizeTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "minBucketSizeTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMinBucketSize()",
    "name": "getMinBucketSize",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMinBucketSize()",
      "comment": "Get the value of minBucketSize.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMinBucketSize(int v)",
    "name": "setMinBucketSize",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "protocol": {
      "member": "setMinBucketSize(int v)",
      "comment": "Set the value of minBucketSize.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRevision()",
    "name": "getRevision",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRevision()",
      "comment": "Returns the revision string.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "main(java.lang.String[] argv)",
    "name": "main",
    "containingClass": {
      "qualifiedName": "weka.classifiers.rules.OneR",
      "name": "OneR",
      "isArray": false
    },
    "targetClass": "weka.classifiers.rules.OneR",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "argv"
      }
    ],
    "protocol": {
      "member": "main(java.lang.String[] argv)",
      "comment": "Main method for testing this class",
      "kind": "FreeText",
      "condition": ""
    }
  }
]