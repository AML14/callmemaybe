[
  {
    "signature": "org.graphstream.ui.graphicGraph.GraphicEdge(java.lang.String id, org.graphstream.ui.graphicGraph.GraphicNode from, org.graphstream.ui.graphicGraph.GraphicNode to, boolean dir, java.util.HashMap<java.lang.String, java.lang.Object> attributes)",
    "name": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "id"
      },
      {
        "type": {
          "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicNode",
          "name": "GraphicNode",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicNode",
          "name": "GraphicNode",
          "isArray": false
        },
        "name": "to"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "dir"
      },
      {
        "type": {
          "qualifiedName": "java.util.HashMap",
          "name": "HashMap",
          "isArray": false
        },
        "name": "attributes"
      }
    ],
    "protocol": {
      "member": "org.graphstream.ui.graphicGraph.GraphicEdge(java.lang.String id, org.graphstream.ui.graphicGraph.GraphicNode from, org.graphstream.ui.graphicGraph.GraphicNode to, boolean dir, java.util.HashMap<java.lang.String, java.lang.Object> attributes)",
      "comment": "New graphic edge.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSelectorType()",
    "name": "getSelectorType",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.Selector$Type",
      "name": "org.graphstream.ui.graphicGraph.stylesheet.Selector$Type",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getSelectorType()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "otherNode(org.graphstream.ui.graphicGraph.GraphicNode n)",
    "name": "otherNode",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicNode",
      "name": "org.graphstream.ui.graphicGraph.GraphicNode",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicNode",
          "name": "GraphicNode",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "protocol": {
      "member": "otherNode(org.graphstream.ui.graphicGraph.GraphicNode n)",
      "comment": "Obtain the node that is not \"n\" attached to this edge.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getX()",
    "name": "getX",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getX()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getY()",
    "name": "getY",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getY()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getZ()",
    "name": "getZ",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getZ()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getControlPoints()",
    "name": "getControlPoints",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getControlPoints()",
      "comment": "Control points for curved edges or polylines. This contains the control points of an edge. If the edge is in 2D each sequence of two cells gives the x and y coordinates of a control point. Else each sequence of three cells gives the x, y and z coordinates. Therefore the number of control points can be obtained by dividing by 2 or 3 the length of this array. For example for cubic Bezier curves in 2D this array contains four cells. The control points are ordered from node0 to node1. The units are \"graph units\".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isCurve()",
    "name": "isCurve",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isCurve()",
      "comment": "True if the the edge defines control points to draw a curve or polyline. This does not mean the edge style asks to paint the edge as a curve, only that control points are defined.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setControlPoints(double[] points)",
    "name": "setControlPoints",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "points"
      }
    ],
    "protocol": {
      "member": "setControlPoints(double[] points)",
      "comment": "Change the control points array for this edge.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMultiIndex()",
    "name": "getMultiIndex",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMultiIndex()",
      "comment": "This edge is the i-th between the two same nodes.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "move(double x, double y, double z)",
    "name": "move",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "y"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "z"
      }
    ],
    "protocol": {
      "member": "move(double x, double y, double z)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "attributeChanged(org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent event, java.lang.String attribute, java.lang.Object oldValue, java.lang.Object newValue)",
    "name": "attributeChanged",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent",
          "name": "AttributeChangeEvent",
          "isArray": false
        },
        "name": "event"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "attribute"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "oldValue"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "newValue"
      }
    ],
    "protocol": {
      "member": "attributeChanged(org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent event, java.lang.String attribute, java.lang.Object oldValue, java.lang.Object newValue)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "countSameEdges(java.lang.Iterable<org.graphstream.ui.graphicGraph.GraphicEdge> edgeList)",
    "name": "countSameEdges",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "edgeList"
      }
    ],
    "protocol": {
      "member": "countSameEdges(java.lang.Iterable<org.graphstream.ui.graphicGraph.GraphicEdge> edgeList)",
      "comment": "Count the number of identical edges between the two nodes of this edge and create or update the edge group. The edge group contains all the edges between two same nodes and allows to render faster multiple edges in a multigraph.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removed()",
    "name": "removed",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "removed()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNode0()",
    "name": "getNode0",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getNode0()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNode1()",
    "name": "getNode1",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getNode1()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getGroup()",
    "name": "getGroup",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge$EdgeGroup",
      "name": "org.graphstream.ui.graphicGraph.GraphicEdge$EdgeGroup",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getGroup()",
      "comment": "If there are several edges between two nodes, this edge pertains to a group. Else this method returns null.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOpposite(org.graphstream.graph.Node node)",
    "name": "getOpposite",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.graph.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      }
    ],
    "protocol": {
      "member": "getOpposite(org.graphstream.graph.Node node)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSourceNode()",
    "name": "getSourceNode",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getSourceNode()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTargetNode()",
    "name": "getTargetNode",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTargetNode()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isDirected()",
    "name": "isDirected",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isDirected()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isLoop()",
    "name": "isLoop",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isLoop()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setDirected(boolean on)",
    "name": "setDirected",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "on"
      }
    ],
    "protocol": {
      "member": "setDirected(boolean on)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "switchDirection()",
    "name": "switchDirection",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.GraphicEdge",
      "name": "GraphicEdge",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.GraphicEdge",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "switchDirection()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]