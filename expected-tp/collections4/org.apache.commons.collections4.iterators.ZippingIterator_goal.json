[
  {
    "signature": "org.apache.commons.collections4.iterators.ZippingIterator(java.util.Iterator<? extends E> a, java.util.Iterator<? extends E> b)",
    "name": "org.apache.commons.collections4.iterators.ZippingIterator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.ZippingIterator",
      "name": "ZippingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.ZippingIterator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "protocol": {
      "member": "org.apache.commons.collections4.iterators.ZippingIterator(java.util.Iterator<? extends E> a, java.util.Iterator<? extends E> b)",
      "comment": "Constructs a new ZippingIterator that will provide interleaved iteration over the two given iterators.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.apache.commons.collections4.iterators.ZippingIterator(java.util.Iterator<? extends E> a, java.util.Iterator<? extends E> b, java.util.Iterator<? extends E> c)",
    "name": "org.apache.commons.collections4.iterators.ZippingIterator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.ZippingIterator",
      "name": "ZippingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.ZippingIterator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "org.apache.commons.collections4.iterators.ZippingIterator(java.util.Iterator<? extends E> a, java.util.Iterator<? extends E> b, java.util.Iterator<? extends E> c)",
      "comment": "Constructs a new ZippingIterator that will provide interleaved iteration over the three given iterators.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.apache.commons.collections4.iterators.ZippingIterator(java.util.Iterator<? extends E>... iterators)",
    "name": "org.apache.commons.collections4.iterators.ZippingIterator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.ZippingIterator",
      "name": "ZippingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.ZippingIterator",
    "isVarArgs": true,
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.util.Iterator;",
          "name": "Iterator[]",
          "isArray": true
        },
        "name": "iterators"
      }
    ],
    "protocol": {
      "member": "org.apache.commons.collections4.iterators.ZippingIterator(java.util.Iterator<? extends E>... iterators)",
      "comment": "Constructs a new ZippingIterator that will provide interleaved iteration of the specified iterators.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNext()",
    "name": "hasNext",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.ZippingIterator",
      "name": "ZippingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.ZippingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasNext()",
      "comment": "Returns true if any child iterator has remaining elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "next()",
    "name": "next",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.ZippingIterator",
      "name": "ZippingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.ZippingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "next()",
      "comment": "Returns the next element from a child iterator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove()",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.ZippingIterator",
      "name": "ZippingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.ZippingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "remove()",
      "comment": "Removes the last returned element from the child iterator that produced it.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]