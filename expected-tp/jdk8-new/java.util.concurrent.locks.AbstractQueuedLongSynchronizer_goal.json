[
  {
    "signature": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer()",
    "name": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer()",
      "comment": "Creates a new AbstractQueuedLongSynchronizer instance with initial synchronization state of zero.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getState()",
    "name": "getState",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getState()",
      "comment": "Returns the current value of synchronization state. This operation has memory semantics of a volatile read.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setState(long newState)",
    "name": "setState",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "newState"
      }
    ],
    "protocol": {
      "member": "setState(long newState)",
      "comment": "Sets the value of synchronization state. This operation has memory semantics of a volatile write.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "compareAndSetState(long expect, long update)",
    "name": "compareAndSetState",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "expect"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "update"
      }
    ],
    "protocol": {
      "member": "compareAndSetState(long expect, long update)",
      "comment": "Atomically sets synchronization state to the given updated value if the current state value equals the expected value. This operation has memory semantics of a volatile read and write.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "selfInterrupt()",
    "name": "selfInterrupt",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "selfInterrupt()",
      "comment": "Convenience method to interrupt current thread.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "acquireQueued(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node node, long arg)",
    "name": "acquireQueued",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "arg"
      }
    ],
    "protocol": {
      "member": "acquireQueued(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node node, long arg)",
      "comment": "Acquires in exclusive uninterruptible mode for thread already in queue. Used by condition wait methods as well as acquire.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryAcquire(long arg)",
    "name": "tryAcquire",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "arg"
      }
    ],
    "protocol": {
      "member": "tryAcquire(long arg)",
      "comment": "Attempts to acquire in exclusive mode. This method should query if the state of the object permits it to be acquired in the exclusive mode, and if so to acquire it. This method is always invoked by the thread performing acquire. If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. This can be used to implement method method_0. The default implementation throws UnsupportedOperationException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryRelease(long arg)",
    "name": "tryRelease",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "arg"
      }
    ],
    "protocol": {
      "member": "tryRelease(long arg)",
      "comment": "Attempts to set the state to reflect a release in exclusive mode. This method is always invoked by the thread performing release. The default implementation throws UnsupportedOperationException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryAcquireShared(long arg)",
    "name": "tryAcquireShared",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "arg"
      }
    ],
    "protocol": {
      "member": "tryAcquireShared(long arg)",
      "comment": "Attempts to acquire in shared mode. This method should query if the state of the object permits it to be acquired in the shared mode, and if so to acquire it. This method is always invoked by the thread performing acquire. If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. The default implementation throws UnsupportedOperationException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryReleaseShared(long arg)",
    "name": "tryReleaseShared",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "arg"
      }
    ],
    "protocol": {
      "member": "tryReleaseShared(long arg)",
      "comment": "Attempts to set the state to reflect a release in shared mode. This method is always invoked by the thread performing release. The default implementation throws UnsupportedOperationException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isHeldExclusively()",
    "name": "isHeldExclusively",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isHeldExclusively()",
      "comment": "Returns true if synchronization is held exclusively with respect to the current (calling) thread. This method is invoked upon each call to a non-waiting ConditionObject method. (Waiting methods instead invoke method_0.) The default implementation throws UnsupportedOperationException. This method is invoked internally only within ConditionObject methods, so need not be defined if conditions are not used.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "acquire(long arg)",
    "name": "acquire",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "arg"
      }
    ],
    "protocol": {
      "member": "acquire(long arg)",
      "comment": "Acquires in exclusive mode, ignoring interrupts. Implemented by invoking at least once method_0, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking method_0 until success. This method can be used to implement method method_2.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "acquireInterruptibly(long arg)",
    "name": "acquireInterruptibly",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "arg"
      }
    ],
    "protocol": {
      "member": "acquireInterruptibly(long arg)",
      "comment": "Acquires in exclusive mode, aborting if interrupted. Implemented by first checking interrupt status, then invoking at least once method_0, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking method_0 until success or the thread is interrupted. This method can be used to implement method method_2.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryAcquireNanos(long arg, long nanosTimeout)",
    "name": "tryAcquireNanos",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "arg"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "nanosTimeout"
      }
    ],
    "protocol": {
      "member": "tryAcquireNanos(long arg, long nanosTimeout)",
      "comment": "Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses. Implemented by first checking interrupt status, then invoking at least once method_1, returning on success. Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking method_1 until success or the thread is interrupted or the timeout elapses. This method can be used to implement method method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "release(long arg)",
    "name": "release",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "arg"
      }
    ],
    "protocol": {
      "member": "release(long arg)",
      "comment": "Releases in exclusive mode. Implemented by unblocking one or more threads if method_0 returns true. This method can be used to implement method method_1.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "acquireShared(long arg)",
    "name": "acquireShared",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "arg"
      }
    ],
    "protocol": {
      "member": "acquireShared(long arg)",
      "comment": "Acquires in shared mode, ignoring interrupts. Implemented by first invoking at least once method_0, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking method_0 until success.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "acquireSharedInterruptibly(long arg)",
    "name": "acquireSharedInterruptibly",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "arg"
      }
    ],
    "protocol": {
      "member": "acquireSharedInterruptibly(long arg)",
      "comment": "Acquires in shared mode, aborting if interrupted. Implemented by first checking interrupt status, then invoking at least once method_0, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking method_0 until success or the thread is interrupted.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryAcquireSharedNanos(long arg, long nanosTimeout)",
    "name": "tryAcquireSharedNanos",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "arg"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "nanosTimeout"
      }
    ],
    "protocol": {
      "member": "tryAcquireSharedNanos(long arg, long nanosTimeout)",
      "comment": "Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses. Implemented by first checking interrupt status, then invoking at least once method_0, returning on success. Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking method_0 until success or the thread is interrupted or the timeout elapses.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "releaseShared(long arg)",
    "name": "releaseShared",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "arg"
      }
    ],
    "protocol": {
      "member": "releaseShared(long arg)",
      "comment": "Releases in shared mode. Implemented by unblocking one or more threads if method_0 returns true.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasQueuedThreads()",
    "name": "hasQueuedThreads",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasQueuedThreads()",
      "comment": "Queries whether any threads are waiting to acquire. Note that because cancellations due to interrupts and timeouts may occur at any time, a true return does not guarantee that any other thread will ever acquire. In this implementation, this operation returns in constant time.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasContended()",
    "name": "hasContended",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasContended()",
      "comment": "Queries whether any threads have ever contended to acquire this synchronizer; that is if an acquire method has ever blocked. In this implementation, this operation returns in constant time.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getFirstQueuedThread()",
    "name": "getFirstQueuedThread",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Thread",
      "name": "java.lang.Thread",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getFirstQueuedThread()",
      "comment": "Returns the first (longest-waiting) thread in the queue, or null if no threads are currently queued. In this implementation, this operation normally returns in constant time, but may iterate upon contention if other threads are concurrently modifying the queue.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isQueued(java.lang.Thread thread)",
    "name": "isQueued",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Thread",
          "name": "Thread",
          "isArray": false
        },
        "name": "thread"
      }
    ],
    "protocol": {
      "member": "isQueued(java.lang.Thread thread)",
      "comment": "Returns true if the given thread is currently queued. This implementation traverses the queue to determine presence of the given thread.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "apparentlyFirstQueuedIsExclusive()",
    "name": "apparentlyFirstQueuedIsExclusive",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "apparentlyFirstQueuedIsExclusive()",
      "comment": "Returns true if the apparent first queued thread, if one exists, is waiting in exclusive mode. If this method returns true, and the current thread is attempting to acquire in shared mode (that is, this method is invoked from method_0) then it is guaranteed that the current thread is not the first queued thread. Used only as a heuristic in ReentrantReadWriteLock.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasQueuedPredecessors()",
    "name": "hasQueuedPredecessors",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasQueuedPredecessors()",
      "comment": "Queries whether any threads have been waiting to acquire longer than the current thread. An invocation of this method is equivalent to (but may be more efficient than):  method_0 != method_1 && method_2 Note that because cancellations due to interrupts and timeouts may occur at any time, a true return does not guarantee that some other thread will acquire before the current thread. Likewise, it is possible for another thread to win a race to enqueue after this method has returned false, due to the queue being empty. This method is designed to be used by a fair synchronizer to avoid barging. Such a synchronizer's method_9 method should return false, and its method_9Shared method should return a negative value, if this method returns true (unless this is a reentrant acquire). For example, the tryAcquire method for a fair, reentrant, exclusive mode synchronizer might look like this:  protected boolean method_3 { if (method_4 { // A reentrant acquire; increment hold count return true;  else if (method_5 { return false; } else { // try to acquire normally } }}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getQueueLength()",
    "name": "getQueueLength",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getQueueLength()",
      "comment": "Returns an estimate of the number of threads waiting to acquire. The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures. This method is designed for use in monitoring system state, not for synchronization control.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getQueuedThreads()",
    "name": "getQueuedThreads",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<java.lang.Thread>",
      "name": "java.util.Collection<java.lang.Thread>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getQueuedThreads()",
      "comment": "Returns a collection containing threads that may be waiting to acquire. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order. This method is designed to facilitate construction of subclasses that provide more extensive monitoring facilities.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getExclusiveQueuedThreads()",
    "name": "getExclusiveQueuedThreads",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<java.lang.Thread>",
      "name": "java.util.Collection<java.lang.Thread>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getExclusiveQueuedThreads()",
      "comment": "Returns a collection containing threads that may be waiting to acquire in exclusive mode. This has the same properties as method_0 except that it only returns those threads waiting due to an exclusive acquire.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSharedQueuedThreads()",
    "name": "getSharedQueuedThreads",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<java.lang.Thread>",
      "name": "java.util.Collection<java.lang.Thread>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getSharedQueuedThreads()",
      "comment": "Returns a collection containing threads that may be waiting to acquire in shared mode. This has the same properties as method_0 except that it only returns those threads waiting due to a shared acquire.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns a string identifying this synchronizer, as well as its state. The state, in brackets, includes the String \"State =\" followed by the current value of method_0, and either \"nonempty\" or \"empty\" depending on whether the queue is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node node)",
    "name": "isOnSyncQueue",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      }
    ],
    "protocol": {
      "member": "isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node node)",
      "comment": "Returns true if a node, always one that was initially placed on a condition queue, is now waiting to reacquire on sync queue.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "transferForSignal(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node node)",
    "name": "transferForSignal",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      }
    ],
    "protocol": {
      "member": "transferForSignal(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node node)",
      "comment": "Transfers a node from a condition queue onto sync queue. Returns true if successful.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node node)",
    "name": "transferAfterCancelledWait",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      }
    ],
    "protocol": {
      "member": "transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node node)",
      "comment": "Transfers node, if necessary, to sync queue after a cancelled wait. Returns true if thread was cancelled before being signalled.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "fullyRelease(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node node)",
    "name": "fullyRelease",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      }
    ],
    "protocol": {
      "member": "fullyRelease(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node node)",
      "comment": "Invokes release with current state value; returns saved state. Cancels node and throws exception on failure.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "owns(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject condition)",
    "name": "owns",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject",
          "name": "ConditionObject",
          "isArray": false
        },
        "name": "condition"
      }
    ],
    "protocol": {
      "member": "owns(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject condition)",
      "comment": "Queries whether the given ConditionObject uses this synchronizer as its lock.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasWaiters(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject condition)",
    "name": "hasWaiters",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject",
          "name": "ConditionObject",
          "isArray": false
        },
        "name": "condition"
      }
    ],
    "protocol": {
      "member": "hasWaiters(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject condition)",
      "comment": "Queries whether any threads are waiting on the given condition associated with this synchronizer. Note that because timeouts and interrupts may occur at any time, a true return does not guarantee that a future signal will awaken any threads. This method is designed primarily for use in monitoring of the system state.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject condition)",
    "name": "getWaitQueueLength",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject",
          "name": "ConditionObject",
          "isArray": false
        },
        "name": "condition"
      }
    ],
    "protocol": {
      "member": "getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject condition)",
      "comment": "Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer. Note that because timeouts and interrupts may occur at any time, the estimate serves only as an upper bound on the actual number of waiters. This method is designed for use in monitoring of the system state, not for synchronization control.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWaitingThreads(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject condition)",
    "name": "getWaitingThreads",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
      "name": "AbstractQueuedLongSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<java.lang.Thread>",
      "name": "java.util.Collection<java.lang.Thread>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject",
          "name": "ConditionObject",
          "isArray": false
        },
        "name": "condition"
      }
    ],
    "protocol": {
      "member": "getWaitingThreads(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject condition)",
      "comment": "Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]