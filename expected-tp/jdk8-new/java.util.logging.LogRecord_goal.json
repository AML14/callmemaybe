[
  {
    "signature": "java.util.logging.LogRecord(java.util.logging.Level level, java.lang.String msg)",
    "name": "java.util.logging.LogRecord",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.logging.Level",
          "name": "Level",
          "isArray": false
        },
        "name": "level"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "msg"
      }
    ],
    "protocol": {
      "member": "java.util.logging.LogRecord(java.util.logging.Level level, java.lang.String msg)",
      "comment": "Construct a LogRecord with the given level and message values.  The sequence property will be initialized with a new unique value. These sequence values are allocated in increasing order within a VM.  The millis property will be initialized to the current time.  The thread ID property will be initialized with a unique ID for the current thread.  All other properties will be initialized to \"null\".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLoggerName()",
    "name": "getLoggerName",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getLoggerName()",
      "comment": "Get the source Logger's name.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setLoggerName(java.lang.String name)",
    "name": "setLoggerName",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "protocol": {
      "member": "setLoggerName(java.lang.String name)",
      "comment": "Set the source Logger's name.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getResourceBundle()",
    "name": "getResourceBundle",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ResourceBundle",
      "name": "java.util.ResourceBundle",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getResourceBundle()",
      "comment": "Get the localization resource bundle  This is the ResourceBundle that should be used to localize the message string before formatting it. The result may be null if the message is not localizable, or if no suitable ResourceBundle is available.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setResourceBundle(java.util.ResourceBundle bundle)",
    "name": "setResourceBundle",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.ResourceBundle",
          "name": "ResourceBundle",
          "isArray": false
        },
        "name": "bundle"
      }
    ],
    "protocol": {
      "member": "setResourceBundle(java.util.ResourceBundle bundle)",
      "comment": "Set the localization resource bundle.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getResourceBundleName()",
    "name": "getResourceBundleName",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getResourceBundleName()",
      "comment": "Get the localization resource bundle name  This is the name for the ResourceBundle that should be used to localize the message string before formatting it. The result may be null if the message is not localizable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setResourceBundleName(java.lang.String name)",
    "name": "setResourceBundleName",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "protocol": {
      "member": "setResourceBundleName(java.lang.String name)",
      "comment": "Set the localization resource bundle name.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLevel()",
    "name": "getLevel",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.logging.Level",
      "name": "java.util.logging.Level",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getLevel()",
      "comment": "Get the logging message level, for example method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setLevel(java.util.logging.Level level)",
    "name": "setLevel",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.logging.Level",
          "name": "Level",
          "isArray": false
        },
        "name": "level"
      }
    ],
    "protocol": {
      "member": "setLevel(java.util.logging.Level level)",
      "comment": "Set the logging message level, for example method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSequenceNumber()",
    "name": "getSequenceNumber",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getSequenceNumber()",
      "comment": "Get the sequence number.  Sequence numbers are normally assigned in the LogRecord constructor, which assigns unique sequence numbers to each new LogRecord in increasing order.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSequenceNumber(long seq)",
    "name": "setSequenceNumber",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "seq"
      }
    ],
    "protocol": {
      "member": "setSequenceNumber(long seq)",
      "comment": "Set the sequence number.  Sequence numbers are normally assigned in the LogRecord constructor, so it should not normally be necessary to use this method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSourceClassName()",
    "name": "getSourceClassName",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getSourceClassName()",
      "comment": "Get the name of the class that (allegedly) issued the logging request.  Note that this sourceClassName is not verified and may be spoofed. This information may either have been provided as part of the logging call, or it may have been inferred automatically by the logging framework. In the latter case, the information may only be approximate and may in fact describe an earlier call on the stack frame.  May be null if no information could be obtained.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSourceClassName(java.lang.String sourceClassName)",
    "name": "setSourceClassName",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "sourceClassName"
      }
    ],
    "protocol": {
      "member": "setSourceClassName(java.lang.String sourceClassName)",
      "comment": "Set the name of the class that (allegedly) issued the logging request.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSourceMethodName()",
    "name": "getSourceMethodName",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getSourceMethodName()",
      "comment": "Get the name of the method that (allegedly) issued the logging request.  Note that this sourceMethodName is not verified and may be spoofed. This information may either have been provided as part of the logging call, or it may have been inferred automatically by the logging framework. In the latter case, the information may only be approximate and may in fact describe an earlier call on the stack frame.  May be null if no information could be obtained.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSourceMethodName(java.lang.String sourceMethodName)",
    "name": "setSourceMethodName",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "sourceMethodName"
      }
    ],
    "protocol": {
      "member": "setSourceMethodName(java.lang.String sourceMethodName)",
      "comment": "Set the name of the method that (allegedly) issued the logging request.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMessage()",
    "name": "getMessage",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMessage()",
      "comment": "Get the \"raw\" log message, before localization or formatting.  May be null, which is equivalent to the empty string \"\".  This message may be either the final text or a localization key.  During formatting, if the source logger has a localization ResourceBundle and if that ResourceBundle has an entry for this message string, then the message string is replaced with the localized value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMessage(java.lang.String message)",
    "name": "setMessage",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "message"
      }
    ],
    "protocol": {
      "member": "setMessage(java.lang.String message)",
      "comment": "Set the \"raw\" log message, before localization or formatting.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getParameters()",
    "name": "getParameters",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object[]",
      "name": "java.lang.Object[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getParameters()",
      "comment": "Get the parameters to the log message.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setParameters(java.lang.Object[] parameters)",
    "name": "setParameters",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "parameters"
      }
    ],
    "protocol": {
      "member": "setParameters(java.lang.Object[] parameters)",
      "comment": "Set the parameters to the log message.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getThreadID()",
    "name": "getThreadID",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getThreadID()",
      "comment": "Get an identifier for the thread where the message originated.  This is a thread identifier within the Java VM and may or may not map to any operating system ID.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setThreadID(int threadID)",
    "name": "setThreadID",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "threadID"
      }
    ],
    "protocol": {
      "member": "setThreadID(int threadID)",
      "comment": "Set an identifier for the thread where the message originated.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMillis()",
    "name": "getMillis",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMillis()",
      "comment": "Get event time in milliseconds since 1970.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMillis(long millis)",
    "name": "setMillis",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "millis"
      }
    ],
    "protocol": {
      "member": "setMillis(long millis)",
      "comment": "Set event time.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getThrown()",
    "name": "getThrown",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Throwable",
      "name": "java.lang.Throwable",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getThrown()",
      "comment": "Get any throwable associated with the log record.  If the event involved an exception, this will be the exception object. Otherwise null.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setThrown(java.lang.Throwable thrown)",
    "name": "setThrown",
    "containingClass": {
      "qualifiedName": "java.util.logging.LogRecord",
      "name": "LogRecord",
      "isArray": false
    },
    "targetClass": "java.util.logging.LogRecord",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Throwable",
          "name": "Throwable",
          "isArray": false
        },
        "name": "thrown"
      }
    ],
    "protocol": {
      "member": "setThrown(java.lang.Throwable thrown)",
      "comment": "Set a throwable associated with the log event.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]