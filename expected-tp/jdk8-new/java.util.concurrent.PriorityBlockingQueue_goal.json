[
  {
    "signature": "java.util.concurrent.PriorityBlockingQueue()",
    "name": "java.util.concurrent.PriorityBlockingQueue",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.concurrent.PriorityBlockingQueue()",
      "comment": "Creates a PriorityBlockingQueue with the default initial capacity (11) that orders its elements according to their Comparable natural ordering.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.PriorityBlockingQueue(int initialCapacity)",
    "name": "java.util.concurrent.PriorityBlockingQueue",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "initialCapacity"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.PriorityBlockingQueue(int initialCapacity)",
      "comment": "Creates a PriorityBlockingQueue with the specified initial capacity that orders its elements according to their Comparable natural ordering.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.PriorityBlockingQueue(int initialCapacity, java.util.Comparator<? super E> comparator)",
    "name": "java.util.concurrent.PriorityBlockingQueue",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "initialCapacity"
      },
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.PriorityBlockingQueue(int initialCapacity, java.util.Comparator<? super E> comparator)",
      "comment": "Creates a PriorityBlockingQueue with the specified initial capacity that orders its elements according to the specified comparator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.PriorityBlockingQueue(java.util.Collection<? extends E> c)",
    "name": "java.util.concurrent.PriorityBlockingQueue",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.PriorityBlockingQueue(java.util.Collection<? extends E> c)",
      "comment": "Creates a PriorityBlockingQueue containing the elements in the specified collection. If the specified collection is a SortedSet or a PriorityQueue, this priority queue will be ordered according to the same ordering. Otherwise, this priority queue will be ordered according to the Comparable natural ordering of its elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(E e)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "add(E e)",
      "comment": "Inserts the specified element into this priority queue.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "offer(E e)",
    "name": "offer",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "offer(E e)",
      "comment": "Inserts the specified element into this priority queue. As the queue is unbounded, this method will never return false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "put(E e)",
    "name": "put",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "put(E e)",
      "comment": "Inserts the specified element into this priority queue. As the queue is unbounded, this method will never block.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "offer(E e, long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "offer",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "offer(E e, long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "Inserts the specified element into this priority queue. As the queue is unbounded, this method will never block or return false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "poll()",
    "name": "poll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "poll()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "take()",
    "name": "take",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "take()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "poll(long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "poll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "poll(long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "peek()",
    "name": "peek",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "peek()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "comparator()",
    "name": "comparator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Comparator<? super E>",
      "name": "java.util.Comparator<? super E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "comparator()",
      "comment": "Returns the comparator used to order the elements in this queue, or null if this queue uses the Comparable natural ordering of its elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "size()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remainingCapacity()",
    "name": "remainingCapacity",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "remainingCapacity()",
      "comment": "Always returns method_0 because a PriorityBlockingQueue is not capacity constrained.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(java.lang.Object o)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "remove(java.lang.Object o)",
      "comment": "Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element e such that method_0, if this queue contains one or more such elements. Returns true if and only if this queue contained the specified element (or equivalently, if this queue changed as a result of the call).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeEQ(java.lang.Object o)",
    "name": "removeEQ",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "removeEQ(java.lang.Object o)",
      "comment": "Identity-based version for use in method_0",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contains(java.lang.Object o)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "contains(java.lang.Object o)",
      "comment": "Returns true if this queue contains the specified element. More formally, returns true if and only if this queue contains at least one element e such that method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray()",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object[]",
      "name": "java.lang.Object[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "toArray()",
      "comment": "Returns an array containing all of the elements in this queue. The returned array elements are in no particular order. The returned array will be \"safe\" in that no references to it are maintained by this queue. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "drainTo(java.util.Collection<? super E> c)",
    "name": "drainTo",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "drainTo(java.util.Collection<? super E> c)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "drainTo(java.util.Collection<? super E> c, int maxElements)",
    "name": "drainTo",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxElements"
      }
    ],
    "protocol": {
      "member": "drainTo(java.util.Collection<? super E> c, int maxElements)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clear()",
      "comment": "Atomically removes all of the elements from this queue. The queue will be empty after this call returns.",
      "kind": "FreeText",
      "condition": "receiverObjectID.isEmpty()<-receiverObjectID.isEmpty()"
    }
  },
  {
    "signature": "toArray(T[] a)",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "a"
      }
    ],
    "protocol": {
      "member": "toArray(T[] a)",
      "comment": "Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array. The returned array elements are in no particular order. If the queue fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this queue. If this queue fits in the specified array with room to spare (imethod_4., the array has more elements than this queue), the element in the array immediately following the end of the queue is set to null. Like the method_0 method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a queue known to contain only strings. The following code can be used to dump the queue into a newly allocated array of String}:  {@code String[] y = method_1; Note that method_2 is identical in function to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "iterator()",
      "comment": "Returns an iterator over the elements in this queue. The iterator does not return the elements in any particular order. The returned iterator is <i>weakly consistent</i>.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "spliterator()",
    "name": "spliterator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.PriorityBlockingQueue",
      "name": "PriorityBlockingQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.PriorityBlockingQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator<E>",
      "name": "java.util.Spliterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "spliterator()",
      "comment": "Returns a Spliterator over the elements in this queue. The returned spliterator is <i>weakly consistent</i>. The Spliterator reports method_2 and method_3. @implNote The Spliterator additionally reports method_4.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]