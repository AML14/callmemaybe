[
  {
    "signature": "org.apache.commons.collections4.iterators.PeekingIterator(java.util.Iterator<? extends E> iterator)",
    "name": "org.apache.commons.collections4.iterators.PeekingIterator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.PeekingIterator",
      "name": "PeekingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.PeekingIterator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "protocol": {
      "member": "org.apache.commons.collections4.iterators.PeekingIterator(java.util.Iterator<? extends E> iterator)",
      "comment": "Constructor.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "peekingIterator(java.util.Iterator<? extends E> iterator)",
    "name": "peekingIterator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.PeekingIterator",
      "name": "PeekingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.PeekingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.collections4.iterators.PeekingIterator<E>",
      "name": "org.apache.commons.collections4.iterators.PeekingIterator<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "protocol": {
      "member": "peekingIterator(java.util.Iterator<? extends E> iterator)",
      "comment": "Decorates the specified iterator to support one-element lookahead.  If the iterator is already a PeekingIterator it is returned directly.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNext()",
    "name": "hasNext",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.PeekingIterator",
      "name": "PeekingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.PeekingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasNext()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "peek()",
    "name": "peek",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.PeekingIterator",
      "name": "PeekingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.PeekingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "peek()",
      "comment": "Returns the next element in iteration without advancing the underlying iterator. If the iterator is already exhausted, null will be returned.  Note: this method does not throw a NoSuchElementException if the iterator is already exhausted. If you want such a behavior, use method_0 instead.  The rationale behind this is to follow the javamethod_2method_3 interface which uses the same terminology.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "element()",
    "name": "element",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.PeekingIterator",
      "name": "PeekingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.PeekingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "element()",
      "comment": "Returns the next element in iteration without advancing the underlying iterator. If the iterator is already exhausted, null will be returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "next()",
    "name": "next",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.PeekingIterator",
      "name": "PeekingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.PeekingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "next()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove()",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "org.apache.commons.collections4.iterators.PeekingIterator",
      "name": "PeekingIterator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.collections4.iterators.PeekingIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "remove()",
      "comment": "{@inheritDoc}",
      "kind": "FreeText",
      "condition": ""
    }
  }
]