[
  {
    "signature": "newPacker()",
    "name": "newPacker",
    "containingClass": {
      "qualifiedName": "java.util.jar.Pack200",
      "name": "Pack200",
      "isArray": false
    },
    "targetClass": "java.util.jar.Pack200",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.jar.Pack200$Packer",
      "name": "java.util.jar.Pack200$Packer",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "newPacker()",
      "comment": "Obtain new instance of a class that implements Packer.  <li><p>If the system property <tt>javamethod_0method_1method_2method_3</tt> is defined, then the value is taken to be the fully-qualified name of a concrete implementation class, which must implement Packer. This class is loaded and instantiated. If this process fails then an unspecified error is thrown.</p></li> <li><p>If an implementation has not been specified with the system property, then the system-default implementation class is instantiated, and the result is returned.</p></li>  <p>Note: The returned object is not guaranteed to operate correctly if multiple threads use it at the same time. A multi-threaded application should either allocate multiple packer engines, or else serialize use of one engine with a lock.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "newUnpacker()",
    "name": "newUnpacker",
    "containingClass": {
      "qualifiedName": "java.util.jar.Pack200",
      "name": "Pack200",
      "isArray": false
    },
    "targetClass": "java.util.jar.Pack200",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.jar.Pack200$Unpacker",
      "name": "java.util.jar.Pack200$Unpacker",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "newUnpacker()",
      "comment": "Obtain new instance of a class that implements Unpacker.  <li><p>If the system property <tt>javamethod_0method_1method_2method_3</tt> is defined, then the value is taken to be the fully-qualified name of a concrete implementation class, which must implement Unpacker. The class is loaded and instantiated. If this process fails then an unspecified error is thrown.</p></li> <li><p>If an implementation has not been specified with the system property, then the system-default implementation class is instantiated, and the result is returned.</p></li>  <p>Note: The returned object is not guaranteed to operate correctly if multiple threads use it at the same time. A multi-threaded application should either allocate multiple unpacker engines, or else serialize use of one engine with a lock.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]