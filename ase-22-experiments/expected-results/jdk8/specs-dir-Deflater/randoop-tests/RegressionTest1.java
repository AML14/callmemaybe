import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getTotalIn();
        boolean boolean49 = deflater2.needsInput();
        deflater2.end();
        boolean boolean51 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        int int26 = deflater1.getTotalIn();
        long long27 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        deflater29.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater29.setDictionary(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = deflater1.deflate(byteArray42, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        java.lang.Class<?> wildcardClass25 = byteArray21.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        long long18 = deflater1.getBytesWritten();
        long long19 = deflater1.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.reset();
        boolean boolean4 = deflater1.finished();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater6.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater19.finish();
        long long31 = deflater19.getBytesRead();
        deflater19.reset();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater19.setInput(byteArray39, (int) (short) 0, (int) (short) 1);
        deflater6.setInput(byteArray39);
        int int44 = deflater1.deflate(byteArray39);
        java.lang.Class<?> wildcardClass45 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) 0, true);
        deflater2.end();
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        deflater1.setLevel((int) (short) 0);
        boolean boolean24 = deflater1.needsInput();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater27.setInput(byteArray39);
        deflater25.setInput(byteArray39);
        deflater2.setInput(byteArray39);
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        deflater2.setInput(byteArray65);
        deflater2.finish();
        long long71 = deflater2.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        int int58 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        int int62 = deflater60.getTotalIn();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater60.setInput(byteArray69);
        deflater60.finish();
        long long72 = deflater60.getBytesRead();
        deflater60.reset();
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater60.setInput(byteArray80, (int) (short) 0, (int) (short) 1);
        int int84 = deflater1.deflate(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-1, -97, 17, 0, 5, 53]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 6 + "'", int84 == 6);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        deflater2.end();
        deflater2.setLevel((int) (short) -1);
        deflater2.end();
        boolean boolean10 = deflater2.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (short) -1, false);
        deflater13.finish();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        long long17 = deflater16.getBytesWritten();
        int int18 = deflater16.getTotalOut();
        long long19 = deflater16.getBytesWritten();
        deflater16.reset();
        deflater16.reset();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        int int26 = deflater23.getTotalIn();
        int int27 = deflater23.getTotalIn();
        long long28 = deflater23.getBytesWritten();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater30.reset();
        deflater30.reset();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater((int) (byte) 1);
        long long58 = deflater57.getBytesWritten();
        int int59 = deflater57.getTotalOut();
        long long60 = deflater57.getBytesWritten();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        deflater62.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater62.setDictionary(byteArray75);
        deflater57.setDictionary(byteArray75);
        deflater30.setInput(byteArray75);
        deflater23.setDictionary(byteArray75, 2, (int) (short) 0);
        int int83 = deflater16.deflate(byteArray75);
        int int84 = deflater13.deflate(byteArray75);
        deflater2.setInput(byteArray75);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[120, -100, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 6 + "'", int84 == 6);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(100, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        deflater1.setDictionary(byteArray40);
        deflater1.end();
        boolean boolean47 = deflater1.finished();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        int int66 = deflater64.getTotalIn();
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater64.setInput(byteArray73);
        deflater64.finish();
        long long76 = deflater64.getBytesRead();
        deflater64.reset();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater64.setInput(byteArray84, (int) (short) 0, (int) (short) 1);
        deflater49.setDictionary(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = deflater1.deflate(byteArray84, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater33.setInput(byteArray53, (int) (short) 0, (int) (short) 1);
        deflater18.setDictionary(byteArray53);
        int int58 = deflater4.deflate(byteArray53);
        int int61 = deflater1.deflate(byteArray53, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater();
        deflater62.reset();
        long long64 = deflater62.getBytesWritten();
        int int65 = deflater62.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 1 };
        deflater62.setInput(byteArray68);
        deflater1.setDictionary(byteArray68);
        long long71 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        deflater2.end();
        deflater2.end();
        deflater2.setLevel((int) (byte) -1);
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        long long12 = deflater11.getBytesWritten();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater29.setInput(byteArray49, (int) (short) 0, (int) (short) 1);
        deflater14.setDictionary(byteArray49);
        deflater11.setInput(byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = deflater2.deflate(byteArray49, (int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        deflater2.reset();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        int int19 = deflater5.getTotalIn();
        deflater5.finish();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater(3, true);
        int int24 = deflater23.getAdler();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((-1), true);
        long long28 = deflater27.getBytesWritten();
        deflater27.setLevel(2);
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater47.setInput(byteArray67, (int) (short) 0, (int) (short) 1);
        deflater32.setDictionary(byteArray67);
        deflater27.setInput(byteArray67);
        deflater23.setDictionary(byteArray67);
        deflater5.setInput(byteArray67);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = deflater2.deflate(byteArray67, 100, 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        int int18 = deflater1.getTotalIn();
        int int19 = deflater1.getTotalOut();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(0);
        int int3 = deflater2.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        long long6 = deflater5.getBytesRead();
        long long7 = deflater5.getBytesRead();
        long long8 = deflater5.getBytesWritten();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.finish();
        long long22 = deflater10.getBytesRead();
        deflater10.reset();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater10.setInput(byteArray30, (int) (short) 0, (int) (short) 1);
        deflater5.setInput(byteArray30);
        int int35 = deflater2.deflate(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            deflater0.setInput(byteArray30, (-1), 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        long long8 = deflater1.getBytesWritten();
        deflater1.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        int int63 = deflater1.getTotalOut();
        java.lang.Class<?> wildcardClass64 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        deflater1.end();
        boolean boolean20 = deflater1.needsInput();
        deflater1.finish();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getAdler();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        int int30 = deflater27.getTotalIn();
        deflater27.finish();
        deflater27.reset();
        boolean boolean33 = deflater27.finished();
        long long34 = deflater27.getBytesRead();
        long long35 = deflater27.getBytesWritten();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater41.finish();
        long long53 = deflater41.getBytesRead();
        deflater41.reset();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater56.finish();
        long long68 = deflater56.getBytesRead();
        deflater56.reset();
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater56.setInput(byteArray76, (int) (short) 0, (int) (short) 1);
        deflater41.setDictionary(byteArray76);
        deflater37.setInput(byteArray76);
        deflater27.setInput(byteArray76);
        int int83 = deflater23.deflate(byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray76, (int) ' ', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.end();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getAdler();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater18.setInput(byteArray31, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray31, 0, 87360012);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        int int5 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater();
        deflater6.reset();
        long long8 = deflater6.getBytesWritten();
        int int9 = deflater6.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean12 = deflater11.finished();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater28.setDictionary(byteArray63);
        int int68 = deflater14.deflate(byteArray63);
        int int71 = deflater11.deflate(byteArray63, (int) (byte) 1, 2);
        int int74 = deflater6.deflate(byteArray63, 0, 1);
        deflater2.setInput(byteArray63);
        java.lang.Class<?> wildcardClass76 = byteArray63.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        long long8 = deflater7.getBytesWritten();
        int int9 = deflater7.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater11.finish();
        long long23 = deflater11.getBytesRead();
        deflater11.reset();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater26.finish();
        long long38 = deflater26.getBytesRead();
        deflater26.reset();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater26.setInput(byteArray46, (int) (short) 0, (int) (short) 1);
        deflater11.setDictionary(byteArray46);
        int int51 = deflater7.deflate(byteArray46);
        deflater2.setDictionary(byteArray46);
        int int53 = deflater2.getTotalIn();
        int int54 = deflater2.getAdler();
        int int55 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 118882828 + "'", int54 == 118882828);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        int int53 = deflater1.deflate(byteArray51);
        deflater1.finish();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        long long57 = deflater56.getBytesWritten();
        int int58 = deflater56.getTotalOut();
        long long59 = deflater56.getBytesWritten();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater((int) (byte) 1);
        deflater61.reset();
        deflater61.reset();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater61.setDictionary(byteArray74);
        deflater56.setDictionary(byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = deflater1.deflate(byteArray74, (int) (byte) 0, 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.finish();
        int int4 = deflater1.getAdler();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean7 = deflater6.finished();
        deflater6.reset();
        int int9 = deflater6.getTotalIn();
        boolean boolean10 = deflater6.finished();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean13 = deflater12.finished();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        deflater29.setDictionary(byteArray64);
        int int69 = deflater15.deflate(byteArray64);
        int int72 = deflater12.deflate(byteArray64, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        int int76 = deflater74.getTotalIn();
        deflater74.finish();
        java.util.zip.Deflater deflater79 = new java.util.zip.Deflater((int) (byte) 1);
        deflater79.reset();
        int int81 = deflater79.getTotalIn();
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater79.setInput(byteArray88);
        deflater74.setInput(byteArray88);
        deflater12.setInput(byteArray88);
        deflater6.setInput(byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = deflater1.deflate(byteArray88, 10, 3, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        long long2 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater(1, true);
        boolean boolean6 = deflater5.needsInput();
        long long7 = deflater5.getBytesWritten();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        int int12 = deflater9.getTotalIn();
        deflater9.finish();
        deflater9.reset();
        boolean boolean15 = deflater9.finished();
        long long16 = deflater9.getBytesRead();
        long long17 = deflater9.getBytesWritten();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater38.setInput(byteArray58, (int) (short) 0, (int) (short) 1);
        deflater23.setDictionary(byteArray58);
        deflater19.setInput(byteArray58);
        deflater9.setInput(byteArray58);
        deflater5.setDictionary(byteArray58, 2, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray58, (int) 'a', 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        deflater1.end();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (short) -1, false);
        long long30 = deflater29.getBytesWritten();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater29.setDictionary(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = deflater1.deflate(byteArray41, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        deflater2.finish();
        deflater2.reset();
        long long25 = deflater2.getBytesRead();
        deflater2.reset();
        byte[] byteArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray27, (int) (byte) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, false);
        boolean boolean3 = deflater2.finished();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        deflater9.setDictionary(byteArray44);
        deflater5.setInput(byteArray44);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = deflater2.deflate(byteArray44, (int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        byte[] byteArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int5 = deflater2.deflate(byteArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        boolean boolean25 = deflater1.needsInput();
        deflater1.reset();
        boolean boolean27 = deflater1.needsInput();
        int int28 = deflater1.getAdler();
        deflater1.finish();
        int int30 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        java.lang.Class<?> wildcardClass16 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        deflater1.finish();
        long long64 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        int int69 = deflater66.getTotalIn();
        deflater66.finish();
        deflater66.reset();
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater((int) (byte) 1);
        deflater73.reset();
        int int75 = deflater73.getTotalIn();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater73.setInput(byteArray82);
        deflater66.setInput(byteArray82);
        int int85 = deflater1.deflate(byteArray82);
        byte[] byteArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int87 = deflater1.deflate(byteArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[120, 63, 7, 22, 2, 12]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 6 + "'", int85 == 6);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        boolean boolean13 = deflater1.needsInput();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater(3, true);
        int int17 = deflater16.getAdler();
        deflater16.setStrategy(0);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean23 = deflater22.needsInput();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater28.setInput(byteArray40);
        deflater26.setInput(byteArray40);
        deflater26.setStrategy(0);
        boolean boolean46 = deflater26.needsInput();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater51.setInput(byteArray63);
        deflater49.setInput(byteArray63);
        deflater26.setInput(byteArray63);
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater69.setInput(byteArray78);
        deflater69.finish();
        long long81 = deflater69.getBytesRead();
        deflater69.reset();
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater69.setInput(byteArray89, (int) (short) 0, (int) (short) 1);
        deflater26.setInput(byteArray89);
        int int94 = deflater22.deflate(byteArray89);
        deflater16.setInput(byteArray89, 2, 0);
        deflater1.setInput(byteArray89);
        boolean boolean99 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        deflater2.end();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater1.setInput(byteArray15);
        int int18 = deflater1.getTotalIn();
        int int19 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater34.setInput(byteArray54, (int) (short) 0, (int) (short) 1);
        deflater21.setInput(byteArray54);
        deflater1.setDictionary(byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        int int13 = deflater1.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        byte[] byteArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray10, (int) (short) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getAdler();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((-1), true);
        int int11 = deflater10.getAdler();
        boolean boolean12 = deflater10.finished();
        boolean boolean13 = deflater10.needsInput();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (short) -1, true);
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        int int21 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater26.setInput(byteArray38);
        deflater24.setInput(byteArray38);
        deflater24.setStrategy(0);
        boolean boolean44 = deflater24.needsInput();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getTotalIn();
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater52.setInput(byteArray61);
        deflater49.setInput(byteArray61);
        deflater47.setInput(byteArray61);
        deflater24.setInput(byteArray61);
        java.util.zip.Deflater deflater67 = new java.util.zip.Deflater((int) (byte) 1);
        deflater67.reset();
        int int69 = deflater67.getTotalIn();
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater67.setInput(byteArray76);
        deflater67.finish();
        long long79 = deflater67.getBytesRead();
        deflater67.reset();
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater67.setInput(byteArray87, (int) (short) 0, (int) (short) 1);
        deflater24.setInput(byteArray87);
        int int92 = deflater18.deflate(byteArray87);
        deflater16.setInput(byteArray87, 1, 0);
        deflater10.setDictionary(byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            int int99 = deflater1.deflate(byteArray87, (int) (byte) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        int int21 = deflater20.getTotalOut();
        int int22 = deflater20.getTotalOut();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getAdler();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater52.setInput(byteArray65, 0, 0);
        int int70 = deflater50.deflate(byteArray65);
        deflater24.setInput(byteArray65);
        deflater20.setDictionary(byteArray65);
        deflater1.setInput(byteArray65);
        int int74 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        long long18 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        deflater20.finish();
        int int24 = deflater20.getTotalOut();
        boolean boolean25 = deflater20.needsInput();
        deflater20.setLevel((int) (short) 0);
        int int28 = deflater20.getTotalIn();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (short) -1, false);
        int int32 = deflater31.getTotalIn();
        int int33 = deflater31.getTotalIn();
        boolean boolean34 = deflater31.finished();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        long long37 = deflater36.getBytesWritten();
        int int38 = deflater36.getTotalIn();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater55.finish();
        long long67 = deflater55.getBytesRead();
        deflater55.reset();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater55.setInput(byteArray75, (int) (short) 0, (int) (short) 1);
        deflater40.setDictionary(byteArray75);
        int int80 = deflater36.deflate(byteArray75);
        deflater31.setDictionary(byteArray75);
        int int82 = deflater20.deflate(byteArray75);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = deflater1.deflate(byteArray75, (int) '#', 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        deflater1.setDictionary(byteArray40);
        deflater1.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(87360012);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getTotalIn();
        int int16 = deflater1.getTotalIn();
        deflater1.reset();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        long long2 = deflater1.getBytesRead();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        int int19 = deflater5.getTotalIn();
        deflater5.finish();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater(3, true);
        int int24 = deflater23.getAdler();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((-1), true);
        long long28 = deflater27.getBytesWritten();
        deflater27.setLevel(2);
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater47.setInput(byteArray67, (int) (short) 0, (int) (short) 1);
        deflater32.setDictionary(byteArray67);
        deflater27.setInput(byteArray67);
        deflater23.setDictionary(byteArray67);
        deflater5.setInput(byteArray67);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = deflater1.deflate(byteArray67, 100, (int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalOut();
        java.lang.Class<?> wildcardClass5 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.finished();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        int int29 = deflater15.getAdler();
        boolean boolean30 = deflater15.needsInput();
        int int31 = deflater15.getTotalIn();
        deflater15.reset();
        int int33 = deflater15.getAdler();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        deflater35.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater35.setDictionary(byteArray48);
        deflater15.setInput(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray48, 87360012, 118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        deflater8.finish();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater8.setInput(byteArray22);
        int int25 = deflater5.deflate(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray22, (int) 'a', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((-1), true);
        long long5 = deflater4.getBytesWritten();
        deflater4.setLevel(2);
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        deflater9.setDictionary(byteArray44);
        deflater4.setInput(byteArray44);
        long long50 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        deflater52.reset();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater52.setDictionary(byteArray65);
        deflater4.setInput(byteArray65);
        deflater1.setDictionary(byteArray65, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        int int58 = deflater1.getTotalIn();
        deflater1.end();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        int int19 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater21.setInput(byteArray41, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getAdler();
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater((int) (byte) 1);
        deflater53.reset();
        int int55 = deflater53.getTotalIn();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater53.setInput(byteArray62);
        deflater49.setInput(byteArray62, 0, 0);
        int int67 = deflater47.deflate(byteArray62);
        deflater21.setInput(byteArray62);
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater((int) (byte) 1);
        deflater73.reset();
        int int75 = deflater73.getTotalIn();
        deflater73.finish();
        java.util.zip.Deflater deflater78 = new java.util.zip.Deflater((int) (byte) 1);
        deflater78.reset();
        int int80 = deflater78.getTotalIn();
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater78.setInput(byteArray87);
        deflater73.setInput(byteArray87);
        int int90 = deflater70.deflate(byteArray87);
        deflater21.setInput(byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray87, 1, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        deflater7.finish();
        long long11 = deflater7.getBytesWritten();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        long long14 = deflater13.getBytesRead();
        long long15 = deflater13.getBytesRead();
        long long16 = deflater13.getBytesWritten();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater18.setInput(byteArray38, (int) (short) 0, (int) (short) 1);
        deflater13.setInput(byteArray38);
        deflater7.setInput(byteArray38);
        deflater1.setDictionary(byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        deflater1.reset();
        boolean boolean9 = deflater1.finished();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(6, true);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        boolean boolean1 = deflater0.needsInput();
        deflater0.setLevel((int) (short) -1);
        byte[] byteArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater0.setInput(byteArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        deflater2.end();
        deflater2.setLevel((int) (short) -1);
        deflater2.end();
        java.lang.Class<?> wildcardClass10 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        deflater21.finish();
        long long25 = deflater21.getBytesRead();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.reset();
        boolean boolean39 = deflater27.needsInput();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        int int52 = deflater27.deflate(byteArray50);
        int int53 = deflater21.deflate(byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = deflater2.deflate(byteArray50, (int) (short) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        long long20 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getAdler();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater22.setInput(byteArray35, 0, 0);
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        int int42 = deflater41.getTotalOut();
        int int43 = deflater41.getTotalOut();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater((int) (byte) 1);
        deflater73.reset();
        int int75 = deflater73.getAdler();
        java.util.zip.Deflater deflater77 = new java.util.zip.Deflater((int) (byte) 1);
        deflater77.reset();
        int int79 = deflater77.getTotalIn();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater77.setInput(byteArray86);
        deflater73.setInput(byteArray86, 0, 0);
        int int91 = deflater71.deflate(byteArray86);
        deflater45.setInput(byteArray86);
        deflater41.setDictionary(byteArray86);
        deflater22.setInput(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray86, 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        long long8 = deflater7.getBytesWritten();
        int int9 = deflater7.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater11.finish();
        long long23 = deflater11.getBytesRead();
        deflater11.reset();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater26.finish();
        long long38 = deflater26.getBytesRead();
        deflater26.reset();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater26.setInput(byteArray46, (int) (short) 0, (int) (short) 1);
        deflater11.setDictionary(byteArray46);
        int int51 = deflater7.deflate(byteArray46);
        deflater2.setDictionary(byteArray46);
        int int53 = deflater2.getTotalIn();
        int int54 = deflater2.getAdler();
        int int55 = deflater2.getTotalIn();
        java.lang.Class<?> wildcardClass56 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 118882828 + "'", int54 == 118882828);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        long long46 = deflater1.getBytesWritten();
        int int47 = deflater1.getTotalOut();
        int int48 = deflater1.getAdler();
        java.lang.Class<?> wildcardClass49 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        int int8 = deflater1.getAdler();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        int int11 = deflater10.getTotalOut();
        int int12 = deflater10.getTotalOut();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getAdler();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater42.setInput(byteArray55, 0, 0);
        int int60 = deflater40.deflate(byteArray55);
        deflater14.setInput(byteArray55);
        deflater10.setDictionary(byteArray55);
        deflater1.setDictionary(byteArray55, 6, 0);
        boolean boolean66 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater(3, true);
        int int17 = deflater16.getAdler();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((-1), true);
        long long21 = deflater20.getBytesWritten();
        deflater20.setLevel(2);
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater40.setInput(byteArray60, (int) (short) 0, (int) (short) 1);
        deflater25.setDictionary(byteArray60);
        deflater20.setInput(byteArray60);
        deflater16.setDictionary(byteArray60);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = deflater1.deflate(byteArray60, 100, (int) (byte) 0, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater24.setInput(byteArray36);
        deflater22.setInput(byteArray36);
        deflater22.setStrategy(0);
        boolean boolean42 = deflater22.needsInput();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater47.setInput(byteArray59);
        deflater45.setInput(byteArray59);
        deflater22.setInput(byteArray59);
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater22.setInput(byteArray85);
        int int90 = deflater2.deflate(byteArray85);
        deflater2.setStrategy((int) (short) 1);
        deflater2.reset();
        deflater2.reset();
        long long95 = deflater2.getBytesRead();
        long long96 = deflater2.getBytesWritten();
        java.lang.Class<?> wildcardClass97 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) 100, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater41.setInput(byteArray53);
        deflater39.setInput(byteArray53);
        deflater39.setStrategy(0);
        boolean boolean59 = deflater39.needsInput();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        java.util.zip.Deflater deflater67 = new java.util.zip.Deflater((int) (byte) 1);
        deflater67.reset();
        int int69 = deflater67.getTotalIn();
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater67.setInput(byteArray76);
        deflater64.setInput(byteArray76);
        deflater62.setInput(byteArray76);
        deflater39.setInput(byteArray76);
        deflater23.setDictionary(byteArray76);
        deflater1.setDictionary(byteArray76);
        java.lang.Class<?> wildcardClass83 = byteArray76.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        long long8 = deflater1.getBytesWritten();
        int int9 = deflater1.getTotalIn();
        java.lang.Class<?> wildcardClass10 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        deflater2.end();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        long long9 = deflater8.getBytesRead();
        long long10 = deflater8.getBytesRead();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.finish();
        long long24 = deflater12.getBytesRead();
        deflater12.reset();
        int int26 = deflater12.getAdler();
        boolean boolean27 = deflater12.needsInput();
        int int28 = deflater12.getTotalIn();
        int int29 = deflater12.getTotalIn();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater31.finish();
        long long43 = deflater31.getBytesRead();
        deflater31.reset();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater46.finish();
        long long58 = deflater46.getBytesRead();
        deflater46.reset();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater46.setInput(byteArray66, (int) (short) 0, (int) (short) 1);
        int int70 = deflater31.deflate(byteArray66);
        deflater12.setDictionary(byteArray66);
        deflater8.setInput(byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = deflater2.deflate(byteArray66, (int) (short) 100, (int) (byte) 100, 87360012);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        deflater0.reset();
        long long2 = deflater0.getBytesWritten();
        deflater0.finish();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        deflater5.finish();
        int int9 = deflater5.getTotalOut();
        boolean boolean10 = deflater5.needsInput();
        long long11 = deflater5.getBytesRead();
        deflater5.finish();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) -1);
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater16.setInput(byteArray28);
        boolean boolean31 = deflater16.needsInput();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater51.setInput(byteArray63);
        deflater49.setInput(byteArray63);
        deflater49.setStrategy(0);
        boolean boolean69 = deflater49.needsInput();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        java.util.zip.Deflater deflater77 = new java.util.zip.Deflater((int) (byte) 1);
        deflater77.reset();
        int int79 = deflater77.getTotalIn();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater77.setInput(byteArray86);
        deflater74.setInput(byteArray86);
        deflater72.setInput(byteArray86);
        deflater49.setInput(byteArray86);
        deflater33.setDictionary(byteArray86);
        int int92 = deflater16.deflate(byteArray86);
        int int93 = deflater14.deflate(byteArray86);
        deflater5.setDictionary(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            int int97 = deflater0.deflate(byteArray86, (int) (byte) 10, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy(0);
        int int6 = deflater2.getTotalOut();
        boolean boolean7 = deflater2.finished();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater9.setInput(byteArray29, (int) (short) 0, (int) (short) 1);
        deflater9.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        int int59 = deflater9.deflate(byteArray55);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = deflater2.deflate(byteArray55, 3, 118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesRead();
        java.lang.Class<?> wildcardClass3 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        deflater2.finish();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        int int18 = deflater7.getAdler();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((-1), true);
        long long36 = deflater35.getBytesWritten();
        deflater35.setLevel(2);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater55.finish();
        long long67 = deflater55.getBytesRead();
        deflater55.reset();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater55.setInput(byteArray75, (int) (short) 0, (int) (short) 1);
        deflater40.setDictionary(byteArray75);
        deflater35.setInput(byteArray75);
        deflater20.setInput(byteArray75, 3, 1);
        int int84 = deflater7.deflate(byteArray75);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = deflater2.deflate(byteArray75, 1, (int) (byte) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[120, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.reset();
        int int4 = deflater1.getTotalIn();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        int int10 = deflater7.getTotalIn();
        int int11 = deflater7.getTotalIn();
        long long12 = deflater7.getBytesWritten();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater14.reset();
        deflater14.reset();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        long long42 = deflater41.getBytesWritten();
        int int43 = deflater41.getTotalOut();
        long long44 = deflater41.getBytesWritten();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        deflater46.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater46.setDictionary(byteArray59);
        deflater41.setDictionary(byteArray59);
        deflater14.setInput(byteArray59);
        deflater7.setDictionary(byteArray59, 2, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = deflater1.deflate(byteArray59, 3, (int) (byte) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater8.finish();
        long long20 = deflater8.getBytesRead();
        deflater8.reset();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater8.setInput(byteArray28, (int) (short) 0, (int) (short) 1);
        deflater8.reset();
        deflater8.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        long long36 = deflater35.getBytesWritten();
        int int37 = deflater35.getTotalOut();
        long long38 = deflater35.getBytesWritten();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        deflater40.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater40.setDictionary(byteArray53);
        deflater35.setDictionary(byteArray53);
        deflater8.setInput(byteArray53);
        deflater1.setDictionary(byteArray53, 2, (int) (short) 0);
        deflater1.setLevel((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        long long40 = deflater1.getBytesWritten();
        deflater1.end();
        java.lang.Class<?> wildcardClass42 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getTotalIn();
        deflater2.reset();
        deflater2.end();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((-1));
        java.util.zip.Deflater deflater3 = new java.util.zip.Deflater((int) (byte) 1);
        deflater3.reset();
        int int5 = deflater3.getTotalIn();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater3.setInput(byteArray12);
        int int14 = deflater3.getAdler();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater16.finish();
        long long28 = deflater16.getBytesRead();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((-1), true);
        long long32 = deflater31.getBytesWritten();
        deflater31.setLevel(2);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater51.setInput(byteArray71, (int) (short) 0, (int) (short) 1);
        deflater36.setDictionary(byteArray71);
        deflater31.setInput(byteArray71);
        deflater16.setInput(byteArray71, 3, 1);
        int int80 = deflater3.deflate(byteArray71);
        int int81 = deflater1.deflate(byteArray71);
        boolean boolean82 = deflater1.finished();
        byte[] byteArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int87 = deflater1.deflate(byteArray83, 2, 3, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[120, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) 0, false);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        deflater2.finish();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater(3, true);
        int int7 = deflater6.getAdler();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        int int23 = deflater9.getAdler();
        boolean boolean24 = deflater9.needsInput();
        int int25 = deflater9.getTotalIn();
        deflater9.reset();
        int int27 = deflater9.getAdler();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater51.setInput(byteArray63);
        deflater49.setInput(byteArray63);
        deflater49.setStrategy(0);
        boolean boolean69 = deflater49.needsInput();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        java.util.zip.Deflater deflater77 = new java.util.zip.Deflater((int) (byte) 1);
        deflater77.reset();
        int int79 = deflater77.getTotalIn();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater77.setInput(byteArray86);
        deflater74.setInput(byteArray86);
        deflater72.setInput(byteArray86);
        deflater49.setInput(byteArray86);
        deflater33.setDictionary(byteArray86);
        int int92 = deflater29.deflate(byteArray86);
        int int93 = deflater9.deflate(byteArray86);
        deflater6.setInput(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray86, 0, 118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        long long20 = deflater1.getBytesWritten();
        deflater1.reset();
        int int22 = deflater1.getAdler();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        int int38 = deflater24.getAdler();
        byte[] byteArray40 = new byte[] { (byte) 10 };
        deflater24.setDictionary(byteArray40);
        deflater1.setDictionary(byteArray40);
        boolean boolean43 = deflater1.needsInput();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        int int6 = deflater1.getTotalOut();
        deflater1.finish();
        int int8 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater13.setInput(byteArray25);
        deflater11.setInput(byteArray25);
        deflater11.setStrategy(0);
        boolean boolean31 = deflater11.needsInput();
        long long32 = deflater11.getBytesRead();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        long long35 = deflater34.getBytesWritten();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getTotalIn();
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater52.setInput(byteArray61);
        deflater52.finish();
        long long64 = deflater52.getBytesRead();
        deflater52.reset();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater52.setInput(byteArray72, (int) (short) 0, (int) (short) 1);
        deflater37.setDictionary(byteArray72);
        deflater34.setInput(byteArray72);
        int int78 = deflater11.deflate(byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = deflater1.deflate(byteArray72, (int) (byte) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        deflater4.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater19.finish();
        long long31 = deflater19.getBytesRead();
        deflater19.reset();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater19.setInput(byteArray39, (int) (short) 0, (int) (short) 1);
        deflater4.setDictionary(byteArray39);
        deflater1.setInput(byteArray39);
        deflater1.end();
        deflater1.end();
        deflater1.setLevel((int) (short) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.finish();
        byte[] byteArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int8 = deflater1.deflate(byteArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalOut();
        long long5 = deflater1.getBytesRead();
        boolean boolean6 = deflater1.finished();
        int int7 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        int int6 = deflater1.getTotalOut();
        deflater1.setLevel((int) (short) -1);
        boolean boolean9 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        deflater1.reset();
        long long18 = deflater1.getBytesWritten();
        int int19 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        boolean boolean25 = deflater1.needsInput();
        deflater1.reset();
        boolean boolean27 = deflater1.needsInput();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (short) 1, false);
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater35.setInput(byteArray47);
        deflater33.setInput(byteArray47);
        int int51 = deflater30.deflate(byteArray47);
        int int52 = deflater1.deflate(byteArray47);
        int int53 = deflater1.getTotalOut();
        byte[] byteArray54 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int58 = deflater1.deflate(byteArray54, 1, (int) 'a', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        int int18 = deflater1.getTotalIn();
        int int19 = deflater1.getTotalOut();
        byte[] byteArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int21 = deflater1.deflate(byteArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        boolean boolean4 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        long long21 = deflater20.getBytesWritten();
        int int22 = deflater20.getTotalOut();
        long long23 = deflater20.getBytesWritten();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        deflater25.reset();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater25.setDictionary(byteArray38);
        deflater20.setDictionary(byteArray38);
        deflater1.setDictionary(byteArray38, 3, (int) (byte) 1);
        int int45 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16777472 + "'", int45 == 16777472);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) 0, true);
        boolean boolean3 = deflater2.needsInput();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        deflater5.reset();
        deflater5.reset();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        deflater10.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater10.setDictionary(byteArray23);
        int int26 = deflater5.deflate(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray23, 2, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        deflater1.end();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        long long48 = deflater2.getBytesWritten();
        deflater2.end();
        java.lang.Class<?> wildcardClass50 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        deflater1.setLevel(3);
        deflater1.setStrategy(2);
        deflater1.reset();
        deflater1.reset();
        boolean boolean62 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(1);
        byte[] byteArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray2, 8, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        long long8 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        int int11 = deflater10.getTotalOut();
        int int12 = deflater10.getTotalOut();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getAdler();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater42.setInput(byteArray55, 0, 0);
        int int60 = deflater40.deflate(byteArray55);
        deflater14.setInput(byteArray55);
        deflater10.setDictionary(byteArray55);
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        long long65 = deflater64.getBytesRead();
        long long66 = deflater64.getBytesRead();
        long long67 = deflater64.getBytesWritten();
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater69.setInput(byteArray78);
        deflater69.finish();
        long long81 = deflater69.getBytesRead();
        deflater69.reset();
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater69.setInput(byteArray89, (int) (short) 0, (int) (short) 1);
        deflater64.setInput(byteArray89);
        deflater10.setDictionary(byteArray89);
        // The following exception was thrown during execution in test generation
        try {
            int int97 = deflater1.deflate(byteArray89, (int) (byte) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater4.setLevel((int) (byte) -1);
        deflater4.finish();
        long long22 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        deflater24.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater50.finish();
        long long62 = deflater50.getBytesRead();
        deflater50.reset();
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater50.setInput(byteArray70, (int) (short) 0, (int) (short) 1);
        int int74 = deflater24.deflate(byteArray70);
        int int78 = deflater4.deflate(byteArray70, (int) (short) 1, 3, 0);
        deflater1.setDictionary(byteArray70);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater24.setInput(byteArray36);
        deflater22.setInput(byteArray36);
        deflater22.setStrategy(0);
        boolean boolean42 = deflater22.needsInput();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater47.setInput(byteArray59);
        deflater45.setInput(byteArray59);
        deflater22.setInput(byteArray59);
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater22.setInput(byteArray85);
        int int90 = deflater2.deflate(byteArray85);
        deflater2.setStrategy((int) (short) 1);
        int int93 = deflater2.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getAdler();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater4.setInput(byteArray17, 0, 0);
        int int22 = deflater2.deflate(byteArray17);
        deflater2.reset();
        int int24 = deflater2.getTotalIn();
        boolean boolean25 = deflater2.needsInput();
        boolean boolean26 = deflater2.finished();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater28.setInput(byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = deflater2.deflate(byteArray40, (int) 'a', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy(16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        boolean boolean10 = deflater1.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (short) -1, false);
        int int14 = deflater13.getTotalIn();
        int int15 = deflater13.getTotalIn();
        boolean boolean16 = deflater13.finished();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        long long19 = deflater18.getBytesWritten();
        int int20 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater37.setInput(byteArray57, (int) (short) 0, (int) (short) 1);
        deflater22.setDictionary(byteArray57);
        int int62 = deflater18.deflate(byteArray57);
        deflater13.setDictionary(byteArray57);
        int int64 = deflater1.deflate(byteArray57);
        java.lang.Class<?> wildcardClass65 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        long long4 = deflater2.getBytesWritten();
        int int5 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean8 = deflater7.finished();
        deflater7.reset();
        boolean boolean10 = deflater7.finished();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.reset();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater25.setInput(byteArray45, (int) (short) 0, (int) (short) 1);
        deflater12.setInput(byteArray45);
        int int50 = deflater7.deflate(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray45, 9, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        deflater2.end();
        boolean boolean7 = deflater2.needsInput();
        deflater2.end();
        boolean boolean9 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        deflater7.finish();
        long long11 = deflater7.getBytesWritten();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        long long14 = deflater13.getBytesRead();
        long long15 = deflater13.getBytesRead();
        long long16 = deflater13.getBytesWritten();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater18.setInput(byteArray38, (int) (short) 0, (int) (short) 1);
        deflater13.setInput(byteArray38);
        deflater7.setInput(byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray38, 8, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        deflater1.finish();
        long long64 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        int int69 = deflater66.getTotalIn();
        deflater66.finish();
        deflater66.reset();
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater((int) (byte) 1);
        deflater73.reset();
        int int75 = deflater73.getTotalIn();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater73.setInput(byteArray82);
        deflater66.setInput(byteArray82);
        int int85 = deflater1.deflate(byteArray82);
        deflater1.setLevel((int) (byte) 0);
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[120, 63, 7, 22, 2, 12]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 6 + "'", int85 == 6);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        long long16 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        long long19 = deflater18.getBytesRead();
        long long20 = deflater18.getBytesRead();
        deflater18.reset();
        boolean boolean22 = deflater18.needsInput();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((-1), true);
        long long40 = deflater39.getBytesWritten();
        deflater39.setLevel(2);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        int int61 = deflater59.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater59.setInput(byteArray68);
        deflater59.finish();
        long long71 = deflater59.getBytesRead();
        deflater59.reset();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater59.setInput(byteArray79, (int) (short) 0, (int) (short) 1);
        deflater44.setDictionary(byteArray79);
        deflater39.setInput(byteArray79);
        deflater24.setInput(byteArray79, 3, 1);
        deflater18.setDictionary(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray79, (int) (byte) 10, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        boolean boolean25 = deflater1.needsInput();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        deflater40.reset();
        deflater40.reset();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        deflater45.reset();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater45.setDictionary(byteArray58);
        int int61 = deflater40.deflate(byteArray58);
        deflater27.setDictionary(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray58, 87360012, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        long long5 = deflater1.getBytesWritten();
        boolean boolean6 = deflater1.needsInput();
        int int7 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        boolean boolean20 = deflater2.finished();
        boolean boolean21 = deflater2.finished();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getAdler();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater23.setInput(byteArray36, 0, 0);
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        int int43 = deflater42.getTotalOut();
        int int44 = deflater42.getTotalOut();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater46.finish();
        long long58 = deflater46.getBytesRead();
        deflater46.reset();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater46.setInput(byteArray66, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        int int76 = deflater74.getAdler();
        java.util.zip.Deflater deflater78 = new java.util.zip.Deflater((int) (byte) 1);
        deflater78.reset();
        int int80 = deflater78.getTotalIn();
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater78.setInput(byteArray87);
        deflater74.setInput(byteArray87, 0, 0);
        int int92 = deflater72.deflate(byteArray87);
        deflater46.setInput(byteArray87);
        deflater42.setDictionary(byteArray87);
        deflater23.setInput(byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray87, 2, 16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        java.util.zip.Deflater deflater3 = new java.util.zip.Deflater();
        deflater3.reset();
        long long5 = deflater3.getBytesRead();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (short) -1, false);
        deflater8.finish();
        boolean boolean10 = deflater8.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater15.setInput(byteArray27);
        deflater13.setInput(byteArray27);
        deflater13.setStrategy(0);
        boolean boolean33 = deflater13.needsInput();
        long long34 = deflater13.getBytesWritten();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        long long37 = deflater36.getBytesWritten();
        int int38 = deflater36.getTotalIn();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater55.finish();
        long long67 = deflater55.getBytesRead();
        deflater55.reset();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater55.setInput(byteArray75, (int) (short) 0, (int) (short) 1);
        deflater40.setDictionary(byteArray75);
        int int80 = deflater36.deflate(byteArray75);
        deflater13.setInput(byteArray75, (int) (short) 1, (int) (byte) 0);
        deflater8.setDictionary(byteArray75);
        deflater3.setInput(byteArray75, 2, 0);
        deflater1.setInput(byteArray75);
        long long89 = deflater1.getBytesRead();
        deflater1.reset();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) -1, false);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        deflater4.reset();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater4.setInput(byteArray24, (int) (short) 0, (int) (short) 1);
        deflater4.reset();
        deflater4.end();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater31.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        deflater31.setInput(byteArray64);
        boolean boolean69 = deflater31.finished();
        deflater31.finish();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        int int74 = deflater72.getTotalIn();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater72.setInput(byteArray81);
        int int83 = deflater31.deflate(byteArray81);
        deflater4.setInput(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray81, (int) (byte) 0, 16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        deflater1.finish();
        boolean boolean64 = deflater1.finished();
        java.lang.Class<?> wildcardClass65 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        deflater4.reset();
        int int18 = deflater4.getAdler();
        boolean boolean19 = deflater4.needsInput();
        int int20 = deflater4.getTotalIn();
        int int21 = deflater4.getTotalIn();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater38.setInput(byteArray58, (int) (short) 0, (int) (short) 1);
        int int62 = deflater23.deflate(byteArray58);
        deflater4.setDictionary(byteArray58);
        deflater1.setInput(byteArray58);
        long long65 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater67 = new java.util.zip.Deflater((int) (byte) 1);
        deflater67.reset();
        int int69 = deflater67.getTotalIn();
        int int70 = deflater67.getTotalIn();
        deflater67.finish();
        deflater67.reset();
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        int int76 = deflater74.getTotalIn();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater74.setInput(byteArray83);
        deflater67.setInput(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = deflater1.deflate(byteArray83, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((-1), true);
        long long24 = deflater23.getBytesWritten();
        deflater23.setLevel(2);
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater28.setDictionary(byteArray63);
        deflater23.setInput(byteArray63);
        deflater9.setDictionary(byteArray63);
        boolean boolean70 = deflater9.finished();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        int int74 = deflater72.getTotalIn();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater72.setInput(byteArray81);
        deflater72.finish();
        long long84 = deflater72.getBytesRead();
        deflater72.reset();
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater72.setInput(byteArray92, (int) (short) 0, (int) (short) 1);
        deflater9.setInput(byteArray92);
        deflater1.setDictionary(byteArray92);
        deflater1.end();
        boolean boolean99 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) -1, true);
        long long3 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (short) -1, true);
        deflater6.setLevel((-1));
        boolean boolean9 = deflater6.needsInput();
        deflater6.finish();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        deflater12.reset();
        boolean boolean16 = deflater12.finished();
        int int17 = deflater12.getTotalOut();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getAdler();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater19.setInput(byteArray32);
        int int37 = deflater12.deflate(byteArray32, 0, 0);
        deflater6.setDictionary(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = deflater2.deflate(byteArray32, (int) ' ', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 1, true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((-1), true);
        long long17 = deflater16.getBytesWritten();
        deflater16.setLevel(2);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        deflater21.setDictionary(byteArray56);
        deflater16.setInput(byteArray56);
        deflater1.setInput(byteArray56, 3, 1);
        boolean boolean65 = deflater1.finished();
        int int66 = deflater1.getTotalOut();
        deflater1.reset();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        deflater2.finish();
        deflater2.reset();
        int int25 = deflater2.getAdler();
        boolean boolean26 = deflater2.finished();
        int int27 = deflater2.getAdler();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        long long30 = deflater29.getBytesWritten();
        int int31 = deflater29.getTotalOut();
        long long32 = deflater29.getBytesWritten();
        deflater29.reset();
        deflater29.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        int int39 = deflater36.getTotalIn();
        int int40 = deflater36.getTotalIn();
        long long41 = deflater36.getBytesWritten();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater43.reset();
        deflater43.reset();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        long long71 = deflater70.getBytesWritten();
        int int72 = deflater70.getTotalOut();
        long long73 = deflater70.getBytesWritten();
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater((int) (byte) 1);
        deflater75.reset();
        deflater75.reset();
        java.util.zip.Deflater deflater79 = new java.util.zip.Deflater((int) (byte) 1);
        deflater79.reset();
        int int81 = deflater79.getTotalIn();
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater79.setInput(byteArray88);
        deflater75.setDictionary(byteArray88);
        deflater70.setDictionary(byteArray88);
        deflater43.setInput(byteArray88);
        deflater36.setDictionary(byteArray88, 2, (int) (short) 0);
        int int96 = deflater29.deflate(byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            int int99 = deflater2.deflate(byteArray88, (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater19.setInput(byteArray31);
        deflater17.setInput(byteArray31);
        deflater17.setStrategy(0);
        boolean boolean37 = deflater17.needsInput();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater42.setInput(byteArray54);
        deflater40.setInput(byteArray54);
        deflater17.setInput(byteArray54);
        deflater1.setDictionary(byteArray54);
        int int60 = deflater1.getAdler();
        deflater1.reset();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 87360012 + "'", int60 == 87360012);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, true);
        deflater2.setLevel((-1));
        boolean boolean5 = deflater2.needsInput();
        deflater2.setLevel(0);
        long long8 = deflater2.getBytesWritten();
        java.lang.Class<?> wildcardClass9 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(16777472, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(6, false);
        deflater2.reset();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater(1, true);
        deflater6.finish();
        deflater6.finish();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater(3, true);
        int int12 = deflater11.getAdler();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        int int17 = deflater14.getTotalIn();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater22.setInput(byteArray34);
        deflater20.setInput(byteArray34);
        deflater20.setStrategy(0);
        boolean boolean40 = deflater20.needsInput();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater45.setInput(byteArray57);
        deflater43.setInput(byteArray57);
        deflater20.setInput(byteArray57);
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater63.setInput(byteArray72);
        deflater63.finish();
        long long75 = deflater63.getBytesRead();
        deflater63.reset();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater63.setInput(byteArray83, (int) (short) 0, (int) (short) 1);
        deflater20.setInput(byteArray83);
        int int88 = deflater14.deflate(byteArray83);
        deflater11.setInput(byteArray83);
        int int90 = deflater6.deflate(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = deflater2.deflate(byteArray83, 9, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[3, 0, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        deflater2.reset();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.setLevel(8);
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.needsInput();
        deflater2.reset();
        long long5 = deflater2.getBytesRead();
        deflater2.reset();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        boolean boolean4 = deflater1.needsInput();
        long long5 = deflater1.getBytesRead();
        int int6 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        long long9 = deflater8.getBytesRead();
        long long10 = deflater8.getBytesRead();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.finish();
        long long24 = deflater12.getBytesRead();
        deflater12.reset();
        int int26 = deflater12.getAdler();
        boolean boolean27 = deflater12.needsInput();
        int int28 = deflater12.getTotalIn();
        int int29 = deflater12.getTotalIn();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater31.finish();
        long long43 = deflater31.getBytesRead();
        deflater31.reset();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater46.finish();
        long long58 = deflater46.getBytesRead();
        deflater46.reset();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater46.setInput(byteArray66, (int) (short) 0, (int) (short) 1);
        int int70 = deflater31.deflate(byteArray66);
        deflater12.setDictionary(byteArray66);
        deflater8.setInput(byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray66, (int) (byte) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getTotalIn();
        deflater2.reset();
        deflater2.setLevel(3);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel(118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) '#', true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        long long18 = deflater1.getBytesWritten();
        long long19 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getAdler();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater21.setInput(byteArray34, 0, 0);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        int int41 = deflater40.getTotalOut();
        int int42 = deflater40.getTotalOut();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        int int74 = deflater72.getAdler();
        java.util.zip.Deflater deflater76 = new java.util.zip.Deflater((int) (byte) 1);
        deflater76.reset();
        int int78 = deflater76.getTotalIn();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater76.setInput(byteArray85);
        deflater72.setInput(byteArray85, 0, 0);
        int int90 = deflater70.deflate(byteArray85);
        deflater44.setInput(byteArray85);
        deflater40.setDictionary(byteArray85);
        deflater21.setInput(byteArray85);
        int int96 = deflater1.deflate(byteArray85, 0, 6);
        boolean boolean97 = deflater1.needsInput();
        boolean boolean98 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        long long19 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater21.setInput(byteArray41, (int) (short) 0, (int) (short) 1);
        deflater1.setDictionary(byteArray41);
        deflater1.finish();
        long long47 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        java.lang.Class<?> wildcardClass8 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater40.setInput(byteArray52);
        deflater38.setInput(byteArray52);
        deflater38.setStrategy(0);
        boolean boolean58 = deflater38.needsInput();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater63.setInput(byteArray75);
        deflater61.setInput(byteArray75);
        deflater38.setInput(byteArray75);
        deflater22.setDictionary(byteArray75);
        int int81 = deflater18.deflate(byteArray75);
        int int82 = deflater1.deflate(byteArray75);
        long long83 = deflater1.getBytesRead();
        deflater1.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getTotalIn();
        deflater2.reset();
        int int50 = deflater2.getAdler();
        deflater2.setStrategy((int) (short) 1);
        boolean boolean53 = deflater2.needsInput();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((-1));
        int int56 = deflater55.getTotalIn();
        boolean boolean57 = deflater55.finished();
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        deflater59.reset();
        deflater59.reset();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        deflater64.reset();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater64.setDictionary(byteArray77);
        int int80 = deflater59.deflate(byteArray77);
        int int81 = deflater55.deflate(byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray77, (int) ' ', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getAdler();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater4.setInput(byteArray17, 0, 0);
        int int22 = deflater2.deflate(byteArray17);
        deflater2.reset();
        boolean boolean24 = deflater2.needsInput();
        java.lang.Class<?> wildcardClass25 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        boolean boolean8 = deflater1.needsInput();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        long long11 = deflater10.getBytesWritten();
        int int12 = deflater10.getTotalIn();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater29.setInput(byteArray49, (int) (short) 0, (int) (short) 1);
        deflater14.setDictionary(byteArray49);
        int int54 = deflater10.deflate(byteArray49);
        deflater1.setInput(byteArray49);
        deflater1.finish();
        deflater1.setLevel(2);
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        int int62 = deflater60.getTotalIn();
        deflater60.reset();
        boolean boolean64 = deflater60.finished();
        int int65 = deflater60.getTotalOut();
        java.util.zip.Deflater deflater67 = new java.util.zip.Deflater((int) (byte) 1);
        deflater67.reset();
        int int69 = deflater67.getAdler();
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater((int) (byte) 1);
        deflater71.reset();
        int int73 = deflater71.getTotalIn();
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater71.setInput(byteArray80);
        deflater67.setInput(byteArray80);
        int int85 = deflater60.deflate(byteArray80, 0, 0);
        int int86 = deflater1.deflate(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        long long46 = deflater1.getBytesWritten();
        int int47 = deflater1.getTotalOut();
        int int48 = deflater1.getAdler();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        deflater1.reset();
        long long14 = deflater1.getBytesRead();
        boolean boolean15 = deflater1.needsInput();
        deflater1.setLevel(1);
        int int18 = deflater1.getTotalOut();
        deflater1.setStrategy((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        deflater2.reset();
        deflater2.setStrategy(0);
        long long6 = deflater2.getBytesRead();
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        boolean boolean8 = deflater1.needsInput();
        long long9 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater11.finish();
        long long23 = deflater11.getBytesRead();
        deflater11.reset();
        int int25 = deflater11.getAdler();
        boolean boolean26 = deflater11.needsInput();
        int int27 = deflater11.getTotalIn();
        int int28 = deflater11.getTotalIn();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        int int69 = deflater30.deflate(byteArray65);
        deflater11.setDictionary(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray65, 10, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        deflater4.reset();
        int int18 = deflater4.getAdler();
        boolean boolean19 = deflater4.needsInput();
        int int20 = deflater4.getTotalIn();
        int int21 = deflater4.getTotalIn();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater38.setInput(byteArray58, (int) (short) 0, (int) (short) 1);
        int int62 = deflater23.deflate(byteArray58);
        deflater4.setDictionary(byteArray58);
        deflater1.setInput(byteArray58);
        boolean boolean65 = deflater1.needsInput();
        byte[] byteArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray66, 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        int int6 = deflater1.getTotalOut();
        deflater1.finish();
        int int8 = deflater1.getAdler();
        deflater1.end();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        deflater11.reset();
        boolean boolean15 = deflater11.finished();
        int int16 = deflater11.getTotalOut();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater18.setInput(byteArray38, (int) (short) 0, (int) (short) 1);
        deflater18.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        int int68 = deflater18.deflate(byteArray64);
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater70.setInput(byteArray79);
        deflater18.setInput(byteArray79);
        deflater11.setInput(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray79, 6, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        long long25 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getAdler();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater27.setInput(byteArray40, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray40, (-1), 9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setDictionary(byteArray14);
        int int17 = deflater1.getAdler();
        int int18 = deflater1.getAdler();
        boolean boolean19 = deflater1.needsInput();
        deflater1.setLevel((int) (byte) -1);
        boolean boolean22 = deflater1.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 87360012 + "'", int17 == 87360012);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 87360012 + "'", int18 == 87360012);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        int int7 = deflater4.getTotalIn();
        int int8 = deflater4.getTotalIn();
        deflater4.end();
        boolean boolean10 = deflater4.needsInput();
        deflater4.finish();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        int int16 = deflater13.getTotalIn();
        int int17 = deflater13.getTotalIn();
        deflater13.setLevel((int) (short) 1);
        deflater13.setLevel((int) (byte) 1);
        boolean boolean22 = deflater13.finished();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (short) -1, false);
        int int26 = deflater25.getTotalIn();
        int int27 = deflater25.getTotalIn();
        boolean boolean28 = deflater25.finished();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        long long31 = deflater30.getBytesWritten();
        int int32 = deflater30.getTotalIn();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater49.setInput(byteArray69, (int) (short) 0, (int) (short) 1);
        deflater34.setDictionary(byteArray69);
        int int74 = deflater30.deflate(byteArray69);
        deflater25.setDictionary(byteArray69);
        int int76 = deflater13.deflate(byteArray69);
        deflater4.setInput(byteArray69);
        deflater1.setDictionary(byteArray69);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        int int6 = deflater1.getTotalOut();
        deflater1.finish();
        int int8 = deflater1.getAdler();
        deflater1.end();
        deflater1.setLevel(0);
        java.lang.Class<?> wildcardClass12 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        boolean boolean16 = deflater1.needsInput();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater36.setInput(byteArray48);
        deflater34.setInput(byteArray48);
        deflater34.setStrategy(0);
        boolean boolean54 = deflater34.needsInput();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater59.setInput(byteArray71);
        deflater57.setInput(byteArray71);
        deflater34.setInput(byteArray71);
        deflater18.setDictionary(byteArray71);
        int int77 = deflater1.deflate(byteArray71);
        int int78 = deflater1.getTotalOut();
        byte[] byteArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int80 = deflater1.deflate(byteArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        int int24 = deflater2.getTotalOut();
        boolean boolean25 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        deflater1.end();
        deflater1.end();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        deflater2.end();
        deflater2.setLevel((int) (short) -1);
        deflater2.end();
        boolean boolean10 = deflater2.finished();
        boolean boolean11 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater2.setDictionary(byteArray14);
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        deflater18.finish();
        long long22 = deflater18.getBytesWritten();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        long long25 = deflater24.getBytesRead();
        long long26 = deflater24.getBytesRead();
        long long27 = deflater24.getBytesWritten();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater29.setInput(byteArray49, (int) (short) 0, (int) (short) 1);
        deflater24.setInput(byteArray49);
        deflater18.setInput(byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = deflater2.deflate(byteArray49, (int) (byte) -1, 1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        deflater0.end();
        deflater0.setLevel((int) (short) 1);
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) -1);
        int int6 = deflater5.getTotalOut();
        int int7 = deflater5.getAdler();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        int int23 = deflater9.getAdler();
        boolean boolean24 = deflater9.needsInput();
        int int25 = deflater9.getTotalIn();
        int int26 = deflater9.getTotalIn();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        int int67 = deflater28.deflate(byteArray63);
        deflater9.setDictionary(byteArray63);
        int int69 = deflater5.deflate(byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            deflater0.setDictionary(byteArray63, 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        boolean boolean10 = deflater1.finished();
        long long11 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater8.setInput(byteArray20);
        deflater6.setInput(byteArray20);
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater28.setInput(byteArray40);
        deflater26.setInput(byteArray40);
        deflater26.setStrategy(0);
        boolean boolean46 = deflater26.needsInput();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater51.setInput(byteArray63);
        deflater49.setInput(byteArray63);
        deflater26.setInput(byteArray63);
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater69.setInput(byteArray78);
        deflater69.finish();
        long long81 = deflater69.getBytesRead();
        deflater69.reset();
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater69.setInput(byteArray89, (int) (short) 0, (int) (short) 1);
        deflater26.setInput(byteArray89);
        int int94 = deflater6.deflate(byteArray89);
        int int95 = deflater1.deflate(byteArray89);
        boolean boolean96 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[120, -100, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 6 + "'", int95 == 6);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        int int4 = deflater2.getTotalIn();
        java.lang.Class<?> wildcardClass5 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        deflater1.setDictionary(byteArray40);
        boolean boolean46 = deflater1.needsInput();
        int int47 = deflater1.getTotalIn();
        int int48 = deflater1.getAdler();
        java.lang.Class<?> wildcardClass49 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 118882828 + "'", int48 == 118882828);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        long long29 = deflater28.getBytesWritten();
        int int30 = deflater28.getTotalOut();
        long long31 = deflater28.getBytesWritten();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        deflater33.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater33.setDictionary(byteArray46);
        deflater28.setDictionary(byteArray46);
        deflater1.setInput(byteArray46);
        deflater1.finish();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (short) -1, true);
        deflater54.setLevel((-1));
        boolean boolean57 = deflater54.needsInput();
        deflater54.finish();
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        int int62 = deflater60.getTotalIn();
        deflater60.reset();
        boolean boolean64 = deflater60.finished();
        int int65 = deflater60.getTotalOut();
        java.util.zip.Deflater deflater67 = new java.util.zip.Deflater((int) (byte) 1);
        deflater67.reset();
        int int69 = deflater67.getAdler();
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater((int) (byte) 1);
        deflater71.reset();
        int int73 = deflater71.getTotalIn();
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater71.setInput(byteArray80);
        deflater67.setInput(byteArray80);
        int int85 = deflater60.deflate(byteArray80, 0, 0);
        deflater54.setDictionary(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray80, 0, 16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        long long40 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        deflater42.reset();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater42.setDictionary(byteArray55);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray55, (int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        boolean boolean5 = deflater2.needsInput();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (short) -1, true);
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        int int13 = deflater10.getTotalIn();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater18.setInput(byteArray30);
        deflater16.setInput(byteArray30);
        deflater16.setStrategy(0);
        boolean boolean36 = deflater16.needsInput();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater41.setInput(byteArray53);
        deflater39.setInput(byteArray53);
        deflater16.setInput(byteArray53);
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        int int61 = deflater59.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater59.setInput(byteArray68);
        deflater59.finish();
        long long71 = deflater59.getBytesRead();
        deflater59.reset();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater59.setInput(byteArray79, (int) (short) 0, (int) (short) 1);
        deflater16.setInput(byteArray79);
        int int84 = deflater10.deflate(byteArray79);
        deflater8.setInput(byteArray79, 1, 0);
        deflater2.setDictionary(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        int int7 = deflater1.getTotalIn();
        int int8 = deflater1.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater27.setInput(byteArray39);
        deflater25.setInput(byteArray39);
        deflater2.setInput(byteArray39);
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        deflater2.setInput(byteArray65);
        int int70 = deflater2.getTotalOut();
        byte[] byteArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        boolean boolean16 = deflater1.needsInput();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater36.setInput(byteArray48);
        deflater34.setInput(byteArray48);
        deflater34.setStrategy(0);
        boolean boolean54 = deflater34.needsInput();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater59.setInput(byteArray71);
        deflater57.setInput(byteArray71);
        deflater34.setInput(byteArray71);
        deflater18.setDictionary(byteArray71);
        int int77 = deflater1.deflate(byteArray71);
        boolean boolean78 = deflater1.needsInput();
        long long79 = deflater1.getBytesWritten();
        byte[] byteArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int84 = deflater1.deflate(byteArray80, 100, (int) (short) 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 2L + "'", long79 == 2L);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalOut();
        long long5 = deflater1.getBytesRead();
        boolean boolean6 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((-1));
        boolean boolean9 = deflater8.finished();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater11.setInput(byteArray23);
        int int26 = deflater11.getTotalIn();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        long long29 = deflater28.getBytesRead();
        long long30 = deflater28.getBytesRead();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        int int46 = deflater32.getAdler();
        boolean boolean47 = deflater32.needsInput();
        int int48 = deflater32.getTotalIn();
        int int49 = deflater32.getTotalIn();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater66.finish();
        long long78 = deflater66.getBytesRead();
        deflater66.reset();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater66.setInput(byteArray86, (int) (short) 0, (int) (short) 1);
        int int90 = deflater51.deflate(byteArray86);
        deflater32.setDictionary(byteArray86);
        deflater28.setInput(byteArray86);
        deflater11.setDictionary(byteArray86);
        deflater8.setDictionary(byteArray86);
        deflater1.setInput(byteArray86);
        java.lang.Class<?> wildcardClass96 = byteArray86.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        deflater1.setDictionary(byteArray40);
        long long46 = deflater1.getBytesRead();
        deflater1.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        int int5 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        long long8 = deflater7.getBytesWritten();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.finish();
        long long22 = deflater10.getBytesRead();
        deflater10.reset();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater25.setInput(byteArray45, (int) (short) 0, (int) (short) 1);
        deflater10.setDictionary(byteArray45);
        deflater7.setInput(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = deflater2.deflate(byteArray45, (int) (short) 10, 16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getAdler();
        deflater1.end();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        int int14 = deflater11.getTotalIn();
        int int15 = deflater11.getTotalIn();
        deflater11.setLevel((int) (short) 1);
        int int18 = deflater11.getAdler();
        boolean boolean19 = deflater11.needsInput();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        long long22 = deflater21.getBytesWritten();
        int int23 = deflater21.getTotalOut();
        long long24 = deflater21.getBytesWritten();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        deflater26.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater26.setDictionary(byteArray39);
        deflater21.setDictionary(byteArray39);
        int int45 = deflater11.deflate(byteArray39, 2, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = deflater1.deflate(byteArray39, (int) 'a', 9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getTotalIn();
        long long9 = deflater1.getBytesRead();
        deflater1.reset();
        int int11 = deflater1.getAdler();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (short) -1, false);
        deflater14.finish();
        boolean boolean16 = deflater14.finished();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater21.setInput(byteArray33);
        deflater19.setInput(byteArray33);
        deflater19.setStrategy(0);
        boolean boolean39 = deflater19.needsInput();
        long long40 = deflater19.getBytesWritten();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        long long43 = deflater42.getBytesWritten();
        int int44 = deflater42.getTotalIn();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater46.finish();
        long long58 = deflater46.getBytesRead();
        deflater46.reset();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater((int) (byte) 1);
        deflater61.reset();
        int int63 = deflater61.getTotalIn();
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater61.setInput(byteArray70);
        deflater61.finish();
        long long73 = deflater61.getBytesRead();
        deflater61.reset();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater61.setInput(byteArray81, (int) (short) 0, (int) (short) 1);
        deflater46.setDictionary(byteArray81);
        int int86 = deflater42.deflate(byteArray81);
        deflater19.setInput(byteArray81, (int) (short) 1, (int) (byte) 0);
        deflater14.setDictionary(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray81, (int) (short) 1, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        int int58 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 0);
        deflater1.reset();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        int int19 = deflater1.getTotalIn();
        deflater1.setStrategy((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater2.setDictionary(byteArray14);
        int int17 = deflater2.getTotalOut();
        boolean boolean18 = deflater2.needsInput();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((-1), true);
        deflater21.finish();
        deflater21.finish();
        boolean boolean24 = deflater21.finished();
        deflater21.finish();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater();
        deflater26.reset();
        long long28 = deflater26.getBytesWritten();
        int int29 = deflater26.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 1 };
        deflater26.setInput(byteArray32);
        deflater21.setInput(byteArray32);
        deflater2.setDictionary(byteArray32);
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((-1));
        int int38 = deflater37.getTotalIn();
        boolean boolean39 = deflater37.finished();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        deflater41.reset();
        deflater41.reset();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        deflater46.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater46.setDictionary(byteArray59);
        int int62 = deflater41.deflate(byteArray59);
        int int63 = deflater37.deflate(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray59, (int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getAdler();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean8 = deflater7.finished();
        deflater7.reset();
        boolean boolean10 = deflater7.finished();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.reset();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater25.setInput(byteArray45, (int) (short) 0, (int) (short) 1);
        deflater12.setInput(byteArray45);
        int int50 = deflater7.deflate(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray45, 0, 87360012);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((-1));
        int int2 = deflater1.getTotalIn();
        boolean boolean3 = deflater1.finished();
        boolean boolean4 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        deflater1.finish();
        deflater1.setLevel(6);
        boolean boolean66 = deflater1.needsInput();
        int int67 = deflater1.getTotalIn();
        long long68 = deflater1.getBytesWritten();
        java.lang.Class<?> wildcardClass69 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(118882828, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        deflater1.setLevel(3);
        deflater1.end();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 0);
        long long2 = deflater1.getBytesRead();
        deflater1.end();
        boolean boolean4 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        long long2 = deflater1.getBytesRead();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        long long6 = deflater5.getBytesWritten();
        int int7 = deflater5.getTotalOut();
        long long8 = deflater5.getBytesWritten();
        deflater5.reset();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        int int22 = deflater11.getAdler();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((-1), true);
        long long40 = deflater39.getBytesWritten();
        deflater39.setLevel(2);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        int int61 = deflater59.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater59.setInput(byteArray68);
        deflater59.finish();
        long long71 = deflater59.getBytesRead();
        deflater59.reset();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater59.setInput(byteArray79, (int) (short) 0, (int) (short) 1);
        deflater44.setDictionary(byteArray79);
        deflater39.setInput(byteArray79);
        deflater24.setInput(byteArray79, 3, 1);
        int int88 = deflater11.deflate(byteArray79);
        deflater5.setInput(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray79, 8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[120, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        int int53 = deflater1.deflate(byteArray51);
        deflater1.finish();
        java.lang.Class<?> wildcardClass55 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) 10, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (short) 1, false);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater9.setInput(byteArray21);
        deflater7.setInput(byteArray21);
        int int25 = deflater4.deflate(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = deflater1.deflate(byteArray21, (int) (short) -1, 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        long long8 = deflater1.getBytesRead();
        long long9 = deflater1.getBytesWritten();
        java.lang.Class<?> wildcardClass10 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) '4', false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(6, false);
        deflater2.reset();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        int int8 = deflater5.getTotalIn();
        int int9 = deflater5.getTotalIn();
        int int10 = deflater5.getTotalOut();
        deflater5.finish();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater13.finish();
        long long25 = deflater13.getBytesRead();
        deflater13.reset();
        int int27 = deflater13.getAdler();
        byte[] byteArray29 = new byte[] { (byte) 10 };
        deflater13.setDictionary(byteArray29);
        deflater5.setDictionary(byteArray29);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray29, (int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10]");
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (short) -1, false);
        long long10 = deflater9.getBytesWritten();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater9.setDictionary(byteArray21);
        deflater1.setInput(byteArray21);
        boolean boolean25 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater28.setInput(byteArray48, (int) (short) 0, (int) (short) 1);
        deflater28.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater54.finish();
        long long66 = deflater54.getBytesRead();
        deflater54.reset();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater54.setInput(byteArray74, (int) (short) 0, (int) (short) 1);
        int int78 = deflater28.deflate(byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = deflater1.deflate(byteArray74, 0, 16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        deflater2.end();
        deflater2.finish();
        byte[] byteArray50 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray50, 87360012, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        deflater1.setDictionary(byteArray40);
        deflater1.end();
        boolean boolean47 = deflater1.finished();
        boolean boolean48 = deflater1.needsInput();
        java.lang.Class<?> wildcardClass49 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater27.setInput(byteArray39);
        deflater25.setInput(byteArray39);
        deflater2.setInput(byteArray39);
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        deflater2.setInput(byteArray65);
        deflater2.reset();
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        boolean boolean16 = deflater1.needsInput();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater36.setInput(byteArray48);
        deflater34.setInput(byteArray48);
        deflater34.setStrategy(0);
        boolean boolean54 = deflater34.needsInput();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater59.setInput(byteArray71);
        deflater57.setInput(byteArray71);
        deflater34.setInput(byteArray71);
        deflater18.setDictionary(byteArray71);
        int int77 = deflater1.deflate(byteArray71);
        boolean boolean78 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        long long60 = deflater1.getBytesRead();
        boolean boolean61 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater67 = new java.util.zip.Deflater((int) (byte) 1);
        deflater67.reset();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater70.setInput(byteArray79);
        deflater67.setInput(byteArray79);
        deflater65.setInput(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = deflater1.deflate(byteArray79, 9, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        int int25 = deflater1.getTotalIn();
        boolean boolean26 = deflater1.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        deflater1.reset();
        long long14 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater16.finish();
        long long28 = deflater16.getBytesRead();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        deflater30.setDictionary(byteArray65);
        int int70 = deflater16.deflate(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray65, (int) '4', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 6 + "'", int70 == 6);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy(0);
        int int6 = deflater2.getTotalOut();
        boolean boolean7 = deflater2.finished();
        long long8 = deflater2.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        deflater1.end();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        int int12 = deflater9.getTotalIn();
        deflater9.finish();
        deflater9.reset();
        boolean boolean15 = deflater9.finished();
        deflater9.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (short) -1, false);
        int int20 = deflater19.getTotalIn();
        int int21 = deflater19.getTotalIn();
        boolean boolean22 = deflater19.finished();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getAdler();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater24.setInput(byteArray37, 0, 0);
        int int42 = deflater19.deflate(byteArray37);
        deflater9.setDictionary(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray37, 9, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        deflater6.reset();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater6.setDictionary(byteArray19);
        int int22 = deflater1.deflate(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        int int18 = deflater1.getTotalIn();
        deflater1.reset();
        long long20 = deflater1.getBytesRead();
        byte[] byteArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = deflater1.deflate(byteArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        long long8 = deflater1.getBytesRead();
        long long9 = deflater1.getBytesWritten();
        int int10 = deflater1.getTotalIn();
        int int11 = deflater1.getAdler();
        int int12 = deflater1.getTotalOut();
        int int13 = deflater1.getAdler();
        boolean boolean14 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        deflater1.reset();
        boolean boolean27 = deflater1.finished();
        long long28 = deflater1.getBytesRead();
        int int29 = deflater1.getAdler();
        int int30 = deflater1.getAdler();
        java.lang.Class<?> wildcardClass31 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        long long16 = deflater1.getBytesWritten();
        int int17 = deflater1.getAdler();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater19.setInput(byteArray31);
        deflater19.setLevel((int) (byte) -1);
        deflater19.end();
        boolean boolean37 = deflater19.needsInput();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater(3, true);
        int int41 = deflater40.getAdler();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((-1), true);
        long long45 = deflater44.getBytesWritten();
        deflater44.setLevel(2);
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        int int66 = deflater64.getTotalIn();
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater64.setInput(byteArray73);
        deflater64.finish();
        long long76 = deflater64.getBytesRead();
        deflater64.reset();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater64.setInput(byteArray84, (int) (short) 0, (int) (short) 1);
        deflater49.setDictionary(byteArray84);
        deflater44.setInput(byteArray84);
        deflater40.setDictionary(byteArray84);
        deflater19.setInput(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            int int95 = deflater1.deflate(byteArray84, 10, (int) (short) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.needsInput();
        long long14 = deflater1.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(720907);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        deflater2.finish();
        deflater2.reset();
        int int25 = deflater2.getAdler();
        boolean boolean26 = deflater2.finished();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean30 = deflater29.needsInput();
        int int31 = deflater29.getTotalOut();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        long long34 = deflater33.getBytesWritten();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater51.setInput(byteArray71, (int) (short) 0, (int) (short) 1);
        deflater36.setDictionary(byteArray71);
        deflater33.setInput(byteArray71);
        deflater29.setDictionary(byteArray71);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = deflater2.deflate(byteArray71, 8, 720907, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        deflater1.reset();
        deflater1.end();
        deflater1.end();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 1, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy(0);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean8 = deflater7.finished();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater();
        deflater9.reset();
        long long11 = deflater9.getBytesRead();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (short) -1, false);
        deflater14.finish();
        boolean boolean16 = deflater14.finished();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater21.setInput(byteArray33);
        deflater19.setInput(byteArray33);
        deflater19.setStrategy(0);
        boolean boolean39 = deflater19.needsInput();
        long long40 = deflater19.getBytesWritten();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        long long43 = deflater42.getBytesWritten();
        int int44 = deflater42.getTotalIn();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater46.finish();
        long long58 = deflater46.getBytesRead();
        deflater46.reset();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater((int) (byte) 1);
        deflater61.reset();
        int int63 = deflater61.getTotalIn();
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater61.setInput(byteArray70);
        deflater61.finish();
        long long73 = deflater61.getBytesRead();
        deflater61.reset();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater61.setInput(byteArray81, (int) (short) 0, (int) (short) 1);
        deflater46.setDictionary(byteArray81);
        int int86 = deflater42.deflate(byteArray81);
        deflater19.setInput(byteArray81, (int) (short) 1, (int) (byte) 0);
        deflater14.setDictionary(byteArray81);
        deflater9.setInput(byteArray81, 2, 0);
        deflater7.setInput(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            int int97 = deflater2.deflate(byteArray81, (int) '4', 720907);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        long long41 = deflater1.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        deflater8.finish();
        long long12 = deflater8.getBytesRead();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.reset();
        boolean boolean26 = deflater14.needsInput();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        int int39 = deflater14.deflate(byteArray37);
        int int40 = deflater8.deflate(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = deflater1.deflate(byteArray37, 9, 3, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater6.setInput(byteArray18);
        int int21 = deflater1.deflate(byteArray18);
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(16777472, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        boolean boolean13 = deflater1.finished();
        long long14 = deflater1.getBytesWritten();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater27.setInput(byteArray39);
        deflater25.setInput(byteArray39);
        deflater2.setInput(byteArray39);
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        deflater2.setInput(byteArray65);
        deflater2.finish();
        java.lang.Class<?> wildcardClass71 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        boolean boolean25 = deflater1.needsInput();
        long long26 = deflater1.getBytesWritten();
        java.lang.Class<?> wildcardClass27 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        boolean boolean10 = deflater1.finished();
        deflater1.setLevel(2);
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (short) -1, false);
        long long16 = deflater15.getBytesWritten();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater15.setDictionary(byteArray27);
        int int30 = deflater15.getTotalOut();
        boolean boolean31 = deflater15.needsInput();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((-1), true);
        deflater34.finish();
        deflater34.finish();
        boolean boolean37 = deflater34.finished();
        deflater34.finish();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater();
        deflater39.reset();
        long long41 = deflater39.getBytesWritten();
        int int42 = deflater39.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 1 };
        deflater39.setInput(byteArray45);
        deflater34.setInput(byteArray45);
        deflater15.setDictionary(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = deflater1.deflate(byteArray45, 16777472, (int) (short) 0, 118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 1]");
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        int int26 = deflater1.getTotalIn();
        long long27 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater32.setInput(byteArray44);
        deflater30.setInput(byteArray44);
        deflater30.setStrategy(0);
        boolean boolean50 = deflater30.needsInput();
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        java.util.zip.Deflater deflater58 = new java.util.zip.Deflater((int) (byte) 1);
        deflater58.reset();
        int int60 = deflater58.getTotalIn();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater58.setInput(byteArray67);
        deflater55.setInput(byteArray67);
        deflater53.setInput(byteArray67);
        deflater30.setInput(byteArray67);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray67, 6, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.needsInput();
        deflater2.setStrategy((int) (short) 1);
        int int6 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        long long40 = deflater1.getBytesRead();
        deflater1.setStrategy(0);
        long long43 = deflater1.getBytesWritten();
        int int44 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        deflater2.finish();
        long long4 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater6.finish();
        long long18 = deflater6.getBytesRead();
        deflater6.reset();
        int int20 = deflater6.getAdler();
        boolean boolean21 = deflater6.needsInput();
        int int22 = deflater6.getTotalIn();
        int int23 = deflater6.getTotalIn();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater40.setInput(byteArray60, (int) (short) 0, (int) (short) 1);
        int int64 = deflater25.deflate(byteArray60);
        deflater6.setDictionary(byteArray60);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray60, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getAdler();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater4.setInput(byteArray17, 0, 0);
        int int22 = deflater2.deflate(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy(118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) 0, true);
        boolean boolean3 = deflater2.finished();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((-1), true);
        long long20 = deflater19.getBytesWritten();
        deflater19.setLevel(2);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater39.finish();
        long long51 = deflater39.getBytesRead();
        deflater39.reset();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater39.setInput(byteArray59, (int) (short) 0, (int) (short) 1);
        deflater24.setDictionary(byteArray59);
        deflater19.setInput(byteArray59);
        deflater5.setDictionary(byteArray59);
        int int66 = deflater5.getAdler();
        deflater5.finish();
        long long68 = deflater5.getBytesRead();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        int int73 = deflater70.getTotalIn();
        deflater70.finish();
        deflater70.reset();
        java.util.zip.Deflater deflater77 = new java.util.zip.Deflater((int) (byte) 1);
        deflater77.reset();
        int int79 = deflater77.getTotalIn();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater77.setInput(byteArray86);
        deflater70.setInput(byteArray86);
        int int89 = deflater5.deflate(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = deflater2.deflate(byteArray86, (int) (byte) 1, (int) '4', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 118882828 + "'", int66 == 118882828);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[120, 63, 7, 22, 2, 12]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 6 + "'", int89 == 6);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        boolean boolean58 = deflater1.needsInput();
        int int59 = deflater1.getTotalIn();
        deflater1.reset();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getAdler();
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater69.setInput(byteArray78);
        deflater65.setInput(byteArray78, 0, 0);
        int int83 = deflater63.deflate(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = deflater1.deflate(byteArray78, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getAdler();
        deflater2.setLevel((-1));
        long long51 = deflater2.getBytesWritten();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        deflater1.reset();
        long long14 = deflater1.getBytesRead();
        boolean boolean15 = deflater1.finished();
        long long16 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        byte[] byteArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater27.setInput(byteArray47, (int) (short) 0, (int) (short) 1);
        int int51 = deflater1.deflate(byteArray47);
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater((int) (byte) 1);
        deflater53.reset();
        int int55 = deflater53.getTotalIn();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater53.setInput(byteArray62);
        deflater1.setInput(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (short) 1);
        java.lang.Class<?> wildcardClass2 = deflater1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        long long19 = deflater1.getBytesWritten();
        java.lang.Class<?> wildcardClass20 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        deflater1.reset();
        boolean boolean14 = deflater1.needsInput();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        int int19 = deflater16.getTotalIn();
        deflater16.finish();
        deflater16.reset();
        boolean boolean22 = deflater16.finished();
        deflater16.reset();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (short) -1, false);
        int int27 = deflater26.getTotalIn();
        int int28 = deflater26.getTotalIn();
        boolean boolean29 = deflater26.finished();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getAdler();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater31.setInput(byteArray44, 0, 0);
        int int49 = deflater26.deflate(byteArray44);
        deflater16.setDictionary(byteArray44);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = deflater1.deflate(byteArray44, (int) (short) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        boolean boolean62 = deflater1.finished();
        byte[] byteArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray63, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater();
        deflater6.reset();
        long long8 = deflater6.getBytesWritten();
        int int9 = deflater6.getTotalIn();
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 1 };
        deflater6.setInput(byteArray12);
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((-1), true);
        long long17 = deflater16.getBytesWritten();
        deflater16.setLevel(2);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        deflater21.setDictionary(byteArray56);
        deflater16.setInput(byteArray56);
        long long62 = deflater16.getBytesRead();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        deflater64.reset();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater64.setDictionary(byteArray77);
        deflater16.setInput(byteArray77);
        deflater6.setInput(byteArray77);
        deflater2.setInput(byteArray77);
        java.lang.Class<?> wildcardClass83 = byteArray77.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        long long18 = deflater1.getBytesWritten();
        long long19 = deflater1.getBytesRead();
        long long20 = deflater1.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(720907);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        deflater0.end();
        deflater0.end();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater33.setInput(byteArray53, (int) (short) 0, (int) (short) 1);
        deflater18.setDictionary(byteArray53);
        int int58 = deflater4.deflate(byteArray53);
        boolean boolean59 = deflater4.finished();
        int int60 = deflater4.getTotalIn();
        int int61 = deflater4.getTotalIn();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater63.setInput(byteArray72);
        deflater63.finish();
        long long75 = deflater63.getBytesRead();
        deflater63.reset();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater63.setInput(byteArray83, (int) (short) 0, (int) (short) 1);
        int int87 = deflater4.deflate(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = deflater0.deflate(byteArray83, 2, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-1, -97, 17, 0, 5, 53]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        long long8 = deflater7.getBytesWritten();
        int int9 = deflater7.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater11.finish();
        long long23 = deflater11.getBytesRead();
        deflater11.reset();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater26.finish();
        long long38 = deflater26.getBytesRead();
        deflater26.reset();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater26.setInput(byteArray46, (int) (short) 0, (int) (short) 1);
        deflater11.setDictionary(byteArray46);
        int int51 = deflater7.deflate(byteArray46);
        deflater2.setDictionary(byteArray46);
        int int53 = deflater2.getTotalIn();
        int int54 = deflater2.getAdler();
        int int55 = deflater2.getTotalIn();
        int int56 = deflater2.getTotalOut();
        java.util.zip.Deflater deflater58 = new java.util.zip.Deflater((int) (byte) 1);
        deflater58.reset();
        int int60 = deflater58.getAdler();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater58.setInput(byteArray71, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray71, 87360012, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 118882828 + "'", int54 == 118882828);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalIn();
        int int6 = deflater1.getAdler();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = deflater1.deflate(byteArray17, 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        boolean boolean1 = deflater0.needsInput();
        deflater0.setLevel((int) (short) -1);
        java.lang.Class<?> wildcardClass4 = deflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, false);
        deflater2.finish();
        int int4 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater6.finish();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((-1), true);
        long long21 = deflater20.getBytesWritten();
        deflater20.setLevel(2);
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater40.setInput(byteArray60, (int) (short) 0, (int) (short) 1);
        deflater25.setDictionary(byteArray60);
        deflater20.setInput(byteArray60);
        deflater6.setDictionary(byteArray60);
        boolean boolean67 = deflater6.finished();
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater69.setInput(byteArray78);
        deflater69.finish();
        long long81 = deflater69.getBytesRead();
        deflater69.reset();
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater69.setInput(byteArray89, (int) (short) 0, (int) (short) 1);
        deflater6.setInput(byteArray89);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray89, 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.reset();
        int int19 = deflater1.getAdler();
        long long20 = deflater1.getBytesWritten();
        int int21 = deflater1.getAdler();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        int int26 = deflater23.getTotalIn();
        int int27 = deflater23.getTotalIn();
        deflater23.setLevel((int) (short) 1);
        int int30 = deflater23.getAdler();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        int int35 = deflater32.getTotalIn();
        int int36 = deflater32.getTotalIn();
        long long37 = deflater32.getBytesWritten();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater39.finish();
        long long51 = deflater39.getBytesRead();
        deflater39.reset();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater39.setInput(byteArray59, (int) (short) 0, (int) (short) 1);
        deflater39.reset();
        deflater39.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        long long67 = deflater66.getBytesWritten();
        int int68 = deflater66.getTotalOut();
        long long69 = deflater66.getBytesWritten();
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater((int) (byte) 1);
        deflater71.reset();
        deflater71.reset();
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater((int) (byte) 1);
        deflater75.reset();
        int int77 = deflater75.getTotalIn();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater75.setInput(byteArray84);
        deflater71.setDictionary(byteArray84);
        deflater66.setDictionary(byteArray84);
        deflater39.setInput(byteArray84);
        deflater32.setDictionary(byteArray84, 2, (int) (short) 0);
        deflater23.setInput(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = deflater1.deflate(byteArray84, 0, (int) (byte) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        long long25 = deflater2.getBytesWritten();
        deflater2.reset();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) 1, false);
        int int3 = deflater2.getAdler();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (short) -1, false);
        int int7 = deflater6.getTotalIn();
        int int8 = deflater6.getTotalIn();
        boolean boolean9 = deflater6.finished();
        deflater6.end();
        deflater6.setLevel((int) (short) -1);
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        int int28 = deflater14.getTotalIn();
        deflater14.finish();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater(3, true);
        int int33 = deflater32.getAdler();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((-1), true);
        long long37 = deflater36.getBytesWritten();
        deflater36.setLevel(2);
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater41.finish();
        long long53 = deflater41.getBytesRead();
        deflater41.reset();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater56.finish();
        long long68 = deflater56.getBytesRead();
        deflater56.reset();
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater56.setInput(byteArray76, (int) (short) 0, (int) (short) 1);
        deflater41.setDictionary(byteArray76);
        deflater36.setInput(byteArray76);
        deflater32.setDictionary(byteArray76);
        deflater14.setInput(byteArray76);
        deflater6.setInput(byteArray76);
        int int85 = deflater2.deflate(byteArray76);
        java.lang.Class<?> wildcardClass86 = byteArray76.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater40.setInput(byteArray52);
        deflater38.setInput(byteArray52);
        deflater38.setStrategy(0);
        boolean boolean58 = deflater38.needsInput();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater63.setInput(byteArray75);
        deflater61.setInput(byteArray75);
        deflater38.setInput(byteArray75);
        deflater22.setDictionary(byteArray75);
        int int81 = deflater18.deflate(byteArray75);
        int int82 = deflater1.deflate(byteArray75);
        long long83 = deflater1.getBytesRead();
        deflater1.finish();
        int int85 = deflater1.getTotalOut();
        deflater1.setStrategy(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.finish();
        long long22 = deflater10.getBytesRead();
        deflater10.reset();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater25.setInput(byteArray45, (int) (short) 0, (int) (short) 1);
        deflater10.setDictionary(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = deflater1.deflate(byteArray45, 2, (int) (short) 100, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        java.lang.Class<?> wildcardClass46 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) -1, true);
        byte[] byteArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray3, 10, 720907);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        long long8 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater13.setInput(byteArray25);
        deflater11.setInput(byteArray25);
        int int29 = deflater1.deflate(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        boolean boolean60 = deflater1.finished();
        deflater1.setStrategy(1);
        long long63 = deflater1.getBytesRead();
        int int64 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        long long60 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater24.setInput(byteArray36);
        deflater22.setInput(byteArray36);
        deflater22.setStrategy(0);
        boolean boolean42 = deflater22.needsInput();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater47.setInput(byteArray59);
        deflater45.setInput(byteArray59);
        deflater22.setInput(byteArray59);
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater22.setInput(byteArray85);
        int int90 = deflater2.deflate(byteArray85);
        boolean boolean91 = deflater2.needsInput();
        int int92 = deflater2.getTotalIn();
        byte[] byteArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray93, 87360012, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        deflater2.reset();
        deflater2.end();
        deflater2.finish();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        deflater7.reset();
        boolean boolean11 = deflater7.finished();
        int int12 = deflater7.getTotalOut();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater14.reset();
        deflater14.reset();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        long long42 = deflater41.getBytesWritten();
        int int43 = deflater41.getTotalOut();
        long long44 = deflater41.getBytesWritten();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        deflater46.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater46.setDictionary(byteArray59);
        deflater41.setDictionary(byteArray59);
        deflater14.setInput(byteArray59);
        deflater7.setDictionary(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray59, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        int int6 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater8.setInput(byteArray21);
        int int26 = deflater1.deflate(byteArray21, 0, 0);
        deflater1.end();
        byte[] byteArray28 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray28, 10, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        long long22 = deflater1.getBytesWritten();
        deflater1.finish();
        java.lang.Class<?> wildcardClass24 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        long long60 = deflater1.getBytesRead();
        boolean boolean61 = deflater1.finished();
        long long62 = deflater1.getBytesRead();
        deflater1.reset();
        long long64 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater67 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        int int74 = deflater72.getTotalIn();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater72.setInput(byteArray81);
        deflater69.setInput(byteArray81);
        deflater67.setInput(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            int int87 = deflater1.deflate(byteArray81, 9, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.finish();
        long long4 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean7 = deflater6.finished();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater38.setInput(byteArray58, (int) (short) 0, (int) (short) 1);
        deflater23.setDictionary(byteArray58);
        int int63 = deflater9.deflate(byteArray58);
        int int66 = deflater6.deflate(byteArray58, (int) (byte) 1, 2);
        // The following exception was thrown during execution in test generation
        try {
            int int69 = deflater1.deflate(byteArray58, (int) '#', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        long long19 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        long long19 = deflater1.getBytesRead();
        boolean boolean20 = deflater1.needsInput();
        java.lang.Class<?> wildcardClass21 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater2.setDictionary(byteArray14);
        int int17 = deflater2.getTotalOut();
        boolean boolean18 = deflater2.needsInput();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((-1), true);
        deflater21.finish();
        deflater21.finish();
        boolean boolean24 = deflater21.finished();
        deflater21.finish();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater();
        deflater26.reset();
        long long28 = deflater26.getBytesWritten();
        int int29 = deflater26.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 1 };
        deflater26.setInput(byteArray32);
        deflater21.setInput(byteArray32);
        deflater2.setDictionary(byteArray32);
        int int36 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        deflater2.reset();
        deflater2.setStrategy(0);
        java.lang.Class<?> wildcardClass6 = deflater2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        boolean boolean48 = deflater2.finished();
        boolean boolean49 = deflater2.finished();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        long long52 = deflater51.getBytesWritten();
        int int53 = deflater51.getTotalIn();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater55.finish();
        long long67 = deflater55.getBytesRead();
        deflater55.reset();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater70.setInput(byteArray79);
        deflater70.finish();
        long long82 = deflater70.getBytesRead();
        deflater70.reset();
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater70.setInput(byteArray90, (int) (short) 0, (int) (short) 1);
        deflater55.setDictionary(byteArray90);
        int int95 = deflater51.deflate(byteArray90);
        // The following exception was thrown during execution in test generation
        try {
            int int99 = deflater2.deflate(byteArray90, (int) (short) 100, 6, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        long long7 = deflater6.getBytesWritten();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        deflater9.setDictionary(byteArray44);
        deflater6.setInput(byteArray44);
        deflater2.setDictionary(byteArray44);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        long long8 = deflater1.getBytesRead();
        long long9 = deflater1.getBytesWritten();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater19.setInput(byteArray31);
        deflater17.setInput(byteArray31);
        deflater17.setStrategy(0);
        boolean boolean37 = deflater17.needsInput();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater42.setInput(byteArray54);
        deflater40.setInput(byteArray54);
        deflater17.setInput(byteArray54);
        deflater1.setDictionary(byteArray54);
        int int60 = deflater1.getAdler();
        byte[] byteArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray61, (int) (byte) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 87360012 + "'", int60 == 87360012);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.needsInput();
        deflater2.end();
        deflater2.end();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater33.setInput(byteArray53, (int) (short) 0, (int) (short) 1);
        deflater18.setDictionary(byteArray53);
        int int58 = deflater4.deflate(byteArray53);
        int int61 = deflater1.deflate(byteArray53, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater();
        deflater62.reset();
        long long64 = deflater62.getBytesWritten();
        int int65 = deflater62.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 1 };
        deflater62.setInput(byteArray68);
        deflater1.setDictionary(byteArray68);
        long long71 = deflater1.getBytesRead();
        byte[] byteArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray72, (int) (byte) 10, 87360012);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.reset();
        int int19 = deflater1.getAdler();
        long long20 = deflater1.getBytesWritten();
        deflater1.setLevel(9);
        java.lang.Class<?> wildcardClass23 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        int int8 = deflater5.getTotalIn();
        deflater5.finish();
        deflater5.reset();
        boolean boolean11 = deflater5.finished();
        long long12 = deflater5.getBytesRead();
        long long13 = deflater5.getBytesWritten();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater19.finish();
        long long31 = deflater19.getBytesRead();
        deflater19.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater34.setInput(byteArray54, (int) (short) 0, (int) (short) 1);
        deflater19.setDictionary(byteArray54);
        deflater15.setInput(byteArray54);
        deflater5.setInput(byteArray54);
        int int61 = deflater1.deflate(byteArray54);
        boolean boolean62 = deflater1.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 0);
        deflater1.end();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        int int53 = deflater1.deflate(byteArray51);
        java.lang.Class<?> wildcardClass54 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        long long8 = deflater1.getBytesWritten();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        boolean boolean8 = deflater1.needsInput();
        int int9 = deflater1.getAdler();
        deflater1.finish();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        int int15 = deflater12.getTotalIn();
        int int16 = deflater12.getTotalIn();
        deflater12.end();
        boolean boolean18 = deflater12.needsInput();
        deflater12.finish();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        int int24 = deflater21.getTotalIn();
        int int25 = deflater21.getTotalIn();
        deflater21.setLevel((int) (short) 1);
        deflater21.setLevel((int) (byte) 1);
        boolean boolean30 = deflater21.finished();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (short) -1, false);
        int int34 = deflater33.getTotalIn();
        int int35 = deflater33.getTotalIn();
        boolean boolean36 = deflater33.finished();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        long long39 = deflater38.getBytesWritten();
        int int40 = deflater38.getTotalIn();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater42.finish();
        long long54 = deflater42.getBytesRead();
        deflater42.reset();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater((int) (byte) 1);
        deflater57.reset();
        int int59 = deflater57.getTotalIn();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater57.setInput(byteArray66);
        deflater57.finish();
        long long69 = deflater57.getBytesRead();
        deflater57.reset();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater57.setInput(byteArray77, (int) (short) 0, (int) (short) 1);
        deflater42.setDictionary(byteArray77);
        int int82 = deflater38.deflate(byteArray77);
        deflater33.setDictionary(byteArray77);
        int int84 = deflater21.deflate(byteArray77);
        deflater12.setInput(byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = deflater1.deflate(byteArray77, (int) 'a', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        long long8 = deflater7.getBytesWritten();
        int int9 = deflater7.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater11.finish();
        long long23 = deflater11.getBytesRead();
        deflater11.reset();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater26.finish();
        long long38 = deflater26.getBytesRead();
        deflater26.reset();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater26.setInput(byteArray46, (int) (short) 0, (int) (short) 1);
        deflater11.setDictionary(byteArray46);
        int int51 = deflater7.deflate(byteArray46);
        deflater2.setDictionary(byteArray46);
        int int53 = deflater2.getTotalIn();
        int int54 = deflater2.getAdler();
        int int55 = deflater2.getTotalIn();
        int int56 = deflater2.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 118882828 + "'", int54 == 118882828);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 118882828 + "'", int56 == 118882828);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater1.setInput(byteArray15);
        int int18 = deflater1.getTotalIn();
        int int19 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        int int24 = deflater21.getTotalIn();
        int int25 = deflater21.getTotalIn();
        deflater21.end();
        boolean boolean27 = deflater21.needsInput();
        deflater21.finish();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        int int33 = deflater30.getTotalIn();
        int int34 = deflater30.getTotalIn();
        deflater30.setLevel((int) (short) 1);
        deflater30.setLevel((int) (byte) 1);
        boolean boolean39 = deflater30.finished();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (short) -1, false);
        int int43 = deflater42.getTotalIn();
        int int44 = deflater42.getTotalIn();
        boolean boolean45 = deflater42.finished();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        long long48 = deflater47.getBytesWritten();
        int int49 = deflater47.getTotalIn();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater66.finish();
        long long78 = deflater66.getBytesRead();
        deflater66.reset();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater66.setInput(byteArray86, (int) (short) 0, (int) (short) 1);
        deflater51.setDictionary(byteArray86);
        int int91 = deflater47.deflate(byteArray86);
        deflater42.setDictionary(byteArray86);
        int int93 = deflater30.deflate(byteArray86);
        deflater21.setInput(byteArray86);
        int int95 = deflater1.deflate(byteArray86);
        byte[] byteArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray96, (int) '4', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 6 + "'", int95 == 6);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        boolean boolean20 = deflater2.finished();
        boolean boolean21 = deflater2.finished();
        boolean boolean22 = deflater2.needsInput();
        int int23 = deflater2.getTotalIn();
        boolean boolean24 = deflater2.finished();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean28 = deflater27.needsInput();
        int int29 = deflater27.getTotalOut();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        long long32 = deflater31.getBytesWritten();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater49.setInput(byteArray69, (int) (short) 0, (int) (short) 1);
        deflater34.setDictionary(byteArray69);
        deflater31.setInput(byteArray69);
        deflater27.setDictionary(byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray69, (int) (short) 10, 720907);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        java.lang.Class<?> wildcardClass6 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        deflater1.setLevel(3);
        deflater1.setStrategy(2);
        int int60 = deflater1.getAdler();
        long long61 = deflater1.getBytesWritten();
        int int62 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 87360012 + "'", int60 == 87360012);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 6L + "'", long61 == 6L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 87360012 + "'", int62 == 87360012);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalOut();
        long long5 = deflater1.getBytesRead();
        int int6 = deflater1.getTotalIn();
        long long7 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater9.setInput(byteArray29, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getAdler();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater37.setInput(byteArray50, 0, 0);
        int int55 = deflater35.deflate(byteArray50);
        deflater9.setInput(byteArray50);
        java.util.zip.Deflater deflater58 = new java.util.zip.Deflater((int) (byte) 1);
        deflater58.reset();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater((int) (byte) 1);
        deflater61.reset();
        int int63 = deflater61.getTotalIn();
        deflater61.finish();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater61.setInput(byteArray75);
        int int78 = deflater58.deflate(byteArray75);
        deflater9.setInput(byteArray75);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray75, 2, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater2.setDictionary(byteArray14);
        int int17 = deflater2.getTotalOut();
        boolean boolean18 = deflater2.needsInput();
        int int19 = deflater2.getTotalOut();
        deflater2.finish();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        int int25 = deflater22.getTotalIn();
        int int26 = deflater22.getTotalIn();
        deflater22.end();
        boolean boolean28 = deflater22.needsInput();
        deflater22.finish();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        int int34 = deflater31.getTotalIn();
        int int35 = deflater31.getTotalIn();
        deflater31.setLevel((int) (short) 1);
        deflater31.setLevel((int) (byte) 1);
        boolean boolean40 = deflater31.finished();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (short) -1, false);
        int int44 = deflater43.getTotalIn();
        int int45 = deflater43.getTotalIn();
        boolean boolean46 = deflater43.finished();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        long long49 = deflater48.getBytesWritten();
        int int50 = deflater48.getTotalIn();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getTotalIn();
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater52.setInput(byteArray61);
        deflater52.finish();
        long long64 = deflater52.getBytesRead();
        deflater52.reset();
        java.util.zip.Deflater deflater67 = new java.util.zip.Deflater((int) (byte) 1);
        deflater67.reset();
        int int69 = deflater67.getTotalIn();
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater67.setInput(byteArray76);
        deflater67.finish();
        long long79 = deflater67.getBytesRead();
        deflater67.reset();
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater67.setInput(byteArray87, (int) (short) 0, (int) (short) 1);
        deflater52.setDictionary(byteArray87);
        int int92 = deflater48.deflate(byteArray87);
        deflater43.setDictionary(byteArray87);
        int int94 = deflater31.deflate(byteArray87);
        deflater22.setInput(byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            int int98 = deflater2.deflate(byteArray87, 16777472, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        deflater1.setLevel(3);
        deflater1.setStrategy(2);
        deflater1.reset();
        byte[] byteArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int62 = deflater1.deflate(byteArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        long long8 = deflater1.getBytesRead();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        deflater1.setDictionary(byteArray40);
        boolean boolean46 = deflater1.needsInput();
        int int47 = deflater1.getTotalIn();
        int int48 = deflater1.getAdler();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater50.finish();
        long long62 = deflater50.getBytesRead();
        deflater50.reset();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater50.setDictionary(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray85, 720907, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 118882828 + "'", int48 == 118882828);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        deflater2.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(3);
        java.util.zip.Deflater deflater3 = new java.util.zip.Deflater((int) (byte) 1);
        long long4 = deflater3.getBytesWritten();
        int int5 = deflater3.getTotalIn();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        int int47 = deflater3.deflate(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = deflater1.deflate(byteArray42, (int) (byte) 10, 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalIn();
        long long4 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalIn();
        long long5 = deflater2.getBytesRead();
        deflater2.end();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.needsInput();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        int int18 = deflater15.getTotalIn();
        int int19 = deflater15.getTotalIn();
        int int20 = deflater15.getTotalOut();
        deflater15.finish();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        int int37 = deflater23.getAdler();
        byte[] byteArray39 = new byte[] { (byte) 10 };
        deflater23.setDictionary(byteArray39);
        deflater15.setDictionary(byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = deflater1.deflate(byteArray39, 720907, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10]");
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, false);
        int int3 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((-1), true);
        long long17 = deflater16.getBytesWritten();
        deflater16.setLevel(2);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        deflater21.setDictionary(byteArray56);
        deflater16.setInput(byteArray56);
        deflater1.setInput(byteArray56, 3, 1);
        boolean boolean65 = deflater1.finished();
        deflater1.reset();
        int int67 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        int int58 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        int int62 = deflater60.getTotalIn();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater60.setInput(byteArray69);
        deflater60.finish();
        long long72 = deflater60.getBytesRead();
        deflater60.reset();
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater60.setInput(byteArray80, (int) (short) 0, (int) (short) 1);
        int int84 = deflater1.deflate(byteArray80);
        long long85 = deflater1.getBytesWritten();
        int int86 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-1, -97, 17, 0, 5, 53]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 6 + "'", int84 == 6);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 12L + "'", long85 == 12L);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 87360012 + "'", int86 == 87360012);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater8.finish();
        long long20 = deflater8.getBytesRead();
        deflater8.reset();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater8.setInput(byteArray28, (int) (short) 0, (int) (short) 1);
        deflater8.reset();
        deflater8.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        long long36 = deflater35.getBytesWritten();
        int int37 = deflater35.getTotalOut();
        long long38 = deflater35.getBytesWritten();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        deflater40.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater40.setDictionary(byteArray53);
        deflater35.setDictionary(byteArray53);
        deflater8.setInput(byteArray53);
        deflater1.setDictionary(byteArray53, 2, (int) (short) 0);
        int int61 = deflater1.getTotalOut();
        deflater1.setStrategy((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        deflater2.setStrategy(0);
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean10 = deflater9.finished();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater();
        deflater11.reset();
        long long13 = deflater11.getBytesRead();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (short) -1, false);
        deflater16.finish();
        boolean boolean18 = deflater16.finished();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater23.setInput(byteArray35);
        deflater21.setInput(byteArray35);
        deflater21.setStrategy(0);
        boolean boolean41 = deflater21.needsInput();
        long long42 = deflater21.getBytesWritten();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        long long45 = deflater44.getBytesWritten();
        int int46 = deflater44.getTotalIn();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater48.finish();
        long long60 = deflater48.getBytesRead();
        deflater48.reset();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater63.setInput(byteArray72);
        deflater63.finish();
        long long75 = deflater63.getBytesRead();
        deflater63.reset();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater63.setInput(byteArray83, (int) (short) 0, (int) (short) 1);
        deflater48.setDictionary(byteArray83);
        int int88 = deflater44.deflate(byteArray83);
        deflater21.setInput(byteArray83, (int) (short) 1, (int) (byte) 0);
        deflater16.setDictionary(byteArray83);
        deflater11.setInput(byteArray83, 2, 0);
        deflater9.setInput(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray83, 8, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalIn();
        long long5 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater25.setInput(byteArray37);
        deflater23.setInput(byteArray37);
        deflater23.setStrategy(0);
        boolean boolean43 = deflater23.needsInput();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater48.setInput(byteArray60);
        deflater46.setInput(byteArray60);
        deflater23.setInput(byteArray60);
        deflater7.setDictionary(byteArray60);
        int int66 = deflater2.deflate(byteArray60);
        java.lang.Class<?> wildcardClass67 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        deflater1.finish();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater();
        deflater64.reset();
        long long66 = deflater64.getBytesWritten();
        int int67 = deflater64.getTotalIn();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 1 };
        deflater64.setInput(byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray70, (int) 'a', 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 1]");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        deflater1.reset();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater();
        deflater9.reset();
        long long11 = deflater9.getBytesWritten();
        int int12 = deflater9.getTotalIn();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean15 = deflater14.finished();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater31.finish();
        long long43 = deflater31.getBytesRead();
        deflater31.reset();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater46.finish();
        long long58 = deflater46.getBytesRead();
        deflater46.reset();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater46.setInput(byteArray66, (int) (short) 0, (int) (short) 1);
        deflater31.setDictionary(byteArray66);
        int int71 = deflater17.deflate(byteArray66);
        int int74 = deflater14.deflate(byteArray66, (int) (byte) 1, 2);
        int int77 = deflater9.deflate(byteArray66, 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = deflater1.deflate(byteArray66, (-1), (int) 'a', 16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 6 + "'", int71 == 6);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        long long22 = deflater1.getBytesWritten();
        deflater1.finish();
        deflater1.finish();
        int int25 = deflater1.getTotalOut();
        java.lang.Class<?> wildcardClass26 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.setLevel(0);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater16.finish();
        long long28 = deflater16.getBytesRead();
        deflater16.reset();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater16.setInput(byteArray36, (int) (short) 0, (int) (short) 1);
        deflater1.setDictionary(byteArray36);
        long long41 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        boolean boolean67 = deflater43.needsInput();
        deflater43.reset();
        boolean boolean69 = deflater43.needsInput();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (short) 1, false);
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater77 = new java.util.zip.Deflater((int) (byte) 1);
        deflater77.reset();
        java.util.zip.Deflater deflater80 = new java.util.zip.Deflater((int) (byte) 1);
        deflater80.reset();
        int int82 = deflater80.getTotalIn();
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater80.setInput(byteArray89);
        deflater77.setInput(byteArray89);
        deflater75.setInput(byteArray89);
        int int93 = deflater72.deflate(byteArray89);
        int int94 = deflater43.deflate(byteArray89);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray89, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        deflater1.setLevel(3);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getAdler();
        long long9 = deflater1.getBytesWritten();
        deflater1.end();
        deflater1.finish();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        int int6 = deflater1.getTotalOut();
        deflater1.finish();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        int int23 = deflater9.getAdler();
        byte[] byteArray25 = new byte[] { (byte) 10 };
        deflater9.setDictionary(byteArray25);
        deflater1.setDictionary(byteArray25);
        int int28 = deflater1.getTotalIn();
        java.lang.Class<?> wildcardClass29 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        int int19 = deflater5.getAdler();
        boolean boolean20 = deflater5.needsInput();
        int int21 = deflater5.getTotalIn();
        int int22 = deflater5.getTotalIn();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater39.finish();
        long long51 = deflater39.getBytesRead();
        deflater39.reset();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater39.setInput(byteArray59, (int) (short) 0, (int) (short) 1);
        int int63 = deflater24.deflate(byteArray59);
        deflater5.setDictionary(byteArray59);
        int int65 = deflater1.deflate(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        int int18 = deflater1.getTotalIn();
        int int19 = deflater1.getTotalOut();
        int int20 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        byte[] byteArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        deflater1.reset();
        deflater1.end();
        deflater1.end();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean31 = deflater30.finished();
        deflater30.finish();
        int int33 = deflater30.getTotalIn();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((-1), true);
        long long37 = deflater36.getBytesWritten();
        deflater36.setLevel(2);
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater41.finish();
        long long53 = deflater41.getBytesRead();
        deflater41.reset();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater56.finish();
        long long68 = deflater56.getBytesRead();
        deflater56.reset();
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater56.setInput(byteArray76, (int) (short) 0, (int) (short) 1);
        deflater41.setDictionary(byteArray76);
        deflater36.setInput(byteArray76);
        int int82 = deflater30.deflate(byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = deflater1.deflate(byteArray76, 6, 720907, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[120, -100, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 6 + "'", int82 == 6);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        long long46 = deflater1.getBytesWritten();
        int int47 = deflater1.getTotalOut();
        long long48 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getAdler();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater4.setInput(byteArray17, 0, 0);
        int int22 = deflater2.deflate(byteArray17);
        deflater2.reset();
        int int24 = deflater2.getTotalIn();
        long long25 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (short) -1, false);
        long long29 = deflater28.getBytesWritten();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater28.setDictionary(byteArray40);
        boolean boolean43 = deflater28.needsInput();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getAdler();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getTotalIn();
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater52.setInput(byteArray61);
        deflater48.setInput(byteArray61, 0, 0);
        int int66 = deflater46.deflate(byteArray61);
        deflater28.setInput(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = deflater2.deflate(byteArray61, (int) (short) 10, 6, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        java.lang.Class<?> wildcardClass4 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, true);
        long long3 = deflater2.getBytesRead();
        int int4 = deflater2.getAdler();
        boolean boolean5 = deflater2.needsInput();
        long long6 = deflater2.getBytesRead();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        boolean boolean25 = deflater1.needsInput();
        deflater1.reset();
        boolean boolean27 = deflater1.needsInput();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (short) 1, false);
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater35.setInput(byteArray47);
        deflater33.setInput(byteArray47);
        int int51 = deflater30.deflate(byteArray47);
        int int52 = deflater1.deflate(byteArray47);
        boolean boolean53 = deflater1.needsInput();
        java.lang.Class<?> wildcardClass54 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        int int53 = deflater1.deflate(byteArray51);
        long long54 = deflater1.getBytesRead();
        boolean boolean55 = deflater1.needsInput();
        byte[] byteArray56 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray56, 1, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6L + "'", long54 == 6L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(720907);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        boolean boolean4 = deflater1.needsInput();
        long long5 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        long long46 = deflater1.getBytesWritten();
        int int47 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getAdler();
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater((int) (byte) 1);
        deflater53.reset();
        int int55 = deflater53.getTotalIn();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater53.setInput(byteArray62);
        deflater49.setInput(byteArray62, 0, 0);
        long long67 = deflater49.getBytesRead();
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater69.setInput(byteArray78);
        deflater69.finish();
        long long81 = deflater69.getBytesRead();
        deflater69.reset();
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater69.setInput(byteArray89, (int) (short) 0, (int) (short) 1);
        deflater49.setDictionary(byteArray89);
        deflater1.setInput(byteArray89);
        long long95 = deflater1.getBytesRead();
        int int96 = deflater1.getTotalIn();
        int int97 = deflater1.getAdler();
        deflater1.setLevel(1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(9);
        java.util.zip.Deflater deflater3 = new java.util.zip.Deflater((int) (byte) 1);
        long long4 = deflater3.getBytesWritten();
        long long5 = deflater3.getBytesWritten();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean8 = deflater7.finished();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.finish();
        long long22 = deflater10.getBytesRead();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater39.finish();
        long long51 = deflater39.getBytesRead();
        deflater39.reset();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater39.setInput(byteArray59, (int) (short) 0, (int) (short) 1);
        deflater24.setDictionary(byteArray59);
        int int64 = deflater10.deflate(byteArray59);
        int int67 = deflater7.deflate(byteArray59, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        deflater69.finish();
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        int int76 = deflater74.getTotalIn();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater74.setInput(byteArray83);
        deflater69.setInput(byteArray83);
        deflater7.setInput(byteArray83);
        int int87 = deflater3.deflate(byteArray83);
        int int88 = deflater1.deflate(byteArray83);
        boolean boolean89 = deflater1.finished();
        int int90 = deflater1.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        long long20 = deflater1.getBytesWritten();
        deflater1.reset();
        long long22 = deflater1.getBytesRead();
        deflater1.setLevel(6);
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        deflater26.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater26.setDictionary(byteArray39);
        int int42 = deflater26.getAdler();
        int int43 = deflater26.getAdler();
        deflater26.reset();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        long long47 = deflater46.getBytesWritten();
        long long48 = deflater46.getBytesWritten();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater50.finish();
        long long62 = deflater50.getBytesRead();
        deflater50.reset();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater50.setDictionary(byteArray85);
        deflater46.setInput(byteArray85);
        deflater26.setInput(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray85, (int) ' ', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 87360012 + "'", int42 == 87360012);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 87360012 + "'", int43 == 87360012);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        deflater1.reset();
        long long14 = deflater1.getBytesRead();
        boolean boolean15 = deflater1.needsInput();
        deflater1.reset();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        long long19 = deflater18.getBytesWritten();
        int int20 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater37.setInput(byteArray57, (int) (short) 0, (int) (short) 1);
        deflater22.setDictionary(byteArray57);
        int int62 = deflater18.deflate(byteArray57);
        boolean boolean63 = deflater18.needsInput();
        int int64 = deflater18.getTotalOut();
        long long65 = deflater18.getBytesRead();
        java.util.zip.Deflater deflater67 = new java.util.zip.Deflater((int) (byte) 1);
        long long68 = deflater67.getBytesRead();
        long long69 = deflater67.getBytesRead();
        long long70 = deflater67.getBytesWritten();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        int int74 = deflater72.getTotalIn();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater72.setInput(byteArray81);
        deflater72.finish();
        long long84 = deflater72.getBytesRead();
        deflater72.reset();
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater72.setInput(byteArray92, (int) (short) 0, (int) (short) 1);
        deflater67.setInput(byteArray92);
        deflater18.setDictionary(byteArray92);
        int int98 = deflater1.deflate(byteArray92);
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        deflater0.end();
        deflater0.end();
        java.util.zip.Deflater deflater3 = new java.util.zip.Deflater();
        deflater3.reset();
        long long5 = deflater3.getBytesRead();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (short) -1, false);
        deflater8.finish();
        boolean boolean10 = deflater8.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater15.setInput(byteArray27);
        deflater13.setInput(byteArray27);
        deflater13.setStrategy(0);
        boolean boolean33 = deflater13.needsInput();
        long long34 = deflater13.getBytesWritten();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        long long37 = deflater36.getBytesWritten();
        int int38 = deflater36.getTotalIn();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater55.finish();
        long long67 = deflater55.getBytesRead();
        deflater55.reset();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater55.setInput(byteArray75, (int) (short) 0, (int) (short) 1);
        deflater40.setDictionary(byteArray75);
        int int80 = deflater36.deflate(byteArray75);
        deflater13.setInput(byteArray75, (int) (short) 1, (int) (byte) 0);
        deflater8.setDictionary(byteArray75);
        deflater3.setInput(byteArray75, 2, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = deflater0.deflate(byteArray75, (int) (short) -1, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        long long18 = deflater1.getBytesWritten();
        long long19 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getAdler();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater21.setInput(byteArray34, 0, 0);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        int int41 = deflater40.getTotalOut();
        int int42 = deflater40.getTotalOut();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        int int74 = deflater72.getAdler();
        java.util.zip.Deflater deflater76 = new java.util.zip.Deflater((int) (byte) 1);
        deflater76.reset();
        int int78 = deflater76.getTotalIn();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater76.setInput(byteArray85);
        deflater72.setInput(byteArray85, 0, 0);
        int int90 = deflater70.deflate(byteArray85);
        deflater44.setInput(byteArray85);
        deflater40.setDictionary(byteArray85);
        deflater21.setInput(byteArray85);
        int int96 = deflater1.deflate(byteArray85, 0, 6);
        boolean boolean97 = deflater1.needsInput();
        int int98 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        boolean boolean62 = deflater1.finished();
        long long63 = deflater1.getBytesRead();
        int int64 = deflater1.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(87360012);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 118882828 + "'", int64 == 118882828);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        int int19 = deflater1.getTotalOut();
        long long20 = deflater1.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        deflater2.setLevel(1);
        long long27 = deflater2.getBytesWritten();
        boolean boolean28 = deflater2.needsInput();
        int int29 = deflater2.getTotalIn();
        java.lang.Class<?> wildcardClass30 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        int int2 = deflater1.getAdler();
        boolean boolean3 = deflater1.needsInput();
        boolean boolean4 = deflater1.finished();
        long long5 = deflater1.getBytesRead();
        boolean boolean6 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        int int11 = deflater8.getTotalIn();
        deflater8.finish();
        deflater8.reset();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater8.setInput(byteArray24);
        long long27 = deflater8.getBytesWritten();
        deflater8.reset();
        int int29 = deflater8.getAdler();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater31.finish();
        long long43 = deflater31.getBytesRead();
        deflater31.reset();
        int int45 = deflater31.getAdler();
        byte[] byteArray47 = new byte[] { (byte) 10 };
        deflater31.setDictionary(byteArray47);
        deflater8.setDictionary(byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = deflater1.deflate(byteArray47, 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10]");
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater2.setDictionary(byteArray14);
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.reset();
        boolean boolean30 = deflater18.needsInput();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        int int43 = deflater18.deflate(byteArray41);
        int int46 = deflater2.deflate(byteArray41, (int) (short) 0, (int) (byte) 1);
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.lang.Class<?> wildcardClass4 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(9, false);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.reset();
        boolean boolean16 = deflater4.needsInput();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        int int29 = deflater4.deflate(byteArray27);
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        deflater31.reset();
        boolean boolean35 = deflater31.finished();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater(3, true);
        int int39 = deflater38.getAdler();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((-1), true);
        long long43 = deflater42.getBytesWritten();
        deflater42.setLevel(2);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater62.finish();
        long long74 = deflater62.getBytesRead();
        deflater62.reset();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater62.setInput(byteArray82, (int) (short) 0, (int) (short) 1);
        deflater47.setDictionary(byteArray82);
        deflater42.setInput(byteArray82);
        deflater38.setDictionary(byteArray82);
        int int89 = deflater31.deflate(byteArray82);
        deflater4.setInput(byteArray82);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray82, (int) 'a', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getTotalIn();
        deflater2.reset();
        deflater2.end();
        boolean boolean51 = deflater2.finished();
        deflater2.setLevel((int) (byte) 1);
        boolean boolean54 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, true);
        deflater2.setLevel((-1));
        boolean boolean5 = deflater2.needsInput();
        deflater2.finish();
        deflater2.end();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        int int16 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        deflater18.finish();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater18.setInput(byteArray32);
        int int35 = deflater18.getTotalIn();
        int int36 = deflater18.getTotalOut();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater51.setInput(byteArray71, (int) (short) 0, (int) (short) 1);
        deflater38.setInput(byteArray71);
        deflater18.setDictionary(byteArray71);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray71, (int) 'a', 118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        int int6 = deflater1.getTotalOut();
        deflater1.finish();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        int int23 = deflater9.getAdler();
        byte[] byteArray25 = new byte[] { (byte) 10 };
        deflater9.setDictionary(byteArray25);
        deflater1.setDictionary(byteArray25);
        long long28 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater30.reset();
        deflater30.reset();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater((int) (byte) 1);
        long long58 = deflater57.getBytesWritten();
        int int59 = deflater57.getTotalOut();
        long long60 = deflater57.getBytesWritten();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        deflater62.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater62.setDictionary(byteArray75);
        deflater57.setDictionary(byteArray75);
        deflater30.setInput(byteArray75);
        // The following exception was thrown during execution in test generation
        try {
            int int82 = deflater1.deflate(byteArray75, (int) (byte) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.reset();
        int int19 = deflater1.getAdler();
        long long20 = deflater1.getBytesWritten();
        int int21 = deflater1.getAdler();
        java.lang.Class<?> wildcardClass22 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        long long4 = deflater1.getBytesWritten();
        boolean boolean5 = deflater1.finished();
        boolean boolean6 = deflater1.finished();
        int int7 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        int int12 = deflater9.getTotalIn();
        deflater9.finish();
        deflater9.reset();
        boolean boolean15 = deflater9.finished();
        long long16 = deflater9.getBytesRead();
        long long17 = deflater9.getBytesWritten();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater38.setInput(byteArray58, (int) (short) 0, (int) (short) 1);
        deflater23.setDictionary(byteArray58);
        deflater19.setInput(byteArray58);
        deflater9.setInput(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray58, 87360012, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setDictionary(byteArray14);
        int int17 = deflater1.getAdler();
        int int18 = deflater1.getAdler();
        deflater1.finish();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        deflater21.finish();
        int int25 = deflater21.getTotalOut();
        boolean boolean26 = deflater21.needsInput();
        deflater21.setLevel((int) (short) 0);
        int int29 = deflater21.getTotalIn();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (short) -1, false);
        int int33 = deflater32.getTotalIn();
        int int34 = deflater32.getTotalIn();
        boolean boolean35 = deflater32.finished();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        long long38 = deflater37.getBytesWritten();
        int int39 = deflater37.getTotalIn();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater41.finish();
        long long53 = deflater41.getBytesRead();
        deflater41.reset();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater56.finish();
        long long68 = deflater56.getBytesRead();
        deflater56.reset();
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater56.setInput(byteArray76, (int) (short) 0, (int) (short) 1);
        deflater41.setDictionary(byteArray76);
        int int81 = deflater37.deflate(byteArray76);
        deflater32.setDictionary(byteArray76);
        int int83 = deflater21.deflate(byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = deflater1.deflate(byteArray76, (-1), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 87360012 + "'", int17 == 87360012);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 87360012 + "'", int18 == 87360012);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        long long40 = deflater1.getBytesRead();
        deflater1.setStrategy(0);
        long long43 = deflater1.getBytesWritten();
        int int44 = deflater1.getTotalIn();
        int int45 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        deflater2.setLevel(1);
        long long27 = deflater2.getBytesWritten();
        boolean boolean28 = deflater2.needsInput();
        deflater2.end();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean7 = deflater6.finished();
        deflater6.finish();
        deflater6.end();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater14.setInput(byteArray26);
        deflater12.setInput(byteArray26);
        deflater12.setStrategy(0);
        boolean boolean32 = deflater12.needsInput();
        long long33 = deflater12.getBytesWritten();
        long long34 = deflater12.getBytesRead();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getAdler();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater36.setInput(byteArray49, 0, 0);
        long long54 = deflater36.getBytesRead();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater56.finish();
        long long68 = deflater56.getBytesRead();
        deflater56.reset();
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater56.setInput(byteArray76, (int) (short) 0, (int) (short) 1);
        deflater36.setDictionary(byteArray76);
        int int81 = deflater12.deflate(byteArray76);
        deflater6.setInput(byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray76, 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        boolean boolean20 = deflater2.finished();
        boolean boolean21 = deflater2.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        deflater2.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setDictionary(byteArray14);
        long long17 = deflater1.getBytesWritten();
        deflater1.reset();
        int int19 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        long long19 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((-1), true);
        long long23 = deflater22.getBytesWritten();
        deflater22.setLevel(2);
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater42.finish();
        long long54 = deflater42.getBytesRead();
        deflater42.reset();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater42.setInput(byteArray62, (int) (short) 0, (int) (short) 1);
        deflater27.setDictionary(byteArray62);
        deflater22.setInput(byteArray62);
        int int68 = deflater22.getTotalIn();
        deflater22.reset();
        int int70 = deflater22.getAdler();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        deflater72.reset();
        java.util.zip.Deflater deflater76 = new java.util.zip.Deflater((int) (byte) 1);
        deflater76.reset();
        int int78 = deflater76.getTotalIn();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater76.setInput(byteArray85);
        deflater72.setDictionary(byteArray85);
        deflater22.setInput(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray85, 16777472, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 1, false);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getAdler();
        int int4 = deflater1.getTotalOut();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        long long18 = deflater1.getBytesWritten();
        long long19 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getAdler();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater21.setInput(byteArray34, 0, 0);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        int int41 = deflater40.getTotalOut();
        int int42 = deflater40.getTotalOut();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        int int74 = deflater72.getAdler();
        java.util.zip.Deflater deflater76 = new java.util.zip.Deflater((int) (byte) 1);
        deflater76.reset();
        int int78 = deflater76.getTotalIn();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater76.setInput(byteArray85);
        deflater72.setInput(byteArray85, 0, 0);
        int int90 = deflater70.deflate(byteArray85);
        deflater44.setInput(byteArray85);
        deflater40.setDictionary(byteArray85);
        deflater21.setInput(byteArray85);
        int int96 = deflater1.deflate(byteArray85, 0, 6);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        boolean boolean8 = deflater1.needsInput();
        int int9 = deflater1.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        int int53 = deflater1.deflate(byteArray51);
        long long54 = deflater1.getBytesRead();
        boolean boolean55 = deflater1.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6L + "'", long54 == 6L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        deflater4.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater19.finish();
        long long31 = deflater19.getBytesRead();
        deflater19.reset();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater19.setInput(byteArray39, (int) (short) 0, (int) (short) 1);
        deflater4.setDictionary(byteArray39);
        deflater1.setInput(byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.reset();
        int int19 = deflater1.getAdler();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean23 = deflater22.needsInput();
        int int24 = deflater22.getTotalIn();
        long long25 = deflater22.getBytesRead();
        deflater22.finish();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        long long29 = deflater28.getBytesWritten();
        int int30 = deflater28.getTotalOut();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater47.setInput(byteArray67, (int) (short) 0, (int) (short) 1);
        deflater32.setDictionary(byteArray67);
        deflater28.setDictionary(byteArray67);
        deflater22.setDictionary(byteArray67);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = deflater1.deflate(byteArray67, (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        deflater2.reset();
        deflater2.setStrategy(0);
        int int6 = deflater2.getAdler();
        deflater2.end();
        java.lang.Class<?> wildcardClass8 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater44.setInput(byteArray56);
        deflater42.setInput(byteArray56);
        deflater42.setStrategy(0);
        boolean boolean62 = deflater42.needsInput();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater67 = new java.util.zip.Deflater((int) (byte) 1);
        deflater67.reset();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater70.setInput(byteArray79);
        deflater67.setInput(byteArray79);
        deflater65.setInput(byteArray79);
        deflater42.setInput(byteArray79);
        deflater1.setDictionary(byteArray79, (int) (short) 0, (int) (byte) 0);
        java.lang.Class<?> wildcardClass87 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setDictionary(byteArray14);
        long long17 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        long long20 = deflater19.getBytesWritten();
        int int21 = deflater19.getTotalOut();
        long long22 = deflater19.getBytesWritten();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        deflater24.reset();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater24.setDictionary(byteArray37);
        deflater19.setDictionary(byteArray37);
        int int41 = deflater1.deflate(byteArray37);
        long long42 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        int int19 = deflater1.getTotalOut();
        deflater1.reset();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getAdler();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater25.setInput(byteArray38, 0, 0);
        int int43 = deflater23.deflate(byteArray38);
        deflater23.end();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        long long47 = deflater46.getBytesWritten();
        int int48 = deflater46.getTotalIn();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater50.finish();
        long long62 = deflater50.getBytesRead();
        deflater50.reset();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater50.setDictionary(byteArray85);
        int int90 = deflater46.deflate(byteArray85);
        deflater23.setInput(byteArray85);
        deflater1.setInput(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        int int58 = deflater1.getTotalIn();
        deflater1.end();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        deflater2.finish();
        deflater2.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        int int11 = deflater8.getTotalIn();
        int int12 = deflater8.getTotalIn();
        long long13 = deflater8.getBytesWritten();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater15.setInput(byteArray35, (int) (short) 0, (int) (short) 1);
        deflater15.reset();
        deflater15.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        long long43 = deflater42.getBytesWritten();
        int int44 = deflater42.getTotalOut();
        long long45 = deflater42.getBytesWritten();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        deflater47.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater47.setDictionary(byteArray60);
        deflater42.setDictionary(byteArray60);
        deflater15.setInput(byteArray60);
        deflater8.setDictionary(byteArray60, 2, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = deflater2.deflate(byteArray60, (-1), 118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        int int7 = deflater1.getTotalIn();
        boolean boolean8 = deflater1.finished();
        long long9 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        deflater1.finish();
        deflater1.setLevel(9);
        deflater1.finish();
        deflater1.finish();
        boolean boolean13 = deflater1.needsInput();
        deflater1.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater16.finish();
        long long28 = deflater16.getBytesRead();
        deflater16.reset();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater16.setInput(byteArray36, (int) (short) 0, (int) (short) 1);
        deflater16.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater42.finish();
        long long54 = deflater42.getBytesRead();
        deflater42.reset();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater42.setInput(byteArray62, (int) (short) 0, (int) (short) 1);
        int int66 = deflater16.deflate(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = deflater1.deflate(byteArray62, 100, (int) (byte) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        long long2 = deflater1.getBytesWritten();
        deflater1.setStrategy((int) (byte) 1);
        java.lang.Class<?> wildcardClass5 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        int int8 = deflater5.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater13.setInput(byteArray25);
        deflater11.setInput(byteArray25);
        deflater11.setStrategy(0);
        boolean boolean31 = deflater11.needsInput();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater36.setInput(byteArray48);
        deflater34.setInput(byteArray48);
        deflater11.setInput(byteArray48);
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater54.finish();
        long long66 = deflater54.getBytesRead();
        deflater54.reset();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater54.setInput(byteArray74, (int) (short) 0, (int) (short) 1);
        deflater11.setInput(byteArray74);
        int int79 = deflater5.deflate(byteArray74);
        deflater2.setInput(byteArray74);
        int int81 = deflater2.getAdler();
        int int82 = deflater2.getTotalOut();
        deflater2.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        long long22 = deflater1.getBytesWritten();
        deflater1.finish();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean26 = deflater25.finished();
        deflater25.reset();
        boolean boolean28 = deflater25.finished();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater30.setInput(byteArray63);
        int int68 = deflater25.deflate(byteArray63);
        deflater1.setDictionary(byteArray63);
        int int70 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        long long21 = deflater20.getBytesWritten();
        int int22 = deflater20.getTotalOut();
        long long23 = deflater20.getBytesWritten();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        deflater25.reset();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater25.setDictionary(byteArray38);
        deflater20.setDictionary(byteArray38);
        deflater1.setDictionary(byteArray38, 3, (int) (byte) 1);
        boolean boolean45 = deflater1.finished();
        java.lang.Class<?> wildcardClass46 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        int int5 = deflater2.getTotalIn();
        deflater2.reset();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater(3, true);
        deflater9.reset();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean14 = deflater13.needsInput();
        int int15 = deflater13.getTotalIn();
        long long16 = deflater13.getBytesRead();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater36.setInput(byteArray48);
        deflater34.setInput(byteArray48);
        deflater34.setStrategy(0);
        boolean boolean54 = deflater34.needsInput();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater59.setInput(byteArray71);
        deflater57.setInput(byteArray71);
        deflater34.setInput(byteArray71);
        deflater18.setDictionary(byteArray71);
        int int77 = deflater13.deflate(byteArray71);
        deflater9.setDictionary(byteArray71);
        // The following exception was thrown during execution in test generation
        try {
            int int82 = deflater2.deflate(byteArray71, 720907, (int) (short) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalOut();
        long long5 = deflater1.getBytesRead();
        int int6 = deflater1.getTotalIn();
        long long7 = deflater1.getBytesWritten();
        java.lang.Class<?> wildcardClass8 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getAdler();
        long long9 = deflater1.getBytesWritten();
        boolean boolean10 = deflater1.finished();
        boolean boolean11 = deflater1.needsInput();
        int int12 = deflater1.getAdler();
        int int13 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (short) -1, false);
        deflater16.finish();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        long long20 = deflater19.getBytesWritten();
        int int21 = deflater19.getTotalOut();
        long long22 = deflater19.getBytesWritten();
        deflater19.reset();
        deflater19.reset();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        int int29 = deflater26.getTotalIn();
        int int30 = deflater26.getTotalIn();
        long long31 = deflater26.getBytesWritten();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater33.setInput(byteArray53, (int) (short) 0, (int) (short) 1);
        deflater33.reset();
        deflater33.reset();
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        long long61 = deflater60.getBytesWritten();
        int int62 = deflater60.getTotalOut();
        long long63 = deflater60.getBytesWritten();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        deflater65.reset();
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater69.setInput(byteArray78);
        deflater65.setDictionary(byteArray78);
        deflater60.setDictionary(byteArray78);
        deflater33.setInput(byteArray78);
        deflater26.setDictionary(byteArray78, 2, (int) (short) 0);
        int int86 = deflater19.deflate(byteArray78);
        int int87 = deflater16.deflate(byteArray78);
        deflater1.setDictionary(byteArray78);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[120, -100, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        deflater1.reset();
        long long14 = deflater1.getBytesRead();
        boolean boolean15 = deflater1.needsInput();
        long long16 = deflater1.getBytesWritten();
        boolean boolean17 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((-1), true);
        long long17 = deflater16.getBytesWritten();
        deflater16.setLevel(2);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        deflater21.setDictionary(byteArray56);
        deflater16.setInput(byteArray56);
        deflater1.setInput(byteArray56, 3, 1);
        boolean boolean65 = deflater1.finished();
        int int66 = deflater1.getTotalIn();
        int int67 = deflater1.getAdler();
        long long68 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater(1, true);
        boolean boolean72 = deflater71.needsInput();
        int int73 = deflater71.getAdler();
        deflater71.reset();
        byte[] byteArray81 = new byte[] { (byte) -1, (byte) 10, (byte) 10, (byte) 100, (byte) 1, (byte) 1 };
        deflater71.setInput(byteArray81, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = deflater1.deflate(byteArray81, (int) '4', (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1, 10, 10, 100, 1, 1]");
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        deflater2.end();
        boolean boolean7 = deflater2.needsInput();
        deflater2.setLevel(6);
        java.lang.Class<?> wildcardClass10 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(1, true);
        boolean boolean9 = deflater8.needsInput();
        int int10 = deflater8.getTotalOut();
        deflater8.finish();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater13.setInput(byteArray25);
        boolean boolean28 = deflater13.needsInput();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater48.setInput(byteArray60);
        deflater46.setInput(byteArray60);
        deflater46.setStrategy(0);
        boolean boolean66 = deflater46.needsInput();
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater((int) (byte) 1);
        deflater71.reset();
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        int int76 = deflater74.getTotalIn();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater74.setInput(byteArray83);
        deflater71.setInput(byteArray83);
        deflater69.setInput(byteArray83);
        deflater46.setInput(byteArray83);
        deflater30.setDictionary(byteArray83);
        int int89 = deflater13.deflate(byteArray83);
        deflater8.setDictionary(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray83, (-1), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater6.setInput(byteArray18);
        int int21 = deflater1.deflate(byteArray18);
        java.lang.Class<?> wildcardClass22 = byteArray18.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        boolean boolean8 = deflater1.needsInput();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        long long11 = deflater10.getBytesWritten();
        int int12 = deflater10.getTotalIn();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater29.setInput(byteArray49, (int) (short) 0, (int) (short) 1);
        deflater14.setDictionary(byteArray49);
        int int54 = deflater10.deflate(byteArray49);
        deflater1.setInput(byteArray49);
        deflater1.finish();
        boolean boolean57 = deflater1.needsInput();
        boolean boolean58 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        long long19 = deflater1.getBytesRead();
        int int20 = deflater1.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesRead();
        deflater2.finish();
        java.lang.Class<?> wildcardClass25 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setDictionary(byteArray14);
        long long17 = deflater1.getBytesRead();
        int int18 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        deflater20.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater20.setDictionary(byteArray33);
        int int36 = deflater20.getAdler();
        int int37 = deflater20.getAdler();
        deflater20.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        long long41 = deflater40.getBytesWritten();
        long long42 = deflater40.getBytesWritten();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        int int61 = deflater59.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater59.setInput(byteArray68);
        deflater59.finish();
        long long71 = deflater59.getBytesRead();
        deflater59.reset();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater59.setInput(byteArray79, (int) (short) 0, (int) (short) 1);
        deflater44.setDictionary(byteArray79);
        deflater40.setInput(byteArray79);
        deflater20.setInput(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = deflater1.deflate(byteArray79, 8, (int) (short) 100, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 87360012 + "'", int36 == 87360012);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 87360012 + "'", int37 == 87360012);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        deflater2.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.end();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        long long7 = deflater6.getBytesWritten();
        long long8 = deflater6.getBytesWritten();
        long long9 = deflater6.getBytesWritten();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (short) -1, false);
        deflater12.finish();
        boolean boolean14 = deflater12.finished();
        deflater12.setLevel(8);
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        int int32 = deflater18.getTotalIn();
        deflater18.finish();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater(3, true);
        int int37 = deflater36.getAdler();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((-1), true);
        long long41 = deflater40.getBytesWritten();
        deflater40.setLevel(2);
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        int int62 = deflater60.getTotalIn();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater60.setInput(byteArray69);
        deflater60.finish();
        long long72 = deflater60.getBytesRead();
        deflater60.reset();
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater60.setInput(byteArray80, (int) (short) 0, (int) (short) 1);
        deflater45.setDictionary(byteArray80);
        deflater40.setInput(byteArray80);
        deflater36.setDictionary(byteArray80);
        deflater18.setInput(byteArray80);
        deflater12.setInput(byteArray80, 0, 3);
        deflater6.setInput(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = deflater1.deflate(byteArray80, (int) '#', 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        long long25 = deflater2.getBytesWritten();
        deflater2.finish();
        int int27 = deflater2.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        deflater0.reset();
        long long2 = deflater0.getBytesWritten();
        int int3 = deflater0.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean6 = deflater5.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater8.finish();
        long long20 = deflater8.getBytesRead();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater37.setInput(byteArray57, (int) (short) 0, (int) (short) 1);
        deflater22.setDictionary(byteArray57);
        int int62 = deflater8.deflate(byteArray57);
        int int65 = deflater5.deflate(byteArray57, (int) (byte) 1, 2);
        int int68 = deflater0.deflate(byteArray57, 0, 1);
        deflater0.reset();
        deflater0.setLevel((int) (short) -1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, false);
        int int3 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean6 = deflater5.finished();
        deflater5.reset();
        boolean boolean8 = deflater5.finished();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.reset();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater23.setInput(byteArray43, (int) (short) 0, (int) (short) 1);
        deflater10.setInput(byteArray43);
        int int48 = deflater5.deflate(byteArray43);
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater(1, true);
        boolean boolean52 = deflater51.needsInput();
        int int53 = deflater51.getAdler();
        deflater51.reset();
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 10, (byte) 10, (byte) 100, (byte) 1, (byte) 1 };
        deflater51.setInput(byteArray61, 1, 0);
        deflater5.setDictionary(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray61, 10, 118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10, 10, 100, 1, 1]");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalIn();
        deflater1.end();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        long long9 = deflater8.getBytesWritten();
        int int10 = deflater8.getTotalOut();
        long long11 = deflater8.getBytesWritten();
        deflater8.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        int int25 = deflater14.getAdler();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((-1), true);
        long long43 = deflater42.getBytesWritten();
        deflater42.setLevel(2);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater62.finish();
        long long74 = deflater62.getBytesRead();
        deflater62.reset();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater62.setInput(byteArray82, (int) (short) 0, (int) (short) 1);
        deflater47.setDictionary(byteArray82);
        deflater42.setInput(byteArray82);
        deflater27.setInput(byteArray82, 3, 1);
        int int91 = deflater14.deflate(byteArray82);
        deflater8.setInput(byteArray82);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray82, 9, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[120, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater24.setInput(byteArray36);
        deflater22.setInput(byteArray36);
        deflater22.setStrategy(0);
        boolean boolean42 = deflater22.needsInput();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater47.setInput(byteArray59);
        deflater45.setInput(byteArray59);
        deflater22.setInput(byteArray59);
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater22.setInput(byteArray85);
        int int90 = deflater2.deflate(byteArray85);
        boolean boolean91 = deflater2.finished();
        int int92 = deflater2.getTotalIn();
        int int93 = deflater2.getTotalOut();
        deflater2.end();
        java.lang.Class<?> wildcardClass95 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        long long4 = deflater1.getBytesWritten();
        boolean boolean5 = deflater1.finished();
        java.lang.Class<?> wildcardClass6 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getAdler();
        long long9 = deflater1.getBytesWritten();
        boolean boolean10 = deflater1.finished();
        int int11 = deflater1.getAdler();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        deflater13.finish();
        int int17 = deflater13.getTotalOut();
        boolean boolean18 = deflater13.needsInput();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getAdler();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getTotalIn();
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater52.setInput(byteArray61);
        deflater48.setInput(byteArray61, 0, 0);
        int int66 = deflater46.deflate(byteArray61);
        deflater20.setInput(byteArray61);
        int int68 = deflater13.deflate(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            int int72 = deflater1.deflate(byteArray61, 8, (int) '4', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        deflater1.finish();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) -1);
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater12.setInput(byteArray24);
        boolean boolean27 = deflater12.needsInput();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater47.setInput(byteArray59);
        deflater45.setInput(byteArray59);
        deflater45.setStrategy(0);
        boolean boolean65 = deflater45.needsInput();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater((int) (byte) 1);
        deflater73.reset();
        int int75 = deflater73.getTotalIn();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater73.setInput(byteArray82);
        deflater70.setInput(byteArray82);
        deflater68.setInput(byteArray82);
        deflater45.setInput(byteArray82);
        deflater29.setDictionary(byteArray82);
        int int88 = deflater12.deflate(byteArray82);
        int int89 = deflater10.deflate(byteArray82);
        deflater1.setDictionary(byteArray82);
        int int91 = deflater1.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        long long4 = deflater1.getBytesWritten();
        deflater1.reset();
        deflater1.reset();
        deflater1.finish();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        deflater9.finish();
        int int13 = deflater9.getTotalOut();
        boolean boolean14 = deflater9.needsInput();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater16.finish();
        long long28 = deflater16.getBytesRead();
        deflater16.reset();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater16.setInput(byteArray36, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getAdler();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater44.setInput(byteArray57, 0, 0);
        int int62 = deflater42.deflate(byteArray57);
        deflater16.setInput(byteArray57);
        int int64 = deflater9.deflate(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray57, (int) (byte) -1, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getTotalIn();
        long long9 = deflater1.getBytesRead();
        deflater1.reset();
        java.lang.Class<?> wildcardClass11 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        int int58 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        deflater63.finish();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater63.setInput(byteArray77);
        int int80 = deflater60.deflate(byteArray77);
        int int81 = deflater1.deflate(byteArray77);
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1, -97, 17, 0, 5, 53]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 6 + "'", int81 == 6);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater(2, true);
        int int6 = deflater5.getTotalIn();
        int int7 = deflater5.getTotalOut();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater9.setInput(byteArray21);
        boolean boolean24 = deflater9.needsInput();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater26.finish();
        long long38 = deflater26.getBytesRead();
        deflater26.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater44.setInput(byteArray56);
        deflater42.setInput(byteArray56);
        deflater42.setStrategy(0);
        boolean boolean62 = deflater42.needsInput();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater67 = new java.util.zip.Deflater((int) (byte) 1);
        deflater67.reset();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater70.setInput(byteArray79);
        deflater67.setInput(byteArray79);
        deflater65.setInput(byteArray79);
        deflater42.setInput(byteArray79);
        deflater26.setDictionary(byteArray79);
        int int85 = deflater9.deflate(byteArray79);
        int int86 = deflater5.deflate(byteArray79);
        int int87 = deflater2.deflate(byteArray79);
        java.lang.Class<?> wildcardClass88 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        int int26 = deflater1.getAdler();
        deflater1.setStrategy((int) (byte) 0);
        boolean boolean29 = deflater1.needsInput();
        java.lang.Class<?> wildcardClass30 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater5.setInput(byteArray25, (int) (short) 0, (int) (short) 1);
        deflater5.reset();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean32 = deflater31.finished();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater48.finish();
        long long60 = deflater48.getBytesRead();
        deflater48.reset();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater63.setInput(byteArray72);
        deflater63.finish();
        long long75 = deflater63.getBytesRead();
        deflater63.reset();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater63.setInput(byteArray83, (int) (short) 0, (int) (short) 1);
        deflater48.setDictionary(byteArray83);
        int int88 = deflater34.deflate(byteArray83);
        int int91 = deflater31.deflate(byteArray83, (int) (byte) 1, 2);
        int int92 = deflater5.deflate(byteArray83);
        deflater1.setDictionary(byteArray83, 0, 1);
        deflater1.finish();
        deflater1.end();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 6 + "'", int88 == 6);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        long long2 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater8.setInput(byteArray20);
        deflater8.setLevel((int) (byte) -1);
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater26.finish();
        long long38 = deflater26.getBytesRead();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater55.finish();
        long long67 = deflater55.getBytesRead();
        deflater55.reset();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater55.setInput(byteArray75, (int) (short) 0, (int) (short) 1);
        deflater40.setDictionary(byteArray75);
        int int80 = deflater26.deflate(byteArray75);
        deflater8.setInput(byteArray75);
        deflater4.setInput(byteArray75);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray75, 720907, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 6 + "'", int80 == 6);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater17.setInput(byteArray29);
        deflater15.setInput(byteArray29);
        deflater15.setStrategy(0);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean37 = deflater36.finished();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater39.finish();
        long long51 = deflater39.getBytesRead();
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater((int) (byte) 1);
        deflater53.reset();
        int int55 = deflater53.getTotalIn();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater53.setInput(byteArray62);
        deflater53.finish();
        long long65 = deflater53.getBytesRead();
        deflater53.reset();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater68.finish();
        long long80 = deflater68.getBytesRead();
        deflater68.reset();
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater68.setInput(byteArray88, (int) (short) 0, (int) (short) 1);
        deflater53.setDictionary(byteArray88);
        int int93 = deflater39.deflate(byteArray88);
        int int96 = deflater36.deflate(byteArray88, (int) (byte) 1, 2);
        deflater15.setInput(byteArray88);
        int int98 = deflater1.deflate(byteArray88);
        long long99 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 6 + "'", int93 == 6);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 1, false);
        long long3 = deflater2.getBytesWritten();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater27.setInput(byteArray39);
        deflater25.setInput(byteArray39);
        deflater2.setInput(byteArray39);
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        deflater2.setInput(byteArray65);
        int int70 = deflater2.getTotalOut();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        long long73 = deflater72.getBytesWritten();
        long long74 = deflater72.getBytesWritten();
        deflater72.setLevel((int) (byte) 0);
        deflater72.reset();
        java.util.zip.Deflater deflater80 = new java.util.zip.Deflater((int) (short) -1, false);
        long long81 = deflater80.getBytesWritten();
        java.util.zip.Deflater deflater83 = new java.util.zip.Deflater((int) (byte) 1);
        deflater83.reset();
        int int85 = deflater83.getTotalIn();
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater83.setInput(byteArray92);
        deflater80.setDictionary(byteArray92);
        deflater72.setInput(byteArray92);
        deflater2.setDictionary(byteArray92, (int) (byte) 0, 1);
        int int99 = deflater2.getAdler();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        java.util.zip.Deflater deflater3 = new java.util.zip.Deflater((int) (byte) 1);
        deflater3.reset();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater3.setInput(byteArray15);
        boolean boolean18 = deflater3.needsInput();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater38.setInput(byteArray50);
        deflater36.setInput(byteArray50);
        deflater36.setStrategy(0);
        boolean boolean56 = deflater36.needsInput();
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater((int) (byte) 1);
        deflater61.reset();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        int int66 = deflater64.getTotalIn();
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater64.setInput(byteArray73);
        deflater61.setInput(byteArray73);
        deflater59.setInput(byteArray73);
        deflater36.setInput(byteArray73);
        deflater20.setDictionary(byteArray73);
        int int79 = deflater3.deflate(byteArray73);
        int int80 = deflater1.deflate(byteArray73);
        java.lang.Class<?> wildcardClass81 = byteArray73.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        boolean boolean4 = deflater1.finished();
        int int5 = deflater1.getTotalOut();
        int int6 = deflater1.getAdler();
        java.lang.Class<?> wildcardClass7 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        int int26 = deflater1.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        long long19 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (short) -1, false);
        int int23 = deflater22.getTotalIn();
        int int24 = deflater22.getTotalIn();
        boolean boolean25 = deflater22.finished();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getAdler();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater27.setInput(byteArray40, 0, 0);
        int int45 = deflater22.deflate(byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray40, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        int int10 = deflater7.getTotalIn();
        int int11 = deflater7.getTotalIn();
        long long12 = deflater7.getBytesWritten();
        int int13 = deflater7.getTotalOut();
        boolean boolean14 = deflater7.needsInput();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        long long17 = deflater16.getBytesWritten();
        int int18 = deflater16.getTotalIn();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        int int60 = deflater16.deflate(byteArray55);
        deflater7.setInput(byteArray55);
        deflater7.finish();
        deflater7.setLevel(2);
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        deflater66.reset();
        boolean boolean70 = deflater66.finished();
        int int71 = deflater66.getTotalOut();
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater((int) (byte) 1);
        deflater73.reset();
        int int75 = deflater73.getAdler();
        java.util.zip.Deflater deflater77 = new java.util.zip.Deflater((int) (byte) 1);
        deflater77.reset();
        int int79 = deflater77.getTotalIn();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater77.setInput(byteArray86);
        deflater73.setInput(byteArray86);
        int int91 = deflater66.deflate(byteArray86, 0, 0);
        int int92 = deflater7.deflate(byteArray86);
        deflater1.setInput(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesRead();
        long long3 = deflater1.getBytesRead();
        long long4 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater6.finish();
        long long18 = deflater6.getBytesRead();
        deflater6.reset();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater6.setInput(byteArray26, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray26);
        long long31 = deflater1.getBytesWritten();
        java.lang.Class<?> wildcardClass32 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater33.setInput(byteArray53, (int) (short) 0, (int) (short) 1);
        deflater18.setDictionary(byteArray53);
        int int58 = deflater4.deflate(byteArray53);
        int int61 = deflater1.deflate(byteArray53, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater();
        deflater62.reset();
        long long64 = deflater62.getBytesWritten();
        int int65 = deflater62.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 1 };
        deflater62.setInput(byteArray68);
        deflater1.setDictionary(byteArray68);
        long long71 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        deflater1.reset();
        boolean boolean9 = deflater1.finished();
        boolean boolean10 = deflater1.needsInput();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        long long4 = deflater1.getBytesWritten();
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        int int11 = deflater8.getTotalIn();
        int int12 = deflater8.getTotalIn();
        long long13 = deflater8.getBytesWritten();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater15.setInput(byteArray35, (int) (short) 0, (int) (short) 1);
        deflater15.reset();
        deflater15.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        long long43 = deflater42.getBytesWritten();
        int int44 = deflater42.getTotalOut();
        long long45 = deflater42.getBytesWritten();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        deflater47.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater47.setDictionary(byteArray60);
        deflater42.setDictionary(byteArray60);
        deflater15.setInput(byteArray60);
        deflater8.setDictionary(byteArray60, 2, (int) (short) 0);
        int int68 = deflater1.deflate(byteArray60);
        int int69 = deflater1.getTotalOut();
        java.lang.Class<?> wildcardClass70 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        boolean boolean46 = deflater1.needsInput();
        int int47 = deflater1.getAdler();
        deflater1.setLevel(2);
        int int50 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        long long4 = deflater1.getBytesWritten();
        boolean boolean5 = deflater1.finished();
        boolean boolean6 = deflater1.finished();
        int int7 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((-1), true);
        deflater10.finish();
        deflater10.finish();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((-1));
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        int int27 = deflater16.getAdler();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((-1), true);
        long long45 = deflater44.getBytesWritten();
        deflater44.setLevel(2);
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        int int66 = deflater64.getTotalIn();
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater64.setInput(byteArray73);
        deflater64.finish();
        long long76 = deflater64.getBytesRead();
        deflater64.reset();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater64.setInput(byteArray84, (int) (short) 0, (int) (short) 1);
        deflater49.setDictionary(byteArray84);
        deflater44.setInput(byteArray84);
        deflater29.setInput(byteArray84, 3, 1);
        int int93 = deflater16.deflate(byteArray84);
        int int94 = deflater14.deflate(byteArray84);
        int int95 = deflater10.deflate(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray84, (int) (byte) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[3, 0, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(8);
        boolean boolean2 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        int int19 = deflater1.getTotalOut();
        long long20 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((-1), true);
        long long24 = deflater23.getBytesWritten();
        deflater23.setLevel(2);
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater28.setDictionary(byteArray63);
        deflater23.setInput(byteArray63);
        long long69 = deflater23.getBytesRead();
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater((int) (byte) 1);
        deflater71.reset();
        deflater71.reset();
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater((int) (byte) 1);
        deflater75.reset();
        int int77 = deflater75.getTotalIn();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater75.setInput(byteArray84);
        deflater71.setDictionary(byteArray84);
        deflater23.setInput(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray84, (int) (short) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getTotalIn();
        deflater2.reset();
        deflater2.finish();
        deflater2.reset();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater27.setInput(byteArray39);
        deflater25.setInput(byteArray39);
        deflater2.setInput(byteArray39);
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        deflater2.setInput(byteArray65);
        int int70 = deflater2.getTotalOut();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        long long73 = deflater72.getBytesWritten();
        long long74 = deflater72.getBytesWritten();
        deflater72.setLevel((int) (byte) 0);
        deflater72.reset();
        java.util.zip.Deflater deflater80 = new java.util.zip.Deflater((int) (short) -1, false);
        long long81 = deflater80.getBytesWritten();
        java.util.zip.Deflater deflater83 = new java.util.zip.Deflater((int) (byte) 1);
        deflater83.reset();
        int int85 = deflater83.getTotalIn();
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater83.setInput(byteArray92);
        deflater80.setDictionary(byteArray92);
        deflater72.setInput(byteArray92);
        deflater2.setDictionary(byteArray92, (int) (byte) 0, 1);
        boolean boolean99 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.reset();
        int int4 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater(3, true);
        int int8 = deflater7.getAdler();
        deflater7.setStrategy(0);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean14 = deflater13.needsInput();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater19.setInput(byteArray31);
        deflater17.setInput(byteArray31);
        deflater17.setStrategy(0);
        boolean boolean37 = deflater17.needsInput();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater42.setInput(byteArray54);
        deflater40.setInput(byteArray54);
        deflater17.setInput(byteArray54);
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        int int62 = deflater60.getTotalIn();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater60.setInput(byteArray69);
        deflater60.finish();
        long long72 = deflater60.getBytesRead();
        deflater60.reset();
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater60.setInput(byteArray80, (int) (short) 0, (int) (short) 1);
        deflater17.setInput(byteArray80);
        int int85 = deflater13.deflate(byteArray80);
        deflater7.setInput(byteArray80, 2, 0);
        int int89 = deflater1.deflate(byteArray80);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (short) -1, false);
        int int16 = deflater15.getTotalIn();
        int int17 = deflater15.getTotalIn();
        boolean boolean18 = deflater15.finished();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getAdler();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater20.setInput(byteArray33, 0, 0);
        int int38 = deflater15.deflate(byteArray33);
        int int41 = deflater1.deflate(byteArray33, 0, (int) (short) 0);
        java.lang.Class<?> wildcardClass42 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        int int7 = deflater4.getTotalIn();
        deflater4.finish();
        deflater4.reset();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater4.setInput(byteArray20);
        deflater4.finish();
        int int24 = deflater4.getAdler();
        int int25 = deflater4.getTotalIn();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((-1), true);
        long long29 = deflater28.getBytesWritten();
        deflater28.setLevel(2);
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater48.finish();
        long long60 = deflater48.getBytesRead();
        deflater48.reset();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater48.setInput(byteArray68, (int) (short) 0, (int) (short) 1);
        deflater33.setDictionary(byteArray68);
        deflater28.setInput(byteArray68);
        deflater4.setDictionary(byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray68, (-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), false);
        deflater2.setLevel(6);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.reset();
        boolean boolean4 = deflater1.finished();
        java.lang.Class<?> wildcardClass5 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        deflater1.reset();
        boolean boolean27 = deflater1.finished();
        long long28 = deflater1.getBytesRead();
        int int29 = deflater1.getAdler();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, false);
        deflater2.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, false);
        java.lang.Class<?> wildcardClass3 = deflater2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        long long4 = deflater1.getBytesWritten();
        int int5 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(3);
        deflater1.end();
        deflater1.finish();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        deflater5.reset();
        boolean boolean9 = deflater5.finished();
        int int10 = deflater5.getTotalOut();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getAdler();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater12.setInput(byteArray25);
        int int30 = deflater5.deflate(byteArray25, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = deflater1.deflate(byteArray25, (int) (short) -1, 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        int int13 = deflater1.getAdler();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater15.setInput(byteArray27);
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater((int) (byte) 1);
        deflater53.reset();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater53.setInput(byteArray65);
        deflater51.setInput(byteArray65);
        deflater51.setStrategy(0);
        boolean boolean71 = deflater51.needsInput();
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater76 = new java.util.zip.Deflater((int) (byte) 1);
        deflater76.reset();
        java.util.zip.Deflater deflater79 = new java.util.zip.Deflater((int) (byte) 1);
        deflater79.reset();
        int int81 = deflater79.getTotalIn();
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater79.setInput(byteArray88);
        deflater76.setInput(byteArray88);
        deflater74.setInput(byteArray88);
        deflater51.setInput(byteArray88);
        deflater35.setDictionary(byteArray88);
        int int94 = deflater31.deflate(byteArray88);
        int int95 = deflater15.deflate(byteArray88);
        deflater1.setInput(byteArray88);
        long long97 = deflater1.getBytesWritten();
        long long98 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 0L + "'", long98 == 0L);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        int int7 = deflater1.getTotalIn();
        deflater1.reset();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (short) -1, false);
        long long12 = deflater11.getBytesWritten();
        deflater11.setStrategy((int) (byte) 1);
        long long15 = deflater11.getBytesWritten();
        long long16 = deflater11.getBytesWritten();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        int int29 = deflater18.getAdler();
        deflater18.reset();
        long long31 = deflater18.getBytesWritten();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        deflater33.reset();
        deflater33.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        deflater38.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater38.setDictionary(byteArray51);
        int int54 = deflater33.deflate(byteArray51);
        deflater18.setDictionary(byteArray51);
        deflater11.setDictionary(byteArray51);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = deflater1.deflate(byteArray51, (int) (byte) 10, (int) '#', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getAdler();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater4.setInput(byteArray17, 0, 0);
        int int22 = deflater2.deflate(byteArray17);
        boolean boolean23 = deflater2.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel(16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        boolean boolean5 = deflater2.needsInput();
        deflater2.finish();
        deflater2.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (short) 1);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater6.setInput(byteArray18);
        deflater4.setInput(byteArray18);
        deflater4.setStrategy(0);
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean26 = deflater25.finished();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater42.finish();
        long long54 = deflater42.getBytesRead();
        deflater42.reset();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater((int) (byte) 1);
        deflater57.reset();
        int int59 = deflater57.getTotalIn();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater57.setInput(byteArray66);
        deflater57.finish();
        long long69 = deflater57.getBytesRead();
        deflater57.reset();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater57.setInput(byteArray77, (int) (short) 0, (int) (short) 1);
        deflater42.setDictionary(byteArray77);
        int int82 = deflater28.deflate(byteArray77);
        int int85 = deflater25.deflate(byteArray77, (int) (byte) 1, 2);
        deflater4.setInput(byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = deflater1.deflate(byteArray77, 1, 6, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 6 + "'", int82 == 6);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        deflater1.finish();
        int int64 = deflater1.getAdler();
        deflater1.finish();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 118882828 + "'", int64 == 118882828);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater24.setInput(byteArray36);
        deflater22.setInput(byteArray36);
        deflater22.setStrategy(0);
        boolean boolean42 = deflater22.needsInput();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater47.setInput(byteArray59);
        deflater45.setInput(byteArray59);
        deflater22.setInput(byteArray59);
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater22.setInput(byteArray85);
        int int90 = deflater2.deflate(byteArray85);
        deflater2.setStrategy((int) (short) 1);
        deflater2.reset();
        deflater2.reset();
        long long95 = deflater2.getBytesRead();
        long long96 = deflater2.getBytesWritten();
        long long97 = deflater2.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getTotalIn();
        deflater2.reset();
        deflater2.setLevel(3);
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (short) -1, false);
        long long55 = deflater54.getBytesWritten();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater((int) (byte) 1);
        deflater57.reset();
        int int59 = deflater57.getTotalIn();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater57.setInput(byteArray66);
        deflater54.setDictionary(byteArray66);
        boolean boolean69 = deflater54.needsInput();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        int int76 = deflater74.getAdler();
        java.util.zip.Deflater deflater78 = new java.util.zip.Deflater((int) (byte) 1);
        deflater78.reset();
        int int80 = deflater78.getTotalIn();
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater78.setInput(byteArray87);
        deflater74.setInput(byteArray87, 0, 0);
        int int92 = deflater72.deflate(byteArray87);
        deflater54.setInput(byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray87, (int) (short) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        int int19 = deflater1.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 100, (byte) 10, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            int int26 = deflater1.deflate(byteArray23, (int) '4', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100, 10, 0]");
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater16.finish();
        long long28 = deflater16.getBytesRead();
        deflater16.reset();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater16.setInput(byteArray36, (int) (short) 0, (int) (short) 1);
        int int40 = deflater1.deflate(byteArray36);
        int int41 = deflater1.getAdler();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        int int2 = deflater1.getAdler();
        java.lang.Class<?> wildcardClass3 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        int int23 = deflater2.getTotalOut();
        java.lang.Class<?> wildcardClass24 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        deflater2.reset();
        deflater2.setStrategy(0);
        long long6 = deflater2.getBytesRead();
        deflater2.setLevel(0);
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        int int13 = deflater10.getTotalIn();
        deflater10.finish();
        deflater10.reset();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater10.setInput(byteArray26);
        long long29 = deflater10.getBytesWritten();
        deflater10.reset();
        int int31 = deflater10.getAdler();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        deflater33.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater33.setDictionary(byteArray46);
        deflater10.setInput(byteArray46, 3, 3);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray46, (int) (short) 1, 118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.reset();
        boolean boolean4 = deflater1.finished();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater6.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater19.finish();
        long long31 = deflater19.getBytesRead();
        deflater19.reset();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater19.setInput(byteArray39, (int) (short) 0, (int) (short) 1);
        deflater6.setInput(byteArray39);
        int int44 = deflater1.deflate(byteArray39);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater(1, true);
        boolean boolean48 = deflater47.needsInput();
        int int49 = deflater47.getAdler();
        deflater47.reset();
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 10, (byte) 10, (byte) 100, (byte) 1, (byte) 1 };
        deflater47.setInput(byteArray57, 1, 0);
        deflater1.setDictionary(byteArray57);
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater63.setInput(byteArray72);
        deflater63.reset();
        java.util.zip.Deflater deflater76 = new java.util.zip.Deflater((int) (byte) 1);
        deflater76.reset();
        deflater76.reset();
        deflater76.reset();
        java.util.zip.Deflater deflater81 = new java.util.zip.Deflater((int) (byte) 1);
        deflater81.reset();
        deflater81.reset();
        java.util.zip.Deflater deflater85 = new java.util.zip.Deflater((int) (byte) 1);
        deflater85.reset();
        int int87 = deflater85.getTotalIn();
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater85.setInput(byteArray94);
        deflater81.setDictionary(byteArray94);
        int int97 = deflater76.deflate(byteArray94);
        deflater63.setDictionary(byteArray94);
        deflater1.setInput(byteArray94);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 10, 10, 100, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater(1, true);
        boolean boolean17 = deflater16.needsInput();
        int int18 = deflater16.getTotalOut();
        deflater16.finish();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater21.setInput(byteArray33);
        boolean boolean36 = deflater21.needsInput();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        int int61 = deflater59.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater59.setInput(byteArray68);
        deflater56.setInput(byteArray68);
        deflater54.setInput(byteArray68);
        deflater54.setStrategy(0);
        boolean boolean74 = deflater54.needsInput();
        java.util.zip.Deflater deflater77 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater79 = new java.util.zip.Deflater((int) (byte) 1);
        deflater79.reset();
        java.util.zip.Deflater deflater82 = new java.util.zip.Deflater((int) (byte) 1);
        deflater82.reset();
        int int84 = deflater82.getTotalIn();
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater82.setInput(byteArray91);
        deflater79.setInput(byteArray91);
        deflater77.setInput(byteArray91);
        deflater54.setInput(byteArray91);
        deflater38.setDictionary(byteArray91);
        int int97 = deflater21.deflate(byteArray91);
        deflater16.setDictionary(byteArray91);
        int int99 = deflater1.deflate(byteArray91);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2 + "'", int97 == 2);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 6 + "'", int99 == 6);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        int int12 = deflater9.getTotalIn();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater17.setInput(byteArray29);
        deflater15.setInput(byteArray29);
        deflater15.setStrategy(0);
        boolean boolean35 = deflater15.needsInput();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater40.setInput(byteArray52);
        deflater38.setInput(byteArray52);
        deflater15.setInput(byteArray52);
        java.util.zip.Deflater deflater58 = new java.util.zip.Deflater((int) (byte) 1);
        deflater58.reset();
        int int60 = deflater58.getTotalIn();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater58.setInput(byteArray67);
        deflater58.finish();
        long long70 = deflater58.getBytesRead();
        deflater58.reset();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater58.setInput(byteArray78, (int) (short) 0, (int) (short) 1);
        deflater15.setInput(byteArray78);
        int int83 = deflater9.deflate(byteArray78);
        int int84 = deflater1.deflate(byteArray78);
        java.lang.Class<?> wildcardClass85 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater8.finish();
        long long20 = deflater8.getBytesRead();
        deflater8.reset();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater8.setInput(byteArray28, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getAdler();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater36.setInput(byteArray49, 0, 0);
        int int54 = deflater34.deflate(byteArray49);
        deflater8.setInput(byteArray49);
        int int56 = deflater1.deflate(byteArray49);
        java.lang.Class<?> wildcardClass57 = byteArray49.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((-1), true);
        long long17 = deflater16.getBytesWritten();
        deflater16.setLevel(2);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        deflater21.setDictionary(byteArray56);
        deflater16.setInput(byteArray56);
        deflater1.setInput(byteArray56, 3, 1);
        boolean boolean65 = deflater1.finished();
        deflater1.reset();
        boolean boolean67 = deflater1.finished();
        int int68 = deflater1.getTotalOut();
        boolean boolean69 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        long long46 = deflater1.getBytesWritten();
        deflater1.reset();
        int int48 = deflater1.getTotalOut();
        deflater1.setLevel((-1));
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        deflater2.end();
        deflater2.setStrategy(1);
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        deflater10.finish();
        int int14 = deflater10.getTotalOut();
        boolean boolean15 = deflater10.needsInput();
        deflater10.setLevel((int) (short) 0);
        int int18 = deflater10.getTotalIn();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (short) -1, false);
        int int22 = deflater21.getTotalIn();
        int int23 = deflater21.getTotalIn();
        boolean boolean24 = deflater21.finished();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        long long27 = deflater26.getBytesWritten();
        int int28 = deflater26.getTotalIn();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        deflater30.setDictionary(byteArray65);
        int int70 = deflater26.deflate(byteArray65);
        deflater21.setDictionary(byteArray65);
        int int72 = deflater10.deflate(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray65, (int) (short) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        deflater2.end();
        deflater2.setLevel((int) (short) -1);
        deflater2.end();
        boolean boolean10 = deflater2.needsInput();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean13 = deflater12.finished();
        deflater12.finish();
        int int15 = deflater12.getTotalIn();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((-1), true);
        long long19 = deflater18.getBytesWritten();
        deflater18.setLevel(2);
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater38.setInput(byteArray58, (int) (short) 0, (int) (short) 1);
        deflater23.setDictionary(byteArray58);
        deflater18.setInput(byteArray58);
        int int64 = deflater12.deflate(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray58, 8, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[120, -100, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        long long4 = deflater2.getBytesWritten();
        int int5 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((-1), true);
        long long9 = deflater8.getBytesWritten();
        deflater8.setLevel(2);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater13.finish();
        long long25 = deflater13.getBytesRead();
        deflater13.reset();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater28.setInput(byteArray48, (int) (short) 0, (int) (short) 1);
        deflater13.setDictionary(byteArray48);
        deflater8.setInput(byteArray48);
        long long54 = deflater8.getBytesRead();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        deflater56.reset();
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        int int62 = deflater60.getTotalIn();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater60.setInput(byteArray69);
        deflater56.setDictionary(byteArray69);
        deflater8.setInput(byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = deflater2.deflate(byteArray69, (int) (short) 1, 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.reset();
        int int19 = deflater1.getAdler();
        long long20 = deflater1.getBytesWritten();
        int int21 = deflater1.getAdler();
        boolean boolean22 = deflater1.finished();
        long long23 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getAdler();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater41.setInput(byteArray54, 0, 0);
        int int59 = deflater39.deflate(byteArray54);
        deflater25.setDictionary(byteArray54, (int) (byte) 0, 2);
        deflater1.setDictionary(byteArray54);
        boolean boolean64 = deflater1.finished();
        int int65 = deflater1.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 87360012 + "'", int65 == 87360012);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        boolean boolean62 = deflater1.finished();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        int int66 = deflater64.getTotalIn();
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater64.setInput(byteArray73);
        deflater64.finish();
        long long76 = deflater64.getBytesRead();
        deflater64.reset();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater64.setInput(byteArray84, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray84);
        boolean boolean89 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 0);
        long long2 = deflater1.getBytesRead();
        long long3 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater5.setInput(byteArray25, (int) (short) 0, (int) (short) 1);
        deflater5.reset();
        deflater5.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        long long33 = deflater32.getBytesWritten();
        int int34 = deflater32.getTotalOut();
        long long35 = deflater32.getBytesWritten();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        deflater37.reset();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater37.setDictionary(byteArray50);
        deflater32.setDictionary(byteArray50);
        deflater5.setInput(byteArray50);
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater59.setInput(byteArray71);
        deflater57.setInput(byteArray71);
        boolean boolean75 = deflater57.finished();
        byte[] byteArray82 = new byte[] { (byte) 100, (byte) 10, (byte) 0, (byte) 10, (byte) 10, (byte) 1 };
        int int83 = deflater57.deflate(byteArray82);
        int int84 = deflater5.deflate(byteArray82);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray82, (int) '4', 720907);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[120, 1, 0, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        deflater2.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        boolean boolean4 = deflater1.finished();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        long long7 = deflater6.getBytesWritten();
        long long8 = deflater6.getBytesWritten();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean11 = deflater10.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater13.finish();
        long long25 = deflater13.getBytesRead();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater42.finish();
        long long54 = deflater42.getBytesRead();
        deflater42.reset();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater42.setInput(byteArray62, (int) (short) 0, (int) (short) 1);
        deflater27.setDictionary(byteArray62);
        int int67 = deflater13.deflate(byteArray62);
        int int70 = deflater10.deflate(byteArray62, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        int int74 = deflater72.getTotalIn();
        deflater72.finish();
        java.util.zip.Deflater deflater77 = new java.util.zip.Deflater((int) (byte) 1);
        deflater77.reset();
        int int79 = deflater77.getTotalIn();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater77.setInput(byteArray86);
        deflater72.setInput(byteArray86);
        deflater10.setInput(byteArray86);
        int int90 = deflater6.deflate(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray86, (int) (byte) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalIn();
        long long5 = deflater2.getBytesRead();
        deflater2.finish();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        long long9 = deflater8.getBytesWritten();
        int int10 = deflater8.getTotalOut();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.finish();
        long long24 = deflater12.getBytesRead();
        deflater12.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater27.setInput(byteArray47, (int) (short) 0, (int) (short) 1);
        deflater12.setDictionary(byteArray47);
        deflater8.setDictionary(byteArray47);
        deflater2.setDictionary(byteArray47);
        int int54 = deflater2.getAdler();
        deflater2.setStrategy(1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 118882828 + "'", int54 == 118882828);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        deflater5.finish();
        int int9 = deflater5.getTotalOut();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        deflater11.finish();
        long long15 = deflater11.getBytesWritten();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        long long18 = deflater17.getBytesRead();
        long long19 = deflater17.getBytesRead();
        long long20 = deflater17.getBytesWritten();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater17.setInput(byteArray42);
        deflater11.setInput(byteArray42);
        deflater5.setDictionary(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray42, 100, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        int int16 = deflater1.getTotalIn();
        int int17 = deflater1.getAdler();
        java.lang.Class<?> wildcardClass18 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        int int7 = deflater1.getTotalIn();
        int int8 = deflater1.getTotalIn();
        int int9 = deflater1.getTotalOut();
        deflater1.setStrategy((int) (short) 0);
        long long12 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater40.setInput(byteArray52);
        deflater38.setInput(byteArray52);
        deflater38.setStrategy(0);
        boolean boolean58 = deflater38.needsInput();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater63.setInput(byteArray75);
        deflater61.setInput(byteArray75);
        deflater38.setInput(byteArray75);
        deflater22.setDictionary(byteArray75);
        int int81 = deflater18.deflate(byteArray75);
        int int82 = deflater1.deflate(byteArray75);
        int int83 = deflater1.getTotalIn();
        long long84 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(2);
        long long2 = deflater1.getBytesRead();
        deflater1.setLevel((int) (byte) 0);
        int int5 = deflater1.getAdler();
        int int6 = deflater1.getTotalOut();
        java.lang.Class<?> wildcardClass7 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        boolean boolean16 = deflater1.needsInput();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater36.setInput(byteArray48);
        deflater34.setInput(byteArray48);
        deflater34.setStrategy(0);
        boolean boolean54 = deflater34.needsInput();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater59.setInput(byteArray71);
        deflater57.setInput(byteArray71);
        deflater34.setInput(byteArray71);
        deflater18.setDictionary(byteArray71);
        int int77 = deflater1.deflate(byteArray71);
        boolean boolean78 = deflater1.needsInput();
        long long79 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 6L + "'", long79 == 6L);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        int int63 = deflater1.getTotalOut();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        long long2 = deflater1.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy(0);
        int int6 = deflater2.getTotalOut();
        java.lang.Class<?> wildcardClass7 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        deflater1.setInput(byteArray40);
        int int46 = deflater1.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        int int6 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater8.setInput(byteArray21);
        int int26 = deflater1.deflate(byteArray21, 0, 0);
        boolean boolean27 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (short) 0);
        boolean boolean2 = deflater1.finished();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.reset();
        boolean boolean16 = deflater4.needsInput();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        int int29 = deflater4.deflate(byteArray27);
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        deflater31.reset();
        boolean boolean35 = deflater31.finished();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater(3, true);
        int int39 = deflater38.getAdler();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((-1), true);
        long long43 = deflater42.getBytesWritten();
        deflater42.setLevel(2);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater62.finish();
        long long74 = deflater62.getBytesRead();
        deflater62.reset();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater62.setInput(byteArray82, (int) (short) 0, (int) (short) 1);
        deflater47.setDictionary(byteArray82);
        deflater42.setInput(byteArray82);
        deflater38.setDictionary(byteArray82);
        int int89 = deflater31.deflate(byteArray82);
        deflater4.setInput(byteArray82);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray82, (int) (short) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.finished();
        boolean boolean14 = deflater1.finished();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean18 = deflater17.needsInput();
        int int19 = deflater17.getTotalIn();
        long long20 = deflater17.getBytesRead();
        deflater17.finish();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        long long24 = deflater23.getBytesWritten();
        int int25 = deflater23.getTotalOut();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater42.finish();
        long long54 = deflater42.getBytesRead();
        deflater42.reset();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater42.setInput(byteArray62, (int) (short) 0, (int) (short) 1);
        deflater27.setDictionary(byteArray62);
        deflater23.setDictionary(byteArray62);
        deflater17.setDictionary(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray62, (int) (byte) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), false);
        long long3 = deflater2.getBytesRead();
        boolean boolean4 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        int int21 = deflater20.getTotalOut();
        int int22 = deflater20.getTotalOut();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getAdler();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater52.setInput(byteArray65, 0, 0);
        int int70 = deflater50.deflate(byteArray65);
        deflater24.setInput(byteArray65);
        deflater20.setDictionary(byteArray65);
        deflater1.setInput(byteArray65);
        java.lang.Class<?> wildcardClass74 = byteArray65.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        long long5 = deflater2.getBytesWritten();
        java.lang.Class<?> wildcardClass6 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.reset();
        int int19 = deflater1.getAdler();
        long long20 = deflater1.getBytesWritten();
        int int21 = deflater1.getAdler();
        boolean boolean22 = deflater1.finished();
        long long23 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getAdler();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater41.setInput(byteArray54, 0, 0);
        int int59 = deflater39.deflate(byteArray54);
        deflater25.setDictionary(byteArray54, (int) (byte) 0, 2);
        deflater1.setDictionary(byteArray54);
        boolean boolean64 = deflater1.finished();
        int int65 = deflater1.getAdler();
        byte[] byteArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray66, (int) (short) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 87360012 + "'", int65 == 87360012);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        int int7 = deflater1.getTotalIn();
        int int8 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater10.setInput(byteArray22);
        deflater10.setLevel((int) (byte) -1);
        deflater10.finish();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        long long30 = deflater29.getBytesWritten();
        int int31 = deflater29.getTotalOut();
        long long32 = deflater29.getBytesWritten();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        deflater34.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater34.setDictionary(byteArray47);
        deflater29.setDictionary(byteArray47);
        deflater10.setDictionary(byteArray47, 3, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = deflater1.deflate(byteArray47, (int) (byte) 0, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        deflater1.setLevel(3);
        deflater1.setStrategy(2);
        int int60 = deflater1.getAdler();
        byte[] byteArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray61, 6, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 87360012 + "'", int60 == 87360012);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        deflater1.end();
        boolean boolean20 = deflater1.needsInput();
        boolean boolean21 = deflater1.finished();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater23.setInput(byteArray43, (int) (short) 0, (int) (short) 1);
        deflater23.reset();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater49.setInput(byteArray69, (int) (short) 0, (int) (short) 1);
        int int73 = deflater23.deflate(byteArray69);
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater((int) (byte) 1);
        deflater75.reset();
        int int77 = deflater75.getTotalIn();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater75.setInput(byteArray84);
        deflater23.setInput(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = deflater1.deflate(byteArray84, (int) (byte) 0, (int) 'a', 720907);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        long long25 = deflater2.getBytesWritten();
        deflater2.finish();
        long long27 = deflater2.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        long long8 = deflater1.getBytesWritten();
        long long9 = deflater1.getBytesRead();
        int int10 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater(3, true);
        deflater13.reset();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean18 = deflater17.needsInput();
        int int19 = deflater17.getTotalIn();
        long long20 = deflater17.getBytesRead();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater40.setInput(byteArray52);
        deflater38.setInput(byteArray52);
        deflater38.setStrategy(0);
        boolean boolean58 = deflater38.needsInput();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater63.setInput(byteArray75);
        deflater61.setInput(byteArray75);
        deflater38.setInput(byteArray75);
        deflater22.setDictionary(byteArray75);
        int int81 = deflater17.deflate(byteArray75);
        deflater13.setDictionary(byteArray75);
        deflater1.setDictionary(byteArray75);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalIn();
        long long5 = deflater2.getBytesRead();
        deflater2.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        byte[] byteArray17 = new byte[] { (byte) 10 };
        deflater1.setDictionary(byteArray17);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater20.reset();
        deflater20.reset();
        boolean boolean46 = deflater20.finished();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((-1));
        int int49 = deflater48.getTotalIn();
        boolean boolean50 = deflater48.finished();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        deflater52.reset();
        deflater52.reset();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater((int) (byte) 1);
        deflater57.reset();
        deflater57.reset();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater((int) (byte) 1);
        deflater61.reset();
        int int63 = deflater61.getTotalIn();
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater61.setInput(byteArray70);
        deflater57.setDictionary(byteArray70);
        int int73 = deflater52.deflate(byteArray70);
        int int74 = deflater48.deflate(byteArray70);
        int int75 = deflater20.deflate(byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray70, (int) (short) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getTotalIn();
        deflater2.reset();
        deflater2.setLevel(3);
        java.lang.Class<?> wildcardClass52 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        java.lang.Class<?> wildcardClass20 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        deflater1.end();
        byte[] byteArray16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = deflater1.deflate(byteArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        long long18 = deflater1.getBytesWritten();
        long long19 = deflater1.getBytesWritten();
        int int20 = deflater1.getTotalOut();
        deflater1.setLevel(9);
        int int23 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean18 = deflater1.finished();
        byte[] byteArray19 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray19, (int) (short) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (short) 1);
        int int2 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater(1, true);
        boolean boolean6 = deflater5.needsInput();
        long long7 = deflater5.getBytesWritten();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        int int12 = deflater9.getTotalIn();
        deflater9.finish();
        deflater9.reset();
        boolean boolean15 = deflater9.finished();
        long long16 = deflater9.getBytesRead();
        long long17 = deflater9.getBytesWritten();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater38.setInput(byteArray58, (int) (short) 0, (int) (short) 1);
        deflater23.setDictionary(byteArray58);
        deflater19.setInput(byteArray58);
        deflater9.setInput(byteArray58);
        deflater5.setDictionary(byteArray58, 2, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray58, 720907, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 0);
        deflater1.end();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (short) -1, true);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        int int10 = deflater7.getTotalIn();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater15.setInput(byteArray27);
        deflater13.setInput(byteArray27);
        deflater13.setStrategy(0);
        boolean boolean33 = deflater13.needsInput();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater38.setInput(byteArray50);
        deflater36.setInput(byteArray50);
        deflater13.setInput(byteArray50);
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater56.finish();
        long long68 = deflater56.getBytesRead();
        deflater56.reset();
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater56.setInput(byteArray76, (int) (short) 0, (int) (short) 1);
        deflater13.setInput(byteArray76);
        int int81 = deflater7.deflate(byteArray76);
        deflater5.setInput(byteArray76, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int87 = deflater1.deflate(byteArray76, 9, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        deflater2.end();
        deflater2.end();
        deflater2.setLevel((int) (byte) -1);
        boolean boolean10 = deflater2.needsInput();
        deflater2.end();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater13.finish();
        long long25 = deflater13.getBytesRead();
        deflater13.reset();
        int int27 = deflater13.getAdler();
        boolean boolean28 = deflater13.needsInput();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater52.setInput(byteArray64);
        deflater50.setInput(byteArray64);
        deflater50.setStrategy(0);
        boolean boolean70 = deflater50.needsInput();
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater((int) (byte) 1);
        deflater75.reset();
        java.util.zip.Deflater deflater78 = new java.util.zip.Deflater((int) (byte) 1);
        deflater78.reset();
        int int80 = deflater78.getTotalIn();
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater78.setInput(byteArray87);
        deflater75.setInput(byteArray87);
        deflater73.setInput(byteArray87);
        deflater50.setInput(byteArray87);
        deflater34.setDictionary(byteArray87);
        int int93 = deflater30.deflate(byteArray87);
        int int94 = deflater13.deflate(byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray87, (-1), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        boolean boolean8 = deflater1.needsInput();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        long long11 = deflater10.getBytesWritten();
        int int12 = deflater10.getTotalIn();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater29.setInput(byteArray49, (int) (short) 0, (int) (short) 1);
        deflater14.setDictionary(byteArray49);
        int int54 = deflater10.deflate(byteArray49);
        deflater1.setInput(byteArray49);
        deflater1.reset();
        int int57 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        deflater2.finish();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater7.setInput(byteArray19);
        int int22 = deflater7.getTotalIn();
        int int23 = deflater7.getTotalOut();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        int int39 = deflater25.getAdler();
        boolean boolean40 = deflater25.needsInput();
        int int41 = deflater25.getTotalIn();
        int int42 = deflater25.getTotalIn();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        int int61 = deflater59.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater59.setInput(byteArray68);
        deflater59.finish();
        long long71 = deflater59.getBytesRead();
        deflater59.reset();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater59.setInput(byteArray79, (int) (short) 0, (int) (short) 1);
        int int83 = deflater44.deflate(byteArray79);
        deflater25.setDictionary(byteArray79);
        deflater7.setInput(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray79, (int) (byte) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((-1));
        deflater1.reset();
        int int3 = deflater1.getTotalOut();
        long long4 = deflater1.getBytesWritten();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        long long3 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater5.setInput(byteArray17);
        deflater5.setLevel((int) (byte) -1);
        deflater5.finish();
        long long23 = deflater5.getBytesRead();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater25.setInput(byteArray45, (int) (short) 0, (int) (short) 1);
        deflater25.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater51.setInput(byteArray71, (int) (short) 0, (int) (short) 1);
        int int75 = deflater25.deflate(byteArray71);
        int int79 = deflater5.deflate(byteArray71, (int) (short) 1, 3, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int82 = deflater1.deflate(byteArray71, 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.setStrategy(1);
        boolean boolean61 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        int int53 = deflater1.deflate(byteArray51);
        deflater1.finish();
        long long55 = deflater1.getBytesWritten();
        deflater1.end();
        boolean boolean57 = deflater1.needsInput();
        boolean boolean58 = deflater1.needsInput();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(720907);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 6L + "'", long55 == 6L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        boolean boolean13 = deflater1.finished();
        long long14 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        int int19 = deflater16.getTotalIn();
        deflater16.finish();
        deflater16.reset();
        boolean boolean22 = deflater16.finished();
        deflater16.reset();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (short) -1, false);
        int int27 = deflater26.getTotalIn();
        int int28 = deflater26.getTotalIn();
        boolean boolean29 = deflater26.finished();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getAdler();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater31.setInput(byteArray44, 0, 0);
        int int49 = deflater26.deflate(byteArray44);
        deflater16.setDictionary(byteArray44);
        int int51 = deflater1.deflate(byteArray44);
        java.lang.Class<?> wildcardClass52 = byteArray44.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater27.setInput(byteArray39);
        deflater25.setInput(byteArray39);
        deflater2.setInput(byteArray39);
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        deflater2.setInput(byteArray65);
        int int70 = deflater2.getTotalOut();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        long long73 = deflater72.getBytesWritten();
        long long74 = deflater72.getBytesWritten();
        deflater72.setLevel((int) (byte) 0);
        deflater72.reset();
        java.util.zip.Deflater deflater80 = new java.util.zip.Deflater((int) (short) -1, false);
        long long81 = deflater80.getBytesWritten();
        java.util.zip.Deflater deflater83 = new java.util.zip.Deflater((int) (byte) 1);
        deflater83.reset();
        int int85 = deflater83.getTotalIn();
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater83.setInput(byteArray92);
        deflater80.setDictionary(byteArray92);
        deflater72.setInput(byteArray92);
        deflater2.setDictionary(byteArray92, (int) (byte) 0, 1);
        long long99 = deflater2.getBytesRead();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        deflater4.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater19.finish();
        long long31 = deflater19.getBytesRead();
        deflater19.reset();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater19.setInput(byteArray39, (int) (short) 0, (int) (short) 1);
        int int43 = deflater4.deflate(byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray39, 6, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        boolean boolean1 = deflater0.needsInput();
        deflater0.setLevel((int) (short) -1);
        deflater0.setStrategy((int) (byte) 1);
        boolean boolean6 = deflater0.finished();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater(2, false);
        deflater9.setStrategy((int) (short) 1);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        int int16 = deflater13.getTotalIn();
        int int17 = deflater13.getTotalIn();
        deflater13.setLevel((int) (short) 1);
        deflater13.setLevel((int) (byte) 1);
        boolean boolean22 = deflater13.finished();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (short) -1, false);
        int int26 = deflater25.getTotalIn();
        int int27 = deflater25.getTotalIn();
        boolean boolean28 = deflater25.finished();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        long long31 = deflater30.getBytesWritten();
        int int32 = deflater30.getTotalIn();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater49.setInput(byteArray69, (int) (short) 0, (int) (short) 1);
        deflater34.setDictionary(byteArray69);
        int int74 = deflater30.deflate(byteArray69);
        deflater25.setDictionary(byteArray69);
        int int76 = deflater13.deflate(byteArray69);
        java.util.zip.Deflater deflater78 = new java.util.zip.Deflater((int) (byte) 1);
        deflater78.reset();
        int int80 = deflater78.getTotalIn();
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater78.setInput(byteArray87);
        deflater78.finish();
        long long90 = deflater78.getBytesRead();
        deflater78.reset();
        int int92 = deflater78.getAdler();
        byte[] byteArray94 = new byte[] { (byte) 10 };
        deflater78.setDictionary(byteArray94);
        deflater13.setDictionary(byteArray94);
        deflater9.setInput(byteArray94);
        deflater0.setInput(byteArray94);
        int int99 = deflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[10]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.reset();
        int int19 = deflater1.getAdler();
        long long20 = deflater1.getBytesWritten();
        deflater1.setLevel(9);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        long long48 = deflater2.getBytesWritten();
        int int49 = deflater2.getAdler();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        int int53 = deflater1.deflate(byteArray51);
        long long54 = deflater1.getBytesRead();
        boolean boolean55 = deflater1.finished();
        long long56 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6L + "'", long54 == 6L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 6L + "'", long56 == 6L);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        boolean boolean5 = deflater2.needsInput();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean8 = deflater7.finished();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.finish();
        long long22 = deflater10.getBytesRead();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater39.finish();
        long long51 = deflater39.getBytesRead();
        deflater39.reset();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater39.setInput(byteArray59, (int) (short) 0, (int) (short) 1);
        deflater24.setDictionary(byteArray59);
        int int64 = deflater10.deflate(byteArray59);
        int int67 = deflater7.deflate(byteArray59, (int) (byte) 1, 2);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = deflater2.deflate(byteArray59, (int) (short) 1, (int) (short) 10, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getAdler();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater4.setInput(byteArray17, 0, 0);
        int int22 = deflater2.deflate(byteArray17);
        deflater2.reset();
        int int24 = deflater2.getTotalIn();
        long long25 = deflater2.getBytesRead();
        boolean boolean26 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        boolean boolean10 = deflater1.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (short) -1, false);
        int int14 = deflater13.getTotalIn();
        int int15 = deflater13.getTotalIn();
        boolean boolean16 = deflater13.finished();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        long long19 = deflater18.getBytesWritten();
        int int20 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater37.setInput(byteArray57, (int) (short) 0, (int) (short) 1);
        deflater22.setDictionary(byteArray57);
        int int62 = deflater18.deflate(byteArray57);
        deflater13.setDictionary(byteArray57);
        int int64 = deflater1.deflate(byteArray57);
        int int65 = deflater1.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        long long29 = deflater28.getBytesWritten();
        int int30 = deflater28.getTotalOut();
        long long31 = deflater28.getBytesWritten();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        deflater33.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater33.setDictionary(byteArray46);
        deflater28.setDictionary(byteArray46);
        deflater1.setInput(byteArray46);
        boolean boolean51 = deflater1.needsInput();
        long long52 = deflater1.getBytesRead();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        deflater2.reset();
        deflater2.setStrategy(0);
        deflater2.end();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater(1, true);
        int int10 = deflater9.getAdler();
        boolean boolean11 = deflater9.finished();
        long long12 = deflater9.getBytesWritten();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater17.setInput(byteArray29);
        deflater15.setInput(byteArray29);
        deflater15.setStrategy(0);
        boolean boolean35 = deflater15.needsInput();
        long long36 = deflater15.getBytesWritten();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        long long39 = deflater38.getBytesWritten();
        int int40 = deflater38.getTotalIn();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater42.finish();
        long long54 = deflater42.getBytesRead();
        deflater42.reset();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater((int) (byte) 1);
        deflater57.reset();
        int int59 = deflater57.getTotalIn();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater57.setInput(byteArray66);
        deflater57.finish();
        long long69 = deflater57.getBytesRead();
        deflater57.reset();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater57.setInput(byteArray77, (int) (short) 0, (int) (short) 1);
        deflater42.setDictionary(byteArray77);
        int int82 = deflater38.deflate(byteArray77);
        deflater15.setInput(byteArray77, (int) (short) 1, (int) (byte) 0);
        deflater9.setDictionary(byteArray77, 0, 3);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = deflater2.deflate(byteArray77, (int) (byte) 100, (int) (short) 100, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getAdler();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater4.setInput(byteArray17, 0, 0);
        int int22 = deflater2.deflate(byteArray17);
        boolean boolean23 = deflater2.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy(720907);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        deflater0.reset();
        long long2 = deflater0.getBytesWritten();
        int int3 = deflater0.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean6 = deflater5.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater8.finish();
        long long20 = deflater8.getBytesRead();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater37.setInput(byteArray57, (int) (short) 0, (int) (short) 1);
        deflater22.setDictionary(byteArray57);
        int int62 = deflater8.deflate(byteArray57);
        int int65 = deflater5.deflate(byteArray57, (int) (byte) 1, 2);
        int int68 = deflater0.deflate(byteArray57, 0, 1);
        boolean boolean69 = deflater0.finished();
        int int70 = deflater0.getAdler();
        deflater0.finish();
        int int72 = deflater0.getTotalIn();
        deflater0.setLevel(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater33.setInput(byteArray53, (int) (short) 0, (int) (short) 1);
        deflater18.setDictionary(byteArray53);
        int int58 = deflater4.deflate(byteArray53);
        int int61 = deflater1.deflate(byteArray53, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater();
        deflater62.reset();
        long long64 = deflater62.getBytesWritten();
        int int65 = deflater62.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 1 };
        deflater62.setInput(byteArray68);
        deflater1.setDictionary(byteArray68);
        long long71 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        deflater1.setLevel(3);
        int int58 = deflater1.getAdler();
        deflater1.end();
        byte[] byteArray60 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int64 = deflater1.deflate(byteArray60, 16777472, 9, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 87360012 + "'", int58 == 87360012);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater24.setInput(byteArray36);
        deflater22.setInput(byteArray36);
        deflater22.setStrategy(0);
        boolean boolean42 = deflater22.needsInput();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater47.setInput(byteArray59);
        deflater45.setInput(byteArray59);
        deflater22.setInput(byteArray59);
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater22.setInput(byteArray85);
        int int90 = deflater2.deflate(byteArray85);
        boolean boolean91 = deflater2.finished();
        int int92 = deflater2.getTotalIn();
        int int93 = deflater2.getTotalOut();
        long long94 = deflater2.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 6L + "'", long94 == 6L);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        boolean boolean8 = deflater1.needsInput();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        long long11 = deflater10.getBytesWritten();
        int int12 = deflater10.getTotalIn();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater29.setInput(byteArray49, (int) (short) 0, (int) (short) 1);
        deflater14.setDictionary(byteArray49);
        int int54 = deflater10.deflate(byteArray49);
        deflater1.setInput(byteArray49);
        java.lang.Class<?> wildcardClass56 = byteArray49.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        boolean boolean13 = deflater1.needsInput();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater(3, true);
        int int17 = deflater16.getAdler();
        deflater16.setStrategy(0);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean23 = deflater22.needsInput();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater28.setInput(byteArray40);
        deflater26.setInput(byteArray40);
        deflater26.setStrategy(0);
        boolean boolean46 = deflater26.needsInput();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater51.setInput(byteArray63);
        deflater49.setInput(byteArray63);
        deflater26.setInput(byteArray63);
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater69.setInput(byteArray78);
        deflater69.finish();
        long long81 = deflater69.getBytesRead();
        deflater69.reset();
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater69.setInput(byteArray89, (int) (short) 0, (int) (short) 1);
        deflater26.setInput(byteArray89);
        int int94 = deflater22.deflate(byteArray89);
        deflater16.setInput(byteArray89, 2, 0);
        deflater1.setInput(byteArray89);
        java.lang.Class<?> wildcardClass99 = byteArray89.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        int int26 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater31.setInput(byteArray43);
        deflater29.setInput(byteArray43);
        deflater29.setStrategy(0);
        boolean boolean49 = deflater29.needsInput();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater((int) (byte) 1);
        deflater57.reset();
        int int59 = deflater57.getTotalIn();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater57.setInput(byteArray66);
        deflater54.setInput(byteArray66);
        deflater52.setInput(byteArray66);
        deflater29.setInput(byteArray66);
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        int int74 = deflater72.getTotalIn();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater72.setInput(byteArray81);
        deflater72.finish();
        long long84 = deflater72.getBytesRead();
        deflater72.reset();
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater72.setInput(byteArray92, (int) (short) 0, (int) (short) 1);
        deflater29.setInput(byteArray92);
        deflater1.setDictionary(byteArray92);
        boolean boolean98 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        int int5 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater();
        deflater6.reset();
        long long8 = deflater6.getBytesWritten();
        int int9 = deflater6.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean12 = deflater11.finished();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater28.setDictionary(byteArray63);
        int int68 = deflater14.deflate(byteArray63);
        int int71 = deflater11.deflate(byteArray63, (int) (byte) 1, 2);
        int int74 = deflater6.deflate(byteArray63, 0, 1);
        deflater2.setInput(byteArray63);
        java.lang.Class<?> wildcardClass76 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater17.setInput(byteArray29);
        deflater15.setInput(byteArray29);
        deflater15.setStrategy(0);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean37 = deflater36.finished();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater39.finish();
        long long51 = deflater39.getBytesRead();
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater((int) (byte) 1);
        deflater53.reset();
        int int55 = deflater53.getTotalIn();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater53.setInput(byteArray62);
        deflater53.finish();
        long long65 = deflater53.getBytesRead();
        deflater53.reset();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater68.finish();
        long long80 = deflater68.getBytesRead();
        deflater68.reset();
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater68.setInput(byteArray88, (int) (short) 0, (int) (short) 1);
        deflater53.setDictionary(byteArray88);
        int int93 = deflater39.deflate(byteArray88);
        int int96 = deflater36.deflate(byteArray88, (int) (byte) 1, 2);
        deflater15.setInput(byteArray88);
        int int98 = deflater1.deflate(byteArray88);
        boolean boolean99 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 6 + "'", int93 == 6);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        int int46 = deflater1.getTotalIn();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }
}

