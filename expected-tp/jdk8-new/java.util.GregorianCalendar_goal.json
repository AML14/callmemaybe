[
  {
    "signature": "java.util.GregorianCalendar()",
    "name": "java.util.GregorianCalendar",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.GregorianCalendar()",
      "comment": "Constructs a default GregorianCalendar using the current time in the default time zone with the default method_0method_1 FORMAT locale.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.GregorianCalendar(java.util.TimeZone zone)",
    "name": "java.util.GregorianCalendar",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.TimeZone",
          "name": "TimeZone",
          "isArray": false
        },
        "name": "zone"
      }
    ],
    "protocol": {
      "member": "java.util.GregorianCalendar(java.util.TimeZone zone)",
      "comment": "Constructs a GregorianCalendar based on the current time in the given time zone with the default method_0method_1 FORMAT locale.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.GregorianCalendar(java.util.Locale aLocale)",
    "name": "java.util.GregorianCalendar",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Locale",
          "name": "Locale",
          "isArray": false
        },
        "name": "aLocale"
      }
    ],
    "protocol": {
      "member": "java.util.GregorianCalendar(java.util.Locale aLocale)",
      "comment": "Constructs a GregorianCalendar based on the current time in the default time zone with the given locale.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.GregorianCalendar(java.util.TimeZone zone, java.util.Locale aLocale)",
    "name": "java.util.GregorianCalendar",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.TimeZone",
          "name": "TimeZone",
          "isArray": false
        },
        "name": "zone"
      },
      {
        "type": {
          "qualifiedName": "java.util.Locale",
          "name": "Locale",
          "isArray": false
        },
        "name": "aLocale"
      }
    ],
    "protocol": {
      "member": "java.util.GregorianCalendar(java.util.TimeZone zone, java.util.Locale aLocale)",
      "comment": "Constructs a GregorianCalendar based on the current time in the given time zone with the given locale.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.GregorianCalendar(int year, int month, int dayOfMonth)",
    "name": "java.util.GregorianCalendar",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "year"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "month"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "dayOfMonth"
      }
    ],
    "protocol": {
      "member": "java.util.GregorianCalendar(int year, int month, int dayOfMonth)",
      "comment": "Constructs a GregorianCalendar with the given date set in the default time zone with the default locale.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.GregorianCalendar(int year, int month, int dayOfMonth, int hourOfDay, int minute)",
    "name": "java.util.GregorianCalendar",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "year"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "month"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "dayOfMonth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hourOfDay"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minute"
      }
    ],
    "protocol": {
      "member": "java.util.GregorianCalendar(int year, int month, int dayOfMonth, int hourOfDay, int minute)",
      "comment": "Constructs a GregorianCalendar with the given date and time set for the default time zone with the default locale.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.GregorianCalendar(int year, int month, int dayOfMonth, int hourOfDay, int minute, int second)",
    "name": "java.util.GregorianCalendar",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "year"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "month"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "dayOfMonth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hourOfDay"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minute"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "second"
      }
    ],
    "protocol": {
      "member": "java.util.GregorianCalendar(int year, int month, int dayOfMonth, int hourOfDay, int minute, int second)",
      "comment": "Constructs a GregorianCalendar with the given date and time set for the default time zone with the default locale.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.GregorianCalendar(int year, int month, int dayOfMonth, int hourOfDay, int minute, int second, int millis)",
    "name": "java.util.GregorianCalendar",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "year"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "month"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "dayOfMonth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hourOfDay"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minute"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "second"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "millis"
      }
    ],
    "protocol": {
      "member": "java.util.GregorianCalendar(int year, int month, int dayOfMonth, int hourOfDay, int minute, int second, int millis)",
      "comment": "Constructs a GregorianCalendar with the given date and time set for the default time zone with the default locale.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.GregorianCalendar(java.util.TimeZone zone, java.util.Locale locale, boolean flag)",
    "name": "java.util.GregorianCalendar",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.TimeZone",
          "name": "TimeZone",
          "isArray": false
        },
        "name": "zone"
      },
      {
        "type": {
          "qualifiedName": "java.util.Locale",
          "name": "Locale",
          "isArray": false
        },
        "name": "locale"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "flag"
      }
    ],
    "protocol": {
      "member": "java.util.GregorianCalendar(java.util.TimeZone zone, java.util.Locale locale, boolean flag)",
      "comment": "Constructs an empty GregorianCalendar.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setGregorianChange(java.util.Date date)",
    "name": "setGregorianChange",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Date",
          "name": "Date",
          "isArray": false
        },
        "name": "date"
      }
    ],
    "protocol": {
      "member": "setGregorianChange(java.util.Date date)",
      "comment": "Sets the GregorianCalendar change date. This is the point when the switch from Julian dates to Gregorian dates occurred. Default is October 15, 1582 (Gregorian). Previous to this, dates will be in the Julian calendar.  To obtain a pure Julian calendar, set the change date to method_0. To obtain a pure Gregorian calendar, set the change date to method_1.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getGregorianChange()",
    "name": "getGregorianChange",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Date",
      "name": "java.util.Date",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getGregorianChange()",
      "comment": "Gets the Gregorian Calendar change date. This is the point when the switch from Julian dates to Gregorian dates occurred. Default is October 15, 1582 (Gregorian). Previous to this, dates will be in the Julian calendar.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isLeapYear(int year)",
    "name": "isLeapYear",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "year"
      }
    ],
    "protocol": {
      "member": "isLeapYear(int year)",
      "comment": "Determines if the given year is a leap year. Returns true if the given year is a leap year. To specify BC year numbers, 1 - year number must be given. For example, year BC 4 is specified as -3.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCalendarType()",
    "name": "getCalendarType",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getCalendarType()",
      "comment": "Returns \"gregory\" as the calendar type.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object obj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "protocol": {
      "member": "equals(java.lang.Object obj)",
      "comment": "Compares this GregorianCalendar to the specified Object. The result is true if and only if the argument is a GregorianCalendar object that represents the same time value (millisecond offset from the Epoch) under the same Calendar parameters and Gregorian change date as this object.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hashCode()",
      "comment": "Generates the hash code for this GregorianCalendar object.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(int field, int amount)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "amount"
      }
    ],
    "protocol": {
      "member": "add(int field, int amount)",
      "comment": "Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules. <em>Add rule 1</em>. The value of field after the call minus the value of field before the call is amount, modulo any overflow that has occurred in field. Overflow occurs when a field value exceeds its range and, as a result, the next larger field is incremented or decremented and the field value is adjusted back into its range. <em>Add rule 2</em>. If a smaller field is expected to be invariant, but it is impossible for it to be equal to its prior value because of changes in its minimum or maximum after field is changed, then its value is adjusted to be as close as possible to its expected value. A smaller field represents a smaller unit of time. HOUR is a smaller field than DAY_OF_MONTH. No adjustment is made to smaller fields that are not expected to be invariant. The calendar system determines what fields are expected to be invariant.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "roll(int field, boolean up)",
    "name": "roll",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "up"
      }
    ],
    "protocol": {
      "member": "roll(int field, boolean up)",
      "comment": "Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields.  <em>Example</em>: Consider a GregorianCalendar originally set to December 31, 1999. Calling method_1 sets the calendar to January 31, 1999. The YEAR field is unchanged because it is a larger field than MONTH.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "roll(int field, int amount)",
    "name": "roll",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "amount"
      }
    ],
    "protocol": {
      "member": "roll(int field, int amount)",
      "comment": "Adds a signed amount to the specified calendar field without changing larger fields. A negative roll amount means to subtract from field without changing larger fields. If the specified amount is 0, this method performs nothing. This method calls method_0 before adding the amount so that all the calendar fields are normalized. If there is any calendar field having an out-of-range value in non-lenient mode, then an IllegalArgumentException is thrown. <p> <em>Example</em>: Consider a GregorianCalendar originally set to August 31, 1999. Calling method_1 sets the calendar to April 30, <strong>1999</strong>. Using a GregorianCalendar, the DAY_OF_MONTH field cannot be 31 in the month April. DAY_OF_MONTH is set to the closest possible value, 30. The YEAR field maintains the value of 1999 because it is a larger field than MONTH. <p> <em>Example</em>: Consider a GregorianCalendar originally set to Sunday June 6, 1999. Calling method_2 sets the calendar to Tuesday June 1, 1999, whereas calling method_3 sets the calendar to Sunday May 30, 1999. This is because the roll rule imposes an additional constraint: The MONTH must not change when the WEEK_OF_MONTH is rolled. Taken together with add rule 1, the resultant date must be between Tuesday June 1 and Saturday June 5. According to add rule 2, the DAY_OF_WEEK, an invariant when changing the WEEK_OF_MONTH, is set to Tuesday, the closest possible value to Sunday (where Sunday is the first day of the week).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMinimum(int field)",
    "name": "getMinimum",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "protocol": {
      "member": "getMinimum(int field)",
      "comment": "Returns the minimum value for the given calendar field of this GregorianCalendar instance. The minimum value is defined as the smallest value returned by the method_0 get method for any possible time value, taking into consideration the current values of the method_1 getFirstDayOfWeek, method_2 getMinimalDaysInFirstWeek, method_3 getGregorianChange and method_4 getTimeZone methods.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMaximum(int field)",
    "name": "getMaximum",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "protocol": {
      "member": "getMaximum(int field)",
      "comment": "Returns the maximum value for the given calendar field of this GregorianCalendar instance. The maximum value is defined as the largest value returned by the method_0 get method for any possible time value, taking into consideration the current values of the method_1 getFirstDayOfWeek, method_2 getMinimalDaysInFirstWeek, method_3 getGregorianChange and method_4 getTimeZone methods.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getGreatestMinimum(int field)",
    "name": "getGreatestMinimum",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "protocol": {
      "member": "getGreatestMinimum(int field)",
      "comment": "Returns the highest minimum value for the given calendar field of this GregorianCalendar instance. The highest minimum value is defined as the largest value returned by method_0 for any possible time value, taking into consideration the current values of the method_1 getFirstDayOfWeek, method_2 getMinimalDaysInFirstWeek, method_3 getGregorianChange and method_4 getTimeZone methods.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLeastMaximum(int field)",
    "name": "getLeastMaximum",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "protocol": {
      "member": "getLeastMaximum(int field)",
      "comment": "Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance. The lowest maximum value is defined as the smallest value returned by method_0 for any possible time value, taking into consideration the current values of the method_1 getFirstDayOfWeek, method_2 getMinimalDaysInFirstWeek, method_3 getGregorianChange and method_4 getTimeZone methods.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getActualMinimum(int field)",
    "name": "getActualMinimum",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "protocol": {
      "member": "getActualMinimum(int field)",
      "comment": "Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the method_0 getFirstDayOfWeek, method_1 getMinimalDaysInFirstWeek, method_2 getGregorianChange and method_3 getTimeZone methods. For example, if the Gregorian change date is January 10, 1970 and the date of this GregorianCalendar is January 20, 1970, the actual minimum value of the DAY_OF_MONTH field is 10 because the previous date of January 10, 1970 is December 27, 1996 (in the Julian calendar). Therefore, December 28, 1969 to January 9, 1970 don't exist.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getActualMaximum(int field)",
    "name": "getActualMaximum",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "protocol": {
      "member": "getActualMaximum(int field)",
      "comment": "Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the method_0 getFirstDayOfWeek, method_1 getMinimalDaysInFirstWeek, method_2 getGregorianChange and method_3 getTimeZone methods. For example, if the date of this instance is February 1, 2004, the actual maximum value of the DAY_OF_MONTH field is 29 because 2004 is a leap year, and if the date of this instance is February 1, 2005, it's 28. This method calculates the maximum value of method_9 WEEK_OF_YEAR based on the method_10 YEAR (calendar year) value, not the week year. Call method_4 to get the maximum value of WEEK_OF_YEAR in the week year of this GregorianCalendar.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clone()",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clone()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTimeZone()",
    "name": "getTimeZone",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.TimeZone",
      "name": "java.util.TimeZone",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTimeZone()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setTimeZone(java.util.TimeZone zone)",
    "name": "setTimeZone",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.TimeZone",
          "name": "TimeZone",
          "isArray": false
        },
        "name": "zone"
      }
    ],
    "protocol": {
      "member": "setTimeZone(java.util.TimeZone zone)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isWeekDateSupported()",
    "name": "isWeekDateSupported",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isWeekDateSupported()",
      "comment": "Returns true indicating this GregorianCalendar supports week dates.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWeekYear()",
    "name": "getWeekYear",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWeekYear()",
      "comment": "Returns the week year represented by this GregorianCalendar. The dates in the weeks between 1 and the maximum week number of the week year have the same week year value that may be one year before or after the method_2 YEAR (calendar year) value. This method calls method_0 before calculating the week year.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setWeekDate(int weekYear, int weekOfYear, int dayOfWeek)",
    "name": "setWeekDate",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "weekYear"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "weekOfYear"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "dayOfWeek"
      }
    ],
    "protocol": {
      "member": "setWeekDate(int weekYear, int weekOfYear, int dayOfWeek)",
      "comment": "Sets this GregorianCalendar to the date given by the date specifiers - weekYear, weekOfYear, and dayOfWeek. weekOfYear follows the WEEK_OF_YEAR numbering. The dayOfWeek value must be one of the method_4 DAY_OF_WEEK values: method_5 SUNDAY to method_6 SATURDAY. Note that the numeric day-of-week representation differs from the ISO 8601 standard, and that the weekOfYear numbering is compatible with the standard when method_0 is MONDAY and method_1 is 4. Unlike the set method, all of the calendar fields and the instant of time value are calculated upon return. If weekOfYear is out of the valid week-of-year range in weekYear, the weekYear and weekOfYear values are adjusted in lenient mode, or an IllegalArgumentException is thrown in non-lenient mode.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWeeksInWeekYear()",
    "name": "getWeeksInWeekYear",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWeeksInWeekYear()",
      "comment": "Returns the number of weeks in the week year represented by this GregorianCalendar. For example, if this GregorianCalendar's date is December 31, 2008 with the ISO 8601 compatible setting, this method will return 53 for the period: December 29, 2008 to January 3, 2010 while method_1 will return 52 for the period: December 31, 2007 to December 28, 2008.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "computeFields()",
    "name": "computeFields",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "computeFields()",
      "comment": "Converts the time value (millisecond offset from the Epoch) to calendar field values. The time is not recomputed first; to recompute the time, then the fields, call the complete method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "computeTime()",
    "name": "computeTime",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "computeTime()",
      "comment": "Converts calendar field values to the time value (millisecond offset from the Epoch). @exception IllegalArgumentException if any calendar fields are invalid.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toZonedDateTime()",
    "name": "toZonedDateTime",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.ZonedDateTime",
      "name": "java.time.ZonedDateTime",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toZonedDateTime()",
      "comment": "Converts this object to a ZonedDateTime that represents the same point on the time-line as this GregorianCalendar.  Since this object supports a Julian-Gregorian cutover date and ZonedDateTime does not, it is possible that the resulting year, month and day will have different values. The result will represent the correct date in the ISO calendar system, which will also be the same value for Modified Julian Days.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "from(java.time.ZonedDateTime zdt)",
    "name": "from",
    "containingClass": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "GregorianCalendar",
      "isArray": false
    },
    "targetClass": "java.util.GregorianCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.GregorianCalendar",
      "name": "java.util.GregorianCalendar",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.ZonedDateTime",
          "name": "ZonedDateTime",
          "isArray": false
        },
        "name": "zdt"
      }
    ],
    "protocol": {
      "member": "from(java.time.ZonedDateTime zdt)",
      "comment": "Obtains an instance of GregorianCalendar with the default locale from a ZonedDateTime object.  Since ZonedDateTime does not support a Julian-Gregorian cutover date and uses ISO calendar system, the return GregorianCalendar is a pure Gregorian calendar and uses ISO 8601 standard for week definitions, which has MONDAY as the method_0 FirstDayOfWeek and 4 as the value of the method_1 MinimalDaysInFirstWeek.  ZoneDateTime can store points on the time-line further in the future and further in the past than GregorianCalendar. In this scenario, this method will throw an IllegalArgumentException exception.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]