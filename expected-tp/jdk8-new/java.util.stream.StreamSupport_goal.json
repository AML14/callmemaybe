[
  {
    "signature": "stream(java.util.Spliterator<T> spliterator, boolean parallel)",
    "name": "stream",
    "containingClass": {
      "qualifiedName": "java.util.stream.StreamSupport",
      "name": "StreamSupport",
      "isArray": false
    },
    "targetClass": "java.util.stream.StreamSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Stream<T>",
      "name": "java.util.stream.Stream<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Spliterator",
          "name": "Spliterator",
          "isArray": false
        },
        "name": "spliterator"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "parallel"
      }
    ],
    "protocol": {
      "member": "stream(java.util.Spliterator<T> spliterator, boolean parallel)",
      "comment": "Creates a new sequential or parallel Stream from a Spliterator. The spliterator is only traversed, split, or queried for estimated size after the terminal operation of the stream pipeline commences. It is strongly recommended the spliterator report a characteristic of IMMUTABLE or CONCURRENT, or be late-binding. Otherwise, method_0 should be used to reduce the scope of potential interference with the source. See Non-Interference for more details.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "stream(java.util.function.Supplier<? extends java.util.Spliterator<T>> supplier, int characteristics, boolean parallel)",
    "name": "stream",
    "containingClass": {
      "qualifiedName": "java.util.stream.StreamSupport",
      "name": "StreamSupport",
      "isArray": false
    },
    "targetClass": "java.util.stream.StreamSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Stream<T>",
      "name": "java.util.stream.Stream<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Supplier",
          "name": "Supplier",
          "isArray": false
        },
        "name": "supplier"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "characteristics"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "parallel"
      }
    ],
    "protocol": {
      "member": "stream(java.util.function.Supplier<? extends java.util.Spliterator<T>> supplier, int characteristics, boolean parallel)",
      "comment": "Creates a new sequential or parallel Stream from a Supplier of Spliterator. The method_0 method will be invoked on the supplier no more than once, and only after the terminal operation of the stream pipeline commences. For spliterators that report a characteristic of IMMUTABLE or CONCURRENT, or that are late-binding, it is likely more efficient to use method_1 instead. The use of a Supplier in this form provides a level of indirection that reduces the scope of potential interference with the source. Since the supplier is only invoked after the terminal operation commences, any modifications to the source up to the start of the terminal operation are reflected in the stream result. See Non-Interference for more details.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "intStream(java.util.Spliterator$OfInt spliterator, boolean parallel)",
    "name": "intStream",
    "containingClass": {
      "qualifiedName": "java.util.stream.StreamSupport",
      "name": "StreamSupport",
      "isArray": false
    },
    "targetClass": "java.util.stream.StreamSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Spliterator$OfInt",
          "name": "OfInt",
          "isArray": false
        },
        "name": "spliterator"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "parallel"
      }
    ],
    "protocol": {
      "member": "intStream(java.util.Spliterator$OfInt spliterator, boolean parallel)",
      "comment": "Creates a new sequential or parallel IntStream from a method_1. The spliterator is only traversed, split, or queried for estimated size after the terminal operation of the stream pipeline commences. It is strongly recommended the spliterator report a characteristic of IMMUTABLE or CONCURRENT, or be late-binding. Otherwise, method_0 should be used to reduce the scope of potential interference with the source. See Non-Interference for more details.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "intStream(java.util.function.Supplier<? extends java.util.Spliterator$OfInt> supplier, int characteristics, boolean parallel)",
    "name": "intStream",
    "containingClass": {
      "qualifiedName": "java.util.stream.StreamSupport",
      "name": "StreamSupport",
      "isArray": false
    },
    "targetClass": "java.util.stream.StreamSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Supplier",
          "name": "Supplier",
          "isArray": false
        },
        "name": "supplier"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "characteristics"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "parallel"
      }
    ],
    "protocol": {
      "member": "intStream(java.util.function.Supplier<? extends java.util.Spliterator$OfInt> supplier, int characteristics, boolean parallel)",
      "comment": "Creates a new sequential or parallel IntStream from a Supplier of method_2. The method_0 method will be invoked on the supplier no more than once, and only after the terminal operation of the stream pipeline commences. For spliterators that report a characteristic of IMMUTABLE or CONCURRENT, or that are late-binding, it is likely more efficient to use method_1 instead. The use of a Supplier in this form provides a level of indirection that reduces the scope of potential interference with the source. Since the supplier is only invoked after the terminal operation commences, any modifications to the source up to the start of the terminal operation are reflected in the stream result. See Non-Interference for more details.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "longStream(java.util.Spliterator$OfLong spliterator, boolean parallel)",
    "name": "longStream",
    "containingClass": {
      "qualifiedName": "java.util.stream.StreamSupport",
      "name": "StreamSupport",
      "isArray": false
    },
    "targetClass": "java.util.stream.StreamSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.LongStream",
      "name": "java.util.stream.LongStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Spliterator$OfLong",
          "name": "OfLong",
          "isArray": false
        },
        "name": "spliterator"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "parallel"
      }
    ],
    "protocol": {
      "member": "longStream(java.util.Spliterator$OfLong spliterator, boolean parallel)",
      "comment": "Creates a new sequential or parallel LongStream from a method_1. The spliterator is only traversed, split, or queried for estimated size after the terminal operation of the stream pipeline commences. It is strongly recommended the spliterator report a characteristic of IMMUTABLE or CONCURRENT, or be late-binding. Otherwise, method_0 should be used to reduce the scope of potential interference with the source. See Non-Interference for more details.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "longStream(java.util.function.Supplier<? extends java.util.Spliterator$OfLong> supplier, int characteristics, boolean parallel)",
    "name": "longStream",
    "containingClass": {
      "qualifiedName": "java.util.stream.StreamSupport",
      "name": "StreamSupport",
      "isArray": false
    },
    "targetClass": "java.util.stream.StreamSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.LongStream",
      "name": "java.util.stream.LongStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Supplier",
          "name": "Supplier",
          "isArray": false
        },
        "name": "supplier"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "characteristics"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "parallel"
      }
    ],
    "protocol": {
      "member": "longStream(java.util.function.Supplier<? extends java.util.Spliterator$OfLong> supplier, int characteristics, boolean parallel)",
      "comment": "Creates a new sequential or parallel LongStream from a Supplier of method_2. The method_0 method will be invoked on the supplier no more than once, and only after the terminal operation of the stream pipeline commences. For spliterators that report a characteristic of IMMUTABLE or CONCURRENT, or that are late-binding, it is likely more efficient to use method_1 instead. The use of a Supplier in this form provides a level of indirection that reduces the scope of potential interference with the source. Since the supplier is only invoked after the terminal operation commences, any modifications to the source up to the start of the terminal operation are reflected in the stream result. See Non-Interference for more details.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "doubleStream(java.util.Spliterator$OfDouble spliterator, boolean parallel)",
    "name": "doubleStream",
    "containingClass": {
      "qualifiedName": "java.util.stream.StreamSupport",
      "name": "StreamSupport",
      "isArray": false
    },
    "targetClass": "java.util.stream.StreamSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.DoubleStream",
      "name": "java.util.stream.DoubleStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Spliterator$OfDouble",
          "name": "OfDouble",
          "isArray": false
        },
        "name": "spliterator"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "parallel"
      }
    ],
    "protocol": {
      "member": "doubleStream(java.util.Spliterator$OfDouble spliterator, boolean parallel)",
      "comment": "Creates a new sequential or parallel DoubleStream from a method_1. The spliterator is only traversed, split, or queried for estimated size after the terminal operation of the stream pipeline commences. It is strongly recommended the spliterator report a characteristic of IMMUTABLE or CONCURRENT, or be late-binding. Otherwise, method_0 should be used to reduce the scope of potential interference with the source. See Non-Interference for more details.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "doubleStream(java.util.function.Supplier<? extends java.util.Spliterator$OfDouble> supplier, int characteristics, boolean parallel)",
    "name": "doubleStream",
    "containingClass": {
      "qualifiedName": "java.util.stream.StreamSupport",
      "name": "StreamSupport",
      "isArray": false
    },
    "targetClass": "java.util.stream.StreamSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.DoubleStream",
      "name": "java.util.stream.DoubleStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Supplier",
          "name": "Supplier",
          "isArray": false
        },
        "name": "supplier"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "characteristics"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "parallel"
      }
    ],
    "protocol": {
      "member": "doubleStream(java.util.function.Supplier<? extends java.util.Spliterator$OfDouble> supplier, int characteristics, boolean parallel)",
      "comment": "Creates a new sequential or parallel DoubleStream from a Supplier of method_2. The method_0 method will be invoked on the supplier no more than once, and only after the terminal operation of the stream pipeline commences. For spliterators that report a characteristic of IMMUTABLE or CONCURRENT, or that are late-binding, it is likely more efficient to use method_1 instead. The use of a Supplier in this form provides a level of indirection that reduces the scope of potential interference with the source. Since the supplier is only invoked after the terminal operation commences, any modifications to the source up to the start of the terminal operation are reflected in the stream result. See Non-Interference for more details.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]