[
  {
    "signature": "comparator()",
    "name": "comparator",
    "containingClass": {
      "qualifiedName": "java.util.SortedSet",
      "name": "SortedSet",
      "isArray": false
    },
    "targetClass": "java.util.SortedSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Comparator<? super E>",
      "name": "java.util.Comparator<? super E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "comparator()",
      "comment": "Returns the comparator used to order the elements in this set, or null if this set uses the Comparable natural ordering of its elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subSet(E fromElement, E toElement)",
    "name": "subSet",
    "containingClass": {
      "qualifiedName": "java.util.SortedSet",
      "name": "SortedSet",
      "isArray": false
    },
    "targetClass": "java.util.SortedSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedSet<E>",
      "name": "java.util.SortedSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromElement"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toElement"
      }
    ],
    "protocol": {
      "member": "subSet(E fromElement, E toElement)",
      "comment": "Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive. (If fromElement and toElement are equal, the returned set is empty.) The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "headSet(E toElement)",
    "name": "headSet",
    "containingClass": {
      "qualifiedName": "java.util.SortedSet",
      "name": "SortedSet",
      "isArray": false
    },
    "targetClass": "java.util.SortedSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedSet<E>",
      "name": "java.util.SortedSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toElement"
      }
    ],
    "protocol": {
      "member": "headSet(E toElement)",
      "comment": "Returns a view of the portion of this set whose elements are strictly less than toElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tailSet(E fromElement)",
    "name": "tailSet",
    "containingClass": {
      "qualifiedName": "java.util.SortedSet",
      "name": "SortedSet",
      "isArray": false
    },
    "targetClass": "java.util.SortedSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedSet<E>",
      "name": "java.util.SortedSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromElement"
      }
    ],
    "protocol": {
      "member": "tailSet(E fromElement)",
      "comment": "Returns a view of the portion of this set whose elements are greater than or equal to fromElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "first()",
    "name": "first",
    "containingClass": {
      "qualifiedName": "java.util.SortedSet",
      "name": "SortedSet",
      "isArray": false
    },
    "targetClass": "java.util.SortedSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "first()",
      "comment": "Returns the first (lowest) element currently in this set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "last()",
    "name": "last",
    "containingClass": {
      "qualifiedName": "java.util.SortedSet",
      "name": "SortedSet",
      "isArray": false
    },
    "targetClass": "java.util.SortedSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "last()",
      "comment": "Returns the last (highest) element currently in this set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "spliterator()",
    "name": "spliterator",
    "containingClass": {
      "qualifiedName": "java.util.SortedSet",
      "name": "SortedSet",
      "isArray": false
    },
    "targetClass": "java.util.SortedSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator<E>",
      "name": "java.util.Spliterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "spliterator()",
      "comment": "Creates a Spliterator over the elements in this sorted set. The Spliterator reports method_2, method_3 and method_4. Implementations should document the reporting of additional characteristic values. The spliterator's comparator (see java.method_0) must be null if the sorted set's comparator (see method_1) is null. Otherwise, the spliterator's comparator must be the same as or impose the same total ordering as the sorted set's comparator. @implSpec The default implementation creates a <a href=\"method_9method_10\">late-binding</a> spliterator from the sorted set's Iterator. The spliterator inherits the fail-fast properties of the set's iterator. The spliterator's comparator is the same as the sorted set's comparator.  The created Spliterator additionally reports method_11. @implNote The created Spliterator additionally reports method_12.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]