import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        long long23 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getTotalIn();
        int int30 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        int int35 = inflater31.getAdler();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        long long40 = inflater36.getBytesRead();
        boolean boolean41 = inflater36.finished();
        long long42 = inflater36.getBytesRead();
        boolean boolean43 = inflater36.needsDictionary();
        boolean boolean44 = inflater36.needsDictionary();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.needsDictionary();
        int int47 = inflater45.getTotalOut();
        int int48 = inflater45.getTotalOut();
        boolean boolean49 = inflater45.needsInput();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        byte[] byteArray52 = new byte[] { (byte) 1 };
        int int53 = inflater50.inflate(byteArray52);
        inflater50.reset();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        byte[] byteArray57 = new byte[] { (byte) 1 };
        int int58 = inflater55.inflate(byteArray57);
        int int59 = inflater55.getTotalIn();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        byte[] byteArray62 = new byte[] { (byte) 1 };
        int int63 = inflater60.inflate(byteArray62);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int69 = inflater60.inflate(byteArray68);
        int int70 = inflater55.inflate(byteArray68);
        inflater50.setInput(byteArray68);
        inflater45.setInput(byteArray68);
        int int73 = inflater36.inflate(byteArray68);
        inflater31.setInput(byteArray68);
        int int75 = inflater24.inflate(byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray68, (int) ' ', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsInput();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        int int15 = inflater0.inflate(byteArray13);
        int int16 = inflater0.getRemaining();
        int int17 = inflater0.getAdler();
        int int18 = inflater0.getTotalOut();
        boolean boolean19 = inflater0.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.needsDictionary();
        inflater20.reset();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        long long27 = inflater23.getBytesRead();
        int int28 = inflater23.getTotalOut();
        int int29 = inflater23.getAdler();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater(true);
        int int32 = inflater31.getRemaining();
        long long33 = inflater31.getBytesRead();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        int int38 = inflater31.inflate(byteArray36);
        int int41 = inflater23.inflate(byteArray36, (int) (short) 1, (int) (short) 0);
        inflater20.setInput(byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray36, (int) (short) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getRemaining();
        inflater0.end();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater(true);
        int int28 = inflater27.getRemaining();
        long long29 = inflater27.getBytesRead();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        inflater30.end();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater34.setInput(byteArray44);
        inflater30.setInput(byteArray44);
        inflater27.setInput(byteArray44, (int) (byte) 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = inflater0.inflate(byteArray44, (int) (byte) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int38 = inflater29.inflate(byteArray37);
        int int39 = inflater24.inflate(byteArray37);
        int int40 = inflater0.inflate(byteArray37);
        long long41 = inflater0.getBytesRead();
        boolean boolean42 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        long long5 = inflater1.getBytesWritten();
        boolean boolean6 = inflater1.finished();
        int int7 = inflater1.getAdler();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsDictionary();
        boolean boolean13 = inflater8.finished();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        int int32 = inflater14.inflate(byteArray30);
        boolean boolean33 = inflater14.finished();
        int int34 = inflater14.getTotalOut();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        long long39 = inflater35.getBytesRead();
        boolean boolean40 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        long long45 = inflater41.getBytesWritten();
        inflater41.reset();
        long long47 = inflater41.getBytesWritten();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.needsDictionary();
        boolean boolean52 = inflater48.needsInput();
        int int53 = inflater48.getRemaining();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.finished();
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater54.setInput(byteArray64);
        int int66 = inflater48.inflate(byteArray64);
        inflater41.setInput(byteArray64);
        inflater35.setInput(byteArray64);
        int int69 = inflater14.inflate(byteArray64);
        int int70 = inflater8.inflate(byteArray64);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray64, (int) (short) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getAdler();
        boolean boolean13 = inflater8.finished();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        inflater14.reset();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        long long23 = inflater19.getBytesWritten();
        inflater19.reset();
        long long25 = inflater19.getBytesWritten();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        boolean boolean30 = inflater26.needsInput();
        int int31 = inflater26.getRemaining();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        int int44 = inflater26.inflate(byteArray42);
        inflater19.setInput(byteArray42);
        inflater14.setInput(byteArray42);
        inflater8.setInput(byteArray42, (int) (byte) 0, 1);
        int int50 = inflater8.getTotalIn();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.needsDictionary();
        int int53 = inflater51.getTotalOut();
        int int54 = inflater51.getTotalOut();
        boolean boolean55 = inflater51.needsInput();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        byte[] byteArray58 = new byte[] { (byte) 1 };
        int int59 = inflater56.inflate(byteArray58);
        inflater56.reset();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        byte[] byteArray63 = new byte[] { (byte) 1 };
        int int64 = inflater61.inflate(byteArray63);
        int int65 = inflater61.getTotalIn();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        byte[] byteArray68 = new byte[] { (byte) 1 };
        int int69 = inflater66.inflate(byteArray68);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int75 = inflater66.inflate(byteArray74);
        int int76 = inflater61.inflate(byteArray74);
        inflater56.setInput(byteArray74);
        inflater51.setInput(byteArray74);
        inflater8.setInput(byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray74, (int) (byte) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        int int10 = inflater5.getRemaining();
        inflater5.reset();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        inflater5.setInput(byteArray22);
        inflater0.setInput(byteArray22);
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        inflater7.reset();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        inflater7.setInput(byteArray24);
        int int27 = inflater7.getTotalOut();
        boolean boolean28 = inflater7.finished();
        inflater7.reset();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.needsDictionary();
        int int32 = inflater30.getTotalOut();
        boolean boolean33 = inflater30.finished();
        boolean boolean34 = inflater30.needsDictionary();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        boolean boolean37 = inflater35.needsInput();
        boolean boolean38 = inflater35.needsInput();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.needsDictionary();
        long long43 = inflater39.getBytesRead();
        boolean boolean44 = inflater39.needsDictionary();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        long long49 = inflater45.getBytesWritten();
        inflater45.reset();
        long long51 = inflater45.getBytesWritten();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.needsDictionary();
        boolean boolean56 = inflater52.needsInput();
        int int57 = inflater52.getRemaining();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.finished();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater58.setInput(byteArray68);
        int int70 = inflater52.inflate(byteArray68);
        inflater45.setInput(byteArray68);
        inflater39.setInput(byteArray68);
        int int73 = inflater35.inflate(byteArray68);
        int int74 = inflater30.inflate(byteArray68);
        inflater7.setInput(byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        int int24 = inflater6.inflate(byteArray22);
        boolean boolean25 = inflater6.finished();
        int int26 = inflater6.getTotalOut();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        long long31 = inflater27.getBytesRead();
        boolean boolean32 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        long long37 = inflater33.getBytesWritten();
        inflater33.reset();
        long long39 = inflater33.getBytesWritten();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        int int58 = inflater40.inflate(byteArray56);
        inflater33.setInput(byteArray56);
        inflater27.setInput(byteArray56);
        int int61 = inflater6.inflate(byteArray56);
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsInput();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater66.setInput(byteArray76);
        inflater62.setInput(byteArray76);
        int int79 = inflater6.inflate(byteArray76);
        inflater0.setInput(byteArray76, 0, (int) (short) 0);
        inflater0.reset();
        boolean boolean84 = inflater0.needsInput();
        int int85 = inflater0.getTotalOut();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        boolean boolean18 = inflater0.finished();
        inflater0.reset();
        inflater0.reset();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getRemaining();
        int int8 = inflater0.getAdler();
        boolean boolean9 = inflater0.needsDictionary();
        inflater0.reset();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater(true);
        int int13 = inflater12.getRemaining();
        long long14 = inflater12.getBytesRead();
        int int15 = inflater12.getTotalIn();
        int int16 = inflater12.getRemaining();
        inflater12.reset();
        boolean boolean18 = inflater12.finished();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.needsDictionary();
        int int21 = inflater19.getTotalOut();
        long long22 = inflater19.getBytesWritten();
        boolean boolean23 = inflater19.needsInput();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        long long29 = inflater24.getBytesWritten();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater(true);
        int int32 = inflater31.getRemaining();
        long long33 = inflater31.getBytesRead();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        inflater34.end();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater38.setInput(byteArray48);
        inflater34.setInput(byteArray48);
        inflater31.setInput(byteArray48, (int) (byte) 1, (int) (short) 1);
        int int54 = inflater24.inflate(byteArray48);
        int int55 = inflater19.inflate(byteArray48);
        inflater12.setDictionary(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray48, (int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        long long9 = inflater5.getBytesWritten();
        inflater5.reset();
        long long11 = inflater5.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        boolean boolean16 = inflater12.needsInput();
        int int17 = inflater12.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        int int30 = inflater12.inflate(byteArray28);
        inflater5.setInput(byteArray28);
        inflater0.setInput(byteArray28);
        int int33 = inflater0.getTotalIn();
        int int34 = inflater0.getTotalIn();
        int int35 = inflater0.getTotalOut();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater8.setInput(byteArray25);
        int int30 = inflater0.inflate(byteArray25, 1, (int) (short) 1);
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        int int35 = inflater31.getAdler();
        int int36 = inflater31.getAdler();
        int int37 = inflater31.getAdler();
        int int38 = inflater31.getTotalOut();
        inflater31.reset();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.needsDictionary();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        boolean boolean46 = inflater42.needsInput();
        int int47 = inflater42.getRemaining();
        inflater42.reset();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.finished();
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater49.setInput(byteArray59);
        inflater42.setInput(byteArray59);
        inflater40.setInput(byteArray59);
        inflater31.setInput(byteArray59, (int) (byte) 0, 0);
        int int66 = inflater0.inflate(byteArray59);
        long long67 = inflater0.getBytesWritten();
        long long68 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        boolean boolean2 = inflater0.needsInput();
        long long3 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        int int8 = inflater4.getAdler();
        inflater4.reset();
        boolean boolean10 = inflater4.needsInput();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        inflater11.end();
        boolean boolean15 = inflater11.needsInput();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.needsDictionary();
        long long20 = inflater16.getBytesRead();
        boolean boolean21 = inflater16.needsInput();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        long long26 = inflater22.getBytesWritten();
        inflater22.reset();
        long long28 = inflater22.getBytesWritten();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        int int47 = inflater29.inflate(byteArray45);
        inflater22.setInput(byteArray45);
        int int49 = inflater16.inflate(byteArray45);
        inflater11.setInput(byteArray45);
        inflater4.setInput(byteArray45);
        int int52 = inflater0.inflate(byteArray45);
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        long long20 = inflater0.getBytesRead();
        boolean boolean21 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass22 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        int int10 = inflater5.getRemaining();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater11.setInput(byteArray21);
        int int23 = inflater5.inflate(byteArray21);
        boolean boolean24 = inflater5.finished();
        int int25 = inflater5.getAdler();
        boolean boolean26 = inflater5.finished();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        long long31 = inflater27.getBytesRead();
        boolean boolean32 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        long long37 = inflater33.getBytesWritten();
        inflater33.reset();
        long long39 = inflater33.getBytesWritten();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        int int58 = inflater40.inflate(byteArray56);
        inflater33.setInput(byteArray56);
        inflater27.setInput(byteArray56);
        inflater5.setInput(byteArray56);
        inflater0.setInput(byteArray56);
        int int63 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.needsDictionary();
        long long68 = inflater64.getBytesRead();
        boolean boolean69 = inflater64.needsInput();
        int int70 = inflater64.getTotalOut();
        long long71 = inflater64.getBytesWritten();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        byte[] byteArray74 = new byte[] { (byte) 1 };
        int int75 = inflater72.inflate(byteArray74);
        boolean boolean76 = inflater72.finished();
        int int77 = inflater72.getRemaining();
        java.util.zip.Inflater inflater78 = new java.util.zip.Inflater();
        boolean boolean79 = inflater78.finished();
        java.util.zip.Inflater inflater80 = new java.util.zip.Inflater();
        byte[] byteArray82 = new byte[] { (byte) 1 };
        int int83 = inflater80.inflate(byteArray82);
        int int84 = inflater80.getTotalIn();
        java.util.zip.Inflater inflater85 = new java.util.zip.Inflater();
        boolean boolean86 = inflater85.finished();
        int int87 = inflater85.getRemaining();
        inflater85.end();
        boolean boolean89 = inflater85.needsInput();
        java.util.zip.Inflater inflater90 = new java.util.zip.Inflater();
        byte[] byteArray92 = new byte[] { (byte) 1 };
        int int93 = inflater90.inflate(byteArray92);
        inflater85.setInput(byteArray92);
        inflater80.setInput(byteArray92);
        inflater78.setInput(byteArray92);
        int int97 = inflater72.inflate(byteArray92);
        inflater64.setInput(byteArray92);
        inflater0.setInput(byteArray92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        long long23 = inflater0.getBytesWritten();
        boolean boolean24 = inflater0.finished();
        long long25 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        inflater26.end();
        boolean boolean30 = inflater26.needsInput();
        boolean boolean31 = inflater26.needsDictionary();
        boolean boolean32 = inflater26.needsDictionary();
        boolean boolean33 = inflater26.needsDictionary();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.needsDictionary();
        int int36 = inflater34.getTotalOut();
        int int37 = inflater34.getTotalOut();
        boolean boolean38 = inflater34.needsInput();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        byte[] byteArray41 = new byte[] { (byte) 1 };
        int int42 = inflater39.inflate(byteArray41);
        inflater39.reset();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        int int47 = inflater44.inflate(byteArray46);
        int int48 = inflater44.getTotalIn();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int58 = inflater49.inflate(byteArray57);
        int int59 = inflater44.inflate(byteArray57);
        inflater39.setInput(byteArray57);
        inflater34.setInput(byteArray57);
        inflater26.setInput(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray57, (int) ' ', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getRemaining();
        int int8 = inflater0.getAdler();
        boolean boolean9 = inflater0.needsDictionary();
        inflater0.reset();
        long long11 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int38 = inflater29.inflate(byteArray37);
        int int39 = inflater24.inflate(byteArray37);
        int int40 = inflater24.getTotalOut();
        long long41 = inflater24.getBytesWritten();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.finished();
        int int46 = inflater42.getAdler();
        inflater42.reset();
        long long48 = inflater42.getBytesWritten();
        inflater42.end();
        boolean boolean50 = inflater42.needsInput();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.needsDictionary();
        int int53 = inflater51.getTotalOut();
        int int54 = inflater51.getTotalOut();
        long long55 = inflater51.getBytesWritten();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsDictionary();
        boolean boolean60 = inflater56.needsInput();
        int int61 = inflater56.getRemaining();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.finished();
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater62.setInput(byteArray72);
        int int74 = inflater56.inflate(byteArray72);
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        boolean boolean76 = inflater75.finished();
        int int77 = inflater75.getRemaining();
        boolean boolean78 = inflater75.finished();
        java.util.zip.Inflater inflater79 = new java.util.zip.Inflater();
        boolean boolean80 = inflater79.finished();
        int int81 = inflater79.getRemaining();
        boolean boolean82 = inflater79.finished();
        byte[] byteArray89 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater79.setInput(byteArray89);
        inflater75.setInput(byteArray89);
        inflater56.setInput(byteArray89);
        int int93 = inflater51.inflate(byteArray89);
        inflater42.setInput(byteArray89, (int) (byte) 0, (int) (byte) 0);
        int int97 = inflater24.inflate(byteArray89);
        int int98 = inflater0.inflate(byteArray89);
        int int99 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getRemaining();
        inflater0.reset();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        boolean boolean29 = inflater25.finished();
        inflater25.end();
        inflater25.end();
        boolean boolean32 = inflater25.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        inflater33.setInput(byteArray47);
        inflater25.setInput(byteArray47);
        inflater0.setInput(byteArray47);
        int int52 = inflater0.getRemaining();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        inflater0.reset();
        long long28 = inflater0.getBytesWritten();
        int int29 = inflater0.getRemaining();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsInput();
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        int int5 = inflater2.inflate(byteArray4);
        long long6 = inflater2.getBytesWritten();
        int int7 = inflater2.getRemaining();
        int int8 = inflater2.getTotalOut();
        boolean boolean9 = inflater2.finished();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        inflater15.end();
        boolean boolean19 = inflater15.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        inflater15.setInput(byteArray22);
        inflater10.setInput(byteArray22);
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        int int30 = inflater26.getTotalIn();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int40 = inflater31.inflate(byteArray39);
        int int41 = inflater26.inflate(byteArray39);
        int int42 = inflater26.getTotalOut();
        int int43 = inflater26.getTotalOut();
        long long44 = inflater26.getBytesRead();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        long long49 = inflater45.getBytesRead();
        boolean boolean50 = inflater45.finished();
        long long51 = inflater45.getBytesRead();
        boolean boolean52 = inflater45.needsDictionary();
        boolean boolean53 = inflater45.needsDictionary();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.needsDictionary();
        int int56 = inflater54.getTotalOut();
        int int57 = inflater54.getTotalOut();
        boolean boolean58 = inflater54.needsInput();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        inflater59.reset();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        int int68 = inflater64.getTotalIn();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        byte[] byteArray71 = new byte[] { (byte) 1 };
        int int72 = inflater69.inflate(byteArray71);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int78 = inflater69.inflate(byteArray77);
        int int79 = inflater64.inflate(byteArray77);
        inflater59.setInput(byteArray77);
        inflater54.setInput(byteArray77);
        int int82 = inflater45.inflate(byteArray77);
        inflater26.setInput(byteArray77);
        inflater10.setInput(byteArray77);
        inflater2.setInput(byteArray77);
        int int86 = inflater0.inflate(byteArray77);
        int int87 = inflater0.getTotalIn();
        boolean boolean88 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getRemaining();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        int int11 = inflater7.getTotalIn();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int21 = inflater12.inflate(byteArray20);
        int int22 = inflater7.inflate(byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray20, (int) '4', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalIn();
        int int10 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        boolean boolean15 = inflater11.needsInput();
        int int16 = inflater11.getRemaining();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater17.setInput(byteArray27);
        int int29 = inflater11.inflate(byteArray27);
        boolean boolean30 = inflater11.finished();
        int int31 = inflater11.getTotalOut();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        long long36 = inflater32.getBytesRead();
        boolean boolean37 = inflater32.needsDictionary();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        long long42 = inflater38.getBytesWritten();
        inflater38.reset();
        long long44 = inflater38.getBytesWritten();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.needsDictionary();
        boolean boolean49 = inflater45.needsInput();
        int int50 = inflater45.getRemaining();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater51.setInput(byteArray61);
        int int63 = inflater45.inflate(byteArray61);
        inflater38.setInput(byteArray61);
        inflater32.setInput(byteArray61);
        int int66 = inflater11.inflate(byteArray61);
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        boolean boolean68 = inflater67.finished();
        int int69 = inflater67.getRemaining();
        boolean boolean70 = inflater67.needsInput();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        boolean boolean72 = inflater71.finished();
        int int73 = inflater71.getRemaining();
        boolean boolean74 = inflater71.finished();
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater71.setInput(byteArray81);
        inflater67.setInput(byteArray81);
        int int84 = inflater11.inflate(byteArray81);
        int int85 = inflater0.inflate(byteArray81);
        long long86 = inflater0.getBytesWritten();
        int int87 = inflater0.getAdler();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        int int10 = inflater6.getAdler();
        boolean boolean11 = inflater6.finished();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        inflater12.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        long long21 = inflater17.getBytesWritten();
        inflater17.reset();
        long long23 = inflater17.getBytesWritten();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getRemaining();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        int int42 = inflater24.inflate(byteArray40);
        inflater17.setInput(byteArray40);
        inflater12.setInput(byteArray40);
        inflater6.setInput(byteArray40, (int) (byte) 0, 1);
        int int48 = inflater6.getTotalIn();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.needsDictionary();
        int int51 = inflater49.getTotalOut();
        int int52 = inflater49.getTotalOut();
        boolean boolean53 = inflater49.needsInput();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        inflater54.reset();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        int int63 = inflater59.getTotalIn();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int73 = inflater64.inflate(byteArray72);
        int int74 = inflater59.inflate(byteArray72);
        inflater54.setInput(byteArray72);
        inflater49.setInput(byteArray72);
        inflater6.setInput(byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = inflater0.inflate(byteArray72, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        boolean boolean8 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        int int13 = inflater9.getAdler();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        inflater14.end();
        boolean boolean18 = inflater14.needsInput();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        inflater14.setInput(byteArray21);
        int int24 = inflater9.inflate(byteArray21);
        int int25 = inflater9.getTotalOut();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        boolean boolean30 = inflater26.finished();
        inflater26.end();
        inflater26.end();
        boolean boolean33 = inflater26.needsInput();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        boolean boolean53 = inflater34.finished();
        int int54 = inflater34.getAdler();
        boolean boolean55 = inflater34.finished();
        int int56 = inflater34.getAdler();
        boolean boolean57 = inflater34.needsInput();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        byte[] byteArray60 = new byte[] { (byte) 1 };
        int int61 = inflater58.inflate(byteArray60);
        int int62 = inflater58.getTotalIn();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        byte[] byteArray65 = new byte[] { (byte) 1 };
        int int66 = inflater63.inflate(byteArray65);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int72 = inflater63.inflate(byteArray71);
        int int73 = inflater58.inflate(byteArray71);
        int int74 = inflater34.inflate(byteArray71);
        inflater26.setInput(byteArray71, (int) (byte) 0, (int) (short) 1);
        inflater9.setInput(byteArray71);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        long long10 = inflater6.getBytesWritten();
        inflater6.reset();
        long long12 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        inflater6.setInput(byteArray29);
        int int33 = inflater0.inflate(byteArray29);
        boolean boolean34 = inflater0.finished();
        inflater0.reset();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.needsDictionary();
        long long40 = inflater36.getBytesRead();
        boolean boolean41 = inflater36.needsInput();
        boolean boolean42 = inflater36.finished();
        boolean boolean43 = inflater36.needsInput();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        boolean boolean48 = inflater44.needsInput();
        int int49 = inflater44.getRemaining();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.finished();
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater50.setInput(byteArray60);
        int int62 = inflater44.inflate(byteArray60);
        boolean boolean63 = inflater44.finished();
        int int64 = inflater44.getAdler();
        boolean boolean65 = inflater44.finished();
        int int66 = inflater44.getAdler();
        boolean boolean67 = inflater44.needsInput();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        byte[] byteArray70 = new byte[] { (byte) 1 };
        int int71 = inflater68.inflate(byteArray70);
        int int72 = inflater68.getTotalIn();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        byte[] byteArray75 = new byte[] { (byte) 1 };
        int int76 = inflater73.inflate(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int82 = inflater73.inflate(byteArray81);
        int int83 = inflater68.inflate(byteArray81);
        int int84 = inflater44.inflate(byteArray81);
        inflater36.setInput(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray81, 1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        java.lang.Class<?> wildcardClass6 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.finished();
        java.lang.Class<?> wildcardClass9 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        int int41 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        inflater42.reset();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        long long51 = inflater47.getBytesWritten();
        inflater47.reset();
        long long53 = inflater47.getBytesWritten();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.needsDictionary();
        boolean boolean58 = inflater54.needsInput();
        int int59 = inflater54.getRemaining();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        int int72 = inflater54.inflate(byteArray70);
        inflater47.setInput(byteArray70);
        inflater42.setInput(byteArray70);
        int int75 = inflater0.inflate(byteArray70);
        boolean boolean76 = inflater0.needsInput();
        int int77 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        long long6 = inflater0.getBytesRead();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsInput();
        int int9 = inflater0.getAdler();
        long long10 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater(false);
        int int13 = inflater12.getTotalIn();
        boolean boolean14 = inflater12.finished();
        boolean boolean15 = inflater12.needsDictionary();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        long long20 = inflater16.getBytesRead();
        inflater16.reset();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        boolean boolean27 = inflater22.needsDictionary();
        boolean boolean28 = inflater22.needsDictionary();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.finished();
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater29.setInput(byteArray39);
        int int41 = inflater22.inflate(byteArray39);
        int int42 = inflater16.inflate(byteArray39);
        inflater12.setInput(byteArray39, (int) (byte) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = inflater0.inflate(byteArray39, (int) '#', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        boolean boolean29 = inflater25.finished();
        inflater25.end();
        inflater25.end();
        boolean boolean32 = inflater25.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        inflater33.setInput(byteArray47);
        inflater25.setInput(byteArray47);
        inflater0.setInput(byteArray47);
        int int52 = inflater0.getRemaining();
        long long53 = inflater0.getBytesRead();
        boolean boolean54 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.needsInput();
        boolean boolean11 = inflater0.finished();
        int int12 = inflater0.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int22 = inflater13.inflate(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray21, (int) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsDictionary();
        boolean boolean13 = inflater0.needsInput();
        inflater0.reset();
        inflater0.end();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        long long20 = inflater16.getBytesWritten();
        inflater16.end();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        inflater22.end();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.finished();
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater26.setInput(byteArray36);
        inflater22.setInput(byteArray36);
        inflater16.setInput(byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = inflater0.inflate(byteArray36, (int) '4', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        long long6 = inflater0.getBytesRead();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsInput();
        int int9 = inflater0.getAdler();
        java.lang.Class<?> wildcardClass10 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater8.setInput(byteArray25);
        int int30 = inflater0.inflate(byteArray25, 1, (int) (short) 1);
        int int31 = inflater0.getTotalIn();
        boolean boolean32 = inflater0.needsDictionary();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsInput();
        boolean boolean22 = inflater0.needsDictionary();
        boolean boolean23 = inflater0.needsInput();
        inflater0.end();
        byte[] byteArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getAdler();
        boolean boolean7 = inflater0.needsInput();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getRemaining();
        long long23 = inflater0.getBytesWritten();
        boolean boolean24 = inflater0.needsDictionary();
        int int25 = inflater0.getAdler();
        int int26 = inflater0.getAdler();
        long long27 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        int int9 = inflater6.getTotalOut();
        inflater6.reset();
        boolean boolean11 = inflater6.needsInput();
        int int12 = inflater6.getRemaining();
        boolean boolean13 = inflater6.finished();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        boolean boolean18 = inflater14.finished();
        inflater14.end();
        inflater14.end();
        boolean boolean21 = inflater14.needsDictionary();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.finished();
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater26.setInput(byteArray36);
        inflater22.setInput(byteArray36);
        inflater14.setInput(byteArray36);
        int int42 = inflater6.inflate(byteArray36, 6, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getRemaining();
        int int7 = inflater0.getRemaining();
        boolean boolean8 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        boolean boolean22 = inflater0.needsInput();
        int int23 = inflater0.getRemaining();
        java.lang.Class<?> wildcardClass24 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getRemaining();
        boolean boolean8 = inflater0.needsInput();
        boolean boolean9 = inflater0.needsInput();
        int int10 = inflater0.getAdler();
        int int11 = inflater0.getAdler();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        int int23 = inflater0.getTotalOut();
        int int24 = inflater0.getAdler();
        long long25 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        boolean boolean30 = inflater26.needsInput();
        int int31 = inflater26.getRemaining();
        inflater26.reset();
        boolean boolean33 = inflater26.needsDictionary();
        int int34 = inflater26.getTotalOut();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        boolean boolean39 = inflater35.finished();
        inflater35.end();
        inflater35.end();
        boolean boolean42 = inflater35.needsInput();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.needsDictionary();
        boolean boolean47 = inflater43.needsInput();
        int int48 = inflater43.getRemaining();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.finished();
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater49.setInput(byteArray59);
        int int61 = inflater43.inflate(byteArray59);
        boolean boolean62 = inflater43.finished();
        int int63 = inflater43.getAdler();
        boolean boolean64 = inflater43.finished();
        int int65 = inflater43.getAdler();
        boolean boolean66 = inflater43.needsInput();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        int int71 = inflater67.getTotalIn();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        byte[] byteArray74 = new byte[] { (byte) 1 };
        int int75 = inflater72.inflate(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int81 = inflater72.inflate(byteArray80);
        int int82 = inflater67.inflate(byteArray80);
        int int83 = inflater43.inflate(byteArray80);
        inflater35.setInput(byteArray80, (int) (byte) 0, (int) (short) 1);
        int int87 = inflater26.inflate(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray80, (int) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        int int24 = inflater1.getTotalIn();
        int int25 = inflater1.getRemaining();
        long long26 = inflater1.getBytesRead();
        boolean boolean27 = inflater1.finished();
        boolean boolean28 = inflater1.needsInput();
        boolean boolean29 = inflater1.finished();
        boolean boolean30 = inflater1.finished();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsInput();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        int int17 = inflater13.getAdler();
        int int18 = inflater13.getAdler();
        boolean boolean19 = inflater13.finished();
        long long20 = inflater13.getBytesWritten();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        inflater21.end();
        boolean boolean25 = inflater21.needsInput();
        boolean boolean26 = inflater21.needsDictionary();
        boolean boolean27 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.needsDictionary();
        int int30 = inflater28.getTotalOut();
        int int31 = inflater28.getTotalOut();
        long long32 = inflater28.getBytesWritten();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        int int51 = inflater33.inflate(byteArray49);
        boolean boolean52 = inflater33.finished();
        int int53 = inflater33.getAdler();
        boolean boolean54 = inflater33.finished();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.needsDictionary();
        long long59 = inflater55.getBytesRead();
        boolean boolean60 = inflater55.needsDictionary();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        byte[] byteArray63 = new byte[] { (byte) 1 };
        int int64 = inflater61.inflate(byteArray63);
        long long65 = inflater61.getBytesWritten();
        inflater61.reset();
        long long67 = inflater61.getBytesWritten();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.needsDictionary();
        boolean boolean72 = inflater68.needsInput();
        int int73 = inflater68.getRemaining();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        int int76 = inflater74.getRemaining();
        boolean boolean77 = inflater74.finished();
        byte[] byteArray84 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater74.setInput(byteArray84);
        int int86 = inflater68.inflate(byteArray84);
        inflater61.setInput(byteArray84);
        inflater55.setInput(byteArray84);
        inflater33.setInput(byteArray84);
        inflater28.setInput(byteArray84);
        inflater21.setInput(byteArray84);
        inflater13.setInput(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray84, 6, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        boolean boolean23 = inflater0.finished();
        int int24 = inflater0.getAdler();
        int int25 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        inflater0.reset();
        inflater0.reset();
        inflater0.reset();
        boolean boolean26 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        long long10 = inflater6.getBytesWritten();
        inflater6.reset();
        long long12 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        inflater6.setInput(byteArray29);
        int int33 = inflater0.inflate(byteArray29);
        boolean boolean34 = inflater0.finished();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        inflater0.end();
        inflater0.end();
        java.lang.Class<?> wildcardClass24 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        boolean boolean5 = inflater1.needsDictionary();
        boolean boolean6 = inflater1.finished();
        boolean boolean7 = inflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsDictionary();
        boolean boolean13 = inflater0.needsInput();
        int int14 = inflater0.getRemaining();
        inflater0.end();
        byte[] byteArray16 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        boolean boolean3 = inflater0.finished();
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater(true);
        int int8 = inflater7.getRemaining();
        long long9 = inflater7.getBytesRead();
        int int10 = inflater7.getTotalIn();
        int int11 = inflater7.getRemaining();
        boolean boolean12 = inflater7.needsInput();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.needsDictionary();
        int int15 = inflater13.getTotalOut();
        int int16 = inflater13.getTotalOut();
        int int17 = inflater13.getAdler();
        boolean boolean18 = inflater13.needsDictionary();
        int int19 = inflater13.getTotalOut();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        boolean boolean24 = inflater20.finished();
        inflater20.end();
        inflater20.end();
        boolean boolean27 = inflater20.needsInput();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        inflater28.reset();
        boolean boolean35 = inflater28.needsDictionary();
        int int36 = inflater28.getTotalIn();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.needsDictionary();
        boolean boolean41 = inflater37.needsInput();
        int int42 = inflater37.getRemaining();
        inflater37.reset();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        boolean boolean48 = inflater44.needsInput();
        int int49 = inflater44.getRemaining();
        inflater44.reset();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater51.setInput(byteArray61);
        inflater44.setInput(byteArray61);
        int int66 = inflater37.inflate(byteArray61, 0, (int) (byte) 0);
        int int67 = inflater28.inflate(byteArray61);
        inflater20.setInput(byteArray61);
        int int71 = inflater13.inflate(byteArray61, 0, (int) (byte) 0);
        inflater7.setDictionary(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray61, (int) (short) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getTotalOut();
        long long6 = inflater0.getBytesWritten();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        inflater8.end();
        boolean boolean12 = inflater8.needsInput();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        long long17 = inflater13.getBytesRead();
        boolean boolean18 = inflater13.needsInput();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        long long23 = inflater19.getBytesWritten();
        inflater19.reset();
        long long25 = inflater19.getBytesWritten();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        boolean boolean30 = inflater26.needsInput();
        int int31 = inflater26.getRemaining();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        int int44 = inflater26.inflate(byteArray42);
        inflater19.setInput(byteArray42);
        int int46 = inflater13.inflate(byteArray42);
        inflater8.setInput(byteArray42);
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        byte[] byteArray50 = new byte[] { (byte) 1 };
        int int51 = inflater48.inflate(byteArray50);
        inflater8.setInput(byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        long long10 = inflater6.getBytesRead();
        long long11 = inflater6.getBytesWritten();
        boolean boolean12 = inflater6.finished();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        boolean boolean17 = inflater13.finished();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        inflater19.reset();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int38 = inflater29.inflate(byteArray37);
        int int39 = inflater24.inflate(byteArray37);
        inflater19.setInput(byteArray37);
        inflater13.setInput(byteArray37);
        int int42 = inflater6.inflate(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = inflater0.inflate(byteArray37, (-1), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        int int27 = inflater0.getAdler();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsInput();
        int int2 = inflater0.getAdler();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater(true);
        int int5 = inflater4.getRemaining();
        long long6 = inflater4.getBytesRead();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        int int11 = inflater4.inflate(byteArray9);
        long long12 = inflater4.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        inflater13.reset();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        int int22 = inflater18.getTotalIn();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int32 = inflater23.inflate(byteArray31);
        int int33 = inflater18.inflate(byteArray31);
        inflater13.setInput(byteArray31);
        boolean boolean35 = inflater13.needsDictionary();
        long long36 = inflater13.getBytesWritten();
        int int37 = inflater13.getTotalOut();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        inflater38.reset();
        long long43 = inflater38.getBytesWritten();
        boolean boolean44 = inflater38.needsInput();
        boolean boolean45 = inflater38.finished();
        int int46 = inflater38.getTotalOut();
        boolean boolean47 = inflater38.needsInput();
        boolean boolean48 = inflater38.needsInput();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.needsDictionary();
        boolean boolean53 = inflater49.needsInput();
        int int54 = inflater49.getRemaining();
        inflater49.reset();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsDictionary();
        boolean boolean60 = inflater56.needsInput();
        int int61 = inflater56.getRemaining();
        inflater56.reset();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.finished();
        int int65 = inflater63.getRemaining();
        boolean boolean66 = inflater63.finished();
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater63.setInput(byteArray73);
        inflater56.setInput(byteArray73);
        int int78 = inflater49.inflate(byteArray73, 0, (int) (byte) 0);
        inflater38.setInput(byteArray73);
        inflater13.setInput(byteArray73);
        int int81 = inflater4.inflate(byteArray73);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = inflater0.inflate(byteArray73, (int) (short) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        inflater0.reset();
        int int23 = inflater0.getAdler();
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getTotalOut();
        inflater0.reset();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        boolean boolean11 = inflater9.needsInput();
        long long12 = inflater9.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        int int17 = inflater13.getAdler();
        inflater13.reset();
        boolean boolean19 = inflater13.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        inflater20.end();
        boolean boolean24 = inflater20.needsInput();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        long long29 = inflater25.getBytesRead();
        boolean boolean30 = inflater25.needsInput();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        long long35 = inflater31.getBytesWritten();
        inflater31.reset();
        long long37 = inflater31.getBytesWritten();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        boolean boolean42 = inflater38.needsInput();
        int int43 = inflater38.getRemaining();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.finished();
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater44.setInput(byteArray54);
        int int56 = inflater38.inflate(byteArray54);
        inflater31.setInput(byteArray54);
        int int58 = inflater25.inflate(byteArray54);
        inflater20.setInput(byteArray54);
        inflater13.setInput(byteArray54);
        int int61 = inflater9.inflate(byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray54, (int) 'a', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean26 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        boolean boolean29 = inflater25.finished();
        inflater25.end();
        inflater25.end();
        boolean boolean32 = inflater25.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        inflater33.setInput(byteArray47);
        inflater25.setInput(byteArray47);
        inflater0.setInput(byteArray47);
        int int52 = inflater0.getRemaining();
        boolean boolean53 = inflater0.needsInput();
        long long54 = inflater0.getBytesRead();
        boolean boolean55 = inflater0.needsDictionary();
        inflater0.reset();
        byte[] byteArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray57, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getRemaining();
        int int7 = inflater0.getRemaining();
        boolean boolean8 = inflater0.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater(true);
        int int11 = inflater10.getRemaining();
        long long12 = inflater10.getBytesRead();
        boolean boolean13 = inflater10.needsInput();
        inflater10.reset();
        long long15 = inflater10.getBytesRead();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        boolean boolean20 = inflater16.finished();
        inflater16.end();
        inflater16.end();
        boolean boolean23 = inflater16.needsInput();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getRemaining();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        int int42 = inflater24.inflate(byteArray40);
        boolean boolean43 = inflater24.finished();
        int int44 = inflater24.getAdler();
        boolean boolean45 = inflater24.finished();
        int int46 = inflater24.getAdler();
        boolean boolean47 = inflater24.needsInput();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        byte[] byteArray50 = new byte[] { (byte) 1 };
        int int51 = inflater48.inflate(byteArray50);
        int int52 = inflater48.getTotalIn();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        byte[] byteArray55 = new byte[] { (byte) 1 };
        int int56 = inflater53.inflate(byteArray55);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int62 = inflater53.inflate(byteArray61);
        int int63 = inflater48.inflate(byteArray61);
        int int64 = inflater24.inflate(byteArray61);
        inflater16.setInput(byteArray61, (int) (byte) 0, (int) (short) 1);
        inflater10.setDictionary(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray61, 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsInput();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        inflater18.reset();
        boolean boolean25 = inflater18.needsDictionary();
        int int26 = inflater18.getTotalOut();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        boolean boolean31 = inflater27.finished();
        inflater27.end();
        inflater27.end();
        boolean boolean34 = inflater27.needsInput();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        boolean boolean39 = inflater35.needsInput();
        int int40 = inflater35.getRemaining();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.finished();
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater41.setInput(byteArray51);
        int int53 = inflater35.inflate(byteArray51);
        boolean boolean54 = inflater35.finished();
        int int55 = inflater35.getAdler();
        boolean boolean56 = inflater35.finished();
        int int57 = inflater35.getAdler();
        boolean boolean58 = inflater35.needsInput();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        int int63 = inflater59.getTotalIn();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int73 = inflater64.inflate(byteArray72);
        int int74 = inflater59.inflate(byteArray72);
        int int75 = inflater35.inflate(byteArray72);
        inflater27.setInput(byteArray72, (int) (byte) 0, (int) (short) 1);
        int int79 = inflater18.inflate(byteArray72);
        inflater0.setInput(byteArray72);
        java.lang.Class<?> wildcardClass81 = byteArray72.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        long long5 = inflater1.getBytesWritten();
        int int6 = inflater1.getTotalIn();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        inflater7.reset();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        int int16 = inflater12.getTotalIn();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int26 = inflater17.inflate(byteArray25);
        int int27 = inflater12.inflate(byteArray25);
        inflater7.setInput(byteArray25);
        int int29 = inflater1.inflate(byteArray25);
        inflater1.end();
        inflater1.end();
        boolean boolean32 = inflater1.finished();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.finished();
        int int8 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        int int27 = inflater9.inflate(byteArray25);
        boolean boolean28 = inflater9.finished();
        int int29 = inflater9.getAdler();
        boolean boolean30 = inflater9.finished();
        int int31 = inflater9.getAdler();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        inflater32.reset();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        inflater32.setInput(byteArray49);
        int int52 = inflater9.inflate(byteArray49);
        inflater0.setInput(byteArray49, 0, 0);
        long long56 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        long long6 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater(true);
        inflater8.end();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsDictionary();
        boolean boolean14 = inflater10.needsInput();
        int int15 = inflater10.getRemaining();
        inflater10.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater17.setInput(byteArray27);
        inflater10.setInput(byteArray27);
        inflater8.setInput(byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray27, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getRemaining();
        boolean boolean8 = inflater0.needsInput();
        boolean boolean9 = inflater0.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        inflater10.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        int int19 = inflater15.getTotalIn();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int29 = inflater20.inflate(byteArray28);
        int int30 = inflater15.inflate(byteArray28);
        inflater10.setInput(byteArray28);
        boolean boolean32 = inflater10.needsDictionary();
        long long33 = inflater10.getBytesWritten();
        int int34 = inflater10.getAdler();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.needsDictionary();
        int int37 = inflater35.getTotalOut();
        int int38 = inflater35.getTotalOut();
        boolean boolean39 = inflater35.needsInput();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        inflater40.reset();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        int int49 = inflater45.getTotalIn();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        byte[] byteArray52 = new byte[] { (byte) 1 };
        int int53 = inflater50.inflate(byteArray52);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int59 = inflater50.inflate(byteArray58);
        int int60 = inflater45.inflate(byteArray58);
        inflater40.setInput(byteArray58);
        inflater35.setInput(byteArray58);
        inflater10.setInput(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray58, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getAdler();
        boolean boolean3 = inflater1.needsDictionary();
        int int4 = inflater1.getTotalOut();
        int int5 = inflater1.getAdler();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        long long10 = inflater6.getBytesRead();
        boolean boolean11 = inflater6.finished();
        long long12 = inflater6.getBytesRead();
        boolean boolean13 = inflater6.needsDictionary();
        boolean boolean14 = inflater6.needsDictionary();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.needsDictionary();
        int int17 = inflater15.getTotalOut();
        int int18 = inflater15.getTotalOut();
        boolean boolean19 = inflater15.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        inflater20.reset();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        int int29 = inflater25.getTotalIn();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int39 = inflater30.inflate(byteArray38);
        int int40 = inflater25.inflate(byteArray38);
        inflater20.setInput(byteArray38);
        inflater15.setInput(byteArray38);
        int int43 = inflater6.inflate(byteArray38);
        inflater6.reset();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        int int49 = inflater45.getAdler();
        boolean boolean50 = inflater45.finished();
        long long51 = inflater45.getBytesWritten();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        boolean boolean54 = inflater52.needsInput();
        boolean boolean55 = inflater52.needsInput();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsDictionary();
        long long60 = inflater56.getBytesRead();
        boolean boolean61 = inflater56.needsDictionary();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        long long66 = inflater62.getBytesWritten();
        inflater62.reset();
        long long68 = inflater62.getBytesWritten();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.needsDictionary();
        boolean boolean73 = inflater69.needsInput();
        int int74 = inflater69.getRemaining();
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        boolean boolean76 = inflater75.finished();
        int int77 = inflater75.getRemaining();
        boolean boolean78 = inflater75.finished();
        byte[] byteArray85 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater75.setInput(byteArray85);
        int int87 = inflater69.inflate(byteArray85);
        inflater62.setInput(byteArray85);
        inflater56.setInput(byteArray85);
        int int90 = inflater52.inflate(byteArray85);
        int int91 = inflater45.inflate(byteArray85);
        int int92 = inflater6.inflate(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setDictionary(byteArray85, (int) (byte) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        int int41 = inflater0.getTotalIn();
        boolean boolean42 = inflater0.finished();
        inflater0.reset();
        inflater0.reset();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray47, 0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getTotalOut();
        inflater0.reset();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        boolean boolean15 = inflater11.needsInput();
        int int16 = inflater11.getRemaining();
        inflater11.reset();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        inflater11.setInput(byteArray28);
        inflater9.setInput(byteArray28);
        inflater0.setInput(byteArray28, (int) (byte) 0, 0);
        boolean boolean35 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsDictionary();
        int int13 = inflater0.getRemaining();
        long long14 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        inflater15.setInput(byteArray29);
        inflater0.setInput(byteArray29);
        int int33 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalIn();
        boolean boolean7 = inflater0.needsDictionary();
        int int8 = inflater0.getAdler();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        inflater9.end();
        boolean boolean13 = inflater9.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        long long18 = inflater14.getBytesRead();
        boolean boolean19 = inflater14.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        long long24 = inflater20.getBytesWritten();
        inflater20.reset();
        long long26 = inflater20.getBytesWritten();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        boolean boolean31 = inflater27.needsInput();
        int int32 = inflater27.getRemaining();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.finished();
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater33.setInput(byteArray43);
        int int45 = inflater27.inflate(byteArray43);
        inflater20.setInput(byteArray43);
        int int47 = inflater14.inflate(byteArray43);
        inflater9.setInput(byteArray43);
        int int49 = inflater0.inflate(byteArray43);
        int int50 = inflater0.getTotalIn();
        int int51 = inflater0.getAdler();
        boolean boolean52 = inflater0.finished();
        long long53 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.needsDictionary();
        int int56 = inflater54.getTotalOut();
        int int57 = inflater54.getTotalOut();
        long long58 = inflater54.getBytesWritten();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.needsDictionary();
        long long63 = inflater59.getBytesRead();
        boolean boolean64 = inflater59.needsDictionary();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        byte[] byteArray67 = new byte[] { (byte) 1 };
        int int68 = inflater65.inflate(byteArray67);
        long long69 = inflater65.getBytesWritten();
        inflater65.reset();
        long long71 = inflater65.getBytesWritten();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        boolean boolean73 = inflater72.finished();
        int int74 = inflater72.getRemaining();
        boolean boolean75 = inflater72.needsDictionary();
        boolean boolean76 = inflater72.needsInput();
        int int77 = inflater72.getRemaining();
        java.util.zip.Inflater inflater78 = new java.util.zip.Inflater();
        boolean boolean79 = inflater78.finished();
        int int80 = inflater78.getRemaining();
        boolean boolean81 = inflater78.finished();
        byte[] byteArray88 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater78.setInput(byteArray88);
        int int90 = inflater72.inflate(byteArray88);
        inflater65.setInput(byteArray88);
        inflater59.setInput(byteArray88);
        int int93 = inflater54.inflate(byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getTotalOut();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalOut();
        boolean boolean10 = inflater5.needsInput();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        inflater11.end();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater11.setInput(byteArray25);
        inflater5.setInput(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        int int56 = inflater0.getAdler();
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        boolean boolean13 = inflater9.finished();
        inflater9.reset();
        inflater9.reset();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        inflater16.end();
        boolean boolean20 = inflater16.needsInput();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        boolean boolean25 = inflater21.needsInput();
        int int26 = inflater21.getRemaining();
        inflater21.reset();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater28.setInput(byteArray38);
        inflater21.setInput(byteArray38);
        inflater16.setInput(byteArray38);
        int int44 = inflater9.inflate(byteArray38, 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = inflater0.inflate(byteArray38, (int) (byte) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        int int10 = inflater0.getTotalIn();
        long long11 = inflater0.getBytesWritten();
        int int12 = inflater0.getRemaining();
        int int13 = inflater0.getTotalOut();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        inflater0.reset();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        long long29 = inflater25.getBytesWritten();
        inflater25.reset();
        long long31 = inflater25.getBytesWritten();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater38.setInput(byteArray48);
        int int50 = inflater32.inflate(byteArray48);
        inflater25.setInput(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        boolean boolean7 = inflater0.needsDictionary();
        int int8 = inflater0.getRemaining();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        int int13 = inflater9.getAdler();
        boolean boolean14 = inflater9.finished();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        inflater15.reset();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        long long24 = inflater20.getBytesWritten();
        inflater20.reset();
        long long26 = inflater20.getBytesWritten();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        boolean boolean31 = inflater27.needsInput();
        int int32 = inflater27.getRemaining();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.finished();
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater33.setInput(byteArray43);
        int int45 = inflater27.inflate(byteArray43);
        inflater20.setInput(byteArray43);
        inflater15.setInput(byteArray43);
        inflater9.setInput(byteArray43, (int) (byte) 0, 1);
        int int51 = inflater9.getTotalIn();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.needsDictionary();
        int int54 = inflater52.getTotalOut();
        int int55 = inflater52.getTotalOut();
        boolean boolean56 = inflater52.needsInput();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        inflater57.reset();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        int int66 = inflater62.getTotalIn();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int76 = inflater67.inflate(byteArray75);
        int int77 = inflater62.inflate(byteArray75);
        inflater57.setInput(byteArray75);
        inflater52.setInput(byteArray75);
        inflater9.setInput(byteArray75);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        int int12 = inflater8.getAdler();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        inflater13.end();
        boolean boolean17 = inflater13.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        inflater13.setInput(byteArray20);
        int int23 = inflater8.inflate(byteArray20);
        int int24 = inflater8.getTotalOut();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        boolean boolean29 = inflater25.finished();
        inflater25.end();
        inflater25.end();
        boolean boolean32 = inflater25.needsInput();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        int int51 = inflater33.inflate(byteArray49);
        boolean boolean52 = inflater33.finished();
        int int53 = inflater33.getAdler();
        boolean boolean54 = inflater33.finished();
        int int55 = inflater33.getAdler();
        boolean boolean56 = inflater33.needsInput();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        int int61 = inflater57.getTotalIn();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int71 = inflater62.inflate(byteArray70);
        int int72 = inflater57.inflate(byteArray70);
        int int73 = inflater33.inflate(byteArray70);
        inflater25.setInput(byteArray70, (int) (byte) 0, (int) (short) 1);
        inflater8.setInput(byteArray70);
        int int78 = inflater0.inflate(byteArray70);
        int int79 = inflater0.getRemaining();
        boolean boolean80 = inflater0.finished();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        int int23 = inflater19.getTotalIn();
        long long24 = inflater19.getBytesWritten();
        int int25 = inflater19.getAdler();
        int int26 = inflater19.getAdler();
        boolean boolean27 = inflater19.needsInput();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        long long32 = inflater28.getBytesRead();
        boolean boolean33 = inflater28.needsInput();
        int int34 = inflater28.getTotalOut();
        long long35 = inflater28.getBytesRead();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.needsDictionary();
        boolean boolean40 = inflater36.needsInput();
        int int41 = inflater36.getRemaining();
        inflater36.reset();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater43.setInput(byteArray53);
        inflater36.setInput(byteArray53);
        int int58 = inflater28.inflate(byteArray53, 1, (int) (short) 1);
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.finished();
        int int63 = inflater59.getAdler();
        int int64 = inflater59.getAdler();
        int int65 = inflater59.getAdler();
        int int66 = inflater59.getTotalOut();
        inflater59.reset();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.needsDictionary();
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        boolean boolean71 = inflater70.finished();
        int int72 = inflater70.getRemaining();
        boolean boolean73 = inflater70.needsDictionary();
        boolean boolean74 = inflater70.needsInput();
        int int75 = inflater70.getRemaining();
        inflater70.reset();
        java.util.zip.Inflater inflater77 = new java.util.zip.Inflater();
        boolean boolean78 = inflater77.finished();
        int int79 = inflater77.getRemaining();
        boolean boolean80 = inflater77.finished();
        byte[] byteArray87 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater77.setInput(byteArray87);
        inflater70.setInput(byteArray87);
        inflater68.setInput(byteArray87);
        inflater59.setInput(byteArray87, (int) (byte) 0, 0);
        int int94 = inflater28.inflate(byteArray87);
        int int95 = inflater19.inflate(byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray87, (int) '4', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        int int8 = inflater1.inflate(byteArray6);
        boolean boolean9 = inflater1.needsInput();
        boolean boolean10 = inflater1.finished();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        boolean boolean22 = inflater18.finished();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        inflater24.reset();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        int int33 = inflater29.getTotalIn();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int43 = inflater34.inflate(byteArray42);
        int int44 = inflater29.inflate(byteArray42);
        inflater24.setInput(byteArray42);
        inflater18.setInput(byteArray42);
        inflater0.setInput(byteArray42);
        java.lang.Class<?> wildcardClass48 = byteArray42.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesWritten();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsInput();
        boolean boolean22 = inflater0.needsInput();
        boolean boolean23 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass24 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getRemaining();
        int int25 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        long long30 = inflater26.getBytesWritten();
        inflater26.reset();
        long long32 = inflater26.getBytesWritten();
        int int33 = inflater26.getTotalIn();
        boolean boolean34 = inflater26.needsDictionary();
        int int35 = inflater26.getTotalOut();
        int int36 = inflater26.getTotalOut();
        boolean boolean37 = inflater26.needsInput();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        int int42 = inflater38.getTotalIn();
        long long43 = inflater38.getBytesWritten();
        long long44 = inflater38.getBytesRead();
        int int45 = inflater38.getAdler();
        int int46 = inflater38.getTotalOut();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        inflater47.end();
        boolean boolean51 = inflater47.needsInput();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.needsDictionary();
        long long56 = inflater52.getBytesRead();
        boolean boolean57 = inflater52.needsInput();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        byte[] byteArray60 = new byte[] { (byte) 1 };
        int int61 = inflater58.inflate(byteArray60);
        long long62 = inflater58.getBytesWritten();
        inflater58.reset();
        long long64 = inflater58.getBytesWritten();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.finished();
        int int67 = inflater65.getRemaining();
        boolean boolean68 = inflater65.needsDictionary();
        boolean boolean69 = inflater65.needsInput();
        int int70 = inflater65.getRemaining();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        boolean boolean72 = inflater71.finished();
        int int73 = inflater71.getRemaining();
        boolean boolean74 = inflater71.finished();
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater71.setInput(byteArray81);
        int int83 = inflater65.inflate(byteArray81);
        inflater58.setInput(byteArray81);
        int int85 = inflater52.inflate(byteArray81);
        inflater47.setInput(byteArray81);
        inflater38.setInput(byteArray81);
        inflater26.setInput(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        inflater0.reset();
        boolean boolean2 = inflater0.needsInput();
        boolean boolean3 = inflater0.needsDictionary();
        inflater0.end();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        int int10 = inflater5.getTotalIn();
        int int11 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        int int16 = inflater12.getAdler();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        long long21 = inflater17.getBytesRead();
        boolean boolean22 = inflater17.finished();
        long long23 = inflater17.getBytesRead();
        boolean boolean24 = inflater17.needsDictionary();
        boolean boolean25 = inflater17.needsDictionary();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.needsDictionary();
        int int28 = inflater26.getTotalOut();
        int int29 = inflater26.getTotalOut();
        boolean boolean30 = inflater26.needsInput();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        inflater31.reset();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        int int40 = inflater36.getTotalIn();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int50 = inflater41.inflate(byteArray49);
        int int51 = inflater36.inflate(byteArray49);
        inflater31.setInput(byteArray49);
        inflater26.setInput(byteArray49);
        int int54 = inflater17.inflate(byteArray49);
        inflater12.setInput(byteArray49);
        int int56 = inflater5.inflate(byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray49, 10, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater(true);
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        inflater9.reset();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        long long18 = inflater14.getBytesWritten();
        inflater14.reset();
        long long20 = inflater14.getBytesWritten();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        boolean boolean25 = inflater21.needsInput();
        int int26 = inflater21.getRemaining();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.finished();
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater27.setInput(byteArray37);
        int int39 = inflater21.inflate(byteArray37);
        inflater14.setInput(byteArray37);
        inflater9.setInput(byteArray37);
        inflater8.setDictionary(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = inflater0.inflate(byteArray37, (int) (short) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.finished();
        boolean boolean25 = inflater0.needsInput();
        int int26 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        int int24 = inflater1.getTotalIn();
        boolean boolean25 = inflater1.finished();
        int int26 = inflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        long long10 = inflater6.getBytesRead();
        boolean boolean11 = inflater6.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        long long16 = inflater12.getBytesWritten();
        inflater12.reset();
        long long18 = inflater12.getBytesWritten();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsDictionary();
        boolean boolean23 = inflater19.needsInput();
        int int24 = inflater19.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.finished();
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater25.setInput(byteArray35);
        int int37 = inflater19.inflate(byteArray35);
        inflater12.setInput(byteArray35);
        inflater6.setInput(byteArray35);
        int int40 = inflater0.inflate(byteArray35);
        long long41 = inflater0.getBytesWritten();
        long long42 = inflater0.getBytesRead();
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        inflater0.end();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        boolean boolean25 = inflater21.needsInput();
        int int26 = inflater21.getRemaining();
        inflater21.reset();
        boolean boolean28 = inflater21.needsDictionary();
        int int29 = inflater21.getTotalIn();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        boolean boolean34 = inflater30.needsInput();
        int int35 = inflater30.getRemaining();
        inflater30.reset();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.needsDictionary();
        boolean boolean41 = inflater37.needsInput();
        int int42 = inflater37.getRemaining();
        inflater37.reset();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.finished();
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater44.setInput(byteArray54);
        inflater37.setInput(byteArray54);
        int int59 = inflater30.inflate(byteArray54, 0, (int) (byte) 0);
        int int60 = inflater21.inflate(byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray54, (int) '4', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        boolean boolean29 = inflater25.finished();
        inflater25.end();
        inflater25.end();
        boolean boolean32 = inflater25.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        inflater33.setInput(byteArray47);
        inflater25.setInput(byteArray47);
        inflater0.setInput(byteArray47);
        int int52 = inflater0.getRemaining();
        boolean boolean53 = inflater0.needsInput();
        long long54 = inflater0.getBytesRead();
        boolean boolean55 = inflater0.needsDictionary();
        inflater0.reset();
        inflater0.end();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        inflater1.end();
        java.util.zip.Inflater inflater3 = new java.util.zip.Inflater();
        boolean boolean4 = inflater3.finished();
        int int5 = inflater3.getRemaining();
        boolean boolean6 = inflater3.needsDictionary();
        boolean boolean7 = inflater3.needsInput();
        int int8 = inflater3.getRemaining();
        inflater3.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.finished();
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater10.setInput(byteArray20);
        inflater3.setInput(byteArray20);
        inflater1.setInput(byteArray20);
        java.lang.Class<?> wildcardClass24 = byteArray20.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getTotalOut();
        int int7 = inflater0.getTotalOut();
        boolean boolean8 = inflater0.needsInput();
        long long9 = inflater0.getBytesWritten();
        boolean boolean10 = inflater0.finished();
        long long11 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int21 = inflater12.inflate(byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray20, (int) (short) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.end();
        boolean boolean5 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        inflater0.setInput(byteArray19);
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getAdler();
        int int25 = inflater0.getTotalIn();
        boolean boolean26 = inflater0.needsInput();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        int int31 = inflater27.getAdler();
        boolean boolean32 = inflater27.finished();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        inflater33.reset();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        long long42 = inflater38.getBytesWritten();
        inflater38.reset();
        long long44 = inflater38.getBytesWritten();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.needsDictionary();
        boolean boolean49 = inflater45.needsInput();
        int int50 = inflater45.getRemaining();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater51.setInput(byteArray61);
        int int63 = inflater45.inflate(byteArray61);
        inflater38.setInput(byteArray61);
        inflater33.setInput(byteArray61);
        inflater27.setInput(byteArray61, (int) (byte) 0, 1);
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater(true);
        int int71 = inflater70.getRemaining();
        long long72 = inflater70.getBytesRead();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        boolean boolean74 = inflater73.finished();
        int int75 = inflater73.getRemaining();
        inflater73.end();
        java.util.zip.Inflater inflater77 = new java.util.zip.Inflater();
        boolean boolean78 = inflater77.finished();
        int int79 = inflater77.getRemaining();
        boolean boolean80 = inflater77.finished();
        byte[] byteArray87 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater77.setInput(byteArray87);
        inflater73.setInput(byteArray87);
        inflater70.setInput(byteArray87, (int) (byte) 1, (int) (short) 1);
        int int93 = inflater27.inflate(byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray87, (int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        boolean boolean7 = inflater0.needsInput();
        boolean boolean8 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        boolean boolean14 = inflater9.needsDictionary();
        boolean boolean15 = inflater9.needsDictionary();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        int int28 = inflater9.inflate(byteArray26);
        boolean boolean29 = inflater9.finished();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        inflater9.setInput(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = inflater0.inflate(byteArray32, (int) '#', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getTotalIn();
        long long3 = inflater1.getBytesWritten();
        int int4 = inflater1.getRemaining();
        int int5 = inflater1.getAdler();
        long long6 = inflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater8.setInput(byteArray25);
        int int30 = inflater0.inflate(byteArray25, 1, (int) (short) 1);
        int int31 = inflater0.getTotalIn();
        boolean boolean32 = inflater0.needsDictionary();
        int int33 = inflater0.getAdler();
        int int34 = inflater0.getTotalOut();
        long long35 = inflater0.getBytesRead();
        int int36 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsInput();
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        int int5 = inflater2.inflate(byteArray4);
        long long6 = inflater2.getBytesWritten();
        int int7 = inflater2.getRemaining();
        int int8 = inflater2.getTotalOut();
        boolean boolean9 = inflater2.finished();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        inflater15.end();
        boolean boolean19 = inflater15.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        inflater15.setInput(byteArray22);
        inflater10.setInput(byteArray22);
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        int int30 = inflater26.getTotalIn();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int40 = inflater31.inflate(byteArray39);
        int int41 = inflater26.inflate(byteArray39);
        int int42 = inflater26.getTotalOut();
        int int43 = inflater26.getTotalOut();
        long long44 = inflater26.getBytesRead();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        long long49 = inflater45.getBytesRead();
        boolean boolean50 = inflater45.finished();
        long long51 = inflater45.getBytesRead();
        boolean boolean52 = inflater45.needsDictionary();
        boolean boolean53 = inflater45.needsDictionary();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.needsDictionary();
        int int56 = inflater54.getTotalOut();
        int int57 = inflater54.getTotalOut();
        boolean boolean58 = inflater54.needsInput();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        inflater59.reset();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        int int68 = inflater64.getTotalIn();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        byte[] byteArray71 = new byte[] { (byte) 1 };
        int int72 = inflater69.inflate(byteArray71);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int78 = inflater69.inflate(byteArray77);
        int int79 = inflater64.inflate(byteArray77);
        inflater59.setInput(byteArray77);
        inflater54.setInput(byteArray77);
        int int82 = inflater45.inflate(byteArray77);
        inflater26.setInput(byteArray77);
        inflater10.setInput(byteArray77);
        inflater2.setInput(byteArray77);
        int int86 = inflater0.inflate(byteArray77);
        boolean boolean87 = inflater0.finished();
        long long88 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsInput();
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        int int5 = inflater2.inflate(byteArray4);
        long long6 = inflater2.getBytesWritten();
        int int7 = inflater2.getRemaining();
        int int8 = inflater2.getTotalOut();
        boolean boolean9 = inflater2.finished();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        inflater15.end();
        boolean boolean19 = inflater15.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        inflater15.setInput(byteArray22);
        inflater10.setInput(byteArray22);
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        int int30 = inflater26.getTotalIn();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int40 = inflater31.inflate(byteArray39);
        int int41 = inflater26.inflate(byteArray39);
        int int42 = inflater26.getTotalOut();
        int int43 = inflater26.getTotalOut();
        long long44 = inflater26.getBytesRead();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        long long49 = inflater45.getBytesRead();
        boolean boolean50 = inflater45.finished();
        long long51 = inflater45.getBytesRead();
        boolean boolean52 = inflater45.needsDictionary();
        boolean boolean53 = inflater45.needsDictionary();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.needsDictionary();
        int int56 = inflater54.getTotalOut();
        int int57 = inflater54.getTotalOut();
        boolean boolean58 = inflater54.needsInput();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        inflater59.reset();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        int int68 = inflater64.getTotalIn();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        byte[] byteArray71 = new byte[] { (byte) 1 };
        int int72 = inflater69.inflate(byteArray71);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int78 = inflater69.inflate(byteArray77);
        int int79 = inflater64.inflate(byteArray77);
        inflater59.setInput(byteArray77);
        inflater54.setInput(byteArray77);
        int int82 = inflater45.inflate(byteArray77);
        inflater26.setInput(byteArray77);
        inflater10.setInput(byteArray77);
        inflater2.setInput(byteArray77);
        int int86 = inflater0.inflate(byteArray77);
        boolean boolean87 = inflater0.finished();
        java.lang.Class<?> wildcardClass88 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getRemaining();
        int int7 = inflater0.getRemaining();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater(true);
        int int10 = inflater9.getRemaining();
        long long11 = inflater9.getBytesRead();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        inflater12.end();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        inflater12.setInput(byteArray26);
        inflater9.setInput(byteArray26, (int) (byte) 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray26, (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getAdler();
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getAdler();
        inflater0.end();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsInput();
        boolean boolean2 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater3 = new java.util.zip.Inflater();
        boolean boolean4 = inflater3.finished();
        int int5 = inflater3.getRemaining();
        boolean boolean6 = inflater3.needsDictionary();
        boolean boolean7 = inflater3.needsInput();
        boolean boolean8 = inflater3.needsDictionary();
        boolean boolean9 = inflater3.finished();
        int int10 = inflater3.getTotalIn();
        int int11 = inflater3.getRemaining();
        long long12 = inflater3.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        int int17 = inflater13.getTotalIn();
        long long18 = inflater13.getBytesWritten();
        int int19 = inflater13.getTotalIn();
        int int20 = inflater13.getTotalOut();
        int int21 = inflater13.getTotalOut();
        boolean boolean22 = inflater13.needsDictionary();
        int int23 = inflater13.getTotalOut();
        long long24 = inflater13.getBytesRead();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.finished();
        int int29 = inflater25.getAdler();
        int int30 = inflater25.getAdler();
        long long31 = inflater25.getBytesWritten();
        long long32 = inflater25.getBytesRead();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        int int37 = inflater33.getAdler();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        long long42 = inflater38.getBytesRead();
        boolean boolean43 = inflater38.finished();
        long long44 = inflater38.getBytesRead();
        boolean boolean45 = inflater38.needsDictionary();
        boolean boolean46 = inflater38.needsDictionary();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.needsDictionary();
        int int49 = inflater47.getTotalOut();
        int int50 = inflater47.getTotalOut();
        boolean boolean51 = inflater47.needsInput();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        int int55 = inflater52.inflate(byteArray54);
        inflater52.reset();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        int int61 = inflater57.getTotalIn();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int71 = inflater62.inflate(byteArray70);
        int int72 = inflater57.inflate(byteArray70);
        inflater52.setInput(byteArray70);
        inflater47.setInput(byteArray70);
        int int75 = inflater38.inflate(byteArray70);
        inflater33.setInput(byteArray70);
        int int77 = inflater25.inflate(byteArray70);
        inflater13.setInput(byteArray70);
        int int79 = inflater3.inflate(byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        long long24 = inflater0.getBytesRead();
        int int25 = inflater0.getRemaining();
        java.lang.Class<?> wildcardClass26 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        inflater0.end();
        java.lang.Class<?> wildcardClass13 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        boolean boolean2 = inflater0.needsInput();
        boolean boolean3 = inflater0.needsInput();
        long long4 = inflater0.getBytesRead();
        java.lang.Class<?> wildcardClass5 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.end();
        boolean boolean6 = inflater0.needsDictionary();
        boolean boolean7 = inflater0.needsInput();
        boolean boolean8 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        long long14 = inflater9.getBytesWritten();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater(true);
        int int17 = inflater16.getRemaining();
        long long18 = inflater16.getBytesRead();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        inflater19.end();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        inflater19.setInput(byteArray33);
        inflater16.setInput(byteArray33, (int) (byte) 1, (int) (short) 1);
        int int39 = inflater9.inflate(byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = inflater0.inflate(byteArray33, (int) (short) 1, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalIn();
        boolean boolean7 = inflater0.finished();
        long long8 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        inflater9.end();
        boolean boolean13 = inflater9.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        inflater9.setInput(byteArray16);
        boolean boolean19 = inflater9.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        long long24 = inflater20.getBytesRead();
        boolean boolean25 = inflater20.needsInput();
        int int26 = inflater20.getTotalOut();
        long long27 = inflater20.getBytesRead();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        inflater28.reset();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        inflater28.setInput(byteArray45);
        int int50 = inflater20.inflate(byteArray45, 1, (int) (short) 1);
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        int int55 = inflater51.getAdler();
        int int56 = inflater51.getAdler();
        int int57 = inflater51.getAdler();
        int int58 = inflater51.getTotalOut();
        inflater51.reset();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.needsDictionary();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsDictionary();
        boolean boolean66 = inflater62.needsInput();
        int int67 = inflater62.getRemaining();
        inflater62.reset();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.finished();
        byte[] byteArray79 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater69.setInput(byteArray79);
        inflater62.setInput(byteArray79);
        inflater60.setInput(byteArray79);
        inflater51.setInput(byteArray79, (int) (byte) 0, 0);
        int int86 = inflater20.inflate(byteArray79);
        inflater9.setInput(byteArray79);
        int int88 = inflater0.inflate(byteArray79);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1 };
        inflater0.setInput(byteArray6);
        int int8 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getTotalOut();
        byte[] byteArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsDictionary();
        long long24 = inflater0.getBytesWritten();
        boolean boolean25 = inflater0.needsInput();
        java.lang.Class<?> wildcardClass26 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        int int19 = inflater0.inflate(byteArray17);
        boolean boolean20 = inflater0.needsDictionary();
        int int21 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.finished();
        int int26 = inflater22.getAdler();
        int int27 = inflater22.getAdler();
        int int28 = inflater22.getAdler();
        int int29 = inflater22.getTotalOut();
        inflater22.reset();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        inflater33.reset();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        inflater33.setInput(byteArray50);
        inflater31.setInput(byteArray50);
        inflater22.setInput(byteArray50, (int) (byte) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray50, (int) 'a', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalIn();
        boolean boolean7 = inflater0.needsDictionary();
        int int8 = inflater0.getRemaining();
        boolean boolean9 = inflater0.needsInput();
        int int10 = inflater0.getRemaining();
        java.lang.Class<?> wildcardClass11 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        int int8 = inflater1.inflate(byteArray6);
        long long9 = inflater1.getBytesWritten();
        int int10 = inflater1.getRemaining();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        inflater0.reset();
        int int23 = inflater0.getRemaining();
        boolean boolean24 = inflater0.finished();
        int int25 = inflater0.getTotalOut();
        int int26 = inflater0.getTotalOut();
        boolean boolean27 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        boolean boolean27 = inflater8.finished();
        int int28 = inflater8.getTotalOut();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        long long33 = inflater29.getBytesRead();
        boolean boolean34 = inflater29.needsDictionary();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        long long39 = inflater35.getBytesWritten();
        inflater35.reset();
        long long41 = inflater35.getBytesWritten();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        boolean boolean46 = inflater42.needsInput();
        int int47 = inflater42.getRemaining();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater48.setInput(byteArray58);
        int int60 = inflater42.inflate(byteArray58);
        inflater35.setInput(byteArray58);
        inflater29.setInput(byteArray58);
        int int63 = inflater8.inflate(byteArray58);
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.needsInput();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.finished();
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater68.setInput(byteArray78);
        inflater64.setInput(byteArray78);
        int int81 = inflater8.inflate(byteArray78);
        inflater0.setInput(byteArray78);
        int int83 = inflater0.getTotalIn();
        int int84 = inflater0.getTotalIn();
        int int85 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        inflater0.end();
        int int6 = inflater0.getRemaining();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.needsDictionary();
        int int9 = inflater7.getTotalOut();
        int int10 = inflater7.getTotalOut();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getTotalIn();
        int int13 = inflater7.getTotalOut();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        int int18 = inflater14.getAdler();
        inflater14.reset();
        long long20 = inflater14.getBytesWritten();
        inflater14.end();
        boolean boolean22 = inflater14.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.needsDictionary();
        int int25 = inflater23.getTotalOut();
        int int26 = inflater23.getTotalOut();
        long long27 = inflater23.getBytesWritten();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater34.setInput(byteArray44);
        int int46 = inflater28.inflate(byteArray44);
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.finished();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater51.setInput(byteArray61);
        inflater47.setInput(byteArray61);
        inflater28.setInput(byteArray61);
        int int65 = inflater23.inflate(byteArray61);
        inflater14.setInput(byteArray61, (int) (byte) 0, (int) (byte) 0);
        int int69 = inflater7.inflate(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray61, (int) (byte) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        long long6 = inflater0.getBytesWritten();
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        inflater0.reset();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.needsDictionary();
        int int25 = inflater23.getTotalOut();
        boolean boolean26 = inflater23.finished();
        boolean boolean27 = inflater23.needsDictionary();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        boolean boolean30 = inflater28.needsInput();
        boolean boolean31 = inflater28.needsInput();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        long long36 = inflater32.getBytesRead();
        boolean boolean37 = inflater32.needsDictionary();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        long long42 = inflater38.getBytesWritten();
        inflater38.reset();
        long long44 = inflater38.getBytesWritten();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.needsDictionary();
        boolean boolean49 = inflater45.needsInput();
        int int50 = inflater45.getRemaining();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater51.setInput(byteArray61);
        int int63 = inflater45.inflate(byteArray61);
        inflater38.setInput(byteArray61);
        inflater32.setInput(byteArray61);
        int int66 = inflater28.inflate(byteArray61);
        int int67 = inflater23.inflate(byteArray61);
        inflater0.setInput(byteArray61);
        int int69 = inflater0.getAdler();
        int int70 = inflater0.getAdler();
        int int71 = inflater0.getAdler();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        long long10 = inflater6.getBytesWritten();
        inflater6.reset();
        long long12 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        inflater6.setInput(byteArray29);
        inflater0.setInput(byteArray29);
        int int34 = inflater0.getTotalIn();
        long long35 = inflater0.getBytesWritten();
        int int36 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater8.setInput(byteArray25);
        int int30 = inflater0.inflate(byteArray25, 1, (int) (short) 1);
        long long31 = inflater0.getBytesRead();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        inflater0.reset();
        inflater0.end();
        java.lang.Class<?> wildcardClass9 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        inflater0.reset();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        int int12 = inflater6.getTotalOut();
        boolean boolean13 = inflater6.needsInput();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater(true);
        int int16 = inflater15.getRemaining();
        long long17 = inflater15.getBytesRead();
        int int18 = inflater15.getTotalIn();
        int int19 = inflater15.getRemaining();
        boolean boolean20 = inflater15.needsInput();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.needsDictionary();
        int int23 = inflater21.getTotalOut();
        int int24 = inflater21.getTotalOut();
        int int25 = inflater21.getAdler();
        boolean boolean26 = inflater21.needsDictionary();
        int int27 = inflater21.getTotalOut();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        boolean boolean32 = inflater28.finished();
        inflater28.end();
        inflater28.end();
        boolean boolean35 = inflater28.needsInput();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.needsDictionary();
        boolean boolean40 = inflater36.needsInput();
        int int41 = inflater36.getRemaining();
        inflater36.reset();
        boolean boolean43 = inflater36.needsDictionary();
        int int44 = inflater36.getTotalIn();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.needsDictionary();
        boolean boolean49 = inflater45.needsInput();
        int int50 = inflater45.getRemaining();
        inflater45.reset();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.needsDictionary();
        boolean boolean56 = inflater52.needsInput();
        int int57 = inflater52.getRemaining();
        inflater52.reset();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.finished();
        byte[] byteArray69 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater59.setInput(byteArray69);
        inflater52.setInput(byteArray69);
        int int74 = inflater45.inflate(byteArray69, 0, (int) (byte) 0);
        int int75 = inflater36.inflate(byteArray69);
        inflater28.setInput(byteArray69);
        int int79 = inflater21.inflate(byteArray69, 0, (int) (byte) 0);
        inflater15.setDictionary(byteArray69);
        int int81 = inflater6.inflate(byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = inflater0.inflate(byteArray69, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        int int5 = inflater0.getTotalOut();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        int int11 = inflater7.getAdler();
        int int12 = inflater7.getAdler();
        long long13 = inflater7.getBytesWritten();
        long long14 = inflater7.getBytesRead();
        boolean boolean15 = inflater7.finished();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        int int28 = inflater7.inflate(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray26, 10, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        inflater0.reset();
        int int23 = inflater0.getRemaining();
        boolean boolean24 = inflater0.finished();
        int int25 = inflater0.getTotalOut();
        int int26 = inflater0.getTotalOut();
        int int27 = inflater0.getTotalOut();
        boolean boolean28 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        int int19 = inflater0.inflate(byteArray17);
        boolean boolean20 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        int int25 = inflater21.getTotalIn();
        long long26 = inflater21.getBytesWritten();
        int int27 = inflater21.getAdler();
        int int28 = inflater21.getAdler();
        long long29 = inflater21.getBytesRead();
        boolean boolean30 = inflater21.finished();
        long long31 = inflater21.getBytesRead();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        int int36 = inflater32.getTotalIn();
        int int37 = inflater32.getTotalIn();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        long long42 = inflater38.getBytesRead();
        boolean boolean43 = inflater38.finished();
        long long44 = inflater38.getBytesRead();
        boolean boolean45 = inflater38.needsDictionary();
        boolean boolean46 = inflater38.needsDictionary();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.needsDictionary();
        int int49 = inflater47.getTotalOut();
        int int50 = inflater47.getTotalOut();
        boolean boolean51 = inflater47.needsInput();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        int int55 = inflater52.inflate(byteArray54);
        inflater52.reset();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        int int61 = inflater57.getTotalIn();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int71 = inflater62.inflate(byteArray70);
        int int72 = inflater57.inflate(byteArray70);
        inflater52.setInput(byteArray70);
        inflater47.setInput(byteArray70);
        int int75 = inflater38.inflate(byteArray70);
        inflater32.setInput(byteArray70);
        inflater21.setInput(byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray70, (int) ' ', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        inflater0.reset();
        int int3 = inflater0.getAdler();
        boolean boolean4 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        boolean boolean15 = inflater5.needsInput();
        boolean boolean16 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        long long21 = inflater17.getBytesRead();
        boolean boolean22 = inflater17.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        long long27 = inflater23.getBytesWritten();
        inflater23.reset();
        long long29 = inflater23.getBytesWritten();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        boolean boolean34 = inflater30.needsInput();
        int int35 = inflater30.getRemaining();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater36.setInput(byteArray46);
        int int48 = inflater30.inflate(byteArray46);
        inflater23.setInput(byteArray46);
        int int50 = inflater17.inflate(byteArray46);
        inflater5.setInput(byteArray46, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray46, (int) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater8.setInput(byteArray25);
        int int30 = inflater0.inflate(byteArray25, 1, (int) (short) 1);
        int int31 = inflater0.getTotalIn();
        boolean boolean32 = inflater0.needsDictionary();
        int int33 = inflater0.getAdler();
        inflater0.reset();
        boolean boolean35 = inflater0.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater(true);
        int int38 = inflater37.getRemaining();
        long long39 = inflater37.getBytesRead();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        int int44 = inflater37.inflate(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray42, (int) (short) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getRemaining();
        boolean boolean25 = inflater0.needsInput();
        boolean boolean26 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        long long12 = inflater0.getBytesRead();
        int int13 = inflater0.getTotalOut();
        int int14 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        int int9 = inflater0.getAdler();
        int int10 = inflater0.getAdler();
        long long11 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        boolean boolean16 = inflater12.needsInput();
        int int17 = inflater12.getRemaining();
        inflater12.reset();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        inflater12.setInput(byteArray29);
        int int32 = inflater12.getTotalOut();
        boolean boolean33 = inflater12.needsDictionary();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        boolean boolean38 = inflater34.finished();
        inflater34.reset();
        inflater34.reset();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        inflater41.end();
        boolean boolean45 = inflater41.needsInput();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.needsDictionary();
        boolean boolean50 = inflater46.needsInput();
        int int51 = inflater46.getRemaining();
        inflater46.reset();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.finished();
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater53.setInput(byteArray63);
        inflater46.setInput(byteArray63);
        inflater41.setInput(byteArray63);
        int int69 = inflater34.inflate(byteArray63, 0, (int) (byte) 1);
        inflater12.setInput(byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray63, (int) (byte) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        int int27 = inflater0.getRemaining();
        long long28 = inflater0.getBytesRead();
        inflater0.reset();
        int int30 = inflater0.getTotalOut();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsInput();
        int int22 = inflater0.getRemaining();
        long long23 = inflater0.getBytesWritten();
        boolean boolean24 = inflater0.finished();
        boolean boolean25 = inflater0.finished();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        inflater6.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater6.setInput(byteArray34);
        inflater0.setInput(byteArray34, (int) (byte) 0, 1);
        int int42 = inflater0.getTotalIn();
        long long43 = inflater0.getBytesWritten();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalIn();
        int int10 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        boolean boolean15 = inflater11.needsInput();
        int int16 = inflater11.getRemaining();
        inflater11.reset();
        boolean boolean18 = inflater11.needsDictionary();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsDictionary();
        boolean boolean23 = inflater19.needsInput();
        int int24 = inflater19.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.finished();
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater25.setInput(byteArray35);
        int int37 = inflater19.inflate(byteArray35);
        boolean boolean38 = inflater19.finished();
        int int39 = inflater19.getTotalOut();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        long long44 = inflater40.getBytesRead();
        boolean boolean45 = inflater40.needsDictionary();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        byte[] byteArray48 = new byte[] { (byte) 1 };
        int int49 = inflater46.inflate(byteArray48);
        long long50 = inflater46.getBytesWritten();
        inflater46.reset();
        long long52 = inflater46.getBytesWritten();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.needsDictionary();
        boolean boolean57 = inflater53.needsInput();
        int int58 = inflater53.getRemaining();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.finished();
        byte[] byteArray69 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater59.setInput(byteArray69);
        int int71 = inflater53.inflate(byteArray69);
        inflater46.setInput(byteArray69);
        inflater40.setInput(byteArray69);
        int int74 = inflater19.inflate(byteArray69);
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        boolean boolean76 = inflater75.finished();
        int int77 = inflater75.getRemaining();
        boolean boolean78 = inflater75.needsInput();
        java.util.zip.Inflater inflater79 = new java.util.zip.Inflater();
        boolean boolean80 = inflater79.finished();
        int int81 = inflater79.getRemaining();
        boolean boolean82 = inflater79.finished();
        byte[] byteArray89 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater79.setInput(byteArray89);
        inflater75.setInput(byteArray89);
        int int92 = inflater19.inflate(byteArray89);
        inflater11.setInput(byteArray89);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        inflater0.setInput(byteArray19);
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getAdler();
        int int25 = inflater0.getTotalIn();
        long long26 = inflater0.getBytesRead();
        java.lang.Class<?> wildcardClass27 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        boolean boolean9 = inflater0.finished();
        inflater0.reset();
        boolean boolean11 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        inflater19.setInput(byteArray33);
        inflater0.setInput(byteArray33);
        long long37 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        boolean boolean40 = inflater38.needsInput();
        boolean boolean41 = inflater38.needsInput();
        inflater38.end();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        long long47 = inflater43.getBytesRead();
        inflater43.reset();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.needsDictionary();
        boolean boolean53 = inflater49.needsInput();
        boolean boolean54 = inflater49.needsDictionary();
        boolean boolean55 = inflater49.needsDictionary();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.finished();
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater56.setInput(byteArray66);
        int int68 = inflater49.inflate(byteArray66);
        int int69 = inflater43.inflate(byteArray66);
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        boolean boolean71 = inflater70.finished();
        int int72 = inflater70.getRemaining();
        boolean boolean73 = inflater70.finished();
        int int74 = inflater70.getAdler();
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        boolean boolean76 = inflater75.finished();
        int int77 = inflater75.getRemaining();
        inflater75.end();
        boolean boolean79 = inflater75.needsInput();
        java.util.zip.Inflater inflater80 = new java.util.zip.Inflater();
        byte[] byteArray82 = new byte[] { (byte) 1 };
        int int83 = inflater80.inflate(byteArray82);
        inflater75.setInput(byteArray82);
        int int85 = inflater70.inflate(byteArray82);
        inflater43.setInput(byteArray82);
        inflater38.setInput(byteArray82);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray82, (int) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        inflater0.reset();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        boolean boolean11 = inflater6.needsDictionary();
        boolean boolean12 = inflater6.needsDictionary();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater6.inflate(byteArray23);
        int int26 = inflater0.inflate(byteArray23);
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.finished();
        int int31 = inflater27.getAdler();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        inflater32.end();
        boolean boolean36 = inflater32.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        inflater32.setInput(byteArray39);
        int int42 = inflater27.inflate(byteArray39);
        inflater0.setInput(byteArray39);
        int int44 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        int int25 = inflater21.getTotalIn();
        long long26 = inflater21.getBytesWritten();
        int int27 = inflater21.getAdler();
        boolean boolean28 = inflater21.needsInput();
        long long29 = inflater21.getBytesRead();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        int int34 = inflater30.getAdler();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        inflater35.end();
        boolean boolean39 = inflater35.needsInput();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        inflater35.setInput(byteArray42);
        int int45 = inflater30.inflate(byteArray42);
        inflater21.setInput(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray42, (int) (short) 10, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        long long12 = inflater0.getBytesRead();
        int int13 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean15 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        int int27 = inflater0.getRemaining();
        int int28 = inflater0.getRemaining();
        long long29 = inflater0.getBytesWritten();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.finished();
        int int29 = inflater25.getAdler();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        inflater30.end();
        boolean boolean34 = inflater30.needsInput();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        inflater30.setInput(byteArray37);
        int int40 = inflater25.inflate(byteArray37);
        int int41 = inflater25.getTotalOut();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        boolean boolean46 = inflater42.finished();
        inflater42.end();
        inflater42.end();
        boolean boolean49 = inflater42.needsInput();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.needsDictionary();
        boolean boolean54 = inflater50.needsInput();
        int int55 = inflater50.getRemaining();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.finished();
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater56.setInput(byteArray66);
        int int68 = inflater50.inflate(byteArray66);
        boolean boolean69 = inflater50.finished();
        int int70 = inflater50.getAdler();
        boolean boolean71 = inflater50.finished();
        int int72 = inflater50.getAdler();
        boolean boolean73 = inflater50.needsInput();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        byte[] byteArray76 = new byte[] { (byte) 1 };
        int int77 = inflater74.inflate(byteArray76);
        int int78 = inflater74.getTotalIn();
        java.util.zip.Inflater inflater79 = new java.util.zip.Inflater();
        byte[] byteArray81 = new byte[] { (byte) 1 };
        int int82 = inflater79.inflate(byteArray81);
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int88 = inflater79.inflate(byteArray87);
        int int89 = inflater74.inflate(byteArray87);
        int int90 = inflater50.inflate(byteArray87);
        inflater42.setInput(byteArray87, (int) (byte) 0, (int) (short) 1);
        inflater25.setInput(byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            int int95 = inflater0.inflate(byteArray87);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        int int19 = inflater0.inflate(byteArray17);
        boolean boolean20 = inflater0.finished();
        int int21 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesWritten();
        boolean boolean8 = inflater0.finished();
        int int9 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        long long14 = inflater10.getBytesWritten();
        boolean boolean15 = inflater10.needsInput();
        int int16 = inflater10.getRemaining();
        int int17 = inflater10.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.finished();
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater22.setInput(byteArray32);
        inflater18.setInput(byteArray32);
        inflater10.setInput(byteArray32, (int) (byte) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getAdler();
        boolean boolean9 = inflater0.finished();
        int int10 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.needsInput();
        long long7 = inflater0.getBytesWritten();
        int int8 = inflater0.getAdler();
        int int9 = inflater0.getAdler();
        int int10 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        int int5 = inflater2.inflate(byteArray4);
        inflater2.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        long long11 = inflater7.getBytesWritten();
        inflater7.reset();
        long long13 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        int int32 = inflater14.inflate(byteArray30);
        inflater7.setInput(byteArray30);
        inflater2.setInput(byteArray30);
        inflater1.setDictionary(byteArray30);
        boolean boolean36 = inflater1.finished();
        long long37 = inflater1.getBytesWritten();
        boolean boolean38 = inflater1.needsInput();
        inflater1.reset();
        java.lang.Class<?> wildcardClass40 = inflater1.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.needsInput();
        boolean boolean11 = inflater0.needsDictionary();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        inflater0.reset();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.needsDictionary();
        int int25 = inflater23.getTotalOut();
        boolean boolean26 = inflater23.finished();
        boolean boolean27 = inflater23.needsDictionary();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        boolean boolean30 = inflater28.needsInput();
        boolean boolean31 = inflater28.needsInput();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        long long36 = inflater32.getBytesRead();
        boolean boolean37 = inflater32.needsDictionary();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        long long42 = inflater38.getBytesWritten();
        inflater38.reset();
        long long44 = inflater38.getBytesWritten();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.needsDictionary();
        boolean boolean49 = inflater45.needsInput();
        int int50 = inflater45.getRemaining();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater51.setInput(byteArray61);
        int int63 = inflater45.inflate(byteArray61);
        inflater38.setInput(byteArray61);
        inflater32.setInput(byteArray61);
        int int66 = inflater28.inflate(byteArray61);
        int int67 = inflater23.inflate(byteArray61);
        inflater0.setInput(byteArray61);
        inflater0.reset();
        java.lang.Class<?> wildcardClass70 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        inflater0.reset();
        int int23 = inflater0.getRemaining();
        boolean boolean24 = inflater0.finished();
        inflater0.reset();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getTotalOut();
        int int41 = inflater0.getAdler();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.needsInput();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        int int47 = inflater44.inflate(byteArray46);
        inflater44.reset();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        int int53 = inflater49.getTotalIn();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int63 = inflater54.inflate(byteArray62);
        int int64 = inflater49.inflate(byteArray62);
        inflater44.setInput(byteArray62);
        int int66 = inflater42.inflate(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            int int69 = inflater0.inflate(byteArray62, (int) (byte) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getTotalIn();
        boolean boolean3 = inflater1.finished();
        boolean boolean4 = inflater1.needsDictionary();
        boolean boolean5 = inflater1.finished();
        boolean boolean6 = inflater1.needsInput();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        inflater7.reset();
        long long12 = inflater7.getBytesWritten();
        boolean boolean13 = inflater7.needsInput();
        boolean boolean14 = inflater7.finished();
        int int15 = inflater7.getTotalOut();
        boolean boolean16 = inflater7.needsInput();
        boolean boolean17 = inflater7.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        inflater18.reset();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        inflater25.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        inflater25.setInput(byteArray42);
        int int47 = inflater18.inflate(byteArray42, 0, (int) (byte) 0);
        inflater7.setInput(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray42, (int) (byte) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        long long21 = inflater0.getBytesWritten();
        long long22 = inflater0.getBytesWritten();
        inflater0.end();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        inflater24.end();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater28.setInput(byteArray38);
        inflater24.setInput(byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray38, 4, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.finished();
        int int11 = inflater0.getTotalIn();
        int int12 = inflater0.getAdler();
        int int13 = inflater0.getTotalOut();
        boolean boolean14 = inflater0.finished();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        long long12 = inflater8.getBytesWritten();
        inflater8.reset();
        long long14 = inflater8.getBytesWritten();
        int int15 = inflater8.getTotalIn();
        boolean boolean16 = inflater8.needsDictionary();
        int int17 = inflater8.getTotalOut();
        int int18 = inflater8.getTotalOut();
        boolean boolean19 = inflater8.needsInput();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater(true);
        int int22 = inflater21.getRemaining();
        long long23 = inflater21.getBytesRead();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater21.inflate(byteArray26);
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int38 = inflater29.inflate(byteArray37);
        boolean boolean39 = inflater29.needsInput();
        boolean boolean40 = inflater29.needsDictionary();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.needsDictionary();
        long long45 = inflater41.getBytesRead();
        boolean boolean46 = inflater41.needsInput();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        long long51 = inflater47.getBytesWritten();
        inflater47.reset();
        long long53 = inflater47.getBytesWritten();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.needsDictionary();
        boolean boolean58 = inflater54.needsInput();
        int int59 = inflater54.getRemaining();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        int int72 = inflater54.inflate(byteArray70);
        inflater47.setInput(byteArray70);
        int int74 = inflater41.inflate(byteArray70);
        inflater29.setInput(byteArray70, 0, (int) (byte) 0);
        inflater21.setDictionary(byteArray70);
        inflater8.setInput(byteArray70);
        int int82 = inflater0.inflate(byteArray70, (int) (short) 0, 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        int int21 = inflater0.inflate(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        long long23 = inflater0.getBytesRead();
        inflater0.reset();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        int int28 = inflater25.getTotalOut();
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) -1 };
        inflater25.setInput(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, -1]");
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.finished();
        int int11 = inflater0.getTotalOut();
        boolean boolean12 = inflater0.finished();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater(true);
        int int15 = inflater14.getRemaining();
        long long16 = inflater14.getBytesRead();
        int int17 = inflater14.getTotalIn();
        long long18 = inflater14.getBytesWritten();
        int int19 = inflater14.getAdler();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        boolean boolean24 = inflater20.needsInput();
        int int25 = inflater20.getRemaining();
        inflater20.reset();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.finished();
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater27.setInput(byteArray37);
        inflater20.setInput(byteArray37);
        int int40 = inflater20.getTotalOut();
        boolean boolean41 = inflater20.needsInput();
        boolean boolean42 = inflater20.needsDictionary();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        byte[] byteArray45 = new byte[] { (byte) 1 };
        int int46 = inflater43.inflate(byteArray45);
        boolean boolean47 = inflater43.finished();
        inflater43.end();
        inflater43.end();
        boolean boolean50 = inflater43.needsInput();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.needsDictionary();
        boolean boolean55 = inflater51.needsInput();
        int int56 = inflater51.getRemaining();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.finished();
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater57.setInput(byteArray67);
        int int69 = inflater51.inflate(byteArray67);
        boolean boolean70 = inflater51.finished();
        int int71 = inflater51.getAdler();
        boolean boolean72 = inflater51.finished();
        int int73 = inflater51.getAdler();
        boolean boolean74 = inflater51.needsInput();
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        byte[] byteArray77 = new byte[] { (byte) 1 };
        int int78 = inflater75.inflate(byteArray77);
        int int79 = inflater75.getTotalIn();
        java.util.zip.Inflater inflater80 = new java.util.zip.Inflater();
        byte[] byteArray82 = new byte[] { (byte) 1 };
        int int83 = inflater80.inflate(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int89 = inflater80.inflate(byteArray88);
        int int90 = inflater75.inflate(byteArray88);
        int int91 = inflater51.inflate(byteArray88);
        inflater43.setInput(byteArray88, (int) (byte) 0, (int) (short) 1);
        inflater20.setInput(byteArray88);
        inflater14.setInput(byteArray88, (int) (short) 0, 1);
        inflater0.setInput(byteArray88);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsInput();
        int int4 = inflater0.getRemaining();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        boolean boolean10 = inflater6.finished();
        inflater6.end();
        inflater6.end();
        boolean boolean13 = inflater6.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        inflater14.reset();
        boolean boolean21 = inflater14.needsDictionary();
        int int22 = inflater14.getTotalIn();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        boolean boolean27 = inflater23.needsInput();
        int int28 = inflater23.getRemaining();
        inflater23.reset();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        boolean boolean34 = inflater30.needsInput();
        int int35 = inflater30.getRemaining();
        inflater30.reset();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        inflater30.setInput(byteArray47);
        int int52 = inflater23.inflate(byteArray47, 0, (int) (byte) 0);
        int int53 = inflater14.inflate(byteArray47);
        inflater6.setInput(byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = inflater0.inflate(byteArray47, (int) (short) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsDictionary();
        inflater0.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater(true);
        int int12 = inflater11.getRemaining();
        long long13 = inflater11.getBytesRead();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        int int18 = inflater11.inflate(byteArray16);
        int int19 = inflater11.getAdler();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        int int24 = inflater20.getTotalIn();
        int int25 = inflater20.getTotalIn();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.finished();
        long long30 = inflater26.getBytesRead();
        boolean boolean31 = inflater26.finished();
        long long32 = inflater26.getBytesRead();
        boolean boolean33 = inflater26.needsDictionary();
        boolean boolean34 = inflater26.needsDictionary();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.needsDictionary();
        int int37 = inflater35.getTotalOut();
        int int38 = inflater35.getTotalOut();
        boolean boolean39 = inflater35.needsInput();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        inflater40.reset();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        int int49 = inflater45.getTotalIn();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        byte[] byteArray52 = new byte[] { (byte) 1 };
        int int53 = inflater50.inflate(byteArray52);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int59 = inflater50.inflate(byteArray58);
        int int60 = inflater45.inflate(byteArray58);
        inflater40.setInput(byteArray58);
        inflater35.setInput(byteArray58);
        int int63 = inflater26.inflate(byteArray58);
        inflater20.setInput(byteArray58);
        inflater11.setDictionary(byteArray58);
        int int66 = inflater0.inflate(byteArray58);
        long long67 = inflater0.getBytesRead();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        long long5 = inflater1.getBytesWritten();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        long long10 = inflater6.getBytesRead();
        boolean boolean11 = inflater6.finished();
        inflater6.reset();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        inflater13.reset();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        inflater13.setInput(byteArray30);
        int int33 = inflater6.inflate(byteArray30);
        inflater1.setInput(byteArray30);
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        boolean boolean39 = inflater35.needsInput();
        int int40 = inflater35.getRemaining();
        inflater35.reset();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.finished();
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater42.setInput(byteArray52);
        inflater35.setInput(byteArray52);
        int int55 = inflater35.getTotalOut();
        boolean boolean56 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        boolean boolean61 = inflater57.finished();
        inflater57.reset();
        inflater57.reset();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        inflater64.end();
        boolean boolean68 = inflater64.needsInput();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.needsDictionary();
        boolean boolean73 = inflater69.needsInput();
        int int74 = inflater69.getRemaining();
        inflater69.reset();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        boolean boolean77 = inflater76.finished();
        int int78 = inflater76.getRemaining();
        boolean boolean79 = inflater76.finished();
        byte[] byteArray86 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater76.setInput(byteArray86);
        inflater69.setInput(byteArray86);
        inflater64.setInput(byteArray86);
        int int92 = inflater57.inflate(byteArray86, 0, (int) (byte) 1);
        inflater35.setInput(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = inflater1.inflate(byteArray86);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: invalid stored block lengths");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getTotalIn();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        int int11 = inflater7.getAdler();
        int int12 = inflater7.getAdler();
        boolean boolean13 = inflater7.needsDictionary();
        boolean boolean14 = inflater7.finished();
        boolean boolean15 = inflater7.needsInput();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int25 = inflater16.inflate(byteArray24);
        boolean boolean26 = inflater16.finished();
        int int27 = inflater16.getTotalOut();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        long long32 = inflater28.getBytesWritten();
        boolean boolean33 = inflater28.needsInput();
        int int34 = inflater28.getRemaining();
        int int35 = inflater28.getAdler();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.needsDictionary();
        long long40 = inflater36.getBytesRead();
        long long41 = inflater36.getBytesWritten();
        boolean boolean42 = inflater36.finished();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        byte[] byteArray45 = new byte[] { (byte) 1 };
        int int46 = inflater43.inflate(byteArray45);
        boolean boolean47 = inflater43.finished();
        int int48 = inflater43.getRemaining();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        inflater49.reset();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        int int58 = inflater54.getTotalIn();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int68 = inflater59.inflate(byteArray67);
        int int69 = inflater54.inflate(byteArray67);
        inflater49.setInput(byteArray67);
        inflater43.setInput(byteArray67);
        int int72 = inflater36.inflate(byteArray67);
        int int73 = inflater28.inflate(byteArray67);
        int int74 = inflater16.inflate(byteArray67);
        int int75 = inflater7.inflate(byteArray67);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray67, 4, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsInput();
        inflater0.end();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        inflater7.end();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater11.setInput(byteArray21);
        inflater7.setInput(byteArray21);
        boolean boolean24 = inflater7.needsDictionary();
        boolean boolean25 = inflater7.finished();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.needsDictionary();
        int int28 = inflater26.getTotalOut();
        int int29 = inflater26.getTotalOut();
        int int30 = inflater26.getAdler();
        boolean boolean31 = inflater26.needsDictionary();
        int int32 = inflater26.getTotalOut();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        boolean boolean37 = inflater33.finished();
        inflater33.end();
        inflater33.end();
        boolean boolean40 = inflater33.needsInput();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.needsDictionary();
        boolean boolean45 = inflater41.needsInput();
        int int46 = inflater41.getRemaining();
        inflater41.reset();
        boolean boolean48 = inflater41.needsDictionary();
        int int49 = inflater41.getTotalIn();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.needsDictionary();
        boolean boolean54 = inflater50.needsInput();
        int int55 = inflater50.getRemaining();
        inflater50.reset();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.needsDictionary();
        boolean boolean61 = inflater57.needsInput();
        int int62 = inflater57.getRemaining();
        inflater57.reset();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.finished();
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater64.setInput(byteArray74);
        inflater57.setInput(byteArray74);
        int int79 = inflater50.inflate(byteArray74, 0, (int) (byte) 0);
        int int80 = inflater41.inflate(byteArray74);
        inflater33.setInput(byteArray74);
        int int84 = inflater26.inflate(byteArray74, 0, (int) (byte) 0);
        inflater7.setInput(byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = inflater0.inflate(byteArray74, (int) (byte) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        int int5 = inflater2.inflate(byteArray4);
        int int6 = inflater2.getTotalIn();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        inflater7.end();
        boolean boolean11 = inflater7.needsInput();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        inflater7.setInput(byteArray14);
        inflater2.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        boolean boolean19 = inflater0.finished();
        long long20 = inflater0.getBytesRead();
        long long21 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.finished();
        long long26 = inflater22.getBytesRead();
        boolean boolean27 = inflater22.finished();
        long long28 = inflater22.getBytesRead();
        boolean boolean29 = inflater22.needsDictionary();
        boolean boolean30 = inflater22.needsDictionary();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        long long35 = inflater31.getBytesWritten();
        boolean boolean36 = inflater31.needsInput();
        boolean boolean37 = inflater31.finished();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater38.setInput(byteArray48);
        inflater31.setInput(byteArray48);
        int int51 = inflater22.inflate(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = inflater0.inflate(byteArray48, (int) (short) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        inflater27.end();
        boolean boolean31 = inflater27.needsInput();
        boolean boolean32 = inflater27.needsDictionary();
        boolean boolean33 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.needsDictionary();
        int int36 = inflater34.getTotalOut();
        int int37 = inflater34.getTotalOut();
        long long38 = inflater34.getBytesWritten();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.needsDictionary();
        boolean boolean43 = inflater39.needsInput();
        int int44 = inflater39.getRemaining();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater45.setInput(byteArray55);
        int int57 = inflater39.inflate(byteArray55);
        boolean boolean58 = inflater39.finished();
        int int59 = inflater39.getAdler();
        boolean boolean60 = inflater39.finished();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.finished();
        int int63 = inflater61.getRemaining();
        boolean boolean64 = inflater61.needsDictionary();
        long long65 = inflater61.getBytesRead();
        boolean boolean66 = inflater61.needsDictionary();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        long long71 = inflater67.getBytesWritten();
        inflater67.reset();
        long long73 = inflater67.getBytesWritten();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        int int76 = inflater74.getRemaining();
        boolean boolean77 = inflater74.needsDictionary();
        boolean boolean78 = inflater74.needsInput();
        int int79 = inflater74.getRemaining();
        java.util.zip.Inflater inflater80 = new java.util.zip.Inflater();
        boolean boolean81 = inflater80.finished();
        int int82 = inflater80.getRemaining();
        boolean boolean83 = inflater80.finished();
        byte[] byteArray90 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater80.setInput(byteArray90);
        int int92 = inflater74.inflate(byteArray90);
        inflater67.setInput(byteArray90);
        inflater61.setInput(byteArray90);
        inflater39.setInput(byteArray90);
        inflater34.setInput(byteArray90);
        inflater27.setInput(byteArray90);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsDictionary();
        boolean boolean5 = inflater0.finished();
        int int6 = inflater0.getTotalOut();
        boolean boolean7 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getTotalIn();
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getRemaining();
        boolean boolean9 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.needsDictionary();
        int int9 = inflater7.getTotalOut();
        int int10 = inflater7.getTotalOut();
        long long11 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        long long16 = inflater12.getBytesRead();
        boolean boolean17 = inflater12.needsDictionary();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        long long22 = inflater18.getBytesWritten();
        inflater18.reset();
        long long24 = inflater18.getBytesWritten();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        int int43 = inflater25.inflate(byteArray41);
        inflater18.setInput(byteArray41);
        inflater12.setInput(byteArray41);
        int int46 = inflater7.inflate(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray41, 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalOut();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        inflater6.end();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.finished();
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater10.setInput(byteArray20);
        inflater6.setInput(byteArray20);
        inflater0.setInput(byteArray20);
        int int24 = inflater0.getTotalIn();
        int int25 = inflater0.getAdler();
        inflater0.reset();
        int int27 = inflater0.getTotalIn();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        java.util.zip.Inflater inflater3 = new java.util.zip.Inflater();
        boolean boolean4 = inflater3.finished();
        int int5 = inflater3.getRemaining();
        int int6 = inflater3.getTotalOut();
        inflater3.reset();
        boolean boolean8 = inflater3.needsInput();
        int int9 = inflater3.getRemaining();
        boolean boolean10 = inflater3.finished();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        boolean boolean15 = inflater11.finished();
        inflater11.end();
        inflater11.end();
        boolean boolean18 = inflater11.needsDictionary();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        inflater19.setInput(byteArray33);
        inflater11.setInput(byteArray33);
        int int39 = inflater3.inflate(byteArray33, 6, (int) (short) 0);
        int int40 = inflater0.inflate(byteArray33);
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        inflater41.end();
        boolean boolean45 = inflater41.needsInput();
        boolean boolean46 = inflater41.needsDictionary();
        boolean boolean47 = inflater41.needsDictionary();
        boolean boolean48 = inflater41.needsDictionary();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.needsDictionary();
        int int51 = inflater49.getTotalOut();
        int int52 = inflater49.getTotalOut();
        boolean boolean53 = inflater49.needsInput();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        inflater54.reset();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        int int63 = inflater59.getTotalIn();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int73 = inflater64.inflate(byteArray72);
        int int74 = inflater59.inflate(byteArray72);
        inflater54.setInput(byteArray72);
        inflater49.setInput(byteArray72);
        inflater41.setInput(byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray72, (int) (byte) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        int int24 = inflater6.inflate(byteArray22);
        boolean boolean25 = inflater6.finished();
        int int26 = inflater6.getTotalOut();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        long long31 = inflater27.getBytesRead();
        boolean boolean32 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        long long37 = inflater33.getBytesWritten();
        inflater33.reset();
        long long39 = inflater33.getBytesWritten();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        int int58 = inflater40.inflate(byteArray56);
        inflater33.setInput(byteArray56);
        inflater27.setInput(byteArray56);
        int int61 = inflater6.inflate(byteArray56);
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsInput();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater66.setInput(byteArray76);
        inflater62.setInput(byteArray76);
        int int79 = inflater6.inflate(byteArray76);
        inflater0.setInput(byteArray76);
        inflater0.end();
        boolean boolean82 = inflater0.finished();
        int int83 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        inflater0.reset();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        boolean boolean11 = inflater6.needsDictionary();
        boolean boolean12 = inflater6.needsDictionary();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater6.inflate(byteArray23);
        int int26 = inflater0.inflate(byteArray23);
        int int27 = inflater0.getTotalIn();
        inflater0.end();
        byte[] byteArray29 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray29, (-1), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsDictionary();
        int int13 = inflater0.getRemaining();
        java.lang.Class<?> wildcardClass14 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsDictionary();
        int int5 = inflater0.getTotalOut();
        int int6 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        long long11 = inflater7.getBytesWritten();
        boolean boolean12 = inflater7.needsInput();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        boolean boolean32 = inflater13.finished();
        int int33 = inflater13.getTotalOut();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        long long38 = inflater34.getBytesRead();
        boolean boolean39 = inflater34.needsDictionary();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        long long44 = inflater40.getBytesWritten();
        inflater40.reset();
        long long46 = inflater40.getBytesWritten();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.needsDictionary();
        boolean boolean51 = inflater47.needsInput();
        int int52 = inflater47.getRemaining();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.finished();
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater53.setInput(byteArray63);
        int int65 = inflater47.inflate(byteArray63);
        inflater40.setInput(byteArray63);
        inflater34.setInput(byteArray63);
        int int68 = inflater13.inflate(byteArray63);
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.needsInput();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        boolean boolean74 = inflater73.finished();
        int int75 = inflater73.getRemaining();
        boolean boolean76 = inflater73.finished();
        byte[] byteArray83 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater73.setInput(byteArray83);
        inflater69.setInput(byteArray83);
        int int86 = inflater13.inflate(byteArray83);
        inflater7.setInput(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        long long6 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean9 = inflater0.needsInput();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getAdler();
        boolean boolean7 = inflater0.needsInput();
        long long8 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        long long13 = inflater9.getBytesWritten();
        inflater9.end();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater(true);
        int int17 = inflater16.getRemaining();
        long long18 = inflater16.getBytesRead();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        inflater19.end();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        inflater19.setInput(byteArray33);
        inflater16.setInput(byteArray33, (int) (byte) 1, (int) (short) 1);
        int int39 = inflater16.getTotalIn();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        inflater40.reset();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        int int53 = inflater50.getTotalOut();
        inflater50.reset();
        boolean boolean55 = inflater50.needsInput();
        int int56 = inflater50.getRemaining();
        boolean boolean57 = inflater50.finished();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        byte[] byteArray60 = new byte[] { (byte) 1 };
        int int61 = inflater58.inflate(byteArray60);
        boolean boolean62 = inflater58.finished();
        inflater58.end();
        inflater58.end();
        boolean boolean65 = inflater58.needsDictionary();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.needsInput();
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        boolean boolean71 = inflater70.finished();
        int int72 = inflater70.getRemaining();
        boolean boolean73 = inflater70.finished();
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater70.setInput(byteArray80);
        inflater66.setInput(byteArray80);
        inflater58.setInput(byteArray80);
        int int86 = inflater50.inflate(byteArray80, 6, (int) (short) 0);
        int int87 = inflater47.inflate(byteArray80);
        inflater40.setInput(byteArray80, (int) (byte) 0, (int) (byte) 1);
        int int93 = inflater16.inflate(byteArray80, 1, 0);
        inflater9.setInput(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getAdler();
        boolean boolean7 = inflater0.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater(false);
        int int10 = inflater9.getAdler();
        boolean boolean11 = inflater9.finished();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        boolean boolean16 = inflater12.needsInput();
        int int17 = inflater12.getRemaining();
        inflater12.reset();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        int int25 = inflater22.getTotalOut();
        inflater22.reset();
        boolean boolean27 = inflater22.needsInput();
        int int28 = inflater22.getRemaining();
        boolean boolean29 = inflater22.finished();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        boolean boolean34 = inflater30.finished();
        inflater30.end();
        inflater30.end();
        boolean boolean37 = inflater30.needsDictionary();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsInput();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.finished();
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater42.setInput(byteArray52);
        inflater38.setInput(byteArray52);
        inflater30.setInput(byteArray52);
        int int58 = inflater22.inflate(byteArray52, 6, (int) (short) 0);
        int int59 = inflater19.inflate(byteArray52);
        inflater12.setInput(byteArray52, (int) (byte) 0, (int) (byte) 1);
        inflater9.setInput(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray52, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        boolean boolean8 = inflater6.needsInput();
        boolean boolean9 = inflater6.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsDictionary();
        long long14 = inflater10.getBytesRead();
        boolean boolean15 = inflater10.needsDictionary();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        long long20 = inflater16.getBytesWritten();
        inflater16.reset();
        long long22 = inflater16.getBytesWritten();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        boolean boolean27 = inflater23.needsInput();
        int int28 = inflater23.getRemaining();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.finished();
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater29.setInput(byteArray39);
        int int41 = inflater23.inflate(byteArray39);
        inflater16.setInput(byteArray39);
        inflater10.setInput(byteArray39);
        int int44 = inflater6.inflate(byteArray39);
        int int45 = inflater0.inflate(byteArray39);
        boolean boolean46 = inflater0.needsInput();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        long long23 = inflater0.getBytesWritten();
        int int24 = inflater0.getTotalIn();
        long long25 = inflater0.getBytesRead();
        boolean boolean26 = inflater0.needsInput();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        java.lang.Class<?> wildcardClass6 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        long long23 = inflater0.getBytesRead();
        long long24 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        int int7 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        inflater1.end();
        java.util.zip.Inflater inflater3 = new java.util.zip.Inflater();
        boolean boolean4 = inflater3.finished();
        int int5 = inflater3.getRemaining();
        boolean boolean6 = inflater3.needsDictionary();
        boolean boolean7 = inflater3.needsInput();
        int int8 = inflater3.getRemaining();
        inflater3.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.finished();
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater10.setInput(byteArray20);
        inflater3.setInput(byteArray20);
        inflater1.setInput(byteArray20);
        boolean boolean24 = inflater1.needsInput();
        java.lang.Class<?> wildcardClass25 = inflater1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        long long10 = inflater6.getBytesRead();
        boolean boolean11 = inflater6.finished();
        long long12 = inflater6.getBytesRead();
        boolean boolean13 = inflater6.needsDictionary();
        boolean boolean14 = inflater6.needsDictionary();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.needsDictionary();
        int int17 = inflater15.getTotalOut();
        int int18 = inflater15.getTotalOut();
        boolean boolean19 = inflater15.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        inflater20.reset();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        int int29 = inflater25.getTotalIn();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int39 = inflater30.inflate(byteArray38);
        int int40 = inflater25.inflate(byteArray38);
        inflater20.setInput(byteArray38);
        inflater15.setInput(byteArray38);
        int int43 = inflater6.inflate(byteArray38);
        inflater0.setInput(byteArray38);
        inflater0.end();
        byte[] byteArray46 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        int int15 = inflater0.inflate(byteArray13);
        int int16 = inflater0.getTotalOut();
        int int17 = inflater0.getTotalOut();
        long long18 = inflater0.getBytesRead();
        long long19 = inflater0.getBytesWritten();
        long long20 = inflater0.getBytesWritten();
        boolean boolean21 = inflater0.needsInput();
        boolean boolean22 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalIn();
        int int7 = inflater0.getTotalOut();
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalIn();
        byte[] byteArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray4, (-1), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.needsInput();
        boolean boolean11 = inflater0.finished();
        int int12 = inflater0.getRemaining();
        long long13 = inflater0.getBytesWritten();
        long long14 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        inflater18.reset();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        long long27 = inflater23.getBytesWritten();
        inflater23.reset();
        long long29 = inflater23.getBytesWritten();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        boolean boolean34 = inflater30.needsInput();
        int int35 = inflater30.getRemaining();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater36.setInput(byteArray46);
        int int48 = inflater30.inflate(byteArray46);
        inflater23.setInput(byteArray46);
        inflater18.setInput(byteArray46);
        int int51 = inflater15.inflate(byteArray46);
        boolean boolean52 = inflater15.needsDictionary();
        boolean boolean53 = inflater15.needsDictionary();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.needsDictionary();
        boolean boolean58 = inflater54.needsInput();
        int int59 = inflater54.getRemaining();
        inflater54.reset();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.finished();
        int int63 = inflater61.getRemaining();
        boolean boolean64 = inflater61.needsDictionary();
        boolean boolean65 = inflater61.needsInput();
        int int66 = inflater61.getRemaining();
        inflater61.reset();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.finished();
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater68.setInput(byteArray78);
        inflater61.setInput(byteArray78);
        int int83 = inflater54.inflate(byteArray78, 0, (int) (byte) 0);
        int int84 = inflater15.inflate(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        inflater15.end();
        boolean boolean19 = inflater15.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        inflater15.setInput(byteArray22);
        inflater10.setInput(byteArray22);
        inflater8.setInput(byteArray22);
        int int27 = inflater0.inflate(byteArray22);
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        inflater28.reset();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        inflater28.setInput(byteArray45);
        int int48 = inflater28.getTotalOut();
        boolean boolean49 = inflater28.needsDictionary();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        byte[] byteArray52 = new byte[] { (byte) 1 };
        int int53 = inflater50.inflate(byteArray52);
        boolean boolean54 = inflater50.finished();
        inflater50.reset();
        inflater50.reset();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        inflater57.end();
        boolean boolean61 = inflater57.needsInput();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsDictionary();
        boolean boolean66 = inflater62.needsInput();
        int int67 = inflater62.getRemaining();
        inflater62.reset();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.finished();
        byte[] byteArray79 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater69.setInput(byteArray79);
        inflater62.setInput(byteArray79);
        inflater57.setInput(byteArray79);
        int int85 = inflater50.inflate(byteArray79, 0, (int) (byte) 1);
        inflater28.setInput(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = inflater0.inflate(byteArray79, (int) (short) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        long long20 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        int int25 = inflater21.getAdler();
        boolean boolean26 = inflater21.finished();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        inflater27.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        long long36 = inflater32.getBytesWritten();
        inflater32.reset();
        long long38 = inflater32.getBytesWritten();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.needsDictionary();
        boolean boolean43 = inflater39.needsInput();
        int int44 = inflater39.getRemaining();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater45.setInput(byteArray55);
        int int57 = inflater39.inflate(byteArray55);
        inflater32.setInput(byteArray55);
        inflater27.setInput(byteArray55);
        inflater21.setInput(byteArray55, (int) (byte) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int63 = inflater0.inflate(byteArray55);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        int int8 = inflater1.inflate(byteArray6);
        long long9 = inflater1.getBytesWritten();
        boolean boolean10 = inflater1.needsInput();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        long long15 = inflater11.getBytesRead();
        int int16 = inflater11.getTotalOut();
        int int17 = inflater11.getAdler();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater(true);
        int int20 = inflater19.getRemaining();
        long long21 = inflater19.getBytesRead();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        int int26 = inflater19.inflate(byteArray24);
        int int29 = inflater11.inflate(byteArray24, (int) (short) 1, (int) (short) 0);
        int int30 = inflater1.inflate(byteArray24);
        java.lang.Class<?> wildcardClass31 = inflater1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getTotalOut();
        int int41 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        inflater42.reset();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        int int51 = inflater47.getTotalIn();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        int int55 = inflater52.inflate(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int61 = inflater52.inflate(byteArray60);
        int int62 = inflater47.inflate(byteArray60);
        inflater42.setInput(byteArray60);
        int int64 = inflater0.inflate(byteArray60);
        int int65 = inflater0.getRemaining();
        long long66 = inflater0.getBytesRead();
        boolean boolean67 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        int int15 = inflater0.inflate(byteArray13);
        int int16 = inflater0.getTotalOut();
        long long17 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        int int30 = inflater0.inflate(byteArray28);
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        long long1 = inflater0.getBytesRead();
        java.lang.Class<?> wildcardClass2 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        int int7 = inflater0.getRemaining();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        int int24 = inflater1.getTotalIn();
        int int25 = inflater1.getRemaining();
        int int26 = inflater1.getAdler();
        inflater1.end();
        boolean boolean28 = inflater1.needsDictionary();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getTotalOut();
        inflater0.end();
        boolean boolean25 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass26 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalIn();
        int int10 = inflater0.getTotalIn();
        int int11 = inflater0.getRemaining();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        long long16 = inflater12.getBytesRead();
        inflater12.reset();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        boolean boolean23 = inflater18.needsDictionary();
        boolean boolean24 = inflater18.needsDictionary();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.finished();
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater25.setInput(byteArray35);
        int int37 = inflater18.inflate(byteArray35);
        int int38 = inflater12.inflate(byteArray35);
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        int int43 = inflater39.getAdler();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        inflater44.end();
        boolean boolean48 = inflater44.needsInput();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        inflater44.setInput(byteArray51);
        int int54 = inflater39.inflate(byteArray51);
        inflater12.setInput(byteArray51);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = inflater0.inflate(byteArray51, (int) '4', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        long long18 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int28 = inflater19.inflate(byteArray27);
        boolean boolean29 = inflater19.needsInput();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater(true);
        int int32 = inflater31.getRemaining();
        long long33 = inflater31.getBytesRead();
        int int34 = inflater31.getTotalIn();
        long long35 = inflater31.getBytesWritten();
        int int36 = inflater31.getTotalIn();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        inflater37.reset();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        int int46 = inflater42.getTotalIn();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int56 = inflater47.inflate(byteArray55);
        int int57 = inflater42.inflate(byteArray55);
        inflater37.setInput(byteArray55);
        int int59 = inflater31.inflate(byteArray55);
        inflater19.setInput(byteArray55);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.finished();
        boolean boolean25 = inflater0.needsInput();
        int int26 = inflater0.getRemaining();
        boolean boolean27 = inflater0.finished();
        boolean boolean28 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        byte[] byteArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = inflater0.inflate(byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getAdler();
        boolean boolean3 = inflater1.needsDictionary();
        int int4 = inflater1.getAdler();
        boolean boolean5 = inflater1.needsInput();
        byte[] byteArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int9 = inflater1.inflate(byteArray6, (int) (byte) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        int int21 = inflater0.inflate(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.needsDictionary();
        int int25 = inflater23.getTotalOut();
        int int26 = inflater23.getTotalOut();
        int int27 = inflater23.getAdler();
        boolean boolean28 = inflater23.needsDictionary();
        int int29 = inflater23.getTotalOut();
        int int30 = inflater23.getTotalOut();
        boolean boolean31 = inflater23.needsInput();
        int int32 = inflater23.getTotalIn();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.finished();
        int int37 = inflater33.getAdler();
        int int38 = inflater33.getAdler();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        boolean boolean51 = inflater39.needsDictionary();
        int int52 = inflater39.getRemaining();
        long long53 = inflater39.getBytesWritten();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.finished();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.finished();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater58.setInput(byteArray68);
        inflater54.setInput(byteArray68);
        inflater39.setInput(byteArray68);
        inflater33.setInput(byteArray68);
        int int73 = inflater23.inflate(byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = inflater0.inflate(byteArray68, (int) '4', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getAdler();
        boolean boolean8 = inflater0.needsInput();
        boolean boolean9 = inflater0.needsInput();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.finished();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        boolean boolean12 = inflater8.finished();
        inflater8.end();
        inflater8.end();
        boolean boolean15 = inflater8.needsDictionary();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        inflater16.setInput(byteArray30);
        inflater8.setInput(byteArray30);
        int int36 = inflater0.inflate(byteArray30, 6, (int) (short) 0);
        boolean boolean37 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        int int42 = inflater38.getAdler();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        inflater43.end();
        boolean boolean47 = inflater43.needsInput();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        byte[] byteArray50 = new byte[] { (byte) 1 };
        int int51 = inflater48.inflate(byteArray50);
        inflater43.setInput(byteArray50);
        int int53 = inflater38.inflate(byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray50, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getTotalOut();
        inflater0.reset();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        boolean boolean15 = inflater11.needsInput();
        int int16 = inflater11.getRemaining();
        inflater11.reset();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        inflater11.setInput(byteArray28);
        inflater9.setInput(byteArray28);
        inflater0.setInput(byteArray28, (int) (byte) 0, 0);
        java.lang.Class<?> wildcardClass35 = byteArray28.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        int int24 = inflater1.getTotalIn();
        int int25 = inflater1.getRemaining();
        long long26 = inflater1.getBytesRead();
        boolean boolean27 = inflater1.finished();
        java.lang.Class<?> wildcardClass28 = inflater1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        boolean boolean6 = inflater0.finished();
        long long7 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        boolean boolean12 = inflater8.finished();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        int int18 = inflater14.getAdler();
        boolean boolean19 = inflater14.finished();
        long long20 = inflater14.getBytesWritten();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        boolean boolean23 = inflater21.needsInput();
        boolean boolean24 = inflater21.needsInput();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        long long29 = inflater25.getBytesRead();
        boolean boolean30 = inflater25.needsDictionary();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        long long35 = inflater31.getBytesWritten();
        inflater31.reset();
        long long37 = inflater31.getBytesWritten();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        boolean boolean42 = inflater38.needsInput();
        int int43 = inflater38.getRemaining();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.finished();
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater44.setInput(byteArray54);
        int int56 = inflater38.inflate(byteArray54);
        inflater31.setInput(byteArray54);
        inflater25.setInput(byteArray54);
        int int59 = inflater21.inflate(byteArray54);
        int int60 = inflater14.inflate(byteArray54);
        inflater8.setInput(byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray54, (int) (short) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1 };
        inflater0.setInput(byteArray6);
        inflater0.reset();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        boolean boolean13 = inflater9.finished();
        int int14 = inflater9.getRemaining();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        inflater15.reset();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        int int24 = inflater20.getTotalIn();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int34 = inflater25.inflate(byteArray33);
        int int35 = inflater20.inflate(byteArray33);
        inflater15.setInput(byteArray33);
        inflater9.setInput(byteArray33);
        int int38 = inflater9.getTotalIn();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater43.setInput(byteArray53);
        inflater39.setInput(byteArray53);
        inflater9.setInput(byteArray53);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = inflater0.inflate(byteArray53, (int) '4', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalIn();
        boolean boolean7 = inflater0.finished();
        int int8 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        inflater0.end();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        boolean boolean26 = inflater22.finished();
        int int27 = inflater22.getRemaining();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        int int32 = inflater28.getAdler();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        inflater33.end();
        boolean boolean37 = inflater33.needsInput();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        inflater33.setInput(byteArray40);
        int int43 = inflater28.inflate(byteArray40);
        int int44 = inflater28.getTotalOut();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        boolean boolean49 = inflater45.finished();
        inflater45.end();
        inflater45.end();
        boolean boolean52 = inflater45.needsInput();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.needsDictionary();
        boolean boolean57 = inflater53.needsInput();
        int int58 = inflater53.getRemaining();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.finished();
        byte[] byteArray69 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater59.setInput(byteArray69);
        int int71 = inflater53.inflate(byteArray69);
        boolean boolean72 = inflater53.finished();
        int int73 = inflater53.getAdler();
        boolean boolean74 = inflater53.finished();
        int int75 = inflater53.getAdler();
        boolean boolean76 = inflater53.needsInput();
        java.util.zip.Inflater inflater77 = new java.util.zip.Inflater();
        byte[] byteArray79 = new byte[] { (byte) 1 };
        int int80 = inflater77.inflate(byteArray79);
        int int81 = inflater77.getTotalIn();
        java.util.zip.Inflater inflater82 = new java.util.zip.Inflater();
        byte[] byteArray84 = new byte[] { (byte) 1 };
        int int85 = inflater82.inflate(byteArray84);
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int91 = inflater82.inflate(byteArray90);
        int int92 = inflater77.inflate(byteArray90);
        int int93 = inflater53.inflate(byteArray90);
        inflater45.setInput(byteArray90, (int) (byte) 0, (int) (short) 1);
        inflater28.setInput(byteArray90);
        inflater22.setInput(byteArray90);
        inflater0.setInput(byteArray90);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        int int24 = inflater1.getTotalIn();
        int int25 = inflater1.getRemaining();
        int int26 = inflater1.getAdler();
        inflater1.end();
        boolean boolean28 = inflater1.needsInput();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        long long33 = inflater29.getBytesRead();
        boolean boolean34 = inflater29.needsInput();
        int int35 = inflater29.getTotalOut();
        long long36 = inflater29.getBytesWritten();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        boolean boolean41 = inflater37.finished();
        int int42 = inflater37.getRemaining();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        int int49 = inflater45.getTotalIn();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        inflater50.end();
        boolean boolean54 = inflater50.needsInput();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        byte[] byteArray57 = new byte[] { (byte) 1 };
        int int58 = inflater55.inflate(byteArray57);
        inflater50.setInput(byteArray57);
        inflater45.setInput(byteArray57);
        inflater43.setInput(byteArray57);
        int int62 = inflater37.inflate(byteArray57);
        inflater29.setInput(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray57, 6, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        int int41 = inflater0.getTotalIn();
        boolean boolean42 = inflater0.finished();
        inflater0.reset();
        long long44 = inflater0.getBytesWritten();
        int int45 = inflater0.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        inflater46.end();
        int int48 = inflater46.getRemaining();
        inflater46.end();
        int int50 = inflater46.getRemaining();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater(true);
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        byte[] byteArray55 = new byte[] { (byte) 1 };
        int int56 = inflater53.inflate(byteArray55);
        inflater53.reset();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        byte[] byteArray60 = new byte[] { (byte) 1 };
        int int61 = inflater58.inflate(byteArray60);
        long long62 = inflater58.getBytesWritten();
        inflater58.reset();
        long long64 = inflater58.getBytesWritten();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.finished();
        int int67 = inflater65.getRemaining();
        boolean boolean68 = inflater65.needsDictionary();
        boolean boolean69 = inflater65.needsInput();
        int int70 = inflater65.getRemaining();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        boolean boolean72 = inflater71.finished();
        int int73 = inflater71.getRemaining();
        boolean boolean74 = inflater71.finished();
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater71.setInput(byteArray81);
        int int83 = inflater65.inflate(byteArray81);
        inflater58.setInput(byteArray81);
        inflater53.setInput(byteArray81);
        inflater52.setDictionary(byteArray81);
        inflater46.setInput(byteArray81);
        inflater0.setInput(byteArray81);
        boolean boolean89 = inflater0.needsInput();
        boolean boolean90 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getAdler();
        boolean boolean8 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        inflater0.end();
        java.lang.Class<?> wildcardClass9 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        inflater0.reset();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        boolean boolean11 = inflater6.needsDictionary();
        boolean boolean12 = inflater6.needsDictionary();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater6.inflate(byteArray23);
        int int26 = inflater0.inflate(byteArray23);
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.finished();
        int int31 = inflater27.getAdler();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        inflater32.end();
        boolean boolean36 = inflater32.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        inflater32.setInput(byteArray39);
        int int42 = inflater27.inflate(byteArray39);
        inflater0.setInput(byteArray39);
        long long44 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        int int49 = inflater45.getAdler();
        int int50 = inflater45.getAdler();
        int int51 = inflater45.getAdler();
        int int52 = inflater45.getTotalOut();
        inflater45.reset();
        boolean boolean54 = inflater45.needsDictionary();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        int int59 = inflater55.getAdler();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        inflater60.end();
        boolean boolean64 = inflater60.needsInput();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        byte[] byteArray67 = new byte[] { (byte) 1 };
        int int68 = inflater65.inflate(byteArray67);
        inflater60.setInput(byteArray67);
        int int70 = inflater55.inflate(byteArray67);
        inflater45.setInput(byteArray67);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        int int22 = inflater18.getTotalIn();
        long long23 = inflater18.getBytesWritten();
        int int24 = inflater18.getTotalIn();
        boolean boolean25 = inflater18.needsDictionary();
        int int26 = inflater18.getAdler();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        inflater27.end();
        boolean boolean31 = inflater27.needsInput();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        long long36 = inflater32.getBytesRead();
        boolean boolean37 = inflater32.needsInput();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        long long42 = inflater38.getBytesWritten();
        inflater38.reset();
        long long44 = inflater38.getBytesWritten();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.needsDictionary();
        boolean boolean49 = inflater45.needsInput();
        int int50 = inflater45.getRemaining();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater51.setInput(byteArray61);
        int int63 = inflater45.inflate(byteArray61);
        inflater38.setInput(byteArray61);
        int int65 = inflater32.inflate(byteArray61);
        inflater27.setInput(byteArray61);
        int int67 = inflater18.inflate(byteArray61);
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        byte[] byteArray70 = new byte[] { (byte) 1 };
        int int71 = inflater68.inflate(byteArray70);
        int int72 = inflater68.getAdler();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        boolean boolean74 = inflater73.finished();
        int int75 = inflater73.getRemaining();
        boolean boolean76 = inflater73.needsInput();
        java.util.zip.Inflater inflater77 = new java.util.zip.Inflater();
        boolean boolean78 = inflater77.finished();
        int int79 = inflater77.getRemaining();
        boolean boolean80 = inflater77.finished();
        byte[] byteArray87 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater77.setInput(byteArray87);
        inflater73.setInput(byteArray87);
        inflater68.setInput(byteArray87);
        int int91 = inflater18.inflate(byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray87, 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsDictionary();
        inflater0.reset();
        long long10 = inflater0.getBytesRead();
        java.lang.Class<?> wildcardClass11 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        boolean boolean41 = inflater0.needsInput();
        int int42 = inflater0.getAdler();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        byte[] byteArray45 = new byte[] { (byte) 1 };
        int int46 = inflater43.inflate(byteArray45);
        long long47 = inflater43.getBytesWritten();
        boolean boolean48 = inflater43.needsInput();
        boolean boolean49 = inflater43.finished();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.finished();
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater50.setInput(byteArray60);
        inflater43.setInput(byteArray60);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray60, (int) (short) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater(true);
        int int6 = inflater5.getRemaining();
        long long7 = inflater5.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        inflater8.end();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        inflater8.setInput(byteArray22);
        inflater5.setInput(byteArray22, (int) (byte) 1, (int) (short) 1);
        int int28 = inflater0.inflate(byteArray22);
        inflater0.end();
        int int30 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        int int15 = inflater0.inflate(byteArray13);
        int int16 = inflater0.getRemaining();
        int int17 = inflater0.getAdler();
        int int18 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        long long23 = inflater19.getBytesRead();
        int int24 = inflater19.getTotalOut();
        int int25 = inflater19.getAdler();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater(true);
        int int28 = inflater27.getRemaining();
        long long29 = inflater27.getBytesRead();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        int int34 = inflater27.inflate(byteArray32);
        int int37 = inflater19.inflate(byteArray32, (int) (short) 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray32, (int) 'a', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        int int5 = inflater0.getTotalOut();
        int int6 = inflater0.getAdler();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        long long11 = inflater7.getBytesRead();
        int int12 = inflater7.getTotalOut();
        int int13 = inflater7.getAdler();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater(true);
        int int16 = inflater15.getRemaining();
        long long17 = inflater15.getBytesRead();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        int int22 = inflater15.inflate(byteArray20);
        int int25 = inflater7.inflate(byteArray20, (int) (short) 1, (int) (short) 0);
        inflater0.setInput(byteArray20);
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsInput();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        inflater27.setInput(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray41, (int) (byte) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        int int10 = inflater0.getTotalIn();
        int int11 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        boolean boolean16 = inflater12.needsInput();
        int int17 = inflater12.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        int int30 = inflater12.inflate(byteArray28);
        boolean boolean31 = inflater12.finished();
        int int32 = inflater12.getAdler();
        boolean boolean33 = inflater12.finished();
        int int34 = inflater12.getAdler();
        boolean boolean35 = inflater12.needsInput();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.needsDictionary();
        boolean boolean40 = inflater36.needsInput();
        int int41 = inflater36.getRemaining();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.finished();
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater42.setInput(byteArray52);
        int int54 = inflater36.inflate(byteArray52);
        boolean boolean55 = inflater36.finished();
        int int56 = inflater36.getAdler();
        boolean boolean57 = inflater36.finished();
        int int58 = inflater36.getAdler();
        boolean boolean59 = inflater36.needsInput();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        byte[] byteArray62 = new byte[] { (byte) 1 };
        int int63 = inflater60.inflate(byteArray62);
        int int64 = inflater60.getTotalIn();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        byte[] byteArray67 = new byte[] { (byte) 1 };
        int int68 = inflater65.inflate(byteArray67);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int74 = inflater65.inflate(byteArray73);
        int int75 = inflater60.inflate(byteArray73);
        int int76 = inflater36.inflate(byteArray73);
        int int77 = inflater12.inflate(byteArray73);
        int int78 = inflater0.inflate(byteArray73);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        inflater5.end();
        boolean boolean9 = inflater5.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        inflater5.setInput(byteArray12);
        inflater0.setInput(byteArray12);
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        int int20 = inflater16.getTotalIn();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int30 = inflater21.inflate(byteArray29);
        int int31 = inflater16.inflate(byteArray29);
        int int32 = inflater16.getTotalOut();
        int int33 = inflater16.getTotalOut();
        long long34 = inflater16.getBytesRead();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        long long39 = inflater35.getBytesRead();
        boolean boolean40 = inflater35.finished();
        long long41 = inflater35.getBytesRead();
        boolean boolean42 = inflater35.needsDictionary();
        boolean boolean43 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.needsDictionary();
        int int46 = inflater44.getTotalOut();
        int int47 = inflater44.getTotalOut();
        boolean boolean48 = inflater44.needsInput();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        inflater49.reset();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        int int58 = inflater54.getTotalIn();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int68 = inflater59.inflate(byteArray67);
        int int69 = inflater54.inflate(byteArray67);
        inflater49.setInput(byteArray67);
        inflater44.setInput(byteArray67);
        int int72 = inflater35.inflate(byteArray67);
        inflater16.setInput(byteArray67);
        inflater0.setInput(byteArray67);
        inflater0.reset();
        boolean boolean76 = inflater0.finished();
        long long77 = inflater0.getBytesRead();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        inflater0.reset();
        inflater0.reset();
        boolean boolean25 = inflater0.finished();
        java.lang.Class<?> wildcardClass26 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getAdler();
        boolean boolean3 = inflater1.finished();
        int int4 = inflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getTotalIn();
        int int6 = inflater0.getTotalIn();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getTotalIn();
        inflater0.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater(true);
        int int12 = inflater11.getRemaining();
        long long13 = inflater11.getBytesRead();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        inflater14.end();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        inflater14.setInput(byteArray28);
        inflater11.setInput(byteArray28, (int) (byte) 1, (int) (short) 1);
        int int34 = inflater11.getTotalIn();
        int int35 = inflater11.getRemaining();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        int int39 = inflater36.getTotalOut();
        inflater36.reset();
        boolean boolean41 = inflater36.needsInput();
        long long42 = inflater36.getBytesRead();
        int int43 = inflater36.getTotalOut();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.needsDictionary();
        int int46 = inflater44.getTotalOut();
        boolean boolean47 = inflater44.finished();
        boolean boolean48 = inflater44.needsDictionary();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        boolean boolean51 = inflater49.needsInput();
        boolean boolean52 = inflater49.needsInput();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.needsDictionary();
        long long57 = inflater53.getBytesRead();
        boolean boolean58 = inflater53.needsDictionary();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        long long63 = inflater59.getBytesWritten();
        inflater59.reset();
        long long65 = inflater59.getBytesWritten();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.needsDictionary();
        boolean boolean70 = inflater66.needsInput();
        int int71 = inflater66.getRemaining();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        boolean boolean73 = inflater72.finished();
        int int74 = inflater72.getRemaining();
        boolean boolean75 = inflater72.finished();
        byte[] byteArray82 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater72.setInput(byteArray82);
        int int84 = inflater66.inflate(byteArray82);
        inflater59.setInput(byteArray82);
        inflater53.setInput(byteArray82);
        int int87 = inflater49.inflate(byteArray82);
        int int88 = inflater44.inflate(byteArray82);
        inflater36.setInput(byteArray82);
        int int90 = inflater11.inflate(byteArray82);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray82, 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int17 = inflater8.inflate(byteArray16);
        boolean boolean18 = inflater8.needsInput();
        boolean boolean19 = inflater8.needsDictionary();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        long long24 = inflater20.getBytesRead();
        boolean boolean25 = inflater20.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        long long30 = inflater26.getBytesWritten();
        inflater26.reset();
        long long32 = inflater26.getBytesWritten();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        int int51 = inflater33.inflate(byteArray49);
        inflater26.setInput(byteArray49);
        int int53 = inflater20.inflate(byteArray49);
        inflater8.setInput(byteArray49, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = inflater0.inflate(byteArray49, (int) (byte) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        int int5 = inflater1.getRemaining();
        boolean boolean6 = inflater1.needsInput();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.needsDictionary();
        int int9 = inflater7.getTotalOut();
        int int10 = inflater7.getTotalOut();
        int int11 = inflater7.getAdler();
        boolean boolean12 = inflater7.needsDictionary();
        int int13 = inflater7.getTotalOut();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        boolean boolean18 = inflater14.finished();
        inflater14.end();
        inflater14.end();
        boolean boolean21 = inflater14.needsInput();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        int int27 = inflater22.getRemaining();
        inflater22.reset();
        boolean boolean29 = inflater22.needsDictionary();
        int int30 = inflater22.getTotalIn();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.needsDictionary();
        boolean boolean35 = inflater31.needsInput();
        int int36 = inflater31.getRemaining();
        inflater31.reset();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        boolean boolean42 = inflater38.needsInput();
        int int43 = inflater38.getRemaining();
        inflater38.reset();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater45.setInput(byteArray55);
        inflater38.setInput(byteArray55);
        int int60 = inflater31.inflate(byteArray55, 0, (int) (byte) 0);
        int int61 = inflater22.inflate(byteArray55);
        inflater14.setInput(byteArray55);
        int int65 = inflater7.inflate(byteArray55, 0, (int) (byte) 0);
        inflater1.setDictionary(byteArray55);
        boolean boolean67 = inflater1.needsInput();
        boolean boolean68 = inflater1.finished();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalIn();
        boolean boolean7 = inflater0.needsDictionary();
        int int8 = inflater0.getRemaining();
        long long9 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsDictionary();
        boolean boolean14 = inflater10.needsInput();
        int int15 = inflater10.getRemaining();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        int int28 = inflater10.inflate(byteArray26);
        boolean boolean29 = inflater10.finished();
        int int30 = inflater10.getTotalOut();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.needsDictionary();
        long long35 = inflater31.getBytesRead();
        boolean boolean36 = inflater31.needsDictionary();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        long long41 = inflater37.getBytesWritten();
        inflater37.reset();
        long long43 = inflater37.getBytesWritten();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        boolean boolean48 = inflater44.needsInput();
        int int49 = inflater44.getRemaining();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.finished();
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater50.setInput(byteArray60);
        int int62 = inflater44.inflate(byteArray60);
        inflater37.setInput(byteArray60);
        inflater31.setInput(byteArray60);
        int int65 = inflater10.inflate(byteArray60);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = inflater0.inflate(byteArray60, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsInput();
        int int13 = inflater0.getTotalOut();
        int int14 = inflater0.getAdler();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.needsDictionary();
        boolean boolean19 = inflater15.needsInput();
        int int20 = inflater15.getRemaining();
        inflater15.reset();
        boolean boolean22 = inflater15.needsInput();
        inflater15.reset();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        long long28 = inflater24.getBytesRead();
        boolean boolean29 = inflater24.needsInput();
        int int30 = inflater24.getTotalOut();
        long long31 = inflater24.getBytesRead();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        inflater32.reset();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        inflater32.setInput(byteArray49);
        int int54 = inflater24.inflate(byteArray49, 1, (int) (short) 1);
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        int int59 = inflater55.getAdler();
        int int60 = inflater55.getAdler();
        int int61 = inflater55.getAdler();
        int int62 = inflater55.getTotalOut();
        inflater55.reset();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.needsDictionary();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.needsDictionary();
        boolean boolean70 = inflater66.needsInput();
        int int71 = inflater66.getRemaining();
        inflater66.reset();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        boolean boolean74 = inflater73.finished();
        int int75 = inflater73.getRemaining();
        boolean boolean76 = inflater73.finished();
        byte[] byteArray83 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater73.setInput(byteArray83);
        inflater66.setInput(byteArray83);
        inflater64.setInput(byteArray83);
        inflater55.setInput(byteArray83, (int) (byte) 0, 0);
        int int90 = inflater24.inflate(byteArray83);
        int int91 = inflater15.inflate(byteArray83);
        inflater0.setInput(byteArray83);
        int int93 = inflater0.getRemaining();
        int int94 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 6 + "'", int93 == 6);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.needsDictionary();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesRead();
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.finished();
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsInput();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        inflater9.setInput(byteArray23);
        int int26 = inflater9.getRemaining();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        boolean boolean31 = inflater27.needsInput();
        int int32 = inflater27.getRemaining();
        inflater27.reset();
        boolean boolean34 = inflater27.needsDictionary();
        int int35 = inflater27.getTotalOut();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        boolean boolean40 = inflater36.finished();
        inflater36.end();
        inflater36.end();
        boolean boolean43 = inflater36.needsInput();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        boolean boolean48 = inflater44.needsInput();
        int int49 = inflater44.getRemaining();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.finished();
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater50.setInput(byteArray60);
        int int62 = inflater44.inflate(byteArray60);
        boolean boolean63 = inflater44.finished();
        int int64 = inflater44.getAdler();
        boolean boolean65 = inflater44.finished();
        int int66 = inflater44.getAdler();
        boolean boolean67 = inflater44.needsInput();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        byte[] byteArray70 = new byte[] { (byte) 1 };
        int int71 = inflater68.inflate(byteArray70);
        int int72 = inflater68.getTotalIn();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        byte[] byteArray75 = new byte[] { (byte) 1 };
        int int76 = inflater73.inflate(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int82 = inflater73.inflate(byteArray81);
        int int83 = inflater68.inflate(byteArray81);
        int int84 = inflater44.inflate(byteArray81);
        inflater36.setInput(byteArray81, (int) (byte) 0, (int) (short) 1);
        int int88 = inflater27.inflate(byteArray81);
        inflater9.setInput(byteArray81);
        inflater0.setInput(byteArray81);
        long long91 = inflater0.getBytesRead();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.finished();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        int int26 = inflater23.getTotalOut();
        inflater23.reset();
        long long28 = inflater23.getBytesWritten();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        boolean boolean31 = inflater29.needsInput();
        boolean boolean32 = inflater29.needsInput();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        long long37 = inflater33.getBytesRead();
        boolean boolean38 = inflater33.needsDictionary();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        byte[] byteArray41 = new byte[] { (byte) 1 };
        int int42 = inflater39.inflate(byteArray41);
        long long43 = inflater39.getBytesWritten();
        inflater39.reset();
        long long45 = inflater39.getBytesWritten();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.needsDictionary();
        boolean boolean50 = inflater46.needsInput();
        int int51 = inflater46.getRemaining();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.finished();
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater52.setInput(byteArray62);
        int int64 = inflater46.inflate(byteArray62);
        inflater39.setInput(byteArray62);
        inflater33.setInput(byteArray62);
        int int67 = inflater29.inflate(byteArray62);
        int int68 = inflater23.inflate(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray62, 4, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        inflater1.end();
        boolean boolean3 = inflater1.needsInput();
        byte[] byteArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        int int5 = inflater0.getTotalOut();
        long long6 = inflater0.getBytesRead();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.finished();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        int int13 = inflater9.getAdler();
        boolean boolean14 = inflater9.finished();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        inflater15.reset();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        long long24 = inflater20.getBytesWritten();
        inflater20.reset();
        long long26 = inflater20.getBytesWritten();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        boolean boolean31 = inflater27.needsInput();
        int int32 = inflater27.getRemaining();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.finished();
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater33.setInput(byteArray43);
        int int45 = inflater27.inflate(byteArray43);
        inflater20.setInput(byteArray43);
        inflater15.setInput(byteArray43);
        inflater9.setInput(byteArray43, (int) (byte) 0, 1);
        int int51 = inflater9.getTotalIn();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.needsDictionary();
        int int54 = inflater52.getTotalOut();
        int int55 = inflater52.getTotalOut();
        boolean boolean56 = inflater52.needsInput();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        inflater57.reset();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        int int66 = inflater62.getTotalIn();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int76 = inflater67.inflate(byteArray75);
        int int77 = inflater62.inflate(byteArray75);
        inflater57.setInput(byteArray75);
        inflater52.setInput(byteArray75);
        inflater9.setInput(byteArray75);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        long long12 = inflater8.getBytesRead();
        inflater8.reset();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        boolean boolean19 = inflater14.needsDictionary();
        boolean boolean20 = inflater14.needsDictionary();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.finished();
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater21.setInput(byteArray31);
        int int33 = inflater14.inflate(byteArray31);
        int int34 = inflater8.inflate(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        inflater0.end();
        int int8 = inflater0.getRemaining();
        boolean boolean9 = inflater0.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        long long15 = inflater10.getBytesWritten();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.needsDictionary();
        boolean boolean20 = inflater16.needsInput();
        int int21 = inflater16.getRemaining();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.finished();
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater22.setInput(byteArray32);
        int int34 = inflater16.inflate(byteArray32);
        boolean boolean35 = inflater16.finished();
        int int36 = inflater16.getTotalOut();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.needsDictionary();
        long long41 = inflater37.getBytesRead();
        boolean boolean42 = inflater37.needsDictionary();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        byte[] byteArray45 = new byte[] { (byte) 1 };
        int int46 = inflater43.inflate(byteArray45);
        long long47 = inflater43.getBytesWritten();
        inflater43.reset();
        long long49 = inflater43.getBytesWritten();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.needsDictionary();
        boolean boolean54 = inflater50.needsInput();
        int int55 = inflater50.getRemaining();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.finished();
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater56.setInput(byteArray66);
        int int68 = inflater50.inflate(byteArray66);
        inflater43.setInput(byteArray66);
        inflater37.setInput(byteArray66);
        int int71 = inflater16.inflate(byteArray66);
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        boolean boolean73 = inflater72.finished();
        int int74 = inflater72.getRemaining();
        boolean boolean75 = inflater72.needsInput();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        boolean boolean77 = inflater76.finished();
        int int78 = inflater76.getRemaining();
        boolean boolean79 = inflater76.finished();
        byte[] byteArray86 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater76.setInput(byteArray86);
        inflater72.setInput(byteArray86);
        int int89 = inflater16.inflate(byteArray86);
        inflater10.setInput(byteArray86, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray86, (int) 'a', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        long long21 = inflater0.getBytesRead();
        inflater0.end();
        int int23 = inflater0.getRemaining();
        boolean boolean24 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.finished();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getRemaining();
        int int10 = inflater0.getAdler();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        long long23 = inflater0.getBytesWritten();
        int int24 = inflater0.getTotalOut();
        long long25 = inflater0.getBytesWritten();
        long long26 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        boolean boolean12 = inflater8.finished();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        int int20 = inflater16.getTotalIn();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        inflater21.end();
        boolean boolean25 = inflater21.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        inflater21.setInput(byteArray28);
        inflater16.setInput(byteArray28);
        inflater14.setInput(byteArray28);
        int int33 = inflater8.inflate(byteArray28);
        inflater0.setInput(byteArray28);
        boolean boolean35 = inflater0.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater(false);
        int int38 = inflater37.getAdler();
        boolean boolean39 = inflater37.needsDictionary();
        int int40 = inflater37.getTotalOut();
        boolean boolean41 = inflater37.finished();
        boolean boolean42 = inflater37.needsDictionary();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        boolean boolean45 = inflater43.needsInput();
        boolean boolean46 = inflater43.needsInput();
        inflater43.end();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        long long52 = inflater48.getBytesRead();
        inflater48.reset();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.needsDictionary();
        boolean boolean58 = inflater54.needsInput();
        boolean boolean59 = inflater54.needsDictionary();
        boolean boolean60 = inflater54.needsDictionary();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.finished();
        int int63 = inflater61.getRemaining();
        boolean boolean64 = inflater61.finished();
        byte[] byteArray71 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater61.setInput(byteArray71);
        int int73 = inflater54.inflate(byteArray71);
        int int74 = inflater48.inflate(byteArray71);
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        boolean boolean76 = inflater75.finished();
        int int77 = inflater75.getRemaining();
        boolean boolean78 = inflater75.finished();
        int int79 = inflater75.getAdler();
        java.util.zip.Inflater inflater80 = new java.util.zip.Inflater();
        boolean boolean81 = inflater80.finished();
        int int82 = inflater80.getRemaining();
        inflater80.end();
        boolean boolean84 = inflater80.needsInput();
        java.util.zip.Inflater inflater85 = new java.util.zip.Inflater();
        byte[] byteArray87 = new byte[] { (byte) 1 };
        int int88 = inflater85.inflate(byteArray87);
        inflater80.setInput(byteArray87);
        int int90 = inflater75.inflate(byteArray87);
        inflater48.setInput(byteArray87);
        inflater43.setInput(byteArray87);
        int int93 = inflater37.inflate(byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray87, 10, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getTotalOut();
        long long8 = inflater0.getBytesRead();
        int int9 = inflater0.getAdler();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        int int5 = inflater1.getTotalIn();
        int int6 = inflater1.getRemaining();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        boolean boolean26 = inflater7.finished();
        int int27 = inflater7.getTotalOut();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        long long32 = inflater28.getBytesRead();
        boolean boolean33 = inflater28.needsDictionary();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        long long38 = inflater34.getBytesWritten();
        inflater34.reset();
        long long40 = inflater34.getBytesWritten();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.needsDictionary();
        boolean boolean45 = inflater41.needsInput();
        int int46 = inflater41.getRemaining();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.finished();
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater47.setInput(byteArray57);
        int int59 = inflater41.inflate(byteArray57);
        inflater34.setInput(byteArray57);
        inflater28.setInput(byteArray57);
        int int62 = inflater7.inflate(byteArray57);
        int int63 = inflater7.getAdler();
        int int64 = inflater7.getAdler();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.finished();
        int int67 = inflater65.getRemaining();
        boolean boolean68 = inflater65.finished();
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater65.setInput(byteArray75);
        inflater65.end();
        int int78 = inflater65.getRemaining();
        java.util.zip.Inflater inflater79 = new java.util.zip.Inflater();
        boolean boolean80 = inflater79.finished();
        int int81 = inflater79.getRemaining();
        boolean boolean82 = inflater79.finished();
        int int83 = inflater79.getAdler();
        java.util.zip.Inflater inflater84 = new java.util.zip.Inflater();
        boolean boolean85 = inflater84.finished();
        int int86 = inflater84.getRemaining();
        inflater84.end();
        boolean boolean88 = inflater84.needsInput();
        java.util.zip.Inflater inflater89 = new java.util.zip.Inflater();
        byte[] byteArray91 = new byte[] { (byte) 1 };
        int int92 = inflater89.inflate(byteArray91);
        inflater84.setInput(byteArray91);
        int int94 = inflater79.inflate(byteArray91);
        inflater65.setInput(byteArray91);
        int int96 = inflater7.inflate(byteArray91);
        inflater1.setDictionary(byteArray91);
        int int98 = inflater1.getRemaining();
        boolean boolean99 = inflater1.finished();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 6 + "'", int78 == 6);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.needsDictionary();
        int int9 = inflater7.getTotalOut();
        long long10 = inflater7.getBytesWritten();
        boolean boolean11 = inflater7.needsInput();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        int int16 = inflater12.getTotalIn();
        long long17 = inflater12.getBytesWritten();
        int int18 = inflater12.getTotalIn();
        boolean boolean19 = inflater12.needsDictionary();
        int int20 = inflater12.getAdler();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        inflater21.end();
        boolean boolean25 = inflater21.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        long long30 = inflater26.getBytesRead();
        boolean boolean31 = inflater26.needsInput();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        long long36 = inflater32.getBytesWritten();
        inflater32.reset();
        long long38 = inflater32.getBytesWritten();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.needsDictionary();
        boolean boolean43 = inflater39.needsInput();
        int int44 = inflater39.getRemaining();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater45.setInput(byteArray55);
        int int57 = inflater39.inflate(byteArray55);
        inflater32.setInput(byteArray55);
        int int59 = inflater26.inflate(byteArray55);
        inflater21.setInput(byteArray55);
        int int61 = inflater12.inflate(byteArray55);
        inflater7.setInput(byteArray55);
        inflater0.setInput(byteArray55);
        long long64 = inflater0.getBytesRead();
        java.lang.Class<?> wildcardClass65 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        boolean boolean4 = inflater1.needsInput();
        inflater1.reset();
        long long6 = inflater1.getBytesRead();
        int int7 = inflater1.getAdler();
        int int8 = inflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        boolean boolean6 = inflater0.needsDictionary();
        boolean boolean7 = inflater0.finished();
        boolean boolean8 = inflater0.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int18 = inflater9.inflate(byteArray17);
        boolean boolean19 = inflater9.finished();
        int int20 = inflater9.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        long long25 = inflater21.getBytesWritten();
        boolean boolean26 = inflater21.needsInput();
        int int27 = inflater21.getRemaining();
        int int28 = inflater21.getAdler();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        long long33 = inflater29.getBytesRead();
        long long34 = inflater29.getBytesWritten();
        boolean boolean35 = inflater29.finished();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        boolean boolean40 = inflater36.finished();
        int int41 = inflater36.getRemaining();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        inflater42.reset();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        int int51 = inflater47.getTotalIn();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        int int55 = inflater52.inflate(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int61 = inflater52.inflate(byteArray60);
        int int62 = inflater47.inflate(byteArray60);
        inflater42.setInput(byteArray60);
        inflater36.setInput(byteArray60);
        int int65 = inflater29.inflate(byteArray60);
        int int66 = inflater21.inflate(byteArray60);
        int int67 = inflater9.inflate(byteArray60);
        int int68 = inflater0.inflate(byteArray60);
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getRemaining();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        int int42 = inflater24.inflate(byteArray40);
        boolean boolean43 = inflater24.finished();
        int int44 = inflater24.getAdler();
        boolean boolean45 = inflater24.finished();
        int int46 = inflater24.getAdler();
        boolean boolean47 = inflater24.needsInput();
        int int48 = inflater24.getRemaining();
        int int49 = inflater24.getTotalOut();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.needsDictionary();
        int int52 = inflater50.getTotalOut();
        int int53 = inflater50.getTotalOut();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater(true);
        int int56 = inflater55.getRemaining();
        long long57 = inflater55.getBytesRead();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        inflater58.end();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.finished();
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater62.setInput(byteArray72);
        inflater58.setInput(byteArray72);
        inflater55.setInput(byteArray72, (int) (byte) 1, (int) (short) 1);
        int int78 = inflater50.inflate(byteArray72);
        inflater24.setInput(byteArray72, (int) (short) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray72, 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        boolean boolean20 = inflater0.finished();
        int int21 = inflater0.getAdler();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsInput();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        int int38 = inflater5.inflate(byteArray34);
        inflater0.setInput(byteArray34);
        int int40 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        int int21 = inflater0.getRemaining();
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalIn();
        boolean boolean7 = inflater0.finished();
        inflater0.end();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray11, (int) (short) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getTotalOut();
        int int7 = inflater0.getTotalIn();
        long long8 = inflater0.getBytesRead();
        boolean boolean9 = inflater0.finished();
        inflater0.end();
        int int11 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalIn();
        boolean boolean4 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.finished();
        int int6 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        inflater0.reset();
        inflater0.reset();
        inflater0.end();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        int int8 = inflater4.getTotalOut();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        int int13 = inflater9.getTotalIn();
        long long14 = inflater9.getBytesWritten();
        int int15 = inflater9.getTotalIn();
        boolean boolean16 = inflater9.needsDictionary();
        int int17 = inflater9.getAdler();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        inflater18.end();
        boolean boolean22 = inflater18.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        long long27 = inflater23.getBytesRead();
        boolean boolean28 = inflater23.needsInput();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        long long33 = inflater29.getBytesWritten();
        inflater29.reset();
        long long35 = inflater29.getBytesWritten();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.needsDictionary();
        boolean boolean40 = inflater36.needsInput();
        int int41 = inflater36.getRemaining();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.finished();
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater42.setInput(byteArray52);
        int int54 = inflater36.inflate(byteArray52);
        inflater29.setInput(byteArray52);
        int int56 = inflater23.inflate(byteArray52);
        inflater18.setInput(byteArray52);
        int int58 = inflater9.inflate(byteArray52);
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        int int63 = inflater59.getAdler();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.needsInput();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.finished();
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater68.setInput(byteArray78);
        inflater64.setInput(byteArray78);
        inflater59.setInput(byteArray78);
        int int82 = inflater9.inflate(byteArray78);
        inflater4.setInput(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = inflater0.inflate(byteArray78, (-1), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        inflater0.reset();
        int int3 = inflater0.getAdler();
        int int4 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        int int10 = inflater0.getTotalIn();
        int int11 = inflater0.getRemaining();
        int int12 = inflater0.getTotalOut();
        int int13 = inflater0.getTotalOut();
        boolean boolean14 = inflater0.needsInput();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        boolean boolean3 = inflater0.finished();
        boolean boolean4 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        boolean boolean7 = inflater5.needsInput();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        long long13 = inflater9.getBytesRead();
        boolean boolean14 = inflater9.needsDictionary();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        long long19 = inflater15.getBytesWritten();
        inflater15.reset();
        long long21 = inflater15.getBytesWritten();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        int int27 = inflater22.getRemaining();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater28.setInput(byteArray38);
        int int40 = inflater22.inflate(byteArray38);
        inflater15.setInput(byteArray38);
        inflater9.setInput(byteArray38);
        int int43 = inflater5.inflate(byteArray38);
        int int44 = inflater0.inflate(byteArray38);
        long long45 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        long long23 = inflater0.getBytesWritten();
        long long24 = inflater0.getBytesWritten();
        int int25 = inflater0.getTotalOut();
        int int26 = inflater0.getTotalOut();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getAdler();
        boolean boolean8 = inflater0.needsInput();
        inflater0.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        inflater10.end();
        int int12 = inflater10.getRemaining();
        inflater10.end();
        int int14 = inflater10.getRemaining();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater(true);
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        inflater17.reset();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        long long26 = inflater22.getBytesWritten();
        inflater22.reset();
        long long28 = inflater22.getBytesWritten();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        int int47 = inflater29.inflate(byteArray45);
        inflater22.setInput(byteArray45);
        inflater17.setInput(byteArray45);
        inflater16.setDictionary(byteArray45);
        inflater10.setInput(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = inflater0.inflate(byteArray45, (int) (short) 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getAdler();
        boolean boolean9 = inflater0.finished();
        long long10 = inflater0.getBytesRead();
        boolean boolean11 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        int int8 = inflater0.getTotalIn();
        boolean boolean9 = inflater0.finished();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.needsDictionary();
        int int12 = inflater10.getTotalOut();
        int int13 = inflater10.getTotalOut();
        long long14 = inflater10.getBytesWritten();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.needsDictionary();
        long long19 = inflater15.getBytesRead();
        boolean boolean20 = inflater15.needsDictionary();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        long long25 = inflater21.getBytesWritten();
        inflater21.reset();
        long long27 = inflater21.getBytesWritten();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater34.setInput(byteArray44);
        int int46 = inflater28.inflate(byteArray44);
        inflater21.setInput(byteArray44);
        inflater15.setInput(byteArray44);
        int int49 = inflater10.inflate(byteArray44);
        int int50 = inflater10.getTotalOut();
        int int51 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        int int55 = inflater52.inflate(byteArray54);
        inflater52.reset();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        int int61 = inflater57.getTotalIn();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int71 = inflater62.inflate(byteArray70);
        int int72 = inflater57.inflate(byteArray70);
        inflater52.setInput(byteArray70);
        int int74 = inflater10.inflate(byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray70, (int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalIn();
        long long10 = inflater0.getBytesWritten();
        inflater0.end();
        int int12 = inflater0.getRemaining();
        java.lang.Class<?> wildcardClass13 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        int int8 = inflater1.inflate(byteArray6);
        long long9 = inflater1.getBytesWritten();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        inflater10.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        int int19 = inflater15.getTotalIn();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int29 = inflater20.inflate(byteArray28);
        int int30 = inflater15.inflate(byteArray28);
        inflater10.setInput(byteArray28);
        boolean boolean32 = inflater10.needsDictionary();
        long long33 = inflater10.getBytesWritten();
        int int34 = inflater10.getTotalOut();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        inflater35.reset();
        long long40 = inflater35.getBytesWritten();
        boolean boolean41 = inflater35.needsInput();
        boolean boolean42 = inflater35.finished();
        int int43 = inflater35.getTotalOut();
        boolean boolean44 = inflater35.needsInput();
        boolean boolean45 = inflater35.needsInput();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.needsDictionary();
        boolean boolean50 = inflater46.needsInput();
        int int51 = inflater46.getRemaining();
        inflater46.reset();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.needsDictionary();
        boolean boolean57 = inflater53.needsInput();
        int int58 = inflater53.getRemaining();
        inflater53.reset();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        inflater53.setInput(byteArray70);
        int int75 = inflater46.inflate(byteArray70, 0, (int) (byte) 0);
        inflater35.setInput(byteArray70);
        inflater10.setInput(byteArray70);
        int int78 = inflater1.inflate(byteArray70);
        int int79 = inflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.finished();
        int int8 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        int int27 = inflater9.inflate(byteArray25);
        boolean boolean28 = inflater9.finished();
        int int29 = inflater9.getAdler();
        boolean boolean30 = inflater9.finished();
        int int31 = inflater9.getAdler();
        boolean boolean32 = inflater9.needsInput();
        long long33 = inflater9.getBytesRead();
        long long34 = inflater9.getBytesRead();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        int int39 = inflater35.getTotalIn();
        long long40 = inflater35.getBytesWritten();
        int int41 = inflater35.getAdler();
        boolean boolean42 = inflater35.needsInput();
        long long43 = inflater35.getBytesRead();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.finished();
        int int48 = inflater44.getAdler();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        inflater49.end();
        boolean boolean53 = inflater49.needsInput();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        inflater49.setInput(byteArray56);
        int int59 = inflater44.inflate(byteArray56);
        inflater35.setInput(byteArray56);
        int int61 = inflater9.inflate(byteArray56);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = inflater0.inflate(byteArray56, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalIn();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        boolean boolean2 = inflater0.needsInput();
        boolean boolean3 = inflater0.needsInput();
        inflater0.end();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        long long6 = inflater0.getBytesRead();
        int int7 = inflater0.getTotalOut();
        int int8 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getTotalIn();
        boolean boolean3 = inflater1.finished();
        boolean boolean4 = inflater1.needsDictionary();
        int int5 = inflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsInput();
        inflater0.reset();
        long long23 = inflater0.getBytesWritten();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        int int5 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        boolean boolean20 = inflater0.finished();
        int int21 = inflater0.getTotalIn();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getTotalOut();
        int int24 = inflater0.getRemaining();
        boolean boolean25 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        int int30 = inflater26.getTotalIn();
        long long31 = inflater26.getBytesWritten();
        int int32 = inflater26.getTotalIn();
        int int33 = inflater26.getTotalOut();
        int int34 = inflater26.getTotalOut();
        boolean boolean35 = inflater26.needsDictionary();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        int int40 = inflater36.getAdler();
        boolean boolean41 = inflater36.finished();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        inflater42.reset();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        long long51 = inflater47.getBytesWritten();
        inflater47.reset();
        long long53 = inflater47.getBytesWritten();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.needsDictionary();
        boolean boolean58 = inflater54.needsInput();
        int int59 = inflater54.getRemaining();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        int int72 = inflater54.inflate(byteArray70);
        inflater47.setInput(byteArray70);
        inflater42.setInput(byteArray70);
        inflater36.setInput(byteArray70, (int) (byte) 0, 1);
        int int78 = inflater26.inflate(byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getTotalIn();
        boolean boolean3 = inflater1.finished();
        boolean boolean4 = inflater1.needsDictionary();
        boolean boolean5 = inflater1.finished();
        boolean boolean6 = inflater1.needsInput();
        int int7 = inflater1.getTotalIn();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        long long12 = inflater8.getBytesWritten();
        int int13 = inflater8.getRemaining();
        int int14 = inflater8.getTotalOut();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        int int18 = inflater15.getTotalOut();
        inflater15.reset();
        boolean boolean20 = inflater15.needsInput();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater15.inflate(byteArray50);
        int int58 = inflater8.inflate(byteArray50, (int) (byte) 1, 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setDictionary(byteArray50, (int) 'a', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        int int41 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        inflater42.reset();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        long long51 = inflater47.getBytesWritten();
        inflater47.reset();
        long long53 = inflater47.getBytesWritten();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.needsDictionary();
        boolean boolean58 = inflater54.needsInput();
        int int59 = inflater54.getRemaining();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        int int72 = inflater54.inflate(byteArray70);
        inflater47.setInput(byteArray70);
        inflater42.setInput(byteArray70);
        int int75 = inflater0.inflate(byteArray70);
        boolean boolean76 = inflater0.needsInput();
        long long77 = inflater0.getBytesRead();
        inflater0.end();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        int int10 = inflater0.getTotalIn();
        long long11 = inflater0.getBytesWritten();
        int int12 = inflater0.getRemaining();
        boolean boolean13 = inflater0.finished();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        int int15 = inflater0.inflate(byteArray13);
        boolean boolean16 = inflater0.finished();
        inflater0.end();
        inflater0.end();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        int int23 = inflater19.getTotalIn();
        boolean boolean24 = inflater19.needsDictionary();
        long long25 = inflater19.getBytesRead();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        int int32 = inflater28.getTotalIn();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        inflater33.end();
        boolean boolean37 = inflater33.needsInput();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        inflater33.setInput(byteArray40);
        inflater28.setInput(byteArray40);
        inflater26.setInput(byteArray40);
        int int45 = inflater19.inflate(byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray40, (int) ' ', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        boolean boolean24 = inflater0.needsDictionary();
        byte[] byteArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int26 = inflater0.inflate(byteArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        int int41 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        inflater42.reset();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        long long51 = inflater47.getBytesWritten();
        inflater47.reset();
        long long53 = inflater47.getBytesWritten();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.needsDictionary();
        boolean boolean58 = inflater54.needsInput();
        int int59 = inflater54.getRemaining();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        int int72 = inflater54.inflate(byteArray70);
        inflater47.setInput(byteArray70);
        inflater42.setInput(byteArray70);
        int int75 = inflater0.inflate(byteArray70);
        java.lang.Class<?> wildcardClass76 = byteArray70.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        long long10 = inflater6.getBytesRead();
        boolean boolean11 = inflater6.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        long long16 = inflater12.getBytesWritten();
        inflater12.reset();
        long long18 = inflater12.getBytesWritten();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsDictionary();
        boolean boolean23 = inflater19.needsInput();
        int int24 = inflater19.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.finished();
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater25.setInput(byteArray35);
        int int37 = inflater19.inflate(byteArray35);
        inflater12.setInput(byteArray35);
        inflater6.setInput(byteArray35);
        int int40 = inflater0.inflate(byteArray35);
        long long41 = inflater0.getBytesWritten();
        int int42 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater43.setInput(byteArray53);
        inflater43.end();
        int int56 = inflater43.getRemaining();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.finished();
        int int61 = inflater57.getAdler();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        inflater62.end();
        boolean boolean66 = inflater62.needsInput();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        inflater62.setInput(byteArray69);
        int int72 = inflater57.inflate(byteArray69);
        inflater43.setInput(byteArray69);
        inflater0.setInput(byteArray69);
        java.lang.Class<?> wildcardClass75 = byteArray69.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        int int15 = inflater0.inflate(byteArray13);
        int int16 = inflater0.getRemaining();
        long long17 = inflater0.getBytesRead();
        boolean boolean18 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        boolean boolean18 = inflater0.finished();
        inflater0.reset();
        int int20 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.finished();
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater5.setInput(byteArray15);
        inflater5.end();
        int int18 = inflater5.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsDictionary();
        boolean boolean23 = inflater19.needsInput();
        int int24 = inflater19.getRemaining();
        int int25 = inflater19.getTotalOut();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        boolean boolean30 = inflater26.needsInput();
        int int31 = inflater26.getRemaining();
        inflater26.reset();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.finished();
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater33.setInput(byteArray43);
        inflater26.setInput(byteArray43);
        int int46 = inflater26.getTotalOut();
        boolean boolean47 = inflater26.needsDictionary();
        long long48 = inflater26.getBytesWritten();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.needsDictionary();
        int int51 = inflater49.getTotalOut();
        int int52 = inflater49.getTotalOut();
        long long53 = inflater49.getBytesWritten();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.needsDictionary();
        long long58 = inflater54.getBytesRead();
        boolean boolean59 = inflater54.needsDictionary();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        byte[] byteArray62 = new byte[] { (byte) 1 };
        int int63 = inflater60.inflate(byteArray62);
        long long64 = inflater60.getBytesWritten();
        inflater60.reset();
        long long66 = inflater60.getBytesWritten();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        boolean boolean68 = inflater67.finished();
        int int69 = inflater67.getRemaining();
        boolean boolean70 = inflater67.needsDictionary();
        boolean boolean71 = inflater67.needsInput();
        int int72 = inflater67.getRemaining();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        boolean boolean74 = inflater73.finished();
        int int75 = inflater73.getRemaining();
        boolean boolean76 = inflater73.finished();
        byte[] byteArray83 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater73.setInput(byteArray83);
        int int85 = inflater67.inflate(byteArray83);
        inflater60.setInput(byteArray83);
        inflater54.setInput(byteArray83);
        int int88 = inflater49.inflate(byteArray83);
        inflater26.setInput(byteArray83);
        int int92 = inflater19.inflate(byteArray83, 0, (int) (short) 1);
        inflater5.setInput(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray83, (int) ' ', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater5.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int24 = inflater15.inflate(byteArray23);
        int int25 = inflater10.inflate(byteArray23);
        inflater5.setInput(byteArray23);
        inflater0.setInput(byteArray23);
        int int28 = inflater0.getTotalOut();
        boolean boolean29 = inflater0.needsInput();
        java.lang.Class<?> wildcardClass30 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        long long19 = inflater0.getBytesRead();
        int int20 = inflater0.getAdler();
        int int21 = inflater0.getTotalIn();
        int int22 = inflater0.getTotalIn();
        long long23 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.needsDictionary();
        int int26 = inflater24.getTotalOut();
        int int27 = inflater24.getTotalOut();
        long long28 = inflater24.getBytesWritten();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        long long33 = inflater29.getBytesRead();
        boolean boolean34 = inflater29.needsDictionary();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        long long39 = inflater35.getBytesWritten();
        inflater35.reset();
        long long41 = inflater35.getBytesWritten();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        boolean boolean46 = inflater42.needsInput();
        int int47 = inflater42.getRemaining();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater48.setInput(byteArray58);
        int int60 = inflater42.inflate(byteArray58);
        inflater35.setInput(byteArray58);
        inflater29.setInput(byteArray58);
        int int63 = inflater24.inflate(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray58, 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsInput();
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        int int5 = inflater2.inflate(byteArray4);
        long long6 = inflater2.getBytesWritten();
        int int7 = inflater2.getRemaining();
        int int8 = inflater2.getTotalOut();
        boolean boolean9 = inflater2.finished();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        inflater15.end();
        boolean boolean19 = inflater15.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        inflater15.setInput(byteArray22);
        inflater10.setInput(byteArray22);
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        int int30 = inflater26.getTotalIn();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int40 = inflater31.inflate(byteArray39);
        int int41 = inflater26.inflate(byteArray39);
        int int42 = inflater26.getTotalOut();
        int int43 = inflater26.getTotalOut();
        long long44 = inflater26.getBytesRead();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        long long49 = inflater45.getBytesRead();
        boolean boolean50 = inflater45.finished();
        long long51 = inflater45.getBytesRead();
        boolean boolean52 = inflater45.needsDictionary();
        boolean boolean53 = inflater45.needsDictionary();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.needsDictionary();
        int int56 = inflater54.getTotalOut();
        int int57 = inflater54.getTotalOut();
        boolean boolean58 = inflater54.needsInput();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        inflater59.reset();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        int int68 = inflater64.getTotalIn();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        byte[] byteArray71 = new byte[] { (byte) 1 };
        int int72 = inflater69.inflate(byteArray71);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int78 = inflater69.inflate(byteArray77);
        int int79 = inflater64.inflate(byteArray77);
        inflater59.setInput(byteArray77);
        inflater54.setInput(byteArray77);
        int int82 = inflater45.inflate(byteArray77);
        inflater26.setInput(byteArray77);
        inflater10.setInput(byteArray77);
        inflater2.setInput(byteArray77);
        int int86 = inflater0.inflate(byteArray77);
        java.lang.Class<?> wildcardClass87 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getRemaining();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater(false);
        int int11 = inflater10.getTotalIn();
        boolean boolean12 = inflater10.finished();
        boolean boolean13 = inflater10.needsDictionary();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        long long18 = inflater14.getBytesRead();
        inflater14.reset();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        boolean boolean24 = inflater20.needsInput();
        boolean boolean25 = inflater20.needsDictionary();
        boolean boolean26 = inflater20.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.finished();
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater27.setInput(byteArray37);
        int int39 = inflater20.inflate(byteArray37);
        int int40 = inflater14.inflate(byteArray37);
        inflater10.setInput(byteArray37, (int) (byte) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray37, (int) ' ', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsInput();
        int int22 = inflater0.getRemaining();
        long long23 = inflater0.getBytesWritten();
        boolean boolean24 = inflater0.finished();
        boolean boolean25 = inflater0.finished();
        boolean boolean26 = inflater0.needsDictionary();
        int int27 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getTotalOut();
        int int41 = inflater0.getAdler();
        int int42 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        int int5 = inflater0.getTotalOut();
        int int6 = inflater0.getTotalIn();
        int int7 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        boolean boolean12 = inflater8.finished();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        inflater14.reset();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        int int23 = inflater19.getTotalIn();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int33 = inflater24.inflate(byteArray32);
        int int34 = inflater19.inflate(byteArray32);
        inflater14.setInput(byteArray32);
        inflater8.setInput(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray32, (int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        long long56 = inflater0.getBytesRead();
        int int57 = inflater0.getTotalOut();
        int int58 = inflater0.getTotalOut();
        byte[] byteArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray59, (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater5.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int24 = inflater15.inflate(byteArray23);
        int int25 = inflater10.inflate(byteArray23);
        inflater5.setInput(byteArray23);
        inflater0.setInput(byteArray23);
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater(true);
        int int30 = inflater29.getRemaining();
        long long31 = inflater29.getBytesRead();
        int int32 = inflater29.getTotalIn();
        long long33 = inflater29.getBytesWritten();
        int int34 = inflater29.getTotalIn();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        inflater35.reset();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        int int44 = inflater40.getTotalIn();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int54 = inflater45.inflate(byteArray53);
        int int55 = inflater40.inflate(byteArray53);
        inflater35.setInput(byteArray53);
        int int57 = inflater29.inflate(byteArray53);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = inflater0.inflate(byteArray53, 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        long long13 = inflater9.getBytesRead();
        boolean boolean14 = inflater9.finished();
        long long15 = inflater9.getBytesRead();
        boolean boolean16 = inflater9.needsDictionary();
        boolean boolean17 = inflater9.needsDictionary();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.needsDictionary();
        int int20 = inflater18.getTotalOut();
        int int21 = inflater18.getTotalOut();
        boolean boolean22 = inflater18.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        inflater23.reset();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        int int32 = inflater28.getTotalIn();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int42 = inflater33.inflate(byteArray41);
        int int43 = inflater28.inflate(byteArray41);
        inflater23.setInput(byteArray41);
        inflater18.setInput(byteArray41);
        int int46 = inflater9.inflate(byteArray41);
        inflater0.setInput(byteArray41, (int) (short) 0, (int) (byte) 1);
        int int50 = inflater0.getTotalOut();
        inflater0.reset();
        java.lang.Class<?> wildcardClass52 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getTotalOut();
        inflater0.end();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        long long28 = inflater24.getBytesRead();
        boolean boolean29 = inflater24.needsInput();
        int int30 = inflater24.getTotalOut();
        long long31 = inflater24.getBytesRead();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        inflater32.reset();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        inflater32.setInput(byteArray49);
        int int54 = inflater24.inflate(byteArray49, 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = inflater0.inflate(byteArray49, (-1), 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsInput();
        inflater0.reset();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        inflater13.end();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater17.setInput(byteArray27);
        inflater13.setInput(byteArray27);
        int int30 = inflater9.inflate(byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass24 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        inflater0.reset();
        boolean boolean8 = inflater0.finished();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        int int13 = inflater9.getAdler();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        inflater14.end();
        boolean boolean18 = inflater14.needsInput();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        inflater14.setInput(byteArray21);
        int int24 = inflater9.inflate(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray21, 6, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getTotalOut();
        inflater0.reset();
        long long9 = inflater0.getBytesWritten();
        long long10 = inflater0.getBytesRead();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        int int10 = inflater5.getRemaining();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater11.setInput(byteArray21);
        int int23 = inflater5.inflate(byteArray21);
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater28.setInput(byteArray38);
        inflater24.setInput(byteArray38);
        inflater5.setInput(byteArray38);
        int int42 = inflater0.inflate(byteArray38);
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.end();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        inflater6.end();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.finished();
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater10.setInput(byteArray20);
        inflater6.setInput(byteArray20);
        inflater0.setInput(byteArray20);
        java.lang.Class<?> wildcardClass24 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.needsInput();
        int int11 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        inflater0.reset();
        inflater0.end();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        long long3 = inflater0.getBytesWritten();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        long long10 = inflater5.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater(true);
        int int13 = inflater12.getRemaining();
        long long14 = inflater12.getBytesRead();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        inflater15.end();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        inflater15.setInput(byteArray29);
        inflater12.setInput(byteArray29, (int) (byte) 1, (int) (short) 1);
        int int35 = inflater5.inflate(byteArray29);
        int int36 = inflater0.inflate(byteArray29);
        java.lang.Class<?> wildcardClass37 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalOut();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.finished();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        boolean boolean27 = inflater8.finished();
        int int28 = inflater8.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        inflater29.reset();
        boolean boolean36 = inflater29.needsDictionary();
        int int37 = inflater29.getTotalIn();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        boolean boolean42 = inflater38.needsInput();
        int int43 = inflater38.getRemaining();
        inflater38.reset();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.needsDictionary();
        boolean boolean49 = inflater45.needsInput();
        int int50 = inflater45.getRemaining();
        inflater45.reset();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.finished();
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater52.setInput(byteArray62);
        inflater45.setInput(byteArray62);
        int int67 = inflater38.inflate(byteArray62, 0, (int) (byte) 0);
        int int68 = inflater29.inflate(byteArray62);
        int int69 = inflater8.inflate(byteArray62);
        inflater0.setInput(byteArray62);
        int int71 = inflater0.getTotalOut();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        int int7 = inflater0.getAdler();
        int int8 = inflater0.getRemaining();
        int int9 = inflater0.getAdler();
        boolean boolean10 = inflater0.finished();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsInput();
        boolean boolean2 = inflater0.needsInput();
        long long3 = inflater0.getBytesWritten();
        boolean boolean4 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsInput();
        inflater0.reset();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        long long13 = inflater9.getBytesRead();
        boolean boolean14 = inflater9.needsInput();
        int int15 = inflater9.getTotalOut();
        long long16 = inflater9.getBytesRead();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        inflater17.reset();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        inflater17.setInput(byteArray34);
        int int39 = inflater9.inflate(byteArray34, 1, (int) (short) 1);
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        int int44 = inflater40.getAdler();
        int int45 = inflater40.getAdler();
        int int46 = inflater40.getAdler();
        int int47 = inflater40.getTotalOut();
        inflater40.reset();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.needsDictionary();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.needsDictionary();
        boolean boolean55 = inflater51.needsInput();
        int int56 = inflater51.getRemaining();
        inflater51.reset();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.finished();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater58.setInput(byteArray68);
        inflater51.setInput(byteArray68);
        inflater49.setInput(byteArray68);
        inflater40.setInput(byteArray68, (int) (byte) 0, 0);
        int int75 = inflater9.inflate(byteArray68);
        int int76 = inflater0.inflate(byteArray68);
        java.lang.Class<?> wildcardClass77 = byteArray68.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        int int5 = inflater0.getRemaining();
        int int6 = inflater0.getTotalOut();
        boolean boolean7 = inflater0.finished();
        boolean boolean8 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsInput();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        inflater56.setInput(byteArray70);
        int int73 = inflater0.inflate(byteArray70);
        int int74 = inflater0.getRemaining();
        int int75 = inflater0.getRemaining();
        int int76 = inflater0.getRemaining();
        boolean boolean77 = inflater0.needsInput();
        inflater0.reset();
        int int79 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        int int7 = inflater0.getTotalOut();
        inflater0.reset();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        boolean boolean11 = inflater9.needsInput();
        long long12 = inflater9.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        long long17 = inflater13.getBytesRead();
        inflater13.reset();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsDictionary();
        boolean boolean23 = inflater19.needsInput();
        boolean boolean24 = inflater19.needsDictionary();
        boolean boolean25 = inflater19.needsDictionary();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.finished();
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater26.setInput(byteArray36);
        int int38 = inflater19.inflate(byteArray36);
        int int39 = inflater13.inflate(byteArray36);
        int int40 = inflater9.inflate(byteArray36);
        int int41 = inflater0.inflate(byteArray36);
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getRemaining();
        inflater0.reset();
        long long24 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.needsDictionary();
        int int27 = inflater25.getTotalOut();
        boolean boolean28 = inflater25.finished();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        boolean boolean34 = inflater29.needsDictionary();
        boolean boolean35 = inflater29.needsDictionary();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater36.setInput(byteArray46);
        int int48 = inflater29.inflate(byteArray46);
        inflater25.setInput(byteArray46);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray46, (int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        int int24 = inflater1.getTotalIn();
        int int25 = inflater1.getRemaining();
        long long26 = inflater1.getBytesRead();
        boolean boolean27 = inflater1.finished();
        boolean boolean28 = inflater1.needsInput();
        long long29 = inflater1.getBytesRead();
        int int30 = inflater1.getTotalOut();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.needsDictionary();
        int int33 = inflater31.getTotalOut();
        int int34 = inflater31.getTotalOut();
        long long35 = inflater31.getBytesWritten();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.needsDictionary();
        long long40 = inflater36.getBytesRead();
        boolean boolean41 = inflater36.needsDictionary();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        long long46 = inflater42.getBytesWritten();
        inflater42.reset();
        long long48 = inflater42.getBytesWritten();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.needsDictionary();
        boolean boolean53 = inflater49.needsInput();
        int int54 = inflater49.getRemaining();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater55.setInput(byteArray65);
        int int67 = inflater49.inflate(byteArray65);
        inflater42.setInput(byteArray65);
        inflater36.setInput(byteArray65);
        int int70 = inflater31.inflate(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray65, (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater8.setInput(byteArray25);
        int int30 = inflater0.inflate(byteArray25, 1, (int) (short) 1);
        int int31 = inflater0.getTotalIn();
        boolean boolean32 = inflater0.needsDictionary();
        int int33 = inflater0.getAdler();
        int int34 = inflater0.getRemaining();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray45, (int) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getAdler();
        long long8 = inflater0.getBytesRead();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater0.setInput(byteArray7);
        int int10 = inflater0.getRemaining();
        int int11 = inflater0.getRemaining();
        boolean boolean12 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalIn();
        boolean boolean7 = inflater0.needsDictionary();
        int int8 = inflater0.getRemaining();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        long long13 = inflater9.getBytesWritten();
        inflater9.reset();
        long long15 = inflater9.getBytesWritten();
        int int16 = inflater9.getTotalIn();
        boolean boolean17 = inflater9.needsDictionary();
        int int18 = inflater9.getTotalIn();
        int int19 = inflater9.getTotalIn();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        boolean boolean24 = inflater20.needsInput();
        int int25 = inflater20.getRemaining();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.finished();
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater26.setInput(byteArray36);
        int int38 = inflater20.inflate(byteArray36);
        boolean boolean39 = inflater20.finished();
        int int40 = inflater20.getTotalOut();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.needsDictionary();
        long long45 = inflater41.getBytesRead();
        boolean boolean46 = inflater41.needsDictionary();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        long long51 = inflater47.getBytesWritten();
        inflater47.reset();
        long long53 = inflater47.getBytesWritten();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.needsDictionary();
        boolean boolean58 = inflater54.needsInput();
        int int59 = inflater54.getRemaining();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        int int72 = inflater54.inflate(byteArray70);
        inflater47.setInput(byteArray70);
        inflater41.setInput(byteArray70);
        int int75 = inflater20.inflate(byteArray70);
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        boolean boolean77 = inflater76.finished();
        int int78 = inflater76.getRemaining();
        boolean boolean79 = inflater76.needsInput();
        java.util.zip.Inflater inflater80 = new java.util.zip.Inflater();
        boolean boolean81 = inflater80.finished();
        int int82 = inflater80.getRemaining();
        boolean boolean83 = inflater80.finished();
        byte[] byteArray90 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater80.setInput(byteArray90);
        inflater76.setInput(byteArray90);
        int int93 = inflater20.inflate(byteArray90);
        int int94 = inflater9.inflate(byteArray90);
        inflater0.setInput(byteArray90);
        java.lang.Class<?> wildcardClass96 = byteArray90.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalIn();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsInput();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalIn();
        boolean boolean7 = inflater0.finished();
        boolean boolean8 = inflater0.needsInput();
        int int9 = inflater0.getRemaining();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsDictionary();
        long long14 = inflater10.getBytesRead();
        boolean boolean15 = inflater10.needsInput();
        boolean boolean16 = inflater10.finished();
        boolean boolean17 = inflater10.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        boolean boolean37 = inflater18.finished();
        int int38 = inflater18.getAdler();
        boolean boolean39 = inflater18.finished();
        int int40 = inflater18.getAdler();
        boolean boolean41 = inflater18.needsInput();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        int int46 = inflater42.getTotalIn();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int56 = inflater47.inflate(byteArray55);
        int int57 = inflater42.inflate(byteArray55);
        int int58 = inflater18.inflate(byteArray55);
        inflater10.setInput(byteArray55);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray55, (int) (byte) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        long long7 = inflater0.getBytesWritten();
        long long8 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.needsDictionary();
        int int11 = inflater9.getTotalOut();
        boolean boolean12 = inflater9.finished();
        boolean boolean13 = inflater9.needsDictionary();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        boolean boolean16 = inflater14.needsInput();
        boolean boolean17 = inflater14.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        long long22 = inflater18.getBytesRead();
        boolean boolean23 = inflater18.needsDictionary();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        long long28 = inflater24.getBytesWritten();
        inflater24.reset();
        long long30 = inflater24.getBytesWritten();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.needsDictionary();
        boolean boolean35 = inflater31.needsInput();
        int int36 = inflater31.getRemaining();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        int int49 = inflater31.inflate(byteArray47);
        inflater24.setInput(byteArray47);
        inflater18.setInput(byteArray47);
        int int52 = inflater14.inflate(byteArray47);
        int int53 = inflater9.inflate(byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray47, (int) (byte) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        boolean boolean6 = inflater0.finished();
        long long7 = inflater0.getBytesWritten();
        int int8 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        inflater9.end();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        inflater9.setInput(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray23, (int) 'a', 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        boolean boolean7 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        boolean boolean27 = inflater8.finished();
        int int28 = inflater8.getTotalOut();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        long long33 = inflater29.getBytesRead();
        boolean boolean34 = inflater29.needsDictionary();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        long long39 = inflater35.getBytesWritten();
        inflater35.reset();
        long long41 = inflater35.getBytesWritten();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        boolean boolean46 = inflater42.needsInput();
        int int47 = inflater42.getRemaining();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater48.setInput(byteArray58);
        int int60 = inflater42.inflate(byteArray58);
        inflater35.setInput(byteArray58);
        inflater29.setInput(byteArray58);
        int int63 = inflater8.inflate(byteArray58);
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.needsInput();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.finished();
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater68.setInput(byteArray78);
        inflater64.setInput(byteArray78);
        int int81 = inflater8.inflate(byteArray78);
        inflater0.setInput(byteArray78);
        int int83 = inflater0.getTotalIn();
        boolean boolean84 = inflater0.needsInput();
        int int85 = inflater0.getTotalOut();
        byte[] byteArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray86, 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        boolean boolean7 = inflater0.needsInput();
        int int8 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        int int5 = inflater0.getRemaining();
        int int6 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        int int10 = inflater7.getTotalOut();
        inflater7.reset();
        boolean boolean12 = inflater7.needsInput();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        long long17 = inflater13.getBytesRead();
        boolean boolean18 = inflater13.needsDictionary();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        long long23 = inflater19.getBytesWritten();
        inflater19.reset();
        long long25 = inflater19.getBytesWritten();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        boolean boolean30 = inflater26.needsInput();
        int int31 = inflater26.getRemaining();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        int int44 = inflater26.inflate(byteArray42);
        inflater19.setInput(byteArray42);
        inflater13.setInput(byteArray42);
        int int47 = inflater7.inflate(byteArray42);
        int int50 = inflater0.inflate(byteArray42, (int) (byte) 1, 1);
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        long long55 = inflater51.getBytesRead();
        inflater51.reset();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.needsDictionary();
        boolean boolean61 = inflater57.needsInput();
        boolean boolean62 = inflater57.needsDictionary();
        boolean boolean63 = inflater57.needsDictionary();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.finished();
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater64.setInput(byteArray74);
        int int76 = inflater57.inflate(byteArray74);
        int int77 = inflater51.inflate(byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray74, (int) (byte) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        boolean boolean4 = inflater1.needsInput();
        inflater1.reset();
        long long6 = inflater1.getBytesWritten();
        inflater1.reset();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        inflater8.end();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        inflater8.setInput(byteArray22);
        boolean boolean25 = inflater8.needsDictionary();
        boolean boolean26 = inflater8.finished();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.needsDictionary();
        int int29 = inflater27.getTotalOut();
        int int30 = inflater27.getTotalOut();
        int int31 = inflater27.getAdler();
        boolean boolean32 = inflater27.needsDictionary();
        int int33 = inflater27.getTotalOut();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        boolean boolean38 = inflater34.finished();
        inflater34.end();
        inflater34.end();
        boolean boolean41 = inflater34.needsInput();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        boolean boolean46 = inflater42.needsInput();
        int int47 = inflater42.getRemaining();
        inflater42.reset();
        boolean boolean49 = inflater42.needsDictionary();
        int int50 = inflater42.getTotalIn();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.needsDictionary();
        boolean boolean55 = inflater51.needsInput();
        int int56 = inflater51.getRemaining();
        inflater51.reset();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.needsDictionary();
        boolean boolean62 = inflater58.needsInput();
        int int63 = inflater58.getRemaining();
        inflater58.reset();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.finished();
        int int67 = inflater65.getRemaining();
        boolean boolean68 = inflater65.finished();
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater65.setInput(byteArray75);
        inflater58.setInput(byteArray75);
        int int80 = inflater51.inflate(byteArray75, 0, (int) (byte) 0);
        int int81 = inflater42.inflate(byteArray75);
        inflater34.setInput(byteArray75);
        int int85 = inflater27.inflate(byteArray75, 0, (int) (byte) 0);
        inflater8.setInput(byteArray75);
        java.util.zip.Inflater inflater87 = new java.util.zip.Inflater();
        byte[] byteArray89 = new byte[] { (byte) 1 };
        int int90 = inflater87.inflate(byteArray89);
        byte[] byteArray95 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int96 = inflater87.inflate(byteArray95);
        inflater8.setInput(byteArray95);
        int int98 = inflater0.inflate(byteArray95);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.end();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater(true);
        int int8 = inflater7.getRemaining();
        long long9 = inflater7.getBytesRead();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        inflater10.end();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        inflater10.setInput(byteArray24);
        inflater7.setInput(byteArray24, (int) (byte) 1, (int) (short) 1);
        int int30 = inflater7.getTotalIn();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.needsDictionary();
        boolean boolean35 = inflater31.needsInput();
        int int36 = inflater31.getRemaining();
        inflater31.reset();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        int int44 = inflater41.getTotalOut();
        inflater41.reset();
        boolean boolean46 = inflater41.needsInput();
        int int47 = inflater41.getRemaining();
        boolean boolean48 = inflater41.finished();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        boolean boolean53 = inflater49.finished();
        inflater49.end();
        inflater49.end();
        boolean boolean56 = inflater49.needsDictionary();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.needsInput();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.finished();
        int int63 = inflater61.getRemaining();
        boolean boolean64 = inflater61.finished();
        byte[] byteArray71 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater61.setInput(byteArray71);
        inflater57.setInput(byteArray71);
        inflater49.setInput(byteArray71);
        int int77 = inflater41.inflate(byteArray71, 6, (int) (short) 0);
        int int78 = inflater38.inflate(byteArray71);
        inflater31.setInput(byteArray71, (int) (byte) 0, (int) (byte) 1);
        int int84 = inflater7.inflate(byteArray71, 1, 0);
        inflater0.setInput(byteArray71);
        boolean boolean86 = inflater0.needsDictionary();
        int int87 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalIn();
        boolean boolean7 = inflater0.finished();
        boolean boolean8 = inflater0.needsInput();
        boolean boolean9 = inflater0.finished();
        long long10 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsDictionary();
        boolean boolean13 = inflater0.needsInput();
        inflater0.reset();
        byte[] byteArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray15, (int) (byte) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsInput();
        int int13 = inflater0.getTotalOut();
        int int14 = inflater0.getAdler();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.needsDictionary();
        boolean boolean19 = inflater15.needsInput();
        int int20 = inflater15.getRemaining();
        inflater15.reset();
        boolean boolean22 = inflater15.needsInput();
        inflater15.reset();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        long long28 = inflater24.getBytesRead();
        boolean boolean29 = inflater24.needsInput();
        int int30 = inflater24.getTotalOut();
        long long31 = inflater24.getBytesRead();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        inflater32.reset();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        inflater32.setInput(byteArray49);
        int int54 = inflater24.inflate(byteArray49, 1, (int) (short) 1);
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        int int59 = inflater55.getAdler();
        int int60 = inflater55.getAdler();
        int int61 = inflater55.getAdler();
        int int62 = inflater55.getTotalOut();
        inflater55.reset();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.needsDictionary();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.needsDictionary();
        boolean boolean70 = inflater66.needsInput();
        int int71 = inflater66.getRemaining();
        inflater66.reset();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        boolean boolean74 = inflater73.finished();
        int int75 = inflater73.getRemaining();
        boolean boolean76 = inflater73.finished();
        byte[] byteArray83 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater73.setInput(byteArray83);
        inflater66.setInput(byteArray83);
        inflater64.setInput(byteArray83);
        inflater55.setInput(byteArray83, (int) (byte) 0, 0);
        int int90 = inflater24.inflate(byteArray83);
        int int91 = inflater15.inflate(byteArray83);
        inflater0.setInput(byteArray83);
        int int93 = inflater0.getRemaining();
        java.lang.Class<?> wildcardClass94 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 6 + "'", int93 == 6);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getTotalOut();
        boolean boolean8 = inflater0.needsDictionary();
        inflater0.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater(true);
        int int12 = inflater11.getRemaining();
        long long13 = inflater11.getBytesRead();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        inflater14.end();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        inflater14.setInput(byteArray28);
        inflater11.setInput(byteArray28, (int) (byte) 1, (int) (short) 1);
        int int34 = inflater11.getTotalIn();
        int int35 = inflater11.getRemaining();
        int int36 = inflater11.getAdler();
        inflater11.end();
        inflater11.end();
        boolean boolean39 = inflater11.finished();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        inflater44.end();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater48.setInput(byteArray58);
        inflater44.setInput(byteArray58);
        int int61 = inflater40.inflate(byteArray58);
        inflater11.setInput(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray58, (int) (short) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        boolean boolean27 = inflater8.finished();
        int int28 = inflater8.getTotalOut();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        long long33 = inflater29.getBytesRead();
        boolean boolean34 = inflater29.needsDictionary();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        long long39 = inflater35.getBytesWritten();
        inflater35.reset();
        long long41 = inflater35.getBytesWritten();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        boolean boolean46 = inflater42.needsInput();
        int int47 = inflater42.getRemaining();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater48.setInput(byteArray58);
        int int60 = inflater42.inflate(byteArray58);
        inflater35.setInput(byteArray58);
        inflater29.setInput(byteArray58);
        int int63 = inflater8.inflate(byteArray58);
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.needsInput();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.finished();
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater68.setInput(byteArray78);
        inflater64.setInput(byteArray78);
        int int81 = inflater8.inflate(byteArray78);
        inflater0.setInput(byteArray78);
        int int83 = inflater0.getTotalIn();
        byte[] byteArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int85 = inflater0.inflate(byteArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        int int21 = inflater0.inflate(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        long long23 = inflater0.getBytesRead();
        int int24 = inflater0.getRemaining();
        int int25 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsInput();
        boolean boolean22 = inflater0.needsDictionary();
        int int23 = inflater0.getTotalIn();
        boolean boolean24 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getTotalOut();
        int int7 = inflater0.getRemaining();
        int int8 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        int int56 = inflater0.getAdler();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater(true);
        inflater58.end();
        boolean boolean60 = inflater58.finished();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.finished();
        int int63 = inflater61.getRemaining();
        boolean boolean64 = inflater61.needsDictionary();
        boolean boolean65 = inflater61.needsInput();
        boolean boolean66 = inflater61.needsDictionary();
        boolean boolean67 = inflater61.finished();
        int int68 = inflater61.getTotalIn();
        int int69 = inflater61.getRemaining();
        long long70 = inflater61.getBytesWritten();
        int int71 = inflater61.getTotalOut();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        boolean boolean73 = inflater72.finished();
        int int74 = inflater72.getRemaining();
        inflater72.end();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        boolean boolean77 = inflater76.finished();
        int int78 = inflater76.getRemaining();
        boolean boolean79 = inflater76.finished();
        byte[] byteArray86 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater76.setInput(byteArray86);
        inflater72.setInput(byteArray86);
        int int89 = inflater61.inflate(byteArray86);
        inflater58.setInput(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray86, 2, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.needsInput();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        boolean boolean27 = inflater8.finished();
        int int28 = inflater8.getAdler();
        boolean boolean29 = inflater8.finished();
        int int30 = inflater8.getAdler();
        boolean boolean31 = inflater8.needsInput();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        int int36 = inflater32.getTotalIn();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int46 = inflater37.inflate(byteArray45);
        int int47 = inflater32.inflate(byteArray45);
        int int48 = inflater8.inflate(byteArray45);
        inflater0.setInput(byteArray45);
        int int50 = inflater0.getAdler();
        long long51 = inflater0.getBytesWritten();
        long long52 = inflater0.getBytesWritten();
        long long53 = inflater0.getBytesWritten();
        boolean boolean54 = inflater0.needsDictionary();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        inflater0.reset();
        int int7 = inflater0.getAdler();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.needsDictionary();
        int int10 = inflater8.getTotalOut();
        int int11 = inflater8.getTotalOut();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getTotalIn();
        int int14 = inflater8.getTotalOut();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        int int19 = inflater15.getAdler();
        inflater15.reset();
        long long21 = inflater15.getBytesWritten();
        inflater15.end();
        boolean boolean23 = inflater15.needsInput();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.needsDictionary();
        int int26 = inflater24.getTotalOut();
        int int27 = inflater24.getTotalOut();
        long long28 = inflater24.getBytesWritten();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        int int47 = inflater29.inflate(byteArray45);
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.finished();
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater52.setInput(byteArray62);
        inflater48.setInput(byteArray62);
        inflater29.setInput(byteArray62);
        int int66 = inflater24.inflate(byteArray62);
        inflater15.setInput(byteArray62, (int) (byte) 0, (int) (byte) 0);
        int int70 = inflater8.inflate(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getAdler();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        int int11 = inflater8.getTotalOut();
        inflater8.reset();
        int int13 = inflater8.getTotalOut();
        int int14 = inflater8.getTotalIn();
        int int15 = inflater8.getAdler();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        int int20 = inflater16.getTotalIn();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int30 = inflater21.inflate(byteArray29);
        int int31 = inflater16.inflate(byteArray29);
        int int32 = inflater16.getTotalOut();
        int int33 = inflater16.getTotalOut();
        long long34 = inflater16.getBytesRead();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        long long39 = inflater35.getBytesRead();
        boolean boolean40 = inflater35.finished();
        long long41 = inflater35.getBytesRead();
        boolean boolean42 = inflater35.needsDictionary();
        boolean boolean43 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.needsDictionary();
        int int46 = inflater44.getTotalOut();
        int int47 = inflater44.getTotalOut();
        boolean boolean48 = inflater44.needsInput();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        inflater49.reset();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        int int58 = inflater54.getTotalIn();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int68 = inflater59.inflate(byteArray67);
        int int69 = inflater54.inflate(byteArray67);
        inflater49.setInput(byteArray67);
        inflater44.setInput(byteArray67);
        int int72 = inflater35.inflate(byteArray67);
        inflater16.setInput(byteArray67);
        int int74 = inflater8.inflate(byteArray67);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray67, 0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsInput();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        inflater9.setInput(byteArray23);
        int int26 = inflater9.getRemaining();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        boolean boolean31 = inflater27.needsInput();
        int int32 = inflater27.getRemaining();
        inflater27.reset();
        boolean boolean34 = inflater27.needsDictionary();
        int int35 = inflater27.getTotalOut();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        boolean boolean40 = inflater36.finished();
        inflater36.end();
        inflater36.end();
        boolean boolean43 = inflater36.needsInput();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        boolean boolean48 = inflater44.needsInput();
        int int49 = inflater44.getRemaining();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.finished();
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater50.setInput(byteArray60);
        int int62 = inflater44.inflate(byteArray60);
        boolean boolean63 = inflater44.finished();
        int int64 = inflater44.getAdler();
        boolean boolean65 = inflater44.finished();
        int int66 = inflater44.getAdler();
        boolean boolean67 = inflater44.needsInput();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        byte[] byteArray70 = new byte[] { (byte) 1 };
        int int71 = inflater68.inflate(byteArray70);
        int int72 = inflater68.getTotalIn();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        byte[] byteArray75 = new byte[] { (byte) 1 };
        int int76 = inflater73.inflate(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int82 = inflater73.inflate(byteArray81);
        int int83 = inflater68.inflate(byteArray81);
        int int84 = inflater44.inflate(byteArray81);
        inflater36.setInput(byteArray81, (int) (byte) 0, (int) (short) 1);
        int int88 = inflater27.inflate(byteArray81);
        inflater9.setInput(byteArray81);
        inflater0.setInput(byteArray81);
        int int91 = inflater0.getTotalOut();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        int int6 = inflater0.getAdler();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        int int15 = inflater0.inflate(byteArray13);
        boolean boolean16 = inflater0.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater(true);
        int int19 = inflater18.getRemaining();
        long long20 = inflater18.getBytesRead();
        boolean boolean21 = inflater18.needsInput();
        inflater18.reset();
        boolean boolean23 = inflater18.needsInput();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater(true);
        int int26 = inflater25.getRemaining();
        long long27 = inflater25.getBytesRead();
        int int28 = inflater25.getTotalIn();
        int int29 = inflater25.getRemaining();
        boolean boolean30 = inflater25.needsInput();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.needsDictionary();
        int int33 = inflater31.getTotalOut();
        int int34 = inflater31.getTotalOut();
        int int35 = inflater31.getAdler();
        boolean boolean36 = inflater31.needsDictionary();
        int int37 = inflater31.getTotalOut();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        boolean boolean42 = inflater38.finished();
        inflater38.end();
        inflater38.end();
        boolean boolean45 = inflater38.needsInput();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.needsDictionary();
        boolean boolean50 = inflater46.needsInput();
        int int51 = inflater46.getRemaining();
        inflater46.reset();
        boolean boolean53 = inflater46.needsDictionary();
        int int54 = inflater46.getTotalIn();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.needsDictionary();
        boolean boolean59 = inflater55.needsInput();
        int int60 = inflater55.getRemaining();
        inflater55.reset();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsDictionary();
        boolean boolean66 = inflater62.needsInput();
        int int67 = inflater62.getRemaining();
        inflater62.reset();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.finished();
        byte[] byteArray79 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater69.setInput(byteArray79);
        inflater62.setInput(byteArray79);
        int int84 = inflater55.inflate(byteArray79, 0, (int) (byte) 0);
        int int85 = inflater46.inflate(byteArray79);
        inflater38.setInput(byteArray79);
        int int89 = inflater31.inflate(byteArray79, 0, (int) (byte) 0);
        inflater25.setDictionary(byteArray79);
        inflater18.setDictionary(byteArray79, (int) (byte) 0, 2);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        inflater0.reset();
        int int3 = inflater0.getAdler();
        boolean boolean4 = inflater0.needsDictionary();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        inflater0.reset();
        int int23 = inflater0.getRemaining();
        boolean boolean24 = inflater0.finished();
        boolean boolean25 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        int int29 = inflater26.getTotalOut();
        inflater26.reset();
        int int31 = inflater26.getTotalOut();
        int int32 = inflater26.getTotalIn();
        int int33 = inflater26.getAdler();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        int int38 = inflater34.getTotalIn();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        byte[] byteArray41 = new byte[] { (byte) 1 };
        int int42 = inflater39.inflate(byteArray41);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int48 = inflater39.inflate(byteArray47);
        int int49 = inflater34.inflate(byteArray47);
        int int50 = inflater34.getTotalOut();
        int int51 = inflater34.getTotalOut();
        long long52 = inflater34.getBytesRead();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.finished();
        long long57 = inflater53.getBytesRead();
        boolean boolean58 = inflater53.finished();
        long long59 = inflater53.getBytesRead();
        boolean boolean60 = inflater53.needsDictionary();
        boolean boolean61 = inflater53.needsDictionary();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.needsDictionary();
        int int64 = inflater62.getTotalOut();
        int int65 = inflater62.getTotalOut();
        boolean boolean66 = inflater62.needsInput();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        inflater67.reset();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        byte[] byteArray74 = new byte[] { (byte) 1 };
        int int75 = inflater72.inflate(byteArray74);
        int int76 = inflater72.getTotalIn();
        java.util.zip.Inflater inflater77 = new java.util.zip.Inflater();
        byte[] byteArray79 = new byte[] { (byte) 1 };
        int int80 = inflater77.inflate(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int86 = inflater77.inflate(byteArray85);
        int int87 = inflater72.inflate(byteArray85);
        inflater67.setInput(byteArray85);
        inflater62.setInput(byteArray85);
        int int90 = inflater53.inflate(byteArray85);
        inflater34.setInput(byteArray85);
        int int92 = inflater26.inflate(byteArray85);
        int int93 = inflater0.inflate(byteArray85);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        int int21 = inflater0.inflate(byteArray18);
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int31 = inflater22.inflate(byteArray30);
        boolean boolean32 = inflater22.needsInput();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater(true);
        int int35 = inflater34.getRemaining();
        long long36 = inflater34.getBytesRead();
        int int37 = inflater34.getTotalIn();
        long long38 = inflater34.getBytesWritten();
        int int39 = inflater34.getTotalIn();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        inflater40.reset();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        int int49 = inflater45.getTotalIn();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        byte[] byteArray52 = new byte[] { (byte) 1 };
        int int53 = inflater50.inflate(byteArray52);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int59 = inflater50.inflate(byteArray58);
        int int60 = inflater45.inflate(byteArray58);
        inflater40.setInput(byteArray58);
        int int62 = inflater34.inflate(byteArray58);
        inflater22.setInput(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = inflater0.inflate(byteArray58, 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        int int8 = inflater0.getTotalOut();
        int int9 = inflater0.getAdler();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        inflater15.end();
        boolean boolean19 = inflater15.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        inflater15.setInput(byteArray22);
        inflater10.setInput(byteArray22);
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        int int30 = inflater26.getTotalIn();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int40 = inflater31.inflate(byteArray39);
        int int41 = inflater26.inflate(byteArray39);
        int int42 = inflater26.getTotalOut();
        int int43 = inflater26.getTotalOut();
        long long44 = inflater26.getBytesRead();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        long long49 = inflater45.getBytesRead();
        boolean boolean50 = inflater45.finished();
        long long51 = inflater45.getBytesRead();
        boolean boolean52 = inflater45.needsDictionary();
        boolean boolean53 = inflater45.needsDictionary();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.needsDictionary();
        int int56 = inflater54.getTotalOut();
        int int57 = inflater54.getTotalOut();
        boolean boolean58 = inflater54.needsInput();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        inflater59.reset();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        int int68 = inflater64.getTotalIn();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        byte[] byteArray71 = new byte[] { (byte) 1 };
        int int72 = inflater69.inflate(byteArray71);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int78 = inflater69.inflate(byteArray77);
        int int79 = inflater64.inflate(byteArray77);
        inflater59.setInput(byteArray77);
        inflater54.setInput(byteArray77);
        int int82 = inflater45.inflate(byteArray77);
        inflater26.setInput(byteArray77);
        inflater10.setInput(byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalOut();
        int int10 = inflater0.getTotalOut();
        boolean boolean11 = inflater0.needsInput();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        int int16 = inflater12.getTotalIn();
        long long17 = inflater12.getBytesWritten();
        long long18 = inflater12.getBytesRead();
        int int19 = inflater12.getAdler();
        int int20 = inflater12.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        inflater21.end();
        boolean boolean25 = inflater21.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        long long30 = inflater26.getBytesRead();
        boolean boolean31 = inflater26.needsInput();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        long long36 = inflater32.getBytesWritten();
        inflater32.reset();
        long long38 = inflater32.getBytesWritten();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.needsDictionary();
        boolean boolean43 = inflater39.needsInput();
        int int44 = inflater39.getRemaining();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater45.setInput(byteArray55);
        int int57 = inflater39.inflate(byteArray55);
        inflater32.setInput(byteArray55);
        int int59 = inflater26.inflate(byteArray55);
        inflater21.setInput(byteArray55);
        inflater12.setInput(byteArray55);
        inflater0.setInput(byteArray55);
        long long63 = inflater0.getBytesRead();
        int int64 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getRemaining();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        inflater7.reset();
        long long14 = inflater7.getBytesWritten();
        long long15 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        int int20 = inflater16.getAdler();
        boolean boolean21 = inflater16.finished();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        inflater22.reset();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater22.setInput(byteArray50);
        inflater16.setInput(byteArray50, (int) (byte) 0, 1);
        int int58 = inflater16.getTotalIn();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        int int63 = inflater59.getTotalOut();
        boolean boolean64 = inflater59.needsInput();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.finished();
        int int67 = inflater65.getRemaining();
        inflater65.end();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.finished();
        byte[] byteArray79 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater69.setInput(byteArray79);
        inflater65.setInput(byteArray79);
        inflater59.setInput(byteArray79);
        inflater16.setInput(byteArray79);
        inflater7.setInput(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray79, (int) (byte) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        int int11 = inflater7.getTotalIn();
        long long12 = inflater7.getBytesWritten();
        int int13 = inflater7.getAdler();
        boolean boolean14 = inflater7.needsInput();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        inflater15.end();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        inflater15.setInput(byteArray29);
        boolean boolean32 = inflater15.needsDictionary();
        boolean boolean33 = inflater15.finished();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.needsDictionary();
        int int36 = inflater34.getTotalOut();
        int int37 = inflater34.getTotalOut();
        int int38 = inflater34.getAdler();
        boolean boolean39 = inflater34.needsDictionary();
        int int40 = inflater34.getTotalOut();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        boolean boolean45 = inflater41.finished();
        inflater41.end();
        inflater41.end();
        boolean boolean48 = inflater41.needsInput();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.needsDictionary();
        boolean boolean53 = inflater49.needsInput();
        int int54 = inflater49.getRemaining();
        inflater49.reset();
        boolean boolean56 = inflater49.needsDictionary();
        int int57 = inflater49.getTotalIn();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.needsDictionary();
        boolean boolean62 = inflater58.needsInput();
        int int63 = inflater58.getRemaining();
        inflater58.reset();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.finished();
        int int67 = inflater65.getRemaining();
        boolean boolean68 = inflater65.needsDictionary();
        boolean boolean69 = inflater65.needsInput();
        int int70 = inflater65.getRemaining();
        inflater65.reset();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        boolean boolean73 = inflater72.finished();
        int int74 = inflater72.getRemaining();
        boolean boolean75 = inflater72.finished();
        byte[] byteArray82 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater72.setInput(byteArray82);
        inflater65.setInput(byteArray82);
        int int87 = inflater58.inflate(byteArray82, 0, (int) (byte) 0);
        int int88 = inflater49.inflate(byteArray82);
        inflater41.setInput(byteArray82);
        int int92 = inflater34.inflate(byteArray82, 0, (int) (byte) 0);
        inflater15.setInput(byteArray82);
        int int94 = inflater7.inflate(byteArray82);
        inflater0.setInput(byteArray82);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getTotalOut();
        boolean boolean18 = inflater0.needsDictionary();
        inflater0.reset();
        boolean boolean20 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsInput();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        inflater18.reset();
        boolean boolean25 = inflater18.needsDictionary();
        int int26 = inflater18.getTotalOut();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        boolean boolean31 = inflater27.finished();
        inflater27.end();
        inflater27.end();
        boolean boolean34 = inflater27.needsInput();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        boolean boolean39 = inflater35.needsInput();
        int int40 = inflater35.getRemaining();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.finished();
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater41.setInput(byteArray51);
        int int53 = inflater35.inflate(byteArray51);
        boolean boolean54 = inflater35.finished();
        int int55 = inflater35.getAdler();
        boolean boolean56 = inflater35.finished();
        int int57 = inflater35.getAdler();
        boolean boolean58 = inflater35.needsInput();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        int int63 = inflater59.getTotalIn();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int73 = inflater64.inflate(byteArray72);
        int int74 = inflater59.inflate(byteArray72);
        int int75 = inflater35.inflate(byteArray72);
        inflater27.setInput(byteArray72, (int) (byte) 0, (int) (short) 1);
        int int79 = inflater18.inflate(byteArray72);
        inflater0.setInput(byteArray72);
        int int81 = inflater0.getAdler();
        boolean boolean82 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        long long13 = inflater9.getBytesRead();
        boolean boolean14 = inflater9.finished();
        long long15 = inflater9.getBytesRead();
        boolean boolean16 = inflater9.needsDictionary();
        boolean boolean17 = inflater9.needsDictionary();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.needsDictionary();
        int int20 = inflater18.getTotalOut();
        int int21 = inflater18.getTotalOut();
        boolean boolean22 = inflater18.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        inflater23.reset();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        int int32 = inflater28.getTotalIn();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int42 = inflater33.inflate(byteArray41);
        int int43 = inflater28.inflate(byteArray41);
        inflater23.setInput(byteArray41);
        inflater18.setInput(byteArray41);
        int int46 = inflater9.inflate(byteArray41);
        inflater0.setInput(byteArray41, (int) (short) 0, (int) (byte) 1);
        int int50 = inflater0.getTotalOut();
        inflater0.reset();
        int int52 = inflater0.getTotalIn();
        int int53 = inflater0.getTotalOut();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        inflater0.setInput(byteArray19);
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getAdler();
        int int25 = inflater0.getTotalIn();
        boolean boolean26 = inflater0.needsInput();
        int int27 = inflater0.getTotalOut();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        int int5 = inflater0.getAdler();
        boolean boolean6 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        inflater0.reset();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        boolean boolean27 = inflater25.needsInput();
        boolean boolean28 = inflater25.needsInput();
        inflater25.reset();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater(false);
        int int32 = inflater31.getTotalIn();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        inflater33.reset();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        inflater33.setInput(byteArray50);
        int int53 = inflater33.getTotalOut();
        boolean boolean54 = inflater33.needsInput();
        boolean boolean55 = inflater33.needsInput();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsDictionary();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        inflater60.end();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.finished();
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater64.setInput(byteArray74);
        inflater60.setInput(byteArray74);
        int int77 = inflater56.inflate(byteArray74);
        inflater33.setInput(byteArray74, (int) (byte) 0, (int) (byte) 1);
        int int81 = inflater31.inflate(byteArray74);
        inflater25.setInput(byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = inflater0.inflate(byteArray74, (int) (short) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalIn();
        boolean boolean4 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass5 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getTotalIn();
        long long3 = inflater1.getBytesWritten();
        byte[] byteArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int5 = inflater1.inflate(byteArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        inflater0.reset();
        int int23 = inflater0.getAdler();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int38 = inflater29.inflate(byteArray37);
        int int39 = inflater24.inflate(byteArray37);
        int int40 = inflater24.getTotalOut();
        int int41 = inflater24.getTotalOut();
        long long42 = inflater24.getBytesRead();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        long long47 = inflater43.getBytesRead();
        boolean boolean48 = inflater43.finished();
        long long49 = inflater43.getBytesRead();
        boolean boolean50 = inflater43.needsDictionary();
        boolean boolean51 = inflater43.needsDictionary();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.needsDictionary();
        int int54 = inflater52.getTotalOut();
        int int55 = inflater52.getTotalOut();
        boolean boolean56 = inflater52.needsInput();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        inflater57.reset();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        int int66 = inflater62.getTotalIn();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int76 = inflater67.inflate(byteArray75);
        int int77 = inflater62.inflate(byteArray75);
        inflater57.setInput(byteArray75);
        inflater52.setInput(byteArray75);
        int int80 = inflater43.inflate(byteArray75);
        inflater24.setInput(byteArray75);
        int int82 = inflater0.inflate(byteArray75);
        inflater0.reset();
        int int84 = inflater0.getTotalIn();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.end();
        boolean boolean6 = inflater0.needsDictionary();
        inflater0.end();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater(true);
        int int10 = inflater9.getRemaining();
        long long11 = inflater9.getBytesRead();
        int int12 = inflater9.getTotalIn();
        long long13 = inflater9.getBytesWritten();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        long long18 = inflater14.getBytesRead();
        boolean boolean19 = inflater14.finished();
        inflater14.reset();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        boolean boolean25 = inflater21.needsInput();
        int int26 = inflater21.getRemaining();
        inflater21.reset();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater28.setInput(byteArray38);
        inflater21.setInput(byteArray38);
        int int41 = inflater14.inflate(byteArray38);
        inflater9.setInput(byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray38, (int) (short) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsInput();
        int int4 = inflater0.getRemaining();
        long long5 = inflater0.getBytesWritten();
        java.lang.Class<?> wildcardClass6 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        int int15 = inflater0.inflate(byteArray13);
        int int16 = inflater0.getRemaining();
        int int17 = inflater0.getAdler();
        int int18 = inflater0.getTotalIn();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        long long10 = inflater6.getBytesRead();
        boolean boolean11 = inflater6.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        long long16 = inflater12.getBytesWritten();
        inflater12.reset();
        long long18 = inflater12.getBytesWritten();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsDictionary();
        boolean boolean23 = inflater19.needsInput();
        int int24 = inflater19.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.finished();
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater25.setInput(byteArray35);
        int int37 = inflater19.inflate(byteArray35);
        inflater12.setInput(byteArray35);
        inflater6.setInput(byteArray35);
        int int40 = inflater0.inflate(byteArray35);
        long long41 = inflater0.getBytesWritten();
        int int42 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater43.setInput(byteArray53);
        inflater43.end();
        int int56 = inflater43.getRemaining();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.finished();
        int int61 = inflater57.getAdler();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        inflater62.end();
        boolean boolean66 = inflater62.needsInput();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        inflater62.setInput(byteArray69);
        int int72 = inflater57.inflate(byteArray69);
        inflater43.setInput(byteArray69);
        inflater0.setInput(byteArray69);
        boolean boolean75 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getAdler();
        boolean boolean8 = inflater0.needsInput();
        long long9 = inflater0.getBytesWritten();
        boolean boolean10 = inflater0.needsInput();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getTotalOut();
        int int6 = inflater0.getAdler();
        boolean boolean7 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getAdler();
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getAdler();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        int int10 = inflater6.getTotalOut();
        boolean boolean11 = inflater6.needsInput();
        boolean boolean12 = inflater6.finished();
        boolean boolean13 = inflater6.finished();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        int int32 = inflater14.inflate(byteArray30);
        boolean boolean33 = inflater14.finished();
        int int34 = inflater14.getTotalIn();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        boolean boolean39 = inflater35.needsInput();
        int int40 = inflater35.getRemaining();
        inflater35.reset();
        boolean boolean42 = inflater35.needsDictionary();
        int int43 = inflater35.getTotalIn();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        boolean boolean48 = inflater44.needsInput();
        int int49 = inflater44.getRemaining();
        inflater44.reset();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.needsDictionary();
        boolean boolean55 = inflater51.needsInput();
        int int56 = inflater51.getRemaining();
        inflater51.reset();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.finished();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater58.setInput(byteArray68);
        inflater51.setInput(byteArray68);
        int int73 = inflater44.inflate(byteArray68, 0, (int) (byte) 0);
        int int74 = inflater35.inflate(byteArray68);
        int int75 = inflater14.inflate(byteArray68);
        inflater6.setInput(byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray68, (int) (short) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        inflater0.reset();
        boolean boolean8 = inflater0.needsDictionary();
        boolean boolean9 = inflater0.finished();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.finished();
        inflater0.reset();
        int int26 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        int int5 = inflater0.getTotalOut();
        long long6 = inflater0.getBytesWritten();
        boolean boolean7 = inflater0.finished();
        int int8 = inflater0.getTotalIn();
        int int9 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesWritten();
        long long8 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        boolean boolean13 = inflater9.finished();
        int int14 = inflater9.getRemaining();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        int int19 = inflater15.getAdler();
        boolean boolean20 = inflater15.finished();
        long long21 = inflater15.getBytesWritten();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        boolean boolean24 = inflater22.needsInput();
        boolean boolean25 = inflater22.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        long long30 = inflater26.getBytesRead();
        boolean boolean31 = inflater26.needsDictionary();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        long long36 = inflater32.getBytesWritten();
        inflater32.reset();
        long long38 = inflater32.getBytesWritten();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.needsDictionary();
        boolean boolean43 = inflater39.needsInput();
        int int44 = inflater39.getRemaining();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater45.setInput(byteArray55);
        int int57 = inflater39.inflate(byteArray55);
        inflater32.setInput(byteArray55);
        inflater26.setInput(byteArray55);
        int int60 = inflater22.inflate(byteArray55);
        int int61 = inflater15.inflate(byteArray55);
        inflater9.setInput(byteArray55);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray55, (int) (byte) 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getAdler();
        boolean boolean4 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        int int10 = inflater5.getRemaining();
        inflater5.reset();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        inflater5.setInput(byteArray22);
        int int25 = inflater5.getRemaining();
        boolean boolean26 = inflater5.finished();
        inflater5.reset();
        int int28 = inflater5.getAdler();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        int int33 = inflater29.getTotalIn();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int43 = inflater34.inflate(byteArray42);
        int int44 = inflater29.inflate(byteArray42);
        int int45 = inflater29.getTotalOut();
        int int46 = inflater29.getTotalOut();
        long long47 = inflater29.getBytesRead();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        long long52 = inflater48.getBytesRead();
        boolean boolean53 = inflater48.finished();
        long long54 = inflater48.getBytesRead();
        boolean boolean55 = inflater48.needsDictionary();
        boolean boolean56 = inflater48.needsDictionary();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.needsDictionary();
        int int59 = inflater57.getTotalOut();
        int int60 = inflater57.getTotalOut();
        boolean boolean61 = inflater57.needsInput();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        inflater62.reset();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        int int71 = inflater67.getTotalIn();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        byte[] byteArray74 = new byte[] { (byte) 1 };
        int int75 = inflater72.inflate(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int81 = inflater72.inflate(byteArray80);
        int int82 = inflater67.inflate(byteArray80);
        inflater62.setInput(byteArray80);
        inflater57.setInput(byteArray80);
        int int85 = inflater48.inflate(byteArray80);
        inflater29.setInput(byteArray80);
        int int87 = inflater5.inflate(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray80, (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        inflater19.setInput(byteArray33);
        inflater0.setInput(byteArray33);
        long long37 = inflater0.getBytesRead();
        inflater0.reset();
        boolean boolean39 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalIn();
        boolean boolean7 = inflater0.needsDictionary();
        int int8 = inflater0.getTotalOut();
        boolean boolean9 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        boolean boolean2 = inflater0.needsInput();
        boolean boolean3 = inflater0.needsInput();
        boolean boolean4 = inflater0.needsInput();
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        boolean boolean7 = inflater0.finished();
        int int8 = inflater0.getTotalOut();
        boolean boolean9 = inflater0.needsInput();
        boolean boolean10 = inflater0.needsInput();
        long long11 = inflater0.getBytesRead();
        boolean boolean12 = inflater0.needsInput();
        java.lang.Class<?> wildcardClass13 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        long long5 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater(true);
        int int8 = inflater7.getRemaining();
        long long9 = inflater7.getBytesRead();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        inflater10.end();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        inflater10.setInput(byteArray24);
        inflater7.setInput(byteArray24, (int) (byte) 1, (int) (short) 1);
        int int30 = inflater0.inflate(byteArray24);
        boolean boolean31 = inflater0.needsInput();
        boolean boolean32 = inflater0.needsInput();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        int int51 = inflater33.inflate(byteArray49);
        boolean boolean52 = inflater33.finished();
        int int53 = inflater33.getAdler();
        boolean boolean54 = inflater33.finished();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.needsDictionary();
        long long59 = inflater55.getBytesRead();
        boolean boolean60 = inflater55.needsDictionary();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        byte[] byteArray63 = new byte[] { (byte) 1 };
        int int64 = inflater61.inflate(byteArray63);
        long long65 = inflater61.getBytesWritten();
        inflater61.reset();
        long long67 = inflater61.getBytesWritten();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.needsDictionary();
        boolean boolean72 = inflater68.needsInput();
        int int73 = inflater68.getRemaining();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        int int76 = inflater74.getRemaining();
        boolean boolean77 = inflater74.finished();
        byte[] byteArray84 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater74.setInput(byteArray84);
        int int86 = inflater68.inflate(byteArray84);
        inflater61.setInput(byteArray84);
        inflater55.setInput(byteArray84);
        inflater33.setInput(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray84, 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        boolean boolean3 = inflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getAdler();
        boolean boolean7 = inflater0.needsInput();
        long long8 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        int int13 = inflater9.getAdler();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        inflater14.end();
        boolean boolean18 = inflater14.needsInput();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        inflater14.setInput(byteArray21);
        int int24 = inflater9.inflate(byteArray21);
        inflater0.setInput(byteArray21);
        int int26 = inflater0.getRemaining();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        int int31 = inflater27.getAdler();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsInput();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater36.setInput(byteArray46);
        inflater32.setInput(byteArray46);
        inflater27.setInput(byteArray46);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray46, (int) '#', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        inflater0.reset();
        long long28 = inflater0.getBytesWritten();
        int int29 = inflater0.getRemaining();
        long long30 = inflater0.getBytesWritten();
        long long31 = inflater0.getBytesWritten();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.needsInput();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getRemaining();
        long long25 = inflater0.getBytesWritten();
        int int26 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        int int5 = inflater0.getTotalIn();
        inflater0.reset();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getTotalOut();
        long long9 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        inflater0.end();
        boolean boolean22 = inflater0.finished();
        boolean boolean23 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        boolean boolean6 = inflater0.needsDictionary();
        int int7 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        boolean boolean8 = inflater0.finished();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        int int21 = inflater0.inflate(byteArray19);
        int int22 = inflater0.getTotalOut();
        int int23 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        long long23 = inflater0.getBytesWritten();
        long long24 = inflater0.getBytesWritten();
        int int25 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater(true);
        int int28 = inflater27.getRemaining();
        long long29 = inflater27.getBytesRead();
        int int30 = inflater27.getTotalIn();
        long long31 = inflater27.getBytesWritten();
        boolean boolean32 = inflater27.finished();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        int int37 = inflater33.getAdler();
        boolean boolean38 = inflater33.finished();
        long long39 = inflater33.getBytesWritten();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        boolean boolean42 = inflater40.needsInput();
        boolean boolean43 = inflater40.needsInput();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        long long48 = inflater44.getBytesRead();
        boolean boolean49 = inflater44.needsDictionary();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        byte[] byteArray52 = new byte[] { (byte) 1 };
        int int53 = inflater50.inflate(byteArray52);
        long long54 = inflater50.getBytesWritten();
        inflater50.reset();
        long long56 = inflater50.getBytesWritten();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.needsDictionary();
        boolean boolean61 = inflater57.needsInput();
        int int62 = inflater57.getRemaining();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.finished();
        int int65 = inflater63.getRemaining();
        boolean boolean66 = inflater63.finished();
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater63.setInput(byteArray73);
        int int75 = inflater57.inflate(byteArray73);
        inflater50.setInput(byteArray73);
        inflater44.setInput(byteArray73);
        int int78 = inflater40.inflate(byteArray73);
        int int79 = inflater33.inflate(byteArray73);
        inflater27.setInput(byteArray73, 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        int int5 = inflater2.inflate(byteArray4);
        int int6 = inflater2.getTotalIn();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        inflater7.end();
        boolean boolean11 = inflater7.needsInput();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        inflater7.setInput(byteArray14);
        inflater2.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        inflater0.end();
        boolean boolean22 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        long long27 = inflater23.getBytesRead();
        boolean boolean28 = inflater23.needsInput();
        int int29 = inflater23.getTotalIn();
        long long30 = inflater23.getBytesRead();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        inflater31.setInput(byteArray45);
        int int48 = inflater31.getAdler();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        boolean boolean53 = inflater49.finished();
        int int54 = inflater49.getRemaining();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        byte[] byteArray57 = new byte[] { (byte) 1 };
        int int58 = inflater55.inflate(byteArray57);
        inflater55.reset();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        byte[] byteArray62 = new byte[] { (byte) 1 };
        int int63 = inflater60.inflate(byteArray62);
        int int64 = inflater60.getTotalIn();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        byte[] byteArray67 = new byte[] { (byte) 1 };
        int int68 = inflater65.inflate(byteArray67);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int74 = inflater65.inflate(byteArray73);
        int int75 = inflater60.inflate(byteArray73);
        inflater55.setInput(byteArray73);
        inflater49.setInput(byteArray73);
        inflater31.setInput(byteArray73);
        int int79 = inflater23.inflate(byteArray73);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray73, (int) '#', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater0.setInput(byteArray7);
        int int10 = inflater0.getRemaining();
        boolean boolean11 = inflater0.needsDictionary();
        int int12 = inflater0.getRemaining();
        boolean boolean13 = inflater0.finished();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater(true);
        int int16 = inflater15.getRemaining();
        long long17 = inflater15.getBytesRead();
        boolean boolean18 = inflater15.needsInput();
        inflater15.reset();
        long long20 = inflater15.getBytesRead();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        boolean boolean25 = inflater21.finished();
        inflater21.end();
        inflater21.end();
        boolean boolean28 = inflater21.needsInput();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        int int47 = inflater29.inflate(byteArray45);
        boolean boolean48 = inflater29.finished();
        int int49 = inflater29.getAdler();
        boolean boolean50 = inflater29.finished();
        int int51 = inflater29.getAdler();
        boolean boolean52 = inflater29.needsInput();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        byte[] byteArray55 = new byte[] { (byte) 1 };
        int int56 = inflater53.inflate(byteArray55);
        int int57 = inflater53.getTotalIn();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        byte[] byteArray60 = new byte[] { (byte) 1 };
        int int61 = inflater58.inflate(byteArray60);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int67 = inflater58.inflate(byteArray66);
        int int68 = inflater53.inflate(byteArray66);
        int int69 = inflater29.inflate(byteArray66);
        inflater21.setInput(byteArray66, (int) (byte) 0, (int) (short) 1);
        inflater15.setDictionary(byteArray66);
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        int int76 = inflater74.getRemaining();
        boolean boolean77 = inflater74.needsDictionary();
        boolean boolean78 = inflater74.needsInput();
        int int79 = inflater74.getRemaining();
        inflater74.reset();
        java.util.zip.Inflater inflater81 = new java.util.zip.Inflater();
        boolean boolean82 = inflater81.finished();
        int int83 = inflater81.getRemaining();
        boolean boolean84 = inflater81.finished();
        byte[] byteArray91 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater81.setInput(byteArray91);
        inflater74.setInput(byteArray91);
        inflater15.setInput(byteArray91);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray91, (-1), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalIn();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsInput();
        int int8 = inflater0.getAdler();
        int int9 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        long long15 = inflater10.getBytesWritten();
        int int16 = inflater10.getAdler();
        boolean boolean17 = inflater10.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        inflater18.end();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.finished();
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater22.setInput(byteArray32);
        inflater18.setInput(byteArray32);
        boolean boolean35 = inflater18.needsDictionary();
        boolean boolean36 = inflater18.finished();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.needsDictionary();
        int int39 = inflater37.getTotalOut();
        int int40 = inflater37.getTotalOut();
        int int41 = inflater37.getAdler();
        boolean boolean42 = inflater37.needsDictionary();
        int int43 = inflater37.getTotalOut();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        int int47 = inflater44.inflate(byteArray46);
        boolean boolean48 = inflater44.finished();
        inflater44.end();
        inflater44.end();
        boolean boolean51 = inflater44.needsInput();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.needsDictionary();
        boolean boolean56 = inflater52.needsInput();
        int int57 = inflater52.getRemaining();
        inflater52.reset();
        boolean boolean59 = inflater52.needsDictionary();
        int int60 = inflater52.getTotalIn();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.finished();
        int int63 = inflater61.getRemaining();
        boolean boolean64 = inflater61.needsDictionary();
        boolean boolean65 = inflater61.needsInput();
        int int66 = inflater61.getRemaining();
        inflater61.reset();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.needsDictionary();
        boolean boolean72 = inflater68.needsInput();
        int int73 = inflater68.getRemaining();
        inflater68.reset();
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        boolean boolean76 = inflater75.finished();
        int int77 = inflater75.getRemaining();
        boolean boolean78 = inflater75.finished();
        byte[] byteArray85 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater75.setInput(byteArray85);
        inflater68.setInput(byteArray85);
        int int90 = inflater61.inflate(byteArray85, 0, (int) (byte) 0);
        int int91 = inflater52.inflate(byteArray85);
        inflater44.setInput(byteArray85);
        int int95 = inflater37.inflate(byteArray85, 0, (int) (byte) 0);
        inflater18.setInput(byteArray85);
        int int97 = inflater10.inflate(byteArray85);
        int int98 = inflater0.inflate(byteArray85);
        int int99 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        int int11 = inflater7.getAdler();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        inflater12.end();
        boolean boolean16 = inflater12.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        inflater12.setInput(byteArray19);
        int int22 = inflater7.inflate(byteArray19);
        int int23 = inflater7.getTotalOut();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        boolean boolean28 = inflater24.finished();
        inflater24.end();
        inflater24.end();
        boolean boolean31 = inflater24.needsInput();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater38.setInput(byteArray48);
        int int50 = inflater32.inflate(byteArray48);
        boolean boolean51 = inflater32.finished();
        int int52 = inflater32.getAdler();
        boolean boolean53 = inflater32.finished();
        int int54 = inflater32.getAdler();
        boolean boolean55 = inflater32.needsInput();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        byte[] byteArray58 = new byte[] { (byte) 1 };
        int int59 = inflater56.inflate(byteArray58);
        int int60 = inflater56.getTotalIn();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        byte[] byteArray63 = new byte[] { (byte) 1 };
        int int64 = inflater61.inflate(byteArray63);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int70 = inflater61.inflate(byteArray69);
        int int71 = inflater56.inflate(byteArray69);
        int int72 = inflater32.inflate(byteArray69);
        inflater24.setInput(byteArray69, (int) (byte) 0, (int) (short) 1);
        inflater7.setInput(byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            int int79 = inflater0.inflate(byteArray69, (int) (short) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        boolean boolean7 = inflater0.finished();
        int int8 = inflater0.getTotalOut();
        boolean boolean9 = inflater0.needsInput();
        boolean boolean10 = inflater0.needsInput();
        int int11 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        int int10 = inflater6.getAdler();
        boolean boolean11 = inflater6.finished();
        long long12 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        boolean boolean15 = inflater13.needsInput();
        boolean boolean16 = inflater13.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        long long21 = inflater17.getBytesRead();
        boolean boolean22 = inflater17.needsDictionary();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        long long27 = inflater23.getBytesWritten();
        inflater23.reset();
        long long29 = inflater23.getBytesWritten();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        boolean boolean34 = inflater30.needsInput();
        int int35 = inflater30.getRemaining();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater36.setInput(byteArray46);
        int int48 = inflater30.inflate(byteArray46);
        inflater23.setInput(byteArray46);
        inflater17.setInput(byteArray46);
        int int51 = inflater13.inflate(byteArray46);
        int int52 = inflater6.inflate(byteArray46);
        inflater0.setInput(byteArray46);
        int int54 = inflater0.getAdler();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getRemaining();
        long long23 = inflater0.getBytesWritten();
        boolean boolean24 = inflater0.needsDictionary();
        int int25 = inflater0.getAdler();
        int int26 = inflater0.getAdler();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        int int30 = inflater27.getTotalOut();
        inflater27.reset();
        boolean boolean32 = inflater27.needsInput();
        int int33 = inflater27.getRemaining();
        boolean boolean34 = inflater27.finished();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        boolean boolean39 = inflater35.finished();
        inflater35.end();
        inflater35.end();
        boolean boolean42 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.needsInput();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.finished();
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater47.setInput(byteArray57);
        inflater43.setInput(byteArray57);
        inflater35.setInput(byteArray57);
        int int63 = inflater27.inflate(byteArray57, 6, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray57, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater5.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int24 = inflater15.inflate(byteArray23);
        int int25 = inflater10.inflate(byteArray23);
        inflater5.setInput(byteArray23);
        inflater0.setInput(byteArray23);
        int int28 = inflater0.getTotalOut();
        boolean boolean29 = inflater0.needsInput();
        boolean boolean30 = inflater0.needsInput();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater(true);
        int int33 = inflater32.getRemaining();
        long long34 = inflater32.getBytesRead();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        int int39 = inflater32.inflate(byteArray37);
        int int40 = inflater32.getAdler();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        int int45 = inflater41.getTotalIn();
        int int46 = inflater41.getTotalIn();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.finished();
        long long51 = inflater47.getBytesRead();
        boolean boolean52 = inflater47.finished();
        long long53 = inflater47.getBytesRead();
        boolean boolean54 = inflater47.needsDictionary();
        boolean boolean55 = inflater47.needsDictionary();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.needsDictionary();
        int int58 = inflater56.getTotalOut();
        int int59 = inflater56.getTotalOut();
        boolean boolean60 = inflater56.needsInput();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        byte[] byteArray63 = new byte[] { (byte) 1 };
        int int64 = inflater61.inflate(byteArray63);
        inflater61.reset();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        byte[] byteArray68 = new byte[] { (byte) 1 };
        int int69 = inflater66.inflate(byteArray68);
        int int70 = inflater66.getTotalIn();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        byte[] byteArray73 = new byte[] { (byte) 1 };
        int int74 = inflater71.inflate(byteArray73);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int80 = inflater71.inflate(byteArray79);
        int int81 = inflater66.inflate(byteArray79);
        inflater61.setInput(byteArray79);
        inflater56.setInput(byteArray79);
        int int84 = inflater47.inflate(byteArray79);
        inflater41.setInput(byteArray79);
        inflater32.setDictionary(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray79, (-1), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        boolean boolean7 = inflater0.finished();
        int int8 = inflater0.getTotalOut();
        boolean boolean9 = inflater0.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsDictionary();
        boolean boolean14 = inflater10.needsInput();
        int int15 = inflater10.getRemaining();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        int int28 = inflater10.inflate(byteArray26);
        boolean boolean29 = inflater10.finished();
        int int30 = inflater10.getAdler();
        boolean boolean31 = inflater10.finished();
        int int32 = inflater10.getAdler();
        boolean boolean33 = inflater10.needsInput();
        int int34 = inflater10.getRemaining();
        boolean boolean35 = inflater10.needsDictionary();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        boolean boolean38 = inflater36.needsInput();
        boolean boolean39 = inflater36.needsInput();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        long long44 = inflater40.getBytesRead();
        boolean boolean45 = inflater40.needsDictionary();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        byte[] byteArray48 = new byte[] { (byte) 1 };
        int int49 = inflater46.inflate(byteArray48);
        long long50 = inflater46.getBytesWritten();
        inflater46.reset();
        long long52 = inflater46.getBytesWritten();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.needsDictionary();
        boolean boolean57 = inflater53.needsInput();
        int int58 = inflater53.getRemaining();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.finished();
        byte[] byteArray69 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater59.setInput(byteArray69);
        int int71 = inflater53.inflate(byteArray69);
        inflater46.setInput(byteArray69);
        inflater40.setInput(byteArray69);
        int int74 = inflater36.inflate(byteArray69);
        inflater10.setInput(byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray69, (-1), 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getRemaining();
        boolean boolean25 = inflater0.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int35 = inflater26.inflate(byteArray34);
        boolean boolean36 = inflater26.needsInput();
        boolean boolean37 = inflater26.needsDictionary();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        long long42 = inflater38.getBytesRead();
        boolean boolean43 = inflater38.needsInput();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        int int47 = inflater44.inflate(byteArray46);
        long long48 = inflater44.getBytesWritten();
        inflater44.reset();
        long long50 = inflater44.getBytesWritten();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.needsDictionary();
        boolean boolean55 = inflater51.needsInput();
        int int56 = inflater51.getRemaining();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.finished();
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater57.setInput(byteArray67);
        int int69 = inflater51.inflate(byteArray67);
        inflater44.setInput(byteArray67);
        int int71 = inflater38.inflate(byteArray67);
        inflater26.setInput(byteArray67, 0, (int) (byte) 0);
        inflater0.setInput(byteArray67, (int) (short) 1, (int) (byte) 0);
        java.lang.Class<?> wildcardClass78 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        long long27 = inflater23.getBytesRead();
        boolean boolean28 = inflater23.needsInput();
        int int29 = inflater23.getTotalIn();
        long long30 = inflater23.getBytesRead();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        inflater31.setInput(byteArray45);
        int int48 = inflater31.getAdler();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        boolean boolean53 = inflater49.finished();
        int int54 = inflater49.getRemaining();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        byte[] byteArray57 = new byte[] { (byte) 1 };
        int int58 = inflater55.inflate(byteArray57);
        inflater55.reset();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        byte[] byteArray62 = new byte[] { (byte) 1 };
        int int63 = inflater60.inflate(byteArray62);
        int int64 = inflater60.getTotalIn();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        byte[] byteArray67 = new byte[] { (byte) 1 };
        int int68 = inflater65.inflate(byteArray67);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int74 = inflater65.inflate(byteArray73);
        int int75 = inflater60.inflate(byteArray73);
        inflater55.setInput(byteArray73);
        inflater49.setInput(byteArray73);
        inflater31.setInput(byteArray73);
        int int79 = inflater23.inflate(byteArray73);
        inflater0.setInput(byteArray73, 1, 0);
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsDictionary();
        int int24 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater5.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int24 = inflater15.inflate(byteArray23);
        int int25 = inflater10.inflate(byteArray23);
        inflater5.setInput(byteArray23);
        inflater0.setInput(byteArray23);
        int int28 = inflater0.getTotalOut();
        boolean boolean29 = inflater0.needsInput();
        boolean boolean30 = inflater0.needsInput();
        boolean boolean31 = inflater0.finished();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsInput();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater36.setInput(byteArray46);
        inflater32.setInput(byteArray46);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray46, (int) (byte) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        long long6 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        boolean boolean12 = inflater7.needsDictionary();
        boolean boolean13 = inflater7.needsDictionary();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater7.inflate(byteArray24);
        boolean boolean27 = inflater7.finished();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        inflater7.setInput(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = inflater0.inflate(byteArray30, (int) (byte) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        long long9 = inflater0.getBytesWritten();
        int int10 = inflater0.getTotalOut();
        inflater0.reset();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        int int15 = inflater12.getTotalOut();
        inflater12.reset();
        long long17 = inflater12.getBytesWritten();
        int int18 = inflater12.getAdler();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater(false);
        int int21 = inflater20.getTotalIn();
        boolean boolean22 = inflater20.finished();
        boolean boolean23 = inflater20.needsDictionary();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        long long28 = inflater24.getBytesRead();
        inflater24.reset();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        boolean boolean34 = inflater30.needsInput();
        boolean boolean35 = inflater30.needsDictionary();
        boolean boolean36 = inflater30.needsDictionary();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        int int49 = inflater30.inflate(byteArray47);
        int int50 = inflater24.inflate(byteArray47);
        inflater20.setInput(byteArray47, (int) (byte) 0, 0);
        int int56 = inflater12.inflate(byteArray47, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray47, 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        int int10 = inflater6.getAdler();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        inflater11.end();
        boolean boolean15 = inflater11.needsInput();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        inflater11.setInput(byteArray18);
        int int21 = inflater6.inflate(byteArray18);
        int int22 = inflater6.getTotalOut();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        boolean boolean27 = inflater23.finished();
        inflater23.end();
        inflater23.end();
        boolean boolean30 = inflater23.needsInput();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.needsDictionary();
        boolean boolean35 = inflater31.needsInput();
        int int36 = inflater31.getRemaining();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        int int49 = inflater31.inflate(byteArray47);
        boolean boolean50 = inflater31.finished();
        int int51 = inflater31.getAdler();
        boolean boolean52 = inflater31.finished();
        int int53 = inflater31.getAdler();
        boolean boolean54 = inflater31.needsInput();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        byte[] byteArray57 = new byte[] { (byte) 1 };
        int int58 = inflater55.inflate(byteArray57);
        int int59 = inflater55.getTotalIn();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        byte[] byteArray62 = new byte[] { (byte) 1 };
        int int63 = inflater60.inflate(byteArray62);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int69 = inflater60.inflate(byteArray68);
        int int70 = inflater55.inflate(byteArray68);
        int int71 = inflater31.inflate(byteArray68);
        inflater23.setInput(byteArray68, (int) (byte) 0, (int) (short) 1);
        inflater6.setInput(byteArray68);
        inflater0.setInput(byteArray68);
        int int77 = inflater0.getTotalOut();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getAdler();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater(true);
        int int11 = inflater10.getRemaining();
        long long12 = inflater10.getBytesRead();
        boolean boolean13 = inflater10.needsInput();
        inflater10.reset();
        long long15 = inflater10.getBytesRead();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        boolean boolean20 = inflater16.finished();
        inflater16.end();
        inflater16.end();
        boolean boolean23 = inflater16.needsInput();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getRemaining();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        int int42 = inflater24.inflate(byteArray40);
        boolean boolean43 = inflater24.finished();
        int int44 = inflater24.getAdler();
        boolean boolean45 = inflater24.finished();
        int int46 = inflater24.getAdler();
        boolean boolean47 = inflater24.needsInput();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        byte[] byteArray50 = new byte[] { (byte) 1 };
        int int51 = inflater48.inflate(byteArray50);
        int int52 = inflater48.getTotalIn();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        byte[] byteArray55 = new byte[] { (byte) 1 };
        int int56 = inflater53.inflate(byteArray55);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int62 = inflater53.inflate(byteArray61);
        int int63 = inflater48.inflate(byteArray61);
        int int64 = inflater24.inflate(byteArray61);
        inflater16.setInput(byteArray61, (int) (byte) 0, (int) (short) 1);
        inflater10.setDictionary(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        int int15 = inflater0.inflate(byteArray13);
        int int16 = inflater0.getTotalOut();
        int int17 = inflater0.getTotalOut();
        long long18 = inflater0.getBytesWritten();
        int int19 = inflater0.getTotalIn();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalIn();
        int int7 = inflater0.getTotalOut();
        int int8 = inflater0.getTotalOut();
        long long9 = inflater0.getBytesRead();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        int int12 = inflater8.getAdler();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        inflater13.end();
        boolean boolean17 = inflater13.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        inflater13.setInput(byteArray20);
        int int23 = inflater8.inflate(byteArray20);
        int int24 = inflater8.getTotalOut();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        boolean boolean29 = inflater25.finished();
        inflater25.end();
        inflater25.end();
        boolean boolean32 = inflater25.needsInput();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        int int51 = inflater33.inflate(byteArray49);
        boolean boolean52 = inflater33.finished();
        int int53 = inflater33.getAdler();
        boolean boolean54 = inflater33.finished();
        int int55 = inflater33.getAdler();
        boolean boolean56 = inflater33.needsInput();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        int int61 = inflater57.getTotalIn();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int71 = inflater62.inflate(byteArray70);
        int int72 = inflater57.inflate(byteArray70);
        int int73 = inflater33.inflate(byteArray70);
        inflater25.setInput(byteArray70, (int) (byte) 0, (int) (short) 1);
        inflater8.setInput(byteArray70);
        int int78 = inflater0.inflate(byteArray70);
        boolean boolean79 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater(true);
        int int26 = inflater25.getRemaining();
        long long27 = inflater25.getBytesRead();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        int int32 = inflater25.inflate(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray30, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        long long12 = inflater8.getBytesWritten();
        inflater8.reset();
        int int14 = inflater8.getRemaining();
        boolean boolean15 = inflater8.needsDictionary();
        boolean boolean16 = inflater8.needsDictionary();
        inflater8.reset();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater(true);
        int int20 = inflater19.getRemaining();
        long long21 = inflater19.getBytesRead();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        int int26 = inflater19.inflate(byteArray24);
        int int27 = inflater19.getAdler();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        int int32 = inflater28.getTotalIn();
        int int33 = inflater28.getTotalIn();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        long long38 = inflater34.getBytesRead();
        boolean boolean39 = inflater34.finished();
        long long40 = inflater34.getBytesRead();
        boolean boolean41 = inflater34.needsDictionary();
        boolean boolean42 = inflater34.needsDictionary();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.needsDictionary();
        int int45 = inflater43.getTotalOut();
        int int46 = inflater43.getTotalOut();
        boolean boolean47 = inflater43.needsInput();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        byte[] byteArray50 = new byte[] { (byte) 1 };
        int int51 = inflater48.inflate(byteArray50);
        inflater48.reset();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        byte[] byteArray55 = new byte[] { (byte) 1 };
        int int56 = inflater53.inflate(byteArray55);
        int int57 = inflater53.getTotalIn();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        byte[] byteArray60 = new byte[] { (byte) 1 };
        int int61 = inflater58.inflate(byteArray60);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int67 = inflater58.inflate(byteArray66);
        int int68 = inflater53.inflate(byteArray66);
        inflater48.setInput(byteArray66);
        inflater43.setInput(byteArray66);
        int int71 = inflater34.inflate(byteArray66);
        inflater28.setInput(byteArray66);
        inflater19.setDictionary(byteArray66);
        int int74 = inflater8.inflate(byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray66, (int) (short) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        inflater0.reset();
        int int23 = inflater0.getAdler();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int38 = inflater29.inflate(byteArray37);
        int int39 = inflater24.inflate(byteArray37);
        int int40 = inflater24.getTotalOut();
        int int41 = inflater24.getTotalOut();
        long long42 = inflater24.getBytesRead();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        long long47 = inflater43.getBytesRead();
        boolean boolean48 = inflater43.finished();
        long long49 = inflater43.getBytesRead();
        boolean boolean50 = inflater43.needsDictionary();
        boolean boolean51 = inflater43.needsDictionary();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.needsDictionary();
        int int54 = inflater52.getTotalOut();
        int int55 = inflater52.getTotalOut();
        boolean boolean56 = inflater52.needsInput();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        inflater57.reset();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        int int66 = inflater62.getTotalIn();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int76 = inflater67.inflate(byteArray75);
        int int77 = inflater62.inflate(byteArray75);
        inflater57.setInput(byteArray75);
        inflater52.setInput(byteArray75);
        int int80 = inflater43.inflate(byteArray75);
        inflater24.setInput(byteArray75);
        int int82 = inflater0.inflate(byteArray75);
        int int83 = inflater0.getAdler();
        int int84 = inflater0.getRemaining();
        inflater0.reset();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater(true);
        int int8 = inflater7.getRemaining();
        long long9 = inflater7.getBytesRead();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        inflater10.end();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        inflater10.setInput(byteArray24);
        inflater7.setInput(byteArray24, (int) (byte) 1, (int) (short) 1);
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        boolean boolean34 = inflater30.needsInput();
        int int35 = inflater30.getRemaining();
        inflater30.reset();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.needsDictionary();
        boolean boolean41 = inflater37.needsInput();
        int int42 = inflater37.getRemaining();
        inflater37.reset();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.finished();
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater44.setInput(byteArray54);
        inflater37.setInput(byteArray54);
        int int59 = inflater30.inflate(byteArray54, 0, (int) (byte) 0);
        inflater7.setInput(byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        int int19 = inflater0.inflate(byteArray17);
        boolean boolean20 = inflater0.finished();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        int int26 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater(false);
        int int29 = inflater28.getAdler();
        boolean boolean30 = inflater28.finished();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.needsDictionary();
        boolean boolean35 = inflater31.needsInput();
        int int36 = inflater31.getRemaining();
        inflater31.reset();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        int int44 = inflater41.getTotalOut();
        inflater41.reset();
        boolean boolean46 = inflater41.needsInput();
        int int47 = inflater41.getRemaining();
        boolean boolean48 = inflater41.finished();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        boolean boolean53 = inflater49.finished();
        inflater49.end();
        inflater49.end();
        boolean boolean56 = inflater49.needsDictionary();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.needsInput();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.finished();
        int int63 = inflater61.getRemaining();
        boolean boolean64 = inflater61.finished();
        byte[] byteArray71 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater61.setInput(byteArray71);
        inflater57.setInput(byteArray71);
        inflater49.setInput(byteArray71);
        int int77 = inflater41.inflate(byteArray71, 6, (int) (short) 0);
        int int78 = inflater38.inflate(byteArray71);
        inflater31.setInput(byteArray71, (int) (byte) 0, (int) (byte) 1);
        inflater28.setInput(byteArray71);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray71, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        inflater0.reset();
        long long28 = inflater0.getBytesWritten();
        int int29 = inflater0.getRemaining();
        long long30 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        inflater31.setInput(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray45, 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        boolean boolean3 = inflater0.finished();
        boolean boolean4 = inflater0.needsDictionary();
        int int5 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getTotalOut();
        int int9 = inflater0.getAdler();
        int int10 = inflater0.getAdler();
        int int11 = inflater0.getTotalIn();
        int int12 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getRemaining();
        boolean boolean8 = inflater0.finished();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        boolean boolean7 = inflater0.finished();
        int int8 = inflater0.getTotalOut();
        boolean boolean9 = inflater0.needsInput();
        boolean boolean10 = inflater0.needsInput();
        long long11 = inflater0.getBytesRead();
        boolean boolean12 = inflater0.needsInput();
        long long13 = inflater0.getBytesRead();
        int int14 = inflater0.getTotalOut();
        byte[] byteArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray15, 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        inflater0.reset();
        boolean boolean13 = inflater0.finished();
        byte[] byteArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalIn();
        long long10 = inflater0.getBytesWritten();
        inflater0.end();
        boolean boolean12 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        boolean boolean29 = inflater25.finished();
        inflater25.end();
        inflater25.end();
        boolean boolean32 = inflater25.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        inflater33.setInput(byteArray47);
        inflater25.setInput(byteArray47);
        inflater0.setInput(byteArray47);
        int int52 = inflater0.getRemaining();
        boolean boolean53 = inflater0.needsInput();
        long long54 = inflater0.getBytesRead();
        int int55 = inflater0.getAdler();
        long long56 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getRemaining();
        inflater0.end();
        int int24 = inflater0.getRemaining();
        int int25 = inflater0.getRemaining();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        long long30 = inflater26.getBytesRead();
        boolean boolean31 = inflater26.needsInput();
        int int32 = inflater26.getTotalOut();
        long long33 = inflater26.getBytesRead();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        inflater34.reset();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.finished();
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater41.setInput(byteArray51);
        inflater34.setInput(byteArray51);
        int int56 = inflater26.inflate(byteArray51, 1, (int) (short) 1);
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.finished();
        int int61 = inflater57.getAdler();
        int int62 = inflater57.getAdler();
        int int63 = inflater57.getAdler();
        int int64 = inflater57.getTotalOut();
        inflater57.reset();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.needsDictionary();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.needsDictionary();
        boolean boolean72 = inflater68.needsInput();
        int int73 = inflater68.getRemaining();
        inflater68.reset();
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        boolean boolean76 = inflater75.finished();
        int int77 = inflater75.getRemaining();
        boolean boolean78 = inflater75.finished();
        byte[] byteArray85 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater75.setInput(byteArray85);
        inflater68.setInput(byteArray85);
        inflater66.setInput(byteArray85);
        inflater57.setInput(byteArray85, (int) (byte) 0, 0);
        int int92 = inflater26.inflate(byteArray85);
        inflater0.setInput(byteArray85);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        inflater0.reset();
        int int23 = inflater0.getTotalOut();
        boolean boolean24 = inflater0.needsInput();
        long long25 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.finished();
        int int6 = inflater0.getRemaining();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        boolean boolean3 = inflater0.finished();
        inflater0.reset();
        long long5 = inflater0.getBytesRead();
        int int6 = inflater0.getRemaining();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater11.setInput(byteArray21);
        inflater7.setInput(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray21, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        boolean boolean29 = inflater25.finished();
        inflater25.end();
        inflater25.end();
        boolean boolean32 = inflater25.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        inflater33.setInput(byteArray47);
        inflater25.setInput(byteArray47);
        inflater0.setInput(byteArray47);
        int int52 = inflater0.getRemaining();
        boolean boolean53 = inflater0.needsInput();
        long long54 = inflater0.getBytesRead();
        inflater0.reset();
        int int56 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.finished();
        inflater0.end();
        boolean boolean8 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesRead();
        java.lang.Class<?> wildcardClass5 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        java.util.zip.Inflater inflater3 = new java.util.zip.Inflater();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        int int6 = inflater3.inflate(byteArray5);
        inflater3.reset();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        long long12 = inflater8.getBytesWritten();
        inflater8.reset();
        long long14 = inflater8.getBytesWritten();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.needsDictionary();
        boolean boolean19 = inflater15.needsInput();
        int int20 = inflater15.getRemaining();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.finished();
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater21.setInput(byteArray31);
        int int33 = inflater15.inflate(byteArray31);
        inflater8.setInput(byteArray31);
        inflater3.setInput(byteArray31);
        int int36 = inflater0.inflate(byteArray31);
        boolean boolean37 = inflater0.needsDictionary();
        boolean boolean38 = inflater0.needsDictionary();
        long long39 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater(true);
        int int42 = inflater41.getRemaining();
        long long43 = inflater41.getBytesRead();
        int int44 = inflater41.getTotalIn();
        int int45 = inflater41.getRemaining();
        inflater41.reset();
        boolean boolean47 = inflater41.finished();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.needsDictionary();
        int int50 = inflater48.getTotalOut();
        long long51 = inflater48.getBytesWritten();
        boolean boolean52 = inflater48.needsInput();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.needsDictionary();
        boolean boolean57 = inflater53.needsInput();
        long long58 = inflater53.getBytesWritten();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater(true);
        int int61 = inflater60.getRemaining();
        long long62 = inflater60.getBytesRead();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.finished();
        int int65 = inflater63.getRemaining();
        inflater63.end();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        boolean boolean68 = inflater67.finished();
        int int69 = inflater67.getRemaining();
        boolean boolean70 = inflater67.finished();
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater67.setInput(byteArray77);
        inflater63.setInput(byteArray77);
        inflater60.setInput(byteArray77, (int) (byte) 1, (int) (short) 1);
        int int83 = inflater53.inflate(byteArray77);
        int int84 = inflater48.inflate(byteArray77);
        inflater41.setDictionary(byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.finished();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.needsDictionary();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        inflater9.reset();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        inflater9.setInput(byteArray26);
        inflater7.setInput(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        inflater6.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        int int15 = inflater11.getTotalIn();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int25 = inflater16.inflate(byteArray24);
        int int26 = inflater11.inflate(byteArray24);
        inflater6.setInput(byteArray24);
        inflater0.setInput(byteArray24);
        int int29 = inflater0.getTotalOut();
        long long30 = inflater0.getBytesWritten();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsInput();
        boolean boolean22 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater(true);
        int int25 = inflater24.getRemaining();
        long long26 = inflater24.getBytesRead();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        int int31 = inflater24.inflate(byteArray29);
        boolean boolean32 = inflater24.needsInput();
        boolean boolean33 = inflater24.needsDictionary();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater(false);
        int int36 = inflater35.getTotalIn();
        boolean boolean37 = inflater35.finished();
        boolean boolean38 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        long long43 = inflater39.getBytesRead();
        inflater39.reset();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.needsDictionary();
        boolean boolean49 = inflater45.needsInput();
        boolean boolean50 = inflater45.needsDictionary();
        boolean boolean51 = inflater45.needsDictionary();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.finished();
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater52.setInput(byteArray62);
        int int64 = inflater45.inflate(byteArray62);
        int int65 = inflater39.inflate(byteArray62);
        inflater35.setInput(byteArray62, (int) (byte) 0, 0);
        inflater24.setInput(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        long long56 = inflater0.getBytesRead();
        int int57 = inflater0.getTotalOut();
        int int58 = inflater0.getTotalIn();
        inflater0.reset();
        boolean boolean60 = inflater0.needsDictionary();
        inflater0.reset();
        java.lang.Class<?> wildcardClass62 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        int int24 = inflater1.getTotalIn();
        int int25 = inflater1.getRemaining();
        int int26 = inflater1.getAdler();
        inflater1.end();
        inflater1.end();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        int int33 = inflater29.getAdler();
        int int34 = inflater29.getAdler();
        int int35 = inflater29.getRemaining();
        int int36 = inflater29.getTotalOut();
        boolean boolean37 = inflater29.needsDictionary();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        boolean boolean42 = inflater38.needsInput();
        int int43 = inflater38.getTotalIn();
        boolean boolean44 = inflater38.finished();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        int int49 = inflater45.getTotalIn();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        byte[] byteArray52 = new byte[] { (byte) 1 };
        int int53 = inflater50.inflate(byteArray52);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int59 = inflater50.inflate(byteArray58);
        int int60 = inflater45.inflate(byteArray58);
        int int61 = inflater38.inflate(byteArray58);
        inflater29.setInput(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray58, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        int int4 = inflater0.getRemaining();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.finished();
        inflater0.end();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        long long15 = inflater10.getBytesWritten();
        int int16 = inflater10.getAdler();
        int int17 = inflater10.getAdler();
        long long18 = inflater10.getBytesRead();
        boolean boolean19 = inflater10.finished();
        long long20 = inflater10.getBytesRead();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        int int25 = inflater21.getTotalIn();
        int int26 = inflater21.getTotalIn();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.finished();
        long long31 = inflater27.getBytesRead();
        boolean boolean32 = inflater27.finished();
        long long33 = inflater27.getBytesRead();
        boolean boolean34 = inflater27.needsDictionary();
        boolean boolean35 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.needsDictionary();
        int int38 = inflater36.getTotalOut();
        int int39 = inflater36.getTotalOut();
        boolean boolean40 = inflater36.needsInput();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        inflater41.reset();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        byte[] byteArray48 = new byte[] { (byte) 1 };
        int int49 = inflater46.inflate(byteArray48);
        int int50 = inflater46.getTotalIn();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        byte[] byteArray53 = new byte[] { (byte) 1 };
        int int54 = inflater51.inflate(byteArray53);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int60 = inflater51.inflate(byteArray59);
        int int61 = inflater46.inflate(byteArray59);
        inflater41.setInput(byteArray59);
        inflater36.setInput(byteArray59);
        int int64 = inflater27.inflate(byteArray59);
        inflater21.setInput(byteArray59);
        inflater10.setInput(byteArray59);
        inflater0.setInput(byteArray59);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        inflater6.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater6.setInput(byteArray34);
        inflater0.setInput(byteArray34, (int) (byte) 0, 1);
        int int42 = inflater0.getRemaining();
        int int43 = inflater0.getTotalIn();
        boolean boolean44 = inflater0.needsInput();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.finished();
        boolean boolean25 = inflater0.needsInput();
        byte[] byteArray26 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray26, (int) '#', 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        int int5 = inflater1.getTotalIn();
        int int6 = inflater1.getRemaining();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        boolean boolean26 = inflater7.finished();
        int int27 = inflater7.getTotalOut();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        long long32 = inflater28.getBytesRead();
        boolean boolean33 = inflater28.needsDictionary();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        long long38 = inflater34.getBytesWritten();
        inflater34.reset();
        long long40 = inflater34.getBytesWritten();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.needsDictionary();
        boolean boolean45 = inflater41.needsInput();
        int int46 = inflater41.getRemaining();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.finished();
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater47.setInput(byteArray57);
        int int59 = inflater41.inflate(byteArray57);
        inflater34.setInput(byteArray57);
        inflater28.setInput(byteArray57);
        int int62 = inflater7.inflate(byteArray57);
        int int63 = inflater7.getAdler();
        int int64 = inflater7.getAdler();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.finished();
        int int67 = inflater65.getRemaining();
        boolean boolean68 = inflater65.finished();
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater65.setInput(byteArray75);
        inflater65.end();
        int int78 = inflater65.getRemaining();
        java.util.zip.Inflater inflater79 = new java.util.zip.Inflater();
        boolean boolean80 = inflater79.finished();
        int int81 = inflater79.getRemaining();
        boolean boolean82 = inflater79.finished();
        int int83 = inflater79.getAdler();
        java.util.zip.Inflater inflater84 = new java.util.zip.Inflater();
        boolean boolean85 = inflater84.finished();
        int int86 = inflater84.getRemaining();
        inflater84.end();
        boolean boolean88 = inflater84.needsInput();
        java.util.zip.Inflater inflater89 = new java.util.zip.Inflater();
        byte[] byteArray91 = new byte[] { (byte) 1 };
        int int92 = inflater89.inflate(byteArray91);
        inflater84.setInput(byteArray91);
        int int94 = inflater79.inflate(byteArray91);
        inflater65.setInput(byteArray91);
        int int96 = inflater7.inflate(byteArray91);
        inflater1.setDictionary(byteArray91);
        java.lang.Class<?> wildcardClass98 = inflater1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 6 + "'", int78 == 6);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsInput();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        inflater56.setInput(byteArray70);
        int int73 = inflater0.inflate(byteArray70);
        int int74 = inflater0.getRemaining();
        int int75 = inflater0.getRemaining();
        int int76 = inflater0.getRemaining();
        boolean boolean77 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getAdler();
        boolean boolean9 = inflater0.finished();
        long long10 = inflater0.getBytesRead();
        int int11 = inflater0.getTotalIn();
        boolean boolean12 = inflater0.finished();
        int int13 = inflater0.getTotalIn();
        boolean boolean14 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getRemaining();
        long long23 = inflater0.getBytesWritten();
        boolean boolean24 = inflater0.needsDictionary();
        int int25 = inflater0.getAdler();
        int int26 = inflater0.getAdler();
        long long27 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.needsDictionary();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getAdler();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        long long17 = inflater13.getBytesRead();
        boolean boolean18 = inflater13.finished();
        long long19 = inflater13.getBytesRead();
        boolean boolean20 = inflater13.needsDictionary();
        boolean boolean21 = inflater13.needsDictionary();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.needsDictionary();
        int int24 = inflater22.getTotalOut();
        int int25 = inflater22.getTotalOut();
        boolean boolean26 = inflater22.needsInput();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        inflater27.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        int int36 = inflater32.getTotalIn();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int46 = inflater37.inflate(byteArray45);
        int int47 = inflater32.inflate(byteArray45);
        inflater27.setInput(byteArray45);
        inflater22.setInput(byteArray45);
        int int50 = inflater13.inflate(byteArray45);
        inflater8.setInput(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = inflater0.inflate(byteArray45, (-1), 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        boolean boolean2 = inflater0.needsInput();
        boolean boolean3 = inflater0.needsInput();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.needsDictionary();
        long long8 = inflater4.getBytesRead();
        boolean boolean9 = inflater4.needsDictionary();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        long long14 = inflater10.getBytesWritten();
        inflater10.reset();
        long long16 = inflater10.getBytesWritten();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        int int35 = inflater17.inflate(byteArray33);
        inflater10.setInput(byteArray33);
        inflater4.setInput(byteArray33);
        int int38 = inflater0.inflate(byteArray33);
        boolean boolean39 = inflater0.needsInput();
        long long40 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.needsDictionary();
        boolean boolean45 = inflater41.needsInput();
        int int46 = inflater41.getRemaining();
        inflater41.reset();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.needsDictionary();
        boolean boolean52 = inflater48.needsInput();
        int int53 = inflater48.getRemaining();
        inflater48.reset();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater55.setInput(byteArray65);
        inflater48.setInput(byteArray65);
        int int70 = inflater41.inflate(byteArray65, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int73 = inflater0.inflate(byteArray65, (int) (byte) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getAdler();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater(false);
        int int9 = inflater8.getTotalIn();
        boolean boolean10 = inflater8.finished();
        boolean boolean11 = inflater8.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        long long16 = inflater12.getBytesRead();
        inflater12.reset();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        boolean boolean23 = inflater18.needsDictionary();
        boolean boolean24 = inflater18.needsDictionary();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.finished();
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater25.setInput(byteArray35);
        int int37 = inflater18.inflate(byteArray35);
        int int38 = inflater12.inflate(byteArray35);
        inflater8.setInput(byteArray35, (int) (byte) 0, 0);
        int int44 = inflater0.inflate(byteArray35, 1, 0);
        java.lang.Class<?> wildcardClass45 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.finished();
        int int11 = inflater0.getTotalOut();
        int int12 = inflater0.getTotalOut();
        boolean boolean13 = inflater0.needsInput();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        int int5 = inflater0.getTotalOut();
        long long6 = inflater0.getBytesRead();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.finished();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        long long13 = inflater9.getBytesRead();
        boolean boolean14 = inflater9.needsInput();
        int int15 = inflater9.getTotalOut();
        long long16 = inflater9.getBytesWritten();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        boolean boolean21 = inflater17.finished();
        int int22 = inflater17.getRemaining();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        int int29 = inflater25.getTotalIn();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        inflater30.end();
        boolean boolean34 = inflater30.needsInput();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        inflater30.setInput(byteArray37);
        inflater25.setInput(byteArray37);
        inflater23.setInput(byteArray37);
        int int42 = inflater17.inflate(byteArray37);
        inflater9.setInput(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = inflater0.inflate(byteArray37, 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsInput();
        boolean boolean8 = inflater0.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        long long13 = inflater9.getBytesWritten();
        int int14 = inflater9.getRemaining();
        int int15 = inflater9.getTotalOut();
        boolean boolean16 = inflater9.finished();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        int int21 = inflater17.getTotalIn();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        inflater22.end();
        boolean boolean26 = inflater22.needsInput();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        inflater22.setInput(byteArray29);
        inflater17.setInput(byteArray29);
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        int int37 = inflater33.getTotalIn();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int47 = inflater38.inflate(byteArray46);
        int int48 = inflater33.inflate(byteArray46);
        int int49 = inflater33.getTotalOut();
        int int50 = inflater33.getTotalOut();
        long long51 = inflater33.getBytesRead();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.finished();
        long long56 = inflater52.getBytesRead();
        boolean boolean57 = inflater52.finished();
        long long58 = inflater52.getBytesRead();
        boolean boolean59 = inflater52.needsDictionary();
        boolean boolean60 = inflater52.needsDictionary();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.needsDictionary();
        int int63 = inflater61.getTotalOut();
        int int64 = inflater61.getTotalOut();
        boolean boolean65 = inflater61.needsInput();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        byte[] byteArray68 = new byte[] { (byte) 1 };
        int int69 = inflater66.inflate(byteArray68);
        inflater66.reset();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        byte[] byteArray73 = new byte[] { (byte) 1 };
        int int74 = inflater71.inflate(byteArray73);
        int int75 = inflater71.getTotalIn();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        byte[] byteArray78 = new byte[] { (byte) 1 };
        int int79 = inflater76.inflate(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int85 = inflater76.inflate(byteArray84);
        int int86 = inflater71.inflate(byteArray84);
        inflater66.setInput(byteArray84);
        inflater61.setInput(byteArray84);
        int int89 = inflater52.inflate(byteArray84);
        inflater33.setInput(byteArray84);
        inflater17.setInput(byteArray84);
        inflater9.setInput(byteArray84);
        int int93 = inflater0.inflate(byteArray84);
        long long94 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater8.setInput(byteArray25);
        int int30 = inflater0.inflate(byteArray25, 1, (int) (short) 1);
        long long31 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater38.setInput(byteArray48);
        int int50 = inflater32.inflate(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        int int9 = inflater0.getAdler();
        int int10 = inflater0.getTotalOut();
        int int11 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        int int5 = inflater0.getRemaining();
        long long6 = inflater0.getBytesRead();
        byte[] byteArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray7, (int) '#', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.needsInput();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        boolean boolean12 = inflater8.finished();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        int int18 = inflater14.getAdler();
        boolean boolean19 = inflater14.finished();
        long long20 = inflater14.getBytesWritten();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        boolean boolean23 = inflater21.needsInput();
        boolean boolean24 = inflater21.needsInput();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        long long29 = inflater25.getBytesRead();
        boolean boolean30 = inflater25.needsDictionary();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        long long35 = inflater31.getBytesWritten();
        inflater31.reset();
        long long37 = inflater31.getBytesWritten();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        boolean boolean42 = inflater38.needsInput();
        int int43 = inflater38.getRemaining();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.finished();
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater44.setInput(byteArray54);
        int int56 = inflater38.inflate(byteArray54);
        inflater31.setInput(byteArray54);
        inflater25.setInput(byteArray54);
        int int59 = inflater21.inflate(byteArray54);
        int int60 = inflater14.inflate(byteArray54);
        inflater8.setInput(byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray54, (-1), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.needsInput();
        boolean boolean11 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        long long16 = inflater12.getBytesRead();
        boolean boolean17 = inflater12.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        long long22 = inflater18.getBytesWritten();
        inflater18.reset();
        long long24 = inflater18.getBytesWritten();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        int int43 = inflater25.inflate(byteArray41);
        inflater18.setInput(byteArray41);
        int int45 = inflater12.inflate(byteArray41);
        inflater0.setInput(byteArray41, 0, (int) (byte) 0);
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.needsDictionary();
        long long53 = inflater49.getBytesRead();
        long long54 = inflater49.getBytesWritten();
        boolean boolean55 = inflater49.finished();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        byte[] byteArray58 = new byte[] { (byte) 1 };
        int int59 = inflater56.inflate(byteArray58);
        boolean boolean60 = inflater56.finished();
        int int61 = inflater56.getRemaining();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        inflater62.reset();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        int int71 = inflater67.getTotalIn();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        byte[] byteArray74 = new byte[] { (byte) 1 };
        int int75 = inflater72.inflate(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int81 = inflater72.inflate(byteArray80);
        int int82 = inflater67.inflate(byteArray80);
        inflater62.setInput(byteArray80);
        inflater56.setInput(byteArray80);
        int int85 = inflater49.inflate(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray80, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater0.setInput(byteArray7);
        int int10 = inflater0.getRemaining();
        boolean boolean11 = inflater0.needsDictionary();
        int int12 = inflater0.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        int int17 = inflater13.getAdler();
        int int18 = inflater13.getAdler();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        boolean boolean31 = inflater19.needsDictionary();
        int int32 = inflater19.getRemaining();
        long long33 = inflater19.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater38.setInput(byteArray48);
        inflater34.setInput(byteArray48);
        inflater19.setInput(byteArray48);
        inflater13.setInput(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = inflater0.inflate(byteArray48, (int) (byte) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getTotalIn();
        int int6 = inflater0.getTotalIn();
        inflater0.reset();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        int int15 = inflater0.inflate(byteArray13);
        int int16 = inflater0.getTotalOut();
        int int17 = inflater0.getTotalOut();
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getTotalOut();
        long long8 = inflater0.getBytesRead();
        long long9 = inflater0.getBytesWritten();
        int int10 = inflater0.getAdler();
        boolean boolean11 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getTotalOut();
        boolean boolean8 = inflater0.finished();
        long long9 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.finished();
        int int14 = inflater10.getAdler();
        int int15 = inflater10.getAdler();
        long long16 = inflater10.getBytesWritten();
        long long17 = inflater10.getBytesRead();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        int int22 = inflater18.getAdler();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        long long27 = inflater23.getBytesRead();
        boolean boolean28 = inflater23.finished();
        long long29 = inflater23.getBytesRead();
        boolean boolean30 = inflater23.needsDictionary();
        boolean boolean31 = inflater23.needsDictionary();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.needsDictionary();
        int int34 = inflater32.getTotalOut();
        int int35 = inflater32.getTotalOut();
        boolean boolean36 = inflater32.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        inflater37.reset();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        int int46 = inflater42.getTotalIn();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int56 = inflater47.inflate(byteArray55);
        int int57 = inflater42.inflate(byteArray55);
        inflater37.setInput(byteArray55);
        inflater32.setInput(byteArray55);
        int int60 = inflater23.inflate(byteArray55);
        inflater18.setInput(byteArray55);
        int int62 = inflater10.inflate(byteArray55);
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.finished();
        int int65 = inflater63.getRemaining();
        boolean boolean66 = inflater63.needsDictionary();
        boolean boolean67 = inflater63.needsInput();
        int int68 = inflater63.getRemaining();
        inflater63.reset();
        boolean boolean70 = inflater63.needsInput();
        int int71 = inflater63.getRemaining();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        boolean boolean73 = inflater72.finished();
        int int74 = inflater72.getRemaining();
        boolean boolean75 = inflater72.needsInput();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        boolean boolean77 = inflater76.finished();
        int int78 = inflater76.getRemaining();
        boolean boolean79 = inflater76.finished();
        byte[] byteArray86 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater76.setInput(byteArray86);
        inflater72.setInput(byteArray86);
        inflater63.setInput(byteArray86);
        int int90 = inflater10.inflate(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray86, (int) (byte) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getAdler();
        int int25 = inflater0.getTotalOut();
        int int26 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        inflater0.reset();
        boolean boolean23 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getTotalIn();
        int int30 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        int int35 = inflater31.getAdler();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        long long40 = inflater36.getBytesRead();
        boolean boolean41 = inflater36.finished();
        long long42 = inflater36.getBytesRead();
        boolean boolean43 = inflater36.needsDictionary();
        boolean boolean44 = inflater36.needsDictionary();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.needsDictionary();
        int int47 = inflater45.getTotalOut();
        int int48 = inflater45.getTotalOut();
        boolean boolean49 = inflater45.needsInput();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        byte[] byteArray52 = new byte[] { (byte) 1 };
        int int53 = inflater50.inflate(byteArray52);
        inflater50.reset();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        byte[] byteArray57 = new byte[] { (byte) 1 };
        int int58 = inflater55.inflate(byteArray57);
        int int59 = inflater55.getTotalIn();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        byte[] byteArray62 = new byte[] { (byte) 1 };
        int int63 = inflater60.inflate(byteArray62);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int69 = inflater60.inflate(byteArray68);
        int int70 = inflater55.inflate(byteArray68);
        inflater50.setInput(byteArray68);
        inflater45.setInput(byteArray68);
        int int73 = inflater36.inflate(byteArray68);
        inflater31.setInput(byteArray68);
        int int75 = inflater24.inflate(byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getTotalOut();
        int int9 = inflater0.getAdler();
        int int10 = inflater0.getAdler();
        boolean boolean11 = inflater0.finished();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        long long16 = inflater12.getBytesRead();
        boolean boolean17 = inflater12.finished();
        long long18 = inflater12.getBytesRead();
        boolean boolean19 = inflater12.needsDictionary();
        boolean boolean20 = inflater12.needsDictionary();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.needsDictionary();
        int int23 = inflater21.getTotalOut();
        int int24 = inflater21.getTotalOut();
        boolean boolean25 = inflater21.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        inflater26.reset();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        int int35 = inflater31.getTotalIn();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int45 = inflater36.inflate(byteArray44);
        int int46 = inflater31.inflate(byteArray44);
        inflater26.setInput(byteArray44);
        inflater21.setInput(byteArray44);
        int int49 = inflater12.inflate(byteArray44);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = inflater0.inflate(byteArray44, (int) (short) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getTotalOut();
        inflater0.end();
        java.lang.Class<?> wildcardClass10 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        long long10 = inflater6.getBytesRead();
        boolean boolean11 = inflater6.finished();
        long long12 = inflater6.getBytesRead();
        boolean boolean13 = inflater6.needsDictionary();
        boolean boolean14 = inflater6.needsDictionary();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.needsDictionary();
        int int17 = inflater15.getTotalOut();
        int int18 = inflater15.getTotalOut();
        boolean boolean19 = inflater15.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        inflater20.reset();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        int int29 = inflater25.getTotalIn();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int39 = inflater30.inflate(byteArray38);
        int int40 = inflater25.inflate(byteArray38);
        inflater20.setInput(byteArray38);
        inflater15.setInput(byteArray38);
        int int43 = inflater6.inflate(byteArray38);
        inflater0.setInput(byteArray38);
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getTotalOut();
        inflater0.reset();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        boolean boolean15 = inflater11.needsInput();
        int int16 = inflater11.getRemaining();
        inflater11.reset();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        inflater11.setInput(byteArray28);
        inflater9.setInput(byteArray28);
        inflater0.setInput(byteArray28, (int) (byte) 0, 0);
        inflater0.reset();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        long long11 = inflater7.getBytesRead();
        long long12 = inflater7.getBytesWritten();
        boolean boolean13 = inflater7.finished();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        inflater14.reset();
        boolean boolean21 = inflater14.needsDictionary();
        int int22 = inflater14.getTotalOut();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        boolean boolean27 = inflater23.finished();
        inflater23.end();
        inflater23.end();
        boolean boolean30 = inflater23.needsInput();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.needsDictionary();
        boolean boolean35 = inflater31.needsInput();
        int int36 = inflater31.getRemaining();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        int int49 = inflater31.inflate(byteArray47);
        boolean boolean50 = inflater31.finished();
        int int51 = inflater31.getAdler();
        boolean boolean52 = inflater31.finished();
        int int53 = inflater31.getAdler();
        boolean boolean54 = inflater31.needsInput();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        byte[] byteArray57 = new byte[] { (byte) 1 };
        int int58 = inflater55.inflate(byteArray57);
        int int59 = inflater55.getTotalIn();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        byte[] byteArray62 = new byte[] { (byte) 1 };
        int int63 = inflater60.inflate(byteArray62);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int69 = inflater60.inflate(byteArray68);
        int int70 = inflater55.inflate(byteArray68);
        int int71 = inflater31.inflate(byteArray68);
        inflater23.setInput(byteArray68, (int) (byte) 0, (int) (short) 1);
        int int75 = inflater14.inflate(byteArray68);
        inflater7.setInput(byteArray68, (int) (byte) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray68, (int) (byte) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getAdler();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getTotalOut();
        int int7 = inflater0.getTotalOut();
        boolean boolean8 = inflater0.needsInput();
        int int9 = inflater0.getTotalIn();
        int int10 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean12 = inflater0.finished();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        int int16 = inflater13.getTotalOut();
        inflater13.reset();
        boolean boolean18 = inflater13.needsInput();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsDictionary();
        long long23 = inflater19.getBytesRead();
        boolean boolean24 = inflater19.needsDictionary();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        long long29 = inflater25.getBytesWritten();
        inflater25.reset();
        long long31 = inflater25.getBytesWritten();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater38.setInput(byteArray48);
        int int50 = inflater32.inflate(byteArray48);
        inflater25.setInput(byteArray48);
        inflater19.setInput(byteArray48);
        int int53 = inflater13.inflate(byteArray48);
        long long54 = inflater13.getBytesWritten();
        int int55 = inflater13.getTotalOut();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.finished();
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater56.setInput(byteArray66);
        inflater56.end();
        int int69 = inflater56.getRemaining();
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        boolean boolean71 = inflater70.finished();
        int int72 = inflater70.getRemaining();
        boolean boolean73 = inflater70.finished();
        int int74 = inflater70.getAdler();
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        boolean boolean76 = inflater75.finished();
        int int77 = inflater75.getRemaining();
        inflater75.end();
        boolean boolean79 = inflater75.needsInput();
        java.util.zip.Inflater inflater80 = new java.util.zip.Inflater();
        byte[] byteArray82 = new byte[] { (byte) 1 };
        int int83 = inflater80.inflate(byteArray82);
        inflater75.setInput(byteArray82);
        int int85 = inflater70.inflate(byteArray82);
        inflater56.setInput(byteArray82);
        inflater13.setInput(byteArray82);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.needsDictionary();
        long long7 = inflater0.getBytesRead();
        long long8 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalIn();
        int int7 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getAdler();
        boolean boolean7 = inflater0.needsInput();
        int int8 = inflater0.getTotalIn();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getRemaining();
        int int7 = inflater0.getRemaining();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        inflater8.setInput(byteArray22);
        inflater0.setInput(byteArray22, (int) (byte) 1, (int) (byte) 0);
        java.lang.Class<?> wildcardClass28 = byteArray22.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        int int9 = inflater6.getTotalOut();
        inflater6.reset();
        long long11 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        boolean boolean14 = inflater12.needsInput();
        boolean boolean15 = inflater12.needsInput();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.needsDictionary();
        long long20 = inflater16.getBytesRead();
        boolean boolean21 = inflater16.needsDictionary();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        long long26 = inflater22.getBytesWritten();
        inflater22.reset();
        long long28 = inflater22.getBytesWritten();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        int int47 = inflater29.inflate(byteArray45);
        inflater22.setInput(byteArray45);
        inflater16.setInput(byteArray45);
        int int50 = inflater12.inflate(byteArray45);
        int int51 = inflater6.inflate(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray45, (int) (byte) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getTotalOut();
        inflater0.end();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        inflater25.end();
        boolean boolean29 = inflater25.needsInput();
        boolean boolean30 = inflater25.needsDictionary();
        boolean boolean31 = inflater25.needsDictionary();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.needsDictionary();
        int int34 = inflater32.getTotalOut();
        int int35 = inflater32.getTotalOut();
        long long36 = inflater32.getBytesWritten();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.needsDictionary();
        boolean boolean41 = inflater37.needsInput();
        int int42 = inflater37.getRemaining();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater43.setInput(byteArray53);
        int int55 = inflater37.inflate(byteArray53);
        boolean boolean56 = inflater37.finished();
        int int57 = inflater37.getAdler();
        boolean boolean58 = inflater37.finished();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.needsDictionary();
        long long63 = inflater59.getBytesRead();
        boolean boolean64 = inflater59.needsDictionary();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        byte[] byteArray67 = new byte[] { (byte) 1 };
        int int68 = inflater65.inflate(byteArray67);
        long long69 = inflater65.getBytesWritten();
        inflater65.reset();
        long long71 = inflater65.getBytesWritten();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        boolean boolean73 = inflater72.finished();
        int int74 = inflater72.getRemaining();
        boolean boolean75 = inflater72.needsDictionary();
        boolean boolean76 = inflater72.needsInput();
        int int77 = inflater72.getRemaining();
        java.util.zip.Inflater inflater78 = new java.util.zip.Inflater();
        boolean boolean79 = inflater78.finished();
        int int80 = inflater78.getRemaining();
        boolean boolean81 = inflater78.finished();
        byte[] byteArray88 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater78.setInput(byteArray88);
        int int90 = inflater72.inflate(byteArray88);
        inflater65.setInput(byteArray88);
        inflater59.setInput(byteArray88);
        inflater37.setInput(byteArray88);
        inflater32.setInput(byteArray88);
        inflater25.setInput(byteArray88);
        inflater0.setInput(byteArray88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        inflater0.reset();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.needsDictionary();
        int int11 = inflater9.getTotalOut();
        int int12 = inflater9.getTotalOut();
        boolean boolean13 = inflater9.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.needsDictionary();
        int int16 = inflater14.getTotalOut();
        int int17 = inflater14.getTotalOut();
        long long18 = inflater14.getBytesWritten();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsDictionary();
        long long23 = inflater19.getBytesRead();
        boolean boolean24 = inflater19.needsDictionary();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        long long29 = inflater25.getBytesWritten();
        inflater25.reset();
        long long31 = inflater25.getBytesWritten();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater38.setInput(byteArray48);
        int int50 = inflater32.inflate(byteArray48);
        inflater25.setInput(byteArray48);
        inflater19.setInput(byteArray48);
        int int53 = inflater14.inflate(byteArray48);
        int int54 = inflater14.getRemaining();
        int int55 = inflater14.getTotalIn();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        byte[] byteArray58 = new byte[] { (byte) 1 };
        int int59 = inflater56.inflate(byteArray58);
        inflater56.reset();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        byte[] byteArray63 = new byte[] { (byte) 1 };
        int int64 = inflater61.inflate(byteArray63);
        long long65 = inflater61.getBytesWritten();
        inflater61.reset();
        long long67 = inflater61.getBytesWritten();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.needsDictionary();
        boolean boolean72 = inflater68.needsInput();
        int int73 = inflater68.getRemaining();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        int int76 = inflater74.getRemaining();
        boolean boolean77 = inflater74.finished();
        byte[] byteArray84 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater74.setInput(byteArray84);
        int int86 = inflater68.inflate(byteArray84);
        inflater61.setInput(byteArray84);
        inflater56.setInput(byteArray84);
        int int89 = inflater14.inflate(byteArray84);
        inflater9.setInput(byteArray84, (int) (byte) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int95 = inflater0.inflate(byteArray84, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater8.setInput(byteArray25);
        int int30 = inflater0.inflate(byteArray25, 1, (int) (short) 1);
        int int31 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        long long9 = inflater0.getBytesWritten();
        int int10 = inflater0.getTotalOut();
        long long11 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        int int16 = inflater12.getTotalIn();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int26 = inflater17.inflate(byteArray25);
        int int27 = inflater12.inflate(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        long long23 = inflater0.getBytesWritten();
        int int24 = inflater0.getTotalOut();
        boolean boolean25 = inflater0.needsInput();
        boolean boolean26 = inflater0.finished();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        int int31 = inflater27.getAdler();
        boolean boolean32 = inflater27.finished();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        inflater33.reset();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        long long42 = inflater38.getBytesWritten();
        inflater38.reset();
        long long44 = inflater38.getBytesWritten();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.needsDictionary();
        boolean boolean49 = inflater45.needsInput();
        int int50 = inflater45.getRemaining();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater51.setInput(byteArray61);
        int int63 = inflater45.inflate(byteArray61);
        inflater38.setInput(byteArray61);
        inflater33.setInput(byteArray61);
        inflater27.setInput(byteArray61, (int) (byte) 0, 1);
        int int69 = inflater27.getTotalIn();
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        byte[] byteArray72 = new byte[] { (byte) 1 };
        int int73 = inflater70.inflate(byteArray72);
        int int74 = inflater70.getTotalOut();
        boolean boolean75 = inflater70.needsInput();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        boolean boolean77 = inflater76.finished();
        int int78 = inflater76.getRemaining();
        inflater76.end();
        java.util.zip.Inflater inflater80 = new java.util.zip.Inflater();
        boolean boolean81 = inflater80.finished();
        int int82 = inflater80.getRemaining();
        boolean boolean83 = inflater80.finished();
        byte[] byteArray90 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater80.setInput(byteArray90);
        inflater76.setInput(byteArray90);
        inflater70.setInput(byteArray90);
        inflater27.setInput(byteArray90);
        // The following exception was thrown during execution in test generation
        try {
            int int97 = inflater0.inflate(byteArray90, 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        boolean boolean18 = inflater0.finished();
        boolean boolean19 = inflater0.finished();
        long long20 = inflater0.getBytesRead();
        boolean boolean21 = inflater0.needsDictionary();
        boolean boolean22 = inflater0.needsDictionary();
        long long23 = inflater0.getBytesRead();
        int int24 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        int int12 = inflater0.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        long long17 = inflater13.getBytesWritten();
        boolean boolean18 = inflater13.needsInput();
        int int19 = inflater13.getRemaining();
        int int20 = inflater13.getAdler();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        long long26 = inflater21.getBytesWritten();
        boolean boolean27 = inflater21.finished();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        boolean boolean32 = inflater28.finished();
        int int33 = inflater28.getRemaining();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        inflater34.reset();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        byte[] byteArray41 = new byte[] { (byte) 1 };
        int int42 = inflater39.inflate(byteArray41);
        int int43 = inflater39.getTotalIn();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        int int47 = inflater44.inflate(byteArray46);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int53 = inflater44.inflate(byteArray52);
        int int54 = inflater39.inflate(byteArray52);
        inflater34.setInput(byteArray52);
        inflater28.setInput(byteArray52);
        int int57 = inflater21.inflate(byteArray52);
        int int58 = inflater13.inflate(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray52, 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        boolean boolean27 = inflater8.finished();
        int int28 = inflater8.getTotalOut();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        long long33 = inflater29.getBytesRead();
        boolean boolean34 = inflater29.needsDictionary();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        long long39 = inflater35.getBytesWritten();
        inflater35.reset();
        long long41 = inflater35.getBytesWritten();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        boolean boolean46 = inflater42.needsInput();
        int int47 = inflater42.getRemaining();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater48.setInput(byteArray58);
        int int60 = inflater42.inflate(byteArray58);
        inflater35.setInput(byteArray58);
        inflater29.setInput(byteArray58);
        int int63 = inflater8.inflate(byteArray58);
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.needsInput();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.finished();
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater68.setInput(byteArray78);
        inflater64.setInput(byteArray78);
        int int81 = inflater8.inflate(byteArray78);
        inflater0.setInput(byteArray78);
        boolean boolean83 = inflater0.needsDictionary();
        boolean boolean84 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getTotalOut();
        inflater0.reset();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        boolean boolean15 = inflater11.needsInput();
        int int16 = inflater11.getRemaining();
        inflater11.reset();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        inflater11.setInput(byteArray28);
        inflater9.setInput(byteArray28);
        inflater0.setInput(byteArray28, (int) (byte) 0, 0);
        inflater0.reset();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        int int40 = inflater36.getTotalIn();
        long long41 = inflater36.getBytesWritten();
        int int42 = inflater36.getTotalIn();
        int int43 = inflater36.getTotalOut();
        int int44 = inflater36.getTotalOut();
        boolean boolean45 = inflater36.needsDictionary();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        byte[] byteArray48 = new byte[] { (byte) 1 };
        int int49 = inflater46.inflate(byteArray48);
        int int50 = inflater46.getAdler();
        boolean boolean51 = inflater46.finished();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        int int55 = inflater52.inflate(byteArray54);
        inflater52.reset();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        long long61 = inflater57.getBytesWritten();
        inflater57.reset();
        long long63 = inflater57.getBytesWritten();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.needsDictionary();
        boolean boolean68 = inflater64.needsInput();
        int int69 = inflater64.getRemaining();
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        boolean boolean71 = inflater70.finished();
        int int72 = inflater70.getRemaining();
        boolean boolean73 = inflater70.finished();
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater70.setInput(byteArray80);
        int int82 = inflater64.inflate(byteArray80);
        inflater57.setInput(byteArray80);
        inflater52.setInput(byteArray80);
        inflater46.setInput(byteArray80, (int) (byte) 0, 1);
        int int88 = inflater36.inflate(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = inflater0.inflate(byteArray80, (int) '4', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        inflater0.end();
        inflater0.end();
        boolean boolean9 = inflater0.needsInput();
        boolean boolean10 = inflater0.finished();
        java.lang.Class<?> wildcardClass11 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        inflater0.end();
        int int13 = inflater0.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        int int18 = inflater14.getAdler();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        inflater19.end();
        boolean boolean23 = inflater19.needsInput();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        inflater19.setInput(byteArray26);
        int int29 = inflater14.inflate(byteArray26);
        inflater0.setInput(byteArray26);
        inflater0.end();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        boolean boolean37 = inflater32.needsDictionary();
        boolean boolean38 = inflater32.needsDictionary();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        int int51 = inflater32.inflate(byteArray49);
        boolean boolean52 = inflater32.finished();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        byte[] byteArray55 = new byte[] { (byte) 1 };
        int int56 = inflater53.inflate(byteArray55);
        inflater32.setInput(byteArray55);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray55, (int) (byte) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        int int24 = inflater1.getTotalIn();
        int int25 = inflater1.getRemaining();
        int int26 = inflater1.getAdler();
        inflater1.end();
        inflater1.end();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.needsDictionary();
        int int31 = inflater29.getTotalOut();
        int int32 = inflater29.getTotalOut();
        long long33 = inflater29.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.finished();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.finished();
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater57.setInput(byteArray67);
        inflater53.setInput(byteArray67);
        inflater34.setInput(byteArray67);
        int int71 = inflater29.inflate(byteArray67);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setDictionary(byteArray67, (int) '4', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getRemaining();
        int int7 = inflater0.getTotalOut();
        long long8 = inflater0.getBytesRead();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }
}

