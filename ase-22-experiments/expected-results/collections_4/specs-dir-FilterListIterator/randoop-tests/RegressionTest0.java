import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        java.lang.Class<?> wildcardClass1 = wildcardClassItor0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        int int1 = wildcardClassItor0.nextIndex();
        java.lang.Class<?> wildcardClass2 = wildcardClassItor0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.apache.commons.collections4.iterators.FilterListIterator<java.io.Serializable> serializableItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.io.Serializable>();
        java.lang.Class<?> wildcardClass1 = serializableItor0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass1 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.lang.Class<?> wildcardClass7 = wildcardClassItor0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        java.lang.Class<?> wildcardClass6 = wildcardClassItor1.getClass();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass1 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        int int4 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.apache.commons.collections4.iterators.FilterListIterator<java.util.ListIterator<java.lang.Class<?>>> wildcardClassItorItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.util.ListIterator<java.lang.Class<?>>>();
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor5.getPredicate();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate6);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        java.lang.Class<?> wildcardClass3 = wildcardClassItor0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        java.lang.Class<?> wildcardClass4 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        java.lang.Class<?> wildcardClass7 = wildcardClassItor4.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        int int6 = wildcardClassItor1.previousIndex();
        int int7 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        int int6 = wildcardClassItor1.previousIndex();
        int int7 = wildcardClassItor1.previousIndex();
        boolean boolean8 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.apache.commons.collections4.iterators.FilterListIterator<java.io.Serializable> serializableItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.io.Serializable>();
        // The following exception was thrown during execution in test generation
        try {
            serializableItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardItor4);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        int int5 = wildcardClassItor1.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.apache.commons.collections4.iterators.FilterListIterator<java.io.Serializable> serializableItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.io.Serializable>();
        // The following exception was thrown during execution in test generation
        try {
            serializableItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        int int6 = wildcardClassItor1.previousIndex();
        int int7 = wildcardClassItor1.previousIndex();
        boolean boolean8 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        int int4 = wildcardClassItor1.nextIndex();
        boolean boolean5 = wildcardClassItor1.hasNext();
        java.lang.Class<?> wildcardClass6 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.previousIndex();
        boolean boolean4 = wildcardClassItor1.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardItor4);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardClassItor2.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor17.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        int int1 = wildcardClassItor0.nextIndex();
        boolean boolean2 = wildcardClassItor0.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate2 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate2);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        int int1 = wildcardClassItor0.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor2 = wildcardClassItor0.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(wildcardItor2);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass18 = wildcardClassItor13.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int11 = wildcardClassItor9.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor14 = wildcardClassItor7.getListIterator();
        boolean boolean15 = wildcardClassItor7.hasPrevious();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = wildcardClassItor7.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate3 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate3);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        int int4 = wildcardClassItor1.previousIndex();
        java.lang.Class<?> wildcardClass5 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertNotNull(wildcardItor13);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int19 = wildcardClassItor8.previousIndex();
        int int20 = wildcardClassItor8.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass18 = wildcardClassItor8.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        int int6 = wildcardClassItor1.previousIndex();
        int int7 = wildcardClassItor1.previousIndex();
        boolean boolean8 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor1.getListIterator();
        java.lang.Class<?> wildcardClass14 = wildcardItor13.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardItor13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        boolean boolean6 = wildcardClassItor1.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        boolean boolean8 = wildcardClassItor0.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = wildcardClassItor13.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor11.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        int int14 = wildcardClassItor12.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor17 = wildcardClassItor10.getListIterator();
        int int18 = wildcardClassItor10.previousIndex();
        boolean boolean19 = wildcardClassItor10.hasNext();
        int int20 = wildcardClassItor10.nextIndex();
        typeItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int22 = typeItor8.previousIndex();
        java.lang.Class<?> wildcardClass23 = typeItor8.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor5.getPredicate();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate6);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = wildcardClassItor4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        int int7 = wildcardClassItor4.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = wildcardClassItor8.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        int int6 = wildcardClassItor1.previousIndex();
        int int7 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int7 = wildcardClassItor4.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertNotNull(wildcardItor13);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = wildcardPredicate4.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        boolean boolean17 = wildcardClassItor0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass18 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor17.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        boolean boolean4 = wildcardClassItor1.hasNext();
        java.lang.Class<?> wildcardClass5 = wildcardClassItor1.getClass();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.previousIndex();
        boolean boolean4 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor8 = wildcardClassItor5.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor8);
        int int10 = wildcardClassItor1.previousIndex();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardItor8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        int int6 = wildcardClassItor1.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        java.lang.Class<?> wildcardClass10 = wildcardClassItor0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        int int5 = wildcardClassItor1.previousIndex();
        boolean boolean6 = wildcardClassItor1.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.previousIndex();
        boolean boolean4 = wildcardClassItor1.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        int int9 = wildcardClassItor7.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor12 = wildcardClassItor5.getListIterator();
        int int13 = wildcardClassItor5.previousIndex();
        boolean boolean14 = wildcardClassItor5.hasNext();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass16 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        int int6 = wildcardClassItor4.previousIndex();
        boolean boolean7 = wildcardClassItor4.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        java.lang.Class<?> wildcardClass6 = wildcardItor5.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardItor4);
        org.junit.Assert.assertNotNull(wildcardItor5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>();
        java.lang.Class<?> wildcardClass1 = typeItor0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        int int1 = wildcardClassItor0.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.previousIndex();
        boolean boolean4 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor8 = wildcardClassItor5.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardItor8);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int7 = wildcardClassItor1.nextIndex();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.previousIndex();
        java.lang.Class<?> wildcardClass4 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        boolean boolean17 = wildcardClassItor0.hasNext();
        java.lang.Class<?> wildcardClass18 = wildcardClassItor0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor11.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        int int14 = wildcardClassItor12.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor17 = wildcardClassItor10.getListIterator();
        int int18 = wildcardClassItor10.previousIndex();
        boolean boolean19 = wildcardClassItor10.hasNext();
        int int20 = wildcardClassItor10.nextIndex();
        typeItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        java.lang.Class<?> wildcardClass22 = typeItor8.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor6.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertNull(wildcardItor5);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        boolean boolean7 = wildcardClassItor6.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int10 = wildcardClassItor8.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        boolean boolean12 = wildcardClassItor11.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        int int14 = wildcardClassItor11.previousIndex();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass16 = wildcardClassItor4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        java.util.ListIterator<java.lang.Class<?>> wildcardClassItor0 = null;
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>(wildcardClassItor0);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        int int1 = wildcardClassItor0.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor2 = wildcardClassItor0.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(wildcardItor2);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        boolean boolean13 = wildcardClassItor4.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        int int1 = wildcardClassItor0.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor2 = wildcardClassItor0.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(wildcardItor2);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.lang.Class<?> wildcardClass4 = wildcardClassItor1.getClass();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        int int10 = wildcardClassItor0.nextIndex();
        boolean boolean11 = wildcardClassItor0.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate3 = wildcardClassItor1.getPredicate();
        int int4 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        int int10 = wildcardClassItor0.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        int int4 = wildcardClassItor1.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardItor5);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        int int4 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        int int7 = wildcardClassItor6.previousIndex();
        int int8 = wildcardClassItor6.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor6.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor10 = wildcardClassItor6.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardItor9);
        org.junit.Assert.assertNotNull(wildcardItor10);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        boolean boolean17 = wildcardClassItor0.hasNext();
        boolean boolean18 = wildcardClassItor0.hasNext();
        int int19 = wildcardClassItor0.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass20 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = wildcardClassItor4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor4.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertNotNull(wildcardItor13);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor2 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNotNull(wildcardItor2);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        int int4 = wildcardClassItor1.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertNull(wildcardPredicate6);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor5.getPredicate();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = wildcardClassItor8.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate6);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        boolean boolean17 = wildcardClassItor0.hasNext();
        boolean boolean18 = wildcardClassItor0.hasNext();
        java.lang.Class<?> wildcardClass19 = wildcardClassItor0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        java.lang.Class<?> wildcardClass5 = wildcardClassItor1.getClass();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        int int6 = wildcardClassItor4.previousIndex();
        boolean boolean7 = wildcardClassItor4.hasNext();
        java.lang.Class<?> wildcardClass8 = wildcardClassItor4.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        int int6 = wildcardClassItor1.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        int int10 = wildcardClassItor0.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate7 = wildcardClassItor6.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor8 = wildcardClassItor6.getListIterator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNull(wildcardPredicate7);
        org.junit.Assert.assertNotNull(wildcardItor8);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean6 = wildcardClassItor5.hasNext();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor5.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardItor7);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        int int9 = wildcardClassItor8.previousIndex();
        int int10 = wildcardClassItor8.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor8.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor12 = wildcardClassItor8.getListIterator();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNull(wildcardPredicate6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertNotNull(wildcardItor12);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor2 = wildcardClassItor1.getListIterator();
        int int3 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNotNull(wildcardItor2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        int int7 = wildcardClassItor4.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        boolean boolean10 = wildcardClassItor9.hasNext();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.previousIndex();
        boolean boolean4 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor8 = wildcardClassItor5.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor8);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardItor8);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate2 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate2);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.previousIndex();
        boolean boolean4 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor8 = wildcardClassItor5.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardItor8);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate3 = wildcardClassItor1.getPredicate();
        int int4 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        int int6 = wildcardClassItor1.previousIndex();
        int int7 = wildcardClassItor1.previousIndex();
        int int8 = wildcardClassItor1.nextIndex();
        java.lang.Class<?> wildcardClass9 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate1 = wildcardClassItor0.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate1);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate3 = wildcardClassItor1.getPredicate();
        int int4 = wildcardClassItor1.previousIndex();
        int int5 = wildcardClassItor1.previousIndex();
        java.lang.Class<?> wildcardClass6 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        int int10 = wildcardClassItor0.nextIndex();
        boolean boolean11 = wildcardClassItor0.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor0.getListIterator();
        int int14 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor16 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor16.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        int int19 = wildcardClassItor17.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        wildcardClassItor15.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor20);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor22 = wildcardClassItor15.getListIterator();
        int int23 = wildcardClassItor15.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor24 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor25 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor24.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        int int27 = wildcardClassItor25.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor28 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate29 = wildcardClassItor28.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor30 = wildcardClassItor28.getListIterator();
        wildcardClassItor15.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor28);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor32 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor28);
        int int33 = wildcardClassItor32.nextIndex();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass35 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardItor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate29);
        org.junit.Assert.assertNotNull(wildcardItor30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor5.getPredicate();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate6);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor7.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.apache.commons.collections4.iterators.FilterListIterator<java.util.Iterator<java.lang.Class<?>>> wildcardClassItorItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.util.Iterator<java.lang.Class<?>>>();
        int int1 = wildcardClassItorItor0.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItorItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        boolean boolean2 = wildcardClassItor1.hasNext();
        java.lang.Class<?> wildcardClass3 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        int int10 = wildcardClassItor0.nextIndex();
        boolean boolean11 = wildcardClassItor0.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor0.getListIterator();
        boolean boolean14 = wildcardClassItor0.hasPrevious();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean6 = wildcardClassItor5.hasNext();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor5.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardItor7);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = wildcardPredicate4.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        int int6 = wildcardClassItor4.previousIndex();
        boolean boolean7 = wildcardClassItor4.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int10 = wildcardClassItor8.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        boolean boolean12 = wildcardClassItor11.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        int int14 = wildcardClassItor11.previousIndex();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass16 = wildcardClassItor4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        int int5 = wildcardClassItor1.previousIndex();
        boolean boolean6 = wildcardClassItor1.hasNext();
        int int7 = wildcardClassItor1.previousIndex();
        java.lang.Class<?> wildcardClass8 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate1 = wildcardClassItor0.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass2 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate1);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor7.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate9 = wildcardClassItor7.getPredicate();
        int int10 = wildcardClassItor7.previousIndex();
        int int11 = wildcardClassItor7.previousIndex();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = wildcardClassItor13.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate1 = wildcardClassItor0.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        boolean boolean3 = wildcardClassItor0.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int7 = wildcardClassItor4.previousIndex();
        boolean boolean8 = wildcardClassItor4.hasNext();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor4.getListIterator();
        int int10 = wildcardClassItor4.nextIndex();
        java.lang.Class<?> wildcardClass11 = wildcardClassItor4.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardItor9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int7 = wildcardClassItor4.previousIndex();
        boolean boolean8 = wildcardClassItor4.hasNext();
        java.lang.Class<?> wildcardClass9 = wildcardClassItor4.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        boolean boolean7 = wildcardClassItor6.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor6.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int11 = wildcardClassItor9.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor14 = wildcardClassItor7.getListIterator();
        boolean boolean15 = wildcardClassItor7.hasPrevious();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        boolean boolean17 = wildcardClassItor5.hasNext();
        boolean boolean18 = wildcardClassItor5.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor20 = wildcardClassItor5.getListIterator();
        java.lang.Class<?> wildcardClass21 = wildcardItor20.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardItor20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        int int4 = wildcardClassItor1.nextIndex();
        int int5 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.lang.Class<?> wildcardClass3 = wildcardClassItor1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.previousIndex();
        boolean boolean4 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor8 = wildcardClassItor5.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor8);
        java.lang.Class<?> wildcardClass10 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardItor8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        int int10 = typeItor8.nextIndex();
        int int11 = typeItor8.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            typeItor8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int17 = wildcardClassItor13.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass18 = wildcardClassItor13.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertNotNull(wildcardItor13);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int18 = wildcardClassItor17.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass19 = wildcardClassItor17.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int11 = wildcardClassItor9.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor14 = wildcardClassItor7.getListIterator();
        boolean boolean15 = wildcardClassItor7.hasPrevious();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        boolean boolean17 = wildcardClassItor5.hasNext();
        boolean boolean18 = wildcardClassItor5.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass20 = wildcardClassItor19.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        int int5 = wildcardClassItor1.previousIndex();
        boolean boolean6 = wildcardClassItor1.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor10 = wildcardClassItor8.getListIterator();
        boolean boolean11 = wildcardClassItor8.hasNext();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        java.lang.Class<?> wildcardClass13 = wildcardClassItor8.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        int int5 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        int int4 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        int int7 = wildcardClassItor6.previousIndex();
        int int8 = wildcardClassItor6.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor6.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor10 = wildcardClassItor6.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int12 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardItor9);
        org.junit.Assert.assertNotNull(wildcardItor10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate19 = wildcardClassItor8.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate21 = wildcardClassItor8.getPredicate();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertNull(wildcardPredicate19);
        org.junit.Assert.assertNull(wildcardPredicate21);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor11.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        int int14 = wildcardClassItor12.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor17 = wildcardClassItor10.getListIterator();
        int int18 = wildcardClassItor10.previousIndex();
        boolean boolean19 = wildcardClassItor10.hasNext();
        int int20 = wildcardClassItor10.nextIndex();
        typeItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        // The following exception was thrown during execution in test generation
        try {
            typeItor8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        int int4 = wildcardClassItor1.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(wildcardItor5);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        boolean boolean13 = wildcardClassItor4.hasPrevious();
        int int14 = wildcardClassItor4.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        int int6 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int10 = wildcardClassItor8.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate11 = wildcardClassItor8.getPredicate();
        boolean boolean12 = wildcardClassItor8.hasPrevious();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor8.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.GenericDeclaration> genericDeclarationItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.GenericDeclaration>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int16 = genericDeclarationItor15.nextIndex();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardItor13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate1 = wildcardClassItor0.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        boolean boolean3 = wildcardClassItor0.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        int int7 = wildcardClassItor4.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        boolean boolean10 = wildcardClassItor9.hasNext();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = wildcardClassItor8.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        int int6 = wildcardClassItor4.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.previousIndex();
        boolean boolean4 = wildcardClassItor1.hasNext();
        boolean boolean5 = wildcardClassItor1.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        int int4 = wildcardClassItor1.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(wildcardItor5);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor3);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        boolean boolean17 = wildcardClassItor0.hasNext();
        boolean boolean18 = wildcardClassItor0.hasNext();
        int int19 = wildcardClassItor0.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass20 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        boolean boolean13 = wildcardClassItor4.hasPrevious();
        java.lang.Class<?> wildcardClass14 = wildcardClassItor4.getClass();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int18 = wildcardClassItor17.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        int int20 = wildcardClassItor17.previousIndex();
        boolean boolean21 = wildcardClassItor17.hasNext();
        boolean boolean22 = wildcardClassItor17.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass23 = wildcardClassItor17.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        int int5 = wildcardClassItor1.previousIndex();
        boolean boolean6 = wildcardClassItor1.hasNext();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor1.getListIterator();
        java.lang.Class<?> wildcardClass8 = wildcardItor7.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor4.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor8.getListIterator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertNotNull(wildcardItor9);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        int int4 = wildcardClassItor1.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        boolean boolean17 = wildcardClassItor0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass18 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        int int4 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        int int7 = wildcardClassItor6.previousIndex();
        int int8 = wildcardClassItor6.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor6.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor10 = wildcardClassItor6.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor10);
        int int12 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardItor9);
        org.junit.Assert.assertNotNull(wildcardItor10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        int int6 = wildcardClassItor4.previousIndex();
        int int7 = wildcardClassItor4.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        boolean boolean11 = wildcardClassItor9.hasPrevious();
        int int12 = wildcardClassItor9.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int15 = wildcardClassItor14.previousIndex();
        int int16 = wildcardClassItor14.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor17 = wildcardClassItor14.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor18 = wildcardClassItor14.getListIterator();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor18);
        int int20 = wildcardClassItor9.previousIndex();
        boolean boolean21 = wildcardClassItor9.hasPrevious();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.lang.Class<?> wildcardClass23 = wildcardClassItor9.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardItor17);
        org.junit.Assert.assertNotNull(wildcardItor18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        int int10 = typeItor8.previousIndex();
        boolean boolean11 = typeItor8.hasNext();
        java.lang.Class<?> wildcardClass12 = typeItor8.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        int int5 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate2 = wildcardClassItor1.getPredicate();
        int int3 = wildcardClassItor1.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        boolean boolean1 = wildcardClassItor0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass2 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        boolean boolean13 = wildcardClassItor4.hasPrevious();
        int int14 = wildcardClassItor4.previousIndex();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor5.getPredicate();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.lang.Class<?> wildcardClass8 = wildcardClassItor5.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        int int4 = wildcardClassItor1.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        boolean boolean6 = wildcardClassItor1.hasPrevious();
        java.lang.Class<?> wildcardClass7 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        boolean boolean5 = wildcardClassItor1.hasPrevious();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardItor6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardItor6);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor5.getPredicate();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        boolean boolean14 = wildcardClassItor13.hasNext();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor13.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        boolean boolean1 = wildcardClassItor0.hasNext();
        int int2 = wildcardClassItor0.nextIndex();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Object> objItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Object>();
        java.lang.Class<?> wildcardClass1 = objItor0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        int int4 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        int int7 = wildcardClassItor6.previousIndex();
        int int8 = wildcardClassItor6.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor6.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor10 = wildcardClassItor6.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor10);
        int int12 = wildcardClassItor1.previousIndex();
        boolean boolean13 = wildcardClassItor1.hasNext();
        java.lang.Class<?> wildcardClass14 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardItor9);
        org.junit.Assert.assertNotNull(wildcardItor10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        int int10 = typeItor8.previousIndex();
        boolean boolean11 = typeItor8.hasNext();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate12 = typeItor8.getPredicate();
        boolean boolean13 = typeItor8.hasPrevious();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = typeItor8.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor16 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor15.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor16);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor18 = wildcardClassItor15.getListIterator();
        typeItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor18);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.GenericDeclaration> genericDeclarationItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.GenericDeclaration>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor18);
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationItor20.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardPredicate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor18);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate1 = wildcardClassItor0.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor2 = wildcardClassItor0.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate1);
        org.junit.Assert.assertNull(wildcardItor2);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate7 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNull(wildcardPredicate7);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int11 = wildcardClassItor9.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor14 = wildcardClassItor7.getListIterator();
        boolean boolean15 = wildcardClassItor7.hasPrevious();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        boolean boolean17 = wildcardClassItor5.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass18 = wildcardClassItor5.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        int int1 = wildcardClassItor0.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass2 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        boolean boolean8 = wildcardClassItor6.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor12 = wildcardClassItor10.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        int int17 = wildcardClassItor15.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        wildcardClassItor13.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor18);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor20 = wildcardClassItor13.getListIterator();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor23 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int24 = wildcardClassItor13.previousIndex();
        int int25 = wildcardClassItor13.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor26 = wildcardClassItor13.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor13.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardItor12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(wildcardItor26);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor7.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate9 = wildcardClassItor7.getPredicate();
        int int10 = wildcardClassItor7.previousIndex();
        int int11 = wildcardClassItor7.previousIndex();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int14 = wildcardClassItor1.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        boolean boolean17 = wildcardClassItor0.hasNext();
        boolean boolean18 = wildcardClassItor0.hasNext();
        int int19 = wildcardClassItor0.nextIndex();
        java.lang.Class<?> wildcardClass20 = wildcardClassItor0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int7 = wildcardClassItor1.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        int int10 = wildcardClassItor0.nextIndex();
        boolean boolean11 = wildcardClassItor0.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor0.getListIterator();
        int int14 = wildcardClassItor0.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardItor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int7 = wildcardClassItor4.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Object> objItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Object>();
        boolean boolean1 = objItor0.hasPrevious();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        boolean boolean18 = wildcardClassItor8.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor20.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor21);
        int int23 = wildcardClassItor21.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor24 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor21);
        wildcardClassItor19.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor24);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor26 = wildcardClassItor19.getListIterator();
        int int27 = wildcardClassItor19.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate28 = wildcardClassItor19.getPredicate();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate28);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        boolean boolean8 = wildcardClassItor5.hasPrevious();
        boolean boolean9 = wildcardClassItor5.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = wildcardClassItor5.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int10 = wildcardClassItor8.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        boolean boolean12 = wildcardClassItor11.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        int int14 = wildcardClassItor11.previousIndex();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor16 = wildcardClassItor11.getListIterator();
        boolean boolean17 = wildcardClassItor11.hasNext();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        boolean boolean7 = wildcardClassItor5.hasPrevious();
        int int8 = wildcardClassItor5.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor5.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.lang.Class<?> wildcardClass11 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(wildcardItor9);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        int int6 = wildcardClassItor4.previousIndex();
        int int7 = wildcardClassItor4.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        boolean boolean11 = wildcardClassItor9.hasPrevious();
        int int12 = wildcardClassItor9.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int15 = wildcardClassItor14.previousIndex();
        int int16 = wildcardClassItor14.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor17 = wildcardClassItor14.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor18 = wildcardClassItor14.getListIterator();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor18);
        int int20 = wildcardClassItor9.previousIndex();
        boolean boolean21 = wildcardClassItor9.hasPrevious();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass23 = wildcardClassItor9.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardItor17);
        org.junit.Assert.assertNotNull(wildcardItor18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate19 = wildcardClassItor8.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass20 = wildcardClassItor8.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertNull(wildcardPredicate19);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        boolean boolean14 = wildcardClassItor13.hasPrevious();
        java.lang.Class<?> wildcardClass15 = wildcardClassItor13.getClass();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor2 = wildcardClassItor1.getListIterator();
        int int3 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNotNull(wildcardItor2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        int int1 = wildcardClassItor0.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor2 = wildcardClassItor0.getListIterator();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(wildcardItor2);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        boolean boolean18 = wildcardClassItor8.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor20.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor21);
        int int23 = wildcardClassItor21.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor24 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor21);
        wildcardClassItor19.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor24);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor26 = wildcardClassItor19.getListIterator();
        int int27 = wildcardClassItor19.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate28 = wildcardClassItor19.getPredicate();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        java.lang.Class<?> wildcardClass30 = wildcardClassItor19.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate28);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.apache.commons.collections4.iterators.FilterListIterator<java.io.Serializable> serializableItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.io.Serializable>();
        boolean boolean1 = serializableItor0.hasPrevious();
        java.lang.Class<?> wildcardClass2 = serializableItor0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        int int6 = wildcardClassItor1.previousIndex();
        java.lang.Class<?> wildcardClass7 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int18 = wildcardClassItor17.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        int int20 = wildcardClassItor17.previousIndex();
        int int21 = wildcardClassItor17.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor17.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate1 = wildcardClassItor0.getPredicate();
        boolean boolean2 = wildcardClassItor0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor5.getPredicate();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        boolean boolean8 = wildcardClassItor0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        boolean boolean7 = wildcardClassItor5.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor5.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        int int7 = wildcardClassItor4.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = wildcardClassItor8.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int18 = wildcardClassItor17.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass19 = wildcardClassItor17.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor11.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        int int14 = wildcardClassItor12.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor17 = wildcardClassItor10.getListIterator();
        int int18 = wildcardClassItor10.previousIndex();
        boolean boolean19 = wildcardClassItor10.hasNext();
        int int20 = wildcardClassItor10.nextIndex();
        typeItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int22 = wildcardClassItor10.nextIndex();
        boolean boolean23 = wildcardClassItor10.hasPrevious();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor24 = wildcardClassItor10.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate25 = wildcardClassItor10.getPredicate();
        int int26 = wildcardClassItor10.nextIndex();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardItor24);
        org.junit.Assert.assertNull(wildcardPredicate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor4.getPredicate();
        int int7 = wildcardClassItor4.nextIndex();
        java.lang.Class<?> wildcardClass8 = wildcardClassItor4.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNull(wildcardPredicate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int7 = wildcardClassItor4.previousIndex();
        boolean boolean8 = wildcardClassItor4.hasNext();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor4.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor9);
        java.lang.Class<?> wildcardClass11 = wildcardItor9.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardItor9);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate7 = wildcardClassItor6.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor6.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNull(wildcardPredicate7);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate3 = wildcardClassItor1.getPredicate();
        int int4 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        boolean boolean13 = wildcardClassItor4.hasPrevious();
        int int14 = wildcardClassItor4.nextIndex();
        java.lang.Class<?> wildcardClass15 = wildcardClassItor4.getClass();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor11.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        int int14 = wildcardClassItor12.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor17 = wildcardClassItor10.getListIterator();
        int int18 = wildcardClassItor10.previousIndex();
        boolean boolean19 = wildcardClassItor10.hasNext();
        int int20 = wildcardClassItor10.nextIndex();
        typeItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int22 = wildcardClassItor10.nextIndex();
        boolean boolean23 = wildcardClassItor10.hasPrevious();
        java.lang.Class<?> wildcardClass24 = wildcardClassItor10.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        boolean boolean7 = wildcardClassItor5.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor5.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor4.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertNotNull(wildcardItor7);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        int int4 = wildcardClassItor1.nextIndex();
        int int5 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor6.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        int int13 = wildcardClassItor11.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor11.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor11.getListIterator();
        boolean boolean16 = wildcardClassItor11.hasNext();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor17 = wildcardClassItor11.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate18 = wildcardClassItor11.getPredicate();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass20 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardItor17);
        org.junit.Assert.assertNull(wildcardPredicate18);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        int int4 = wildcardClassItor1.nextIndex();
        int int5 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate9 = wildcardClassItor0.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate9);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        java.lang.Class<?> wildcardClass4 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate7 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor9.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor13.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor14);
        int int16 = wildcardClassItor14.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor14);
        wildcardClassItor12.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor19 = wildcardClassItor12.getListIterator();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass22 = wildcardClassItor9.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNull(wildcardPredicate7);
        org.junit.Assert.assertNull(wildcardItor11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor19);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int3 = wildcardClassItor0.nextIndex();
        java.lang.Class<?> wildcardClass4 = wildcardClassItor0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor8 = wildcardClassItor6.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        int int13 = wildcardClassItor11.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor14);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor16 = wildcardClassItor9.getListIterator();
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor18 = wildcardClassItor6.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor18);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass21 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor16);
        org.junit.Assert.assertNotNull(wildcardItor18);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        boolean boolean19 = wildcardClassItor18.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor20);
        int int22 = wildcardClassItor21.previousIndex();
        int int23 = wildcardClassItor21.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate24 = wildcardClassItor21.getPredicate();
        int int25 = wildcardClassItor21.nextIndex();
        wildcardClassItor18.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass27 = wildcardClassItor18.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(wildcardPredicate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate9 = wildcardClassItor0.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate9);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        int int6 = wildcardClassItor1.previousIndex();
        int int7 = wildcardClassItor1.previousIndex();
        boolean boolean8 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = wildcardClassItor9.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate1 = wildcardClassItor0.getPredicate();
        boolean boolean2 = wildcardClassItor0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        int int6 = wildcardClassItor4.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        boolean boolean7 = wildcardClassItor6.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor6.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        boolean boolean1 = wildcardClassItor0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass2 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        int int6 = wildcardClassItor4.previousIndex();
        int int7 = wildcardClassItor4.previousIndex();
        java.lang.Class<?> wildcardClass8 = wildcardClassItor4.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.lang.Class<?> wildcardClass8 = wildcardClassItor5.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        boolean boolean1 = wildcardClassItor0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass2 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.GenericDeclaration> genericDeclarationItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.GenericDeclaration>();
        boolean boolean1 = genericDeclarationItor0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        int int10 = typeItor8.previousIndex();
        boolean boolean11 = typeItor8.hasNext();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate12 = typeItor8.getPredicate();
        int int13 = typeItor8.previousIndex();
        int int14 = typeItor8.previousIndex();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardPredicate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor4.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertNotNull(wildcardItor7);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Object> objItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Object>();
        int int1 = objItor0.nextIndex();
        boolean boolean2 = objItor0.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor3 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor3);
        int int5 = wildcardClassItor4.previousIndex();
        int int6 = wildcardClassItor4.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate7 = wildcardClassItor4.getPredicate();
        int int8 = wildcardClassItor4.previousIndex();
        boolean boolean9 = wildcardClassItor4.hasNext();
        int int10 = wildcardClassItor4.previousIndex();
        objItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(wildcardPredicate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        int int4 = wildcardClassItor1.nextIndex();
        int int5 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int7 = wildcardClassItor4.previousIndex();
        boolean boolean8 = wildcardClassItor4.hasNext();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor4.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = wildcardClassItor10.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardItor9);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        boolean boolean17 = wildcardClassItor0.hasNext();
        boolean boolean18 = wildcardClassItor0.hasNext();
        int int19 = wildcardClassItor0.nextIndex();
        boolean boolean20 = wildcardClassItor0.hasNext();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor21 = wildcardClassItor0.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass22 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardItor21);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        int int4 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate7 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNull(wildcardPredicate7);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate19 = wildcardClassItor18.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor18);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor21 = wildcardClassItor20.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass22 = wildcardClassItor20.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertNull(wildcardPredicate19);
        org.junit.Assert.assertNotNull(wildcardItor21);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int11 = wildcardClassItor9.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor14 = wildcardClassItor7.getListIterator();
        boolean boolean15 = wildcardClassItor7.hasPrevious();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        int int17 = wildcardClassItor7.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor18 = wildcardClassItor7.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate20 = wildcardClassItor19.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        java.lang.Class<?> wildcardClass23 = wildcardClassItor19.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardItor18);
        org.junit.Assert.assertNull(wildcardPredicate20);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate2 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate2);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate19 = wildcardClassItor18.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass20 = wildcardPredicate19.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertNull(wildcardPredicate19);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        int int10 = wildcardClassItor0.nextIndex();
        boolean boolean11 = wildcardClassItor0.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        boolean boolean13 = wildcardClassItor0.hasPrevious();
        java.lang.Class<?> wildcardClass14 = wildcardClassItor0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        int int10 = typeItor8.previousIndex();
        boolean boolean11 = typeItor8.hasNext();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate12 = typeItor8.getPredicate();
        boolean boolean13 = typeItor8.hasPrevious();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = typeItor8.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor16 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor15.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor16);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor18 = wildcardClassItor15.getListIterator();
        typeItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor18);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.GenericDeclaration> genericDeclarationItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.GenericDeclaration>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor18);
        int int21 = genericDeclarationItor20.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationItor20.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardPredicate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int18 = wildcardClassItor17.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        int int20 = wildcardClassItor17.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        java.lang.Class<?> wildcardClass22 = wildcardClassItor17.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int18 = wildcardClassItor8.previousIndex();
        java.lang.Class<?> wildcardClass19 = wildcardClassItor8.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int19 = wildcardClassItor8.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor20 = wildcardClassItor8.getListIterator();
        java.lang.Class<?> wildcardClass21 = wildcardClassItor8.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        boolean boolean8 = wildcardClassItor6.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor12 = wildcardClassItor10.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        int int17 = wildcardClassItor15.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        wildcardClassItor13.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor18);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor20 = wildcardClassItor13.getListIterator();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor23 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int24 = wildcardClassItor13.previousIndex();
        int int25 = wildcardClassItor13.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor26 = wildcardClassItor13.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor13.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardItor12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(wildcardItor26);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor6.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        boolean boolean7 = wildcardClassItor5.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor5.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate1 = wildcardClassItor0.getPredicate();
        boolean boolean2 = wildcardClassItor0.hasNext();
        java.util.ListIterator<java.lang.Class<?>> wildcardClassItor3 = null;
        wildcardClassItor0.setListIterator(wildcardClassItor3);
        int int5 = wildcardClassItor0.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        java.lang.Class<?> wildcardClass7 = wildcardClassItor4.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor3 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor3.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor5.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        boolean boolean19 = wildcardClassItor18.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor20);
        int int22 = wildcardClassItor21.previousIndex();
        int int23 = wildcardClassItor21.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate24 = wildcardClassItor21.getPredicate();
        int int25 = wildcardClassItor21.nextIndex();
        wildcardClassItor18.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass27 = wildcardClassItor18.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(wildcardPredicate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor8 = wildcardClassItor6.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        int int13 = wildcardClassItor11.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor14);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor16 = wildcardClassItor9.getListIterator();
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor18 = wildcardClassItor6.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor18);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass21 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor16);
        org.junit.Assert.assertNotNull(wildcardItor18);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int7 = wildcardClassItor4.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor8 = wildcardClassItor4.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        int int17 = wildcardClassItor15.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        boolean boolean19 = wildcardClassItor18.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor18);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor22 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor21.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor22);
        int int24 = wildcardClassItor22.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor25 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor22);
        boolean boolean26 = wildcardClassItor25.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor27 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        int int28 = wildcardClassItor25.previousIndex();
        wildcardClassItor18.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor30 = wildcardClassItor25.getListIterator();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardItor8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor30);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        boolean boolean19 = wildcardClassItor18.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor20);
        int int22 = wildcardClassItor21.previousIndex();
        int int23 = wildcardClassItor21.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate24 = wildcardClassItor21.getPredicate();
        int int25 = wildcardClassItor21.nextIndex();
        wildcardClassItor18.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass27 = wildcardClassItor21.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(wildcardPredicate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        int int4 = wildcardClassItor1.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(wildcardItor5);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardItor4);
        org.junit.Assert.assertNotNull(wildcardItor5);
        org.junit.Assert.assertNotNull(wildcardItor6);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        int int6 = wildcardClassItor1.previousIndex();
        int int7 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        int int4 = wildcardClassItor1.nextIndex();
        boolean boolean5 = wildcardClassItor1.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        int int9 = wildcardClassItor7.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor7.getListIterator();
        int int12 = wildcardClassItor7.previousIndex();
        int int13 = wildcardClassItor7.previousIndex();
        boolean boolean14 = wildcardClassItor7.hasPrevious();
        boolean boolean15 = wildcardClassItor7.hasNext();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(wildcardItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        int int6 = wildcardClassItor1.previousIndex();
        int int7 = wildcardClassItor1.previousIndex();
        int int8 = wildcardClassItor1.previousIndex();
        boolean boolean9 = wildcardClassItor1.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate1 = wildcardClassItor0.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor2 = wildcardClassItor0.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardItor2.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate1);
        org.junit.Assert.assertNull(wildcardItor2);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        int int4 = wildcardClassItor1.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(wildcardItor5);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        int int7 = wildcardClassItor5.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int7 = wildcardClassItor4.previousIndex();
        boolean boolean8 = wildcardClassItor4.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int10 = wildcardClassItor8.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor6.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor13);
        int int15 = typeItor14.nextIndex();
        int int16 = typeItor14.previousIndex();
        boolean boolean17 = typeItor14.hasNext();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate18 = typeItor14.getPredicate();
        boolean boolean19 = typeItor14.hasPrevious();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate20 = typeItor14.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor22 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor21.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor22);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor24 = wildcardClassItor21.getListIterator();
        typeItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor24);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor24);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardPredicate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardPredicate20);
        org.junit.Assert.assertNotNull(wildcardItor24);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        boolean boolean7 = wildcardClassItor5.hasNext();
        int int8 = wildcardClassItor5.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor5.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean6 = wildcardClassItor5.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor5.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        int int1 = wildcardClassItor0.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor3 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor2.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor3);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor3.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int10 = wildcardClassItor8.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor6.getListIterator();
        wildcardClassItor3.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor6.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor13);
        org.junit.Assert.assertNotNull(wildcardItor15);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.apache.commons.collections4.iterators.FilterListIterator<java.util.Iterator<java.lang.Class<?>>> wildcardClassItorItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.util.Iterator<java.lang.Class<?>>>();
        int int1 = wildcardClassItorItor0.nextIndex();
        java.lang.Class<?> wildcardClass2 = wildcardClassItorItor0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        boolean boolean18 = wildcardClassItor8.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor20.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor21);
        int int23 = wildcardClassItor21.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor24 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor21);
        wildcardClassItor19.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor24);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor26 = wildcardClassItor19.getListIterator();
        int int27 = wildcardClassItor19.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate28 = wildcardClassItor19.getPredicate();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass30 = wildcardClassItor8.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate28);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        boolean boolean7 = wildcardClassItor0.hasNext();
        int int8 = wildcardClassItor0.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = wildcardClassItor9.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        int int9 = wildcardClassItor8.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor10 = wildcardClassItor8.getListIterator();
        int int11 = wildcardClassItor8.nextIndex();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = wildcardClassItor5.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate1 = wildcardClassItor0.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int3 = annotatedElementItor2.nextIndex();
        org.junit.Assert.assertNull(wildcardPredicate1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.apache.commons.collections4.iterators.FilterListIterator<java.io.Serializable> serializableItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.io.Serializable>();
        int int1 = serializableItor0.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            serializableItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        boolean boolean13 = wildcardClassItor4.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int15 = wildcardClassItor14.nextIndex();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.apache.commons.collections4.iterators.FilterListIterator<java.util.Iterator<java.lang.Class<?>>> wildcardClassItorItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.util.Iterator<java.lang.Class<?>>>();
        boolean boolean1 = wildcardClassItorItor0.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItorItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        int int4 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor0.getListIterator();
        boolean boolean4 = wildcardClassItor0.hasPrevious();
        java.lang.Class<?> wildcardClass5 = wildcardClassItor0.getClass();
        org.junit.Assert.assertNotNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        int int6 = wildcardClassItor1.previousIndex();
        int int7 = wildcardClassItor1.previousIndex();
        int int8 = wildcardClassItor1.previousIndex();
        boolean boolean9 = wildcardClassItor1.hasPrevious();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor10 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = wildcardItor10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardItor10);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        int int4 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        int int7 = wildcardClassItor6.previousIndex();
        int int8 = wildcardClassItor6.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor6.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor10 = wildcardClassItor6.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardItor9);
        org.junit.Assert.assertNotNull(wildcardItor10);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardClassItor2.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        int int9 = wildcardClassItor8.previousIndex();
        int int10 = wildcardClassItor8.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor8.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor12 = wildcardClassItor8.getListIterator();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        boolean boolean14 = wildcardClassItor4.hasPrevious();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor4.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass16 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNull(wildcardPredicate6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertNotNull(wildcardItor12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardItor15);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        boolean boolean5 = wildcardClassItor1.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        java.lang.Class<?> wildcardClass2 = wildcardClassItor0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        java.util.ListIterator<java.lang.Class<?>> wildcardClassItor13 = null;
        wildcardClassItor1.setListIterator(wildcardClassItor13);
        boolean boolean15 = wildcardClassItor1.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass16 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        boolean boolean6 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int11 = wildcardClassItor9.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor16 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor15.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor16);
        int int18 = wildcardClassItor16.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor16);
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor21 = wildcardClassItor14.getListIterator();
        boolean boolean22 = wildcardClassItor14.hasPrevious();
        wildcardClassItor12.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor14);
        int int24 = wildcardClassItor14.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor25 = wildcardClassItor14.getListIterator();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass27 = wildcardClassItor14.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardItor25);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        java.lang.Class<?> wildcardClass14 = annotatedElementItor13.getClass();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        boolean boolean5 = wildcardClassItor1.hasNext();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardItor6);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        boolean boolean8 = wildcardClassItor5.hasPrevious();
        boolean boolean9 = wildcardClassItor5.hasPrevious();
        boolean boolean10 = wildcardClassItor5.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = wildcardClassItor5.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardItor5.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        int int4 = wildcardClassItor1.nextIndex();
        int int5 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int7 = wildcardClassItor6.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        boolean boolean10 = wildcardClassItor9.hasNext();
        int int11 = wildcardClassItor9.previousIndex();
        boolean boolean12 = wildcardClassItor9.hasNext();
        int int13 = wildcardClassItor9.nextIndex();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor1.getPredicate();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertNull(wildcardPredicate6);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.previousIndex();
        boolean boolean4 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor8 = wildcardClassItor5.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        java.lang.Class<?> wildcardClass12 = wildcardClassItor10.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardItor8);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        int int7 = wildcardClassItor4.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = wildcardClassItor8.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int19 = wildcardClassItor8.previousIndex();
        int int20 = wildcardClassItor8.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor21 = wildcardClassItor8.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.io.Serializable> serializableItor22 = new org.apache.commons.collections4.iterators.FilterListIterator<java.io.Serializable>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        boolean boolean23 = wildcardClassItor8.hasPrevious();
        java.lang.Class<?> wildcardClass24 = wildcardClassItor8.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardItor21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        int int4 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        int int7 = wildcardClassItor6.previousIndex();
        int int8 = wildcardClassItor6.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor6.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor10 = wildcardClassItor6.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardItor9);
        org.junit.Assert.assertNotNull(wildcardItor10);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        java.util.ListIterator<java.lang.Class<?>> wildcardClassItor13 = null;
        wildcardClassItor1.setListIterator(wildcardClassItor13);
        java.lang.Class<?> wildcardClass15 = wildcardClassItor1.getClass();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        int int10 = typeItor8.previousIndex();
        boolean boolean11 = typeItor8.hasNext();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate12 = typeItor8.getPredicate();
        int int13 = typeItor8.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            typeItor8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardPredicate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        int int6 = wildcardClassItor1.previousIndex();
        int int7 = wildcardClassItor1.previousIndex();
        int int8 = wildcardClassItor1.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int11 = wildcardClassItor9.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor14 = wildcardClassItor7.getListIterator();
        boolean boolean15 = wildcardClassItor7.hasPrevious();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        int int17 = wildcardClassItor7.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor18 = wildcardClassItor7.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate20 = wildcardClassItor19.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardItor18);
        org.junit.Assert.assertNull(wildcardPredicate20);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor7.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate9 = wildcardClassItor7.getPredicate();
        int int10 = wildcardClassItor7.previousIndex();
        int int11 = wildcardClassItor7.previousIndex();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int14 = wildcardClassItor1.nextIndex();
        java.lang.Class<?> wildcardClass15 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        int int7 = wildcardClassItor4.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        boolean boolean12 = wildcardClassItor10.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor13.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor14);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor16 = wildcardClassItor14.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor18.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        int int21 = wildcardClassItor19.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor22 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        wildcardClassItor17.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor22);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor24 = wildcardClassItor17.getListIterator();
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor27 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        int int28 = wildcardClassItor27.nextIndex();
        boolean boolean29 = wildcardClassItor27.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor30 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor31 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor30.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor31);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor33 = wildcardClassItor31.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor34 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor35 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor36 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor35.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor36);
        int int38 = wildcardClassItor36.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor39 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor36);
        wildcardClassItor34.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor39);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor41 = wildcardClassItor34.getListIterator();
        wildcardClassItor31.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor34);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor43 = wildcardClassItor34.getListIterator();
        wildcardClassItor27.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor34);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass46 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardItor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardItor33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor41);
        org.junit.Assert.assertNotNull(wildcardItor43);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        int int6 = wildcardClassItor1.nextIndex();
        int int7 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int7 = wildcardClassItor4.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor8 = wildcardClassItor4.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        int int17 = wildcardClassItor15.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        boolean boolean19 = wildcardClassItor18.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor18);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor22 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor21.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor22);
        int int24 = wildcardClassItor22.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor25 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor22);
        boolean boolean26 = wildcardClassItor25.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor27 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        int int28 = wildcardClassItor25.previousIndex();
        wildcardClassItor18.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor30 = wildcardClassItor25.getListIterator();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor25.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardItor8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor30);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        int int10 = typeItor8.previousIndex();
        int int11 = typeItor8.nextIndex();
        boolean boolean12 = typeItor8.hasNext();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor5.getPredicate();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        boolean boolean14 = wildcardClassItor13.hasNext();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor16 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = wildcardClassItor16.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate3 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate3);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int7 = wildcardClassItor1.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        boolean boolean8 = wildcardClassItor5.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor5.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor4.getPredicate();
        int int7 = wildcardClassItor4.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNull(wildcardPredicate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor11.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        int int14 = wildcardClassItor12.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor17 = wildcardClassItor10.getListIterator();
        int int18 = wildcardClassItor10.previousIndex();
        boolean boolean19 = wildcardClassItor10.hasNext();
        int int20 = wildcardClassItor10.nextIndex();
        typeItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int22 = typeItor8.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            typeItor8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int7 = wildcardClassItor4.nextIndex();
        int int8 = wildcardClassItor4.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int11 = wildcardClassItor10.previousIndex();
        int int12 = wildcardClassItor10.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate13 = wildcardClassItor10.getPredicate();
        int int14 = wildcardClassItor10.previousIndex();
        boolean boolean15 = wildcardClassItor10.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor16 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor16.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor19 = wildcardClassItor17.getListIterator();
        boolean boolean20 = wildcardClassItor17.hasNext();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass23 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(wildcardPredicate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardItor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        boolean boolean5 = wildcardClassItor1.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        int int7 = wildcardClassItor4.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        boolean boolean10 = wildcardClassItor9.hasNext();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        boolean boolean12 = wildcardClassItor8.hasNext();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate13 = wildcardClassItor8.getPredicate();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardPredicate13);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int7 = wildcardClassItor4.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor8 = wildcardClassItor4.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        int int17 = wildcardClassItor15.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        boolean boolean19 = wildcardClassItor18.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor18);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor22 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor21.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor22);
        int int24 = wildcardClassItor22.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor25 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor22);
        boolean boolean26 = wildcardClassItor25.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor27 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        int int28 = wildcardClassItor25.previousIndex();
        wildcardClassItor18.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor30 = wildcardClassItor25.getListIterator();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        boolean boolean33 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate34 = wildcardClassItor4.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass35 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardItor8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(wildcardPredicate34);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        boolean boolean8 = wildcardClassItor6.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor12 = wildcardClassItor10.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        int int17 = wildcardClassItor15.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        wildcardClassItor13.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor18);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor20 = wildcardClassItor13.getListIterator();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor23 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int24 = wildcardClassItor13.previousIndex();
        int int25 = wildcardClassItor13.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor26 = wildcardClassItor13.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.lang.Class<?> wildcardClass28 = wildcardClassItor13.getClass();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardItor12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(wildcardItor26);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        boolean boolean8 = wildcardClassItor0.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        java.util.ListIterator<java.lang.Class<?>> wildcardClassItor0 = null;
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>(wildcardClassItor0);
        java.lang.Class<?> wildcardClass2 = wildcardClassItor1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int18 = wildcardClassItor8.previousIndex();
        int int19 = wildcardClassItor8.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor21 = wildcardClassItor20.getListIterator();
        java.lang.Class<?> wildcardClass22 = wildcardItor21.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardItor21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate9 = wildcardClassItor0.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate11 = wildcardClassItor0.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate9);
        org.junit.Assert.assertNull(wildcardPredicate11);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        int int7 = wildcardClassItor4.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int9 = wildcardClassItor4.previousIndex();
        int int10 = wildcardClassItor4.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        int int6 = wildcardClassItor4.previousIndex();
        int int7 = wildcardClassItor4.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int7 = wildcardClassItor4.nextIndex();
        int int8 = wildcardClassItor4.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int11 = wildcardClassItor10.previousIndex();
        int int12 = wildcardClassItor10.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate13 = wildcardClassItor10.getPredicate();
        int int14 = wildcardClassItor10.previousIndex();
        boolean boolean15 = wildcardClassItor10.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor16 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor16.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor19 = wildcardClassItor17.getListIterator();
        boolean boolean20 = wildcardClassItor17.hasNext();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass23 = wildcardClassItor17.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(wildcardPredicate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardItor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor11.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        int int14 = wildcardClassItor12.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor17 = wildcardClassItor10.getListIterator();
        int int18 = wildcardClassItor10.previousIndex();
        boolean boolean19 = wildcardClassItor10.hasNext();
        int int20 = wildcardClassItor10.nextIndex();
        typeItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int22 = typeItor8.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate23 = typeItor8.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor24 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor25 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor26 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor25.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor26);
        int int28 = wildcardClassItor26.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor29 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor26);
        wildcardClassItor24.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor29);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor31 = wildcardClassItor24.getListIterator();
        int int32 = wildcardClassItor24.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor33 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor34 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor33.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor34);
        int int36 = wildcardClassItor34.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor37 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor34);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate38 = wildcardClassItor37.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor39 = wildcardClassItor37.getListIterator();
        wildcardClassItor24.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor37);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor41 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor37);
        int int42 = wildcardClassItor41.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor43 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor41);
        typeItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor41);
        // The following exception was thrown during execution in test generation
        try {
            typeItor8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate38);
        org.junit.Assert.assertNotNull(wildcardItor39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        boolean boolean8 = wildcardClassItor5.hasPrevious();
        boolean boolean9 = wildcardClassItor5.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = wildcardClassItor5.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor8 = wildcardClassItor6.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        int int13 = wildcardClassItor11.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor14);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor16 = wildcardClassItor9.getListIterator();
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor18 = wildcardClassItor6.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor18);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass21 = wildcardClassItor19.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor16);
        org.junit.Assert.assertNotNull(wildcardItor18);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int18 = wildcardClassItor17.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        boolean boolean20 = wildcardClassItor17.hasPrevious();
        java.lang.Class<?> wildcardClass21 = wildcardClassItor17.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        int int4 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        int int7 = wildcardClassItor6.previousIndex();
        int int8 = wildcardClassItor6.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor6.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor10 = wildcardClassItor6.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        boolean boolean12 = wildcardClassItor6.hasPrevious();
        java.lang.Class<?> wildcardClass13 = wildcardClassItor6.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardItor9);
        org.junit.Assert.assertNotNull(wildcardItor10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.previousIndex();
        boolean boolean4 = wildcardClassItor1.hasNext();
        java.lang.Class<?> wildcardClass5 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        int int4 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        int int7 = wildcardClassItor6.previousIndex();
        int int8 = wildcardClassItor6.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor6.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor10 = wildcardClassItor6.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int12 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardItor9);
        org.junit.Assert.assertNotNull(wildcardItor10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor5.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Object> objItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Object>();
        int int1 = objItor0.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate2 = objItor0.getPredicate();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate3 = objItor0.getPredicate();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(wildcardPredicate2);
        org.junit.Assert.assertNull(wildcardPredicate3);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        int int6 = wildcardClassItor1.previousIndex();
        int int7 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate9 = wildcardClassItor0.getPredicate();
        boolean boolean10 = wildcardClassItor0.hasPrevious();
        java.lang.Class<?> wildcardClass11 = wildcardClassItor0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Object> objItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Object>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate9 = objItor8.getPredicate();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertNull(wildcardPredicate9);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor5.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor5.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertNotNull(wildcardItor6);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int11 = wildcardClassItor9.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor14 = wildcardClassItor7.getListIterator();
        boolean boolean15 = wildcardClassItor7.hasPrevious();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        int int17 = wildcardClassItor7.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        int int7 = wildcardClassItor4.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        boolean boolean10 = wildcardClassItor9.hasNext();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = wildcardClassItor8.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int19 = wildcardClassItor8.previousIndex();
        int int20 = wildcardClassItor8.nextIndex();
        int int21 = wildcardClassItor8.nextIndex();
        int int22 = wildcardClassItor8.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass23 = wildcardClassItor8.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        int int10 = wildcardClassItor0.nextIndex();
        boolean boolean11 = wildcardClassItor0.hasPrevious();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate12 = wildcardClassItor0.getPredicate();
        int int13 = wildcardClassItor0.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardPredicate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor7.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate9 = wildcardClassItor7.getPredicate();
        int int10 = wildcardClassItor7.previousIndex();
        int int11 = wildcardClassItor7.previousIndex();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor13.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate3 = wildcardClassItor1.getPredicate();
        int int4 = wildcardClassItor1.previousIndex();
        int int5 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        int int9 = wildcardClassItor7.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate10 = wildcardClassItor7.getPredicate();
        boolean boolean11 = wildcardClassItor7.hasPrevious();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor12 = wildcardClassItor7.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = wildcardClassItor7.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardItor12);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int10 = wildcardClassItor8.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor6.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor13);
        int int15 = typeItor14.nextIndex();
        int int16 = typeItor14.previousIndex();
        boolean boolean17 = typeItor14.hasNext();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate18 = typeItor14.getPredicate();
        boolean boolean19 = typeItor14.hasPrevious();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate20 = typeItor14.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor22 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor21.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor22);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor24 = wildcardClassItor21.getListIterator();
        typeItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor24);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor24);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardPredicate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardPredicate20);
        org.junit.Assert.assertNotNull(wildcardItor24);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor11.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        int int14 = wildcardClassItor12.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor17 = wildcardClassItor10.getListIterator();
        int int18 = wildcardClassItor10.previousIndex();
        boolean boolean19 = wildcardClassItor10.hasNext();
        int int20 = wildcardClassItor10.nextIndex();
        typeItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int22 = wildcardClassItor10.nextIndex();
        int int23 = wildcardClassItor10.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor24 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor25 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor24);
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor27 = wildcardClassItor25.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass28 = wildcardClassItor25.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardItor27);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        boolean boolean10 = wildcardClassItor9.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor12.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int15 = wildcardClassItor13.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor16 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        boolean boolean17 = wildcardClassItor16.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor16);
        int int19 = wildcardClassItor16.previousIndex();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor16);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor21 = wildcardClassItor16.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor16);
        java.lang.Class<?> wildcardClass23 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor21);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass19 = wildcardClassItor8.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int11 = wildcardClassItor9.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor14 = wildcardClassItor7.getListIterator();
        boolean boolean15 = wildcardClassItor7.hasPrevious();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        int int17 = wildcardClassItor7.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor18 = wildcardClassItor7.getListIterator();
        java.lang.Class<?> wildcardClass19 = wildcardClassItor7.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardItor18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int10 = wildcardClassItor8.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        boolean boolean12 = wildcardClassItor11.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        int int14 = wildcardClassItor11.previousIndex();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        boolean boolean16 = wildcardClassItor4.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate7 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor9.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor13.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor14);
        int int16 = wildcardClassItor14.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor14);
        wildcardClassItor12.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor19 = wildcardClassItor12.getListIterator();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor22 = wildcardClassItor9.getListIterator();
        boolean boolean23 = wildcardClassItor9.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass24 = wildcardClassItor9.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNull(wildcardPredicate7);
        org.junit.Assert.assertNull(wildcardItor11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor19);
        org.junit.Assert.assertNotNull(wildcardItor22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        boolean boolean8 = wildcardClassItor6.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor12 = wildcardClassItor10.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        int int17 = wildcardClassItor15.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        wildcardClassItor13.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor18);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor20 = wildcardClassItor13.getListIterator();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor23 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int24 = wildcardClassItor13.previousIndex();
        int int25 = wildcardClassItor13.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor26 = wildcardClassItor13.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor28 = wildcardClassItor1.getListIterator();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardItor12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(wildcardItor26);
        org.junit.Assert.assertNotNull(wildcardItor28);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor4.getPredicate();
        boolean boolean7 = wildcardClassItor4.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int11 = wildcardClassItor9.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor9.getListIterator();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = wildcardClassItor9.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNull(wildcardPredicate6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNull(wildcardItor13);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardItor4);
        org.junit.Assert.assertNotNull(wildcardItor5);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        boolean boolean18 = wildcardClassItor8.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor20.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor21);
        int int23 = wildcardClassItor21.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor24 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor21);
        wildcardClassItor19.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor24);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor26 = wildcardClassItor19.getListIterator();
        int int27 = wildcardClassItor19.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate28 = wildcardClassItor19.getPredicate();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        boolean boolean30 = wildcardClassItor19.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor31 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor32 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor31);
        int int33 = wildcardClassItor32.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor34 = wildcardClassItor32.getListIterator();
        int int35 = wildcardClassItor32.nextIndex();
        wildcardClassItor19.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass37 = wildcardClassItor19.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor1.getListIterator();
        java.lang.Class<?> wildcardClass7 = wildcardItor6.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardItor4);
        org.junit.Assert.assertNotNull(wildcardItor5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate7 = wildcardClassItor0.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate7);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate19 = wildcardClassItor8.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        int int21 = wildcardClassItor20.nextIndex();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass23 = wildcardClassItor8.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertNull(wildcardPredicate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.previousIndex();
        boolean boolean4 = wildcardClassItor1.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        int int9 = wildcardClassItor7.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor12 = wildcardClassItor5.getListIterator();
        int int13 = wildcardClassItor5.previousIndex();
        boolean boolean14 = wildcardClassItor5.hasNext();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass16 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        int int4 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        int int7 = wildcardClassItor6.previousIndex();
        int int8 = wildcardClassItor6.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor6.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor10 = wildcardClassItor6.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int12 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardItor9);
        org.junit.Assert.assertNotNull(wildcardItor10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.previousIndex();
        boolean boolean4 = wildcardClassItor1.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        int int9 = wildcardClassItor7.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor12 = wildcardClassItor5.getListIterator();
        int int13 = wildcardClassItor5.previousIndex();
        boolean boolean14 = wildcardClassItor5.hasNext();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate16 = wildcardClassItor5.getPredicate();
        java.lang.Class<?> wildcardClass17 = wildcardClassItor5.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardPredicate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        int int5 = wildcardClassItor1.previousIndex();
        boolean boolean6 = wildcardClassItor1.hasNext();
        int int7 = wildcardClassItor1.nextIndex();
        java.lang.Class<?> wildcardClass8 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        boolean boolean10 = wildcardClassItor9.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor12.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int15 = wildcardClassItor13.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor16 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        boolean boolean17 = wildcardClassItor16.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor16);
        int int19 = wildcardClassItor16.previousIndex();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor16);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor21 = wildcardClassItor16.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor16);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor21);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        int int7 = wildcardClassItor5.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        java.lang.Class<?> wildcardClass10 = wildcardClassItor8.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        int int10 = wildcardClassItor0.nextIndex();
        boolean boolean11 = wildcardClassItor0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        int int6 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int10 = wildcardClassItor8.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate11 = wildcardClassItor8.getPredicate();
        boolean boolean12 = wildcardClassItor8.hasPrevious();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor8.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.GenericDeclaration> genericDeclarationItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.GenericDeclaration>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean16 = genericDeclarationItor15.hasPrevious();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardItor13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor4.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor16 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor15.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor16);
        int int18 = wildcardClassItor16.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor16);
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor21 = wildcardClassItor14.getListIterator();
        int int22 = wildcardClassItor14.previousIndex();
        boolean boolean23 = wildcardClassItor14.hasNext();
        int int24 = wildcardClassItor14.nextIndex();
        boolean boolean25 = wildcardClassItor14.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor26 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor14);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor27 = wildcardClassItor14.getListIterator();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor27);
        java.lang.Class<?> wildcardClass29 = wildcardClassItor4.getClass();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertNotNull(wildcardItor13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardItor27);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int7 = wildcardClassItor4.previousIndex();
        boolean boolean8 = wildcardClassItor4.hasNext();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor4.getListIterator();
        int int10 = wildcardClassItor4.nextIndex();
        int int11 = wildcardClassItor4.previousIndex();
        int int12 = wildcardClassItor4.previousIndex();
        java.lang.Class<?> wildcardClass13 = wildcardClassItor4.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardItor9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        int int5 = wildcardClassItor1.previousIndex();
        boolean boolean6 = wildcardClassItor1.hasNext();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor1.getListIterator();
        java.lang.Class<?> wildcardClass8 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate1 = wildcardClassItor0.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate1);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate2 = wildcardClassItor1.getPredicate();
        int int3 = wildcardClassItor1.nextIndex();
        boolean boolean4 = wildcardClassItor1.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        boolean boolean14 = wildcardClassItor13.hasPrevious();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        int int16 = wildcardClassItor13.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor13.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.apache.commons.collections4.iterators.FilterListIterator<java.io.Serializable> serializableItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.io.Serializable>();
        boolean boolean1 = serializableItor0.hasPrevious();
        boolean boolean2 = serializableItor0.hasNext();
        int int3 = serializableItor0.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            serializableItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        int int10 = typeItor8.previousIndex();
        boolean boolean11 = typeItor8.hasNext();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate12 = typeItor8.getPredicate();
        boolean boolean13 = typeItor8.hasPrevious();
        java.lang.Class<?> wildcardClass14 = typeItor8.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardPredicate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int18 = wildcardClassItor17.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        int int20 = wildcardClassItor17.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        boolean boolean22 = wildcardClassItor21.hasPrevious();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        boolean boolean6 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int11 = wildcardClassItor9.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor16 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor15.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor16);
        int int18 = wildcardClassItor16.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor16);
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor21 = wildcardClassItor14.getListIterator();
        boolean boolean22 = wildcardClassItor14.hasPrevious();
        wildcardClassItor12.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor14);
        int int24 = wildcardClassItor14.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor25 = wildcardClassItor14.getListIterator();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass27 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardItor25);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        int int13 = wildcardClassItor11.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor11.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor11.getListIterator();
        boolean boolean16 = wildcardClassItor11.hasNext();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor17 = wildcardClassItor11.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate18 = wildcardClassItor11.getPredicate();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor20 = wildcardClassItor0.getListIterator();
        boolean boolean21 = wildcardClassItor0.hasNext();
        int int22 = wildcardClassItor0.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass23 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardItor17);
        org.junit.Assert.assertNull(wildcardPredicate18);
        org.junit.Assert.assertNotNull(wildcardItor20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        boolean boolean10 = wildcardClassItor9.hasNext();
        int int11 = wildcardClassItor9.previousIndex();
        boolean boolean12 = wildcardClassItor9.hasNext();
        int int13 = wildcardClassItor9.nextIndex();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int15 = wildcardClassItor9.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate1 = wildcardClassItor0.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor2 = wildcardClassItor0.getListIterator();
        int int3 = wildcardClassItor0.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate1);
        org.junit.Assert.assertNull(wildcardItor2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        boolean boolean5 = wildcardClassItor1.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int19 = wildcardClassItor8.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor20 = wildcardClassItor8.getListIterator();
        int int21 = wildcardClassItor8.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.lang.Class<?> wildcardClass3 = wildcardClassItor0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int17 = wildcardClassItor13.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate18 = wildcardClassItor13.getPredicate();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate18);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor11.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        int int14 = wildcardClassItor12.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor17 = wildcardClassItor10.getListIterator();
        int int18 = wildcardClassItor10.previousIndex();
        boolean boolean19 = wildcardClassItor10.hasNext();
        int int20 = wildcardClassItor10.nextIndex();
        typeItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int22 = typeItor8.nextIndex();
        int int23 = typeItor8.previousIndex();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        int int4 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.lang.Class<?> wildcardClass6 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Object> objItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Object>();
        int int1 = objItor0.nextIndex();
        boolean boolean2 = objItor0.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor3 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor3);
        int int5 = wildcardClassItor4.previousIndex();
        int int6 = wildcardClassItor4.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate7 = wildcardClassItor4.getPredicate();
        int int8 = wildcardClassItor4.previousIndex();
        boolean boolean9 = wildcardClassItor4.hasNext();
        int int10 = wildcardClassItor4.previousIndex();
        objItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(wildcardPredicate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        boolean boolean6 = wildcardClassItor1.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        boolean boolean10 = wildcardClassItor9.hasNext();
        int int11 = wildcardClassItor9.previousIndex();
        boolean boolean12 = wildcardClassItor9.hasNext();
        int int13 = wildcardClassItor9.nextIndex();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int15 = wildcardClassItor9.nextIndex();
        boolean boolean16 = wildcardClassItor9.hasNext();
        int int17 = wildcardClassItor9.nextIndex();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        int int4 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        int int7 = wildcardClassItor6.previousIndex();
        int int8 = wildcardClassItor6.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor6.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor10 = wildcardClassItor6.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor10);
        int int12 = wildcardClassItor1.previousIndex();
        boolean boolean13 = wildcardClassItor1.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardItor9);
        org.junit.Assert.assertNotNull(wildcardItor10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean6 = wildcardClassItor5.hasNext();
        int int7 = wildcardClassItor5.nextIndex();
        boolean boolean8 = wildcardClassItor5.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor12 = wildcardClassItor10.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        int int17 = wildcardClassItor15.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        wildcardClassItor13.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor18);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor20 = wildcardClassItor13.getListIterator();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        boolean boolean22 = wildcardClassItor13.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor23 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int24 = wildcardClassItor23.previousIndex();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass26 = wildcardClassItor23.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardItor12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        int int10 = typeItor8.previousIndex();
        boolean boolean11 = typeItor8.hasNext();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate12 = typeItor8.getPredicate();
        boolean boolean13 = typeItor8.hasNext();
        boolean boolean14 = typeItor8.hasPrevious();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardPredicate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor11.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        int int14 = wildcardClassItor12.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor17 = wildcardClassItor10.getListIterator();
        int int18 = wildcardClassItor10.previousIndex();
        boolean boolean19 = wildcardClassItor10.hasNext();
        int int20 = wildcardClassItor10.nextIndex();
        typeItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int22 = typeItor8.previousIndex();
        boolean boolean23 = typeItor8.hasPrevious();
        java.lang.Class<?> wildcardClass24 = typeItor8.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor7.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate9 = wildcardClassItor7.getPredicate();
        int int10 = wildcardClassItor7.previousIndex();
        int int11 = wildcardClassItor7.previousIndex();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int14 = wildcardClassItor1.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate19 = wildcardClassItor8.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertNull(wildcardPredicate19);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor4.getListIterator();
        int int6 = wildcardClassItor4.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        int int9 = wildcardClassItor8.previousIndex();
        int int10 = wildcardClassItor8.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate11 = wildcardClassItor8.getPredicate();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = wildcardClassItor8.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate11);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        int int10 = typeItor8.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            typeItor8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        java.util.ListIterator<java.lang.Class<?>> wildcardClassItor0 = null;
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>(wildcardClassItor0);
        boolean boolean2 = wildcardClassItor1.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor3 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor3);
        int int5 = wildcardClassItor4.previousIndex();
        int int6 = wildcardClassItor4.previousIndex();
        boolean boolean7 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate8 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        int int16 = wildcardClassItor13.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass20 = wildcardClassItor4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardPredicate8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        int int4 = wildcardClassItor1.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>();
        boolean boolean1 = typeItor0.hasPrevious();
        boolean boolean2 = typeItor0.hasNext();
        int int3 = typeItor0.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            typeItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor7.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor4.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor8 = wildcardClassItor4.getListIterator();
        java.lang.Class<?> wildcardClass9 = wildcardItor8.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertNotNull(wildcardItor8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        boolean boolean13 = wildcardClassItor4.hasPrevious();
        int int14 = wildcardClassItor4.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate1 = wildcardClassItor0.getPredicate();
        boolean boolean2 = wildcardClassItor0.hasNext();
        boolean boolean3 = wildcardClassItor0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor3 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int5 = wildcardClassItor0.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate3 = wildcardClassItor1.getPredicate();
        int int4 = wildcardClassItor1.previousIndex();
        int int5 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.GenericDeclaration> genericDeclarationItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.GenericDeclaration>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean7 = genericDeclarationItor6.hasPrevious();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        boolean boolean17 = wildcardClassItor15.hasPrevious();
        int int18 = wildcardClassItor15.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        int int21 = wildcardClassItor20.previousIndex();
        int int22 = wildcardClassItor20.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor23 = wildcardClassItor20.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor24 = wildcardClassItor20.getListIterator();
        wildcardClassItor15.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardItor24);
        int int26 = wildcardClassItor15.previousIndex();
        wildcardClassItor13.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        boolean boolean28 = wildcardClassItor13.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor13.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(wildcardItor23);
        org.junit.Assert.assertNotNull(wildcardItor24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate3 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        int int5 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor1.getPredicate();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate3);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardPredicate6);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass18 = wildcardClassItor8.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        boolean boolean6 = wildcardClassItor1.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        int int7 = wildcardClassItor4.previousIndex();
        boolean boolean8 = wildcardClassItor4.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate1 = wildcardClassItor0.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor2 = wildcardClassItor0.getListIterator();
        int int3 = wildcardClassItor0.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate1);
        org.junit.Assert.assertNull(wildcardItor2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean6 = wildcardClassItor5.hasNext();
        int int7 = wildcardClassItor5.nextIndex();
        boolean boolean8 = wildcardClassItor5.hasNext();
        int int9 = wildcardClassItor5.previousIndex();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor5.getPredicate();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        boolean boolean14 = wildcardClassItor13.hasNext();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        int int16 = wildcardClassItor0.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        int int10 = typeItor8.previousIndex();
        boolean boolean11 = typeItor8.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor12.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor16 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor17.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor18);
        int int20 = wildcardClassItor18.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor18);
        wildcardClassItor16.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor21);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor23 = wildcardClassItor16.getListIterator();
        wildcardClassItor13.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor16);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor25 = wildcardClassItor16.getListIterator();
        typeItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor16);
        int int27 = typeItor8.previousIndex();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor23);
        org.junit.Assert.assertNotNull(wildcardItor25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>();
        java.lang.Class<?> wildcardClass1 = annotatedElementItor0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate2 = wildcardClassItor1.getPredicate();
        int int3 = wildcardClassItor1.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        boolean boolean13 = wildcardClassItor4.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        java.lang.Class<?> wildcardClass15 = wildcardClassItor4.getClass();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor2 = wildcardClassItor1.getListIterator();
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNotNull(wildcardItor2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor11.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        int int14 = wildcardClassItor12.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor17 = wildcardClassItor10.getListIterator();
        int int18 = wildcardClassItor10.previousIndex();
        boolean boolean19 = wildcardClassItor10.hasNext();
        int int20 = wildcardClassItor10.nextIndex();
        typeItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int22 = typeItor8.previousIndex();
        boolean boolean23 = typeItor8.hasPrevious();
        boolean boolean24 = typeItor8.hasPrevious();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor7.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate9 = wildcardClassItor7.getPredicate();
        int int10 = wildcardClassItor7.previousIndex();
        int int11 = wildcardClassItor7.previousIndex();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int14 = wildcardClassItor1.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor1.getListIterator();
        java.lang.Class<?> wildcardClass16 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        int int10 = wildcardClassItor0.nextIndex();
        boolean boolean11 = wildcardClassItor0.hasPrevious();
        boolean boolean12 = wildcardClassItor0.hasNext();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        int int1 = wildcardClassItor0.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor3 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor2.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor3);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor3.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor7.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int10 = wildcardClassItor8.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor11);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor6.getListIterator();
        wildcardClassItor3.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor6.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = wildcardClassItor6.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor13);
        org.junit.Assert.assertNotNull(wildcardItor15);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate1 = wildcardClassItor0.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor2 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Object> objItor3 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Object>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor2);
        // The following exception was thrown during execution in test generation
        try {
            objItor3.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardPredicate1);
        org.junit.Assert.assertNull(wildcardItor2);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertNull(wildcardPredicate5);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean5 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor4.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardItor7);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate9 = wildcardClassItor0.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate11 = wildcardClassItor0.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate9);
        org.junit.Assert.assertNull(wildcardPredicate11);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        boolean boolean5 = wildcardClassItor1.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate14 = wildcardClassItor13.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        boolean boolean17 = wildcardClassItor0.hasNext();
        boolean boolean18 = wildcardClassItor0.hasNext();
        int int19 = wildcardClassItor0.nextIndex();
        int int20 = wildcardClassItor0.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass21 = wildcardClassItor0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate14);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        int int1 = wildcardClassItor0.nextIndex();
        boolean boolean2 = wildcardClassItor0.hasPrevious();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate3 = wildcardClassItor0.getPredicate();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardPredicate3);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int7 = wildcardClassItor4.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor8 = wildcardClassItor4.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        int int17 = wildcardClassItor15.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        boolean boolean19 = wildcardClassItor18.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor18);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor22 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor21.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor22);
        int int24 = wildcardClassItor22.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor25 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor22);
        boolean boolean26 = wildcardClassItor25.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor27 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        int int28 = wildcardClassItor25.previousIndex();
        wildcardClassItor18.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor30 = wildcardClassItor25.getListIterator();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        boolean boolean33 = wildcardClassItor4.hasNext();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate34 = wildcardClassItor4.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass35 = wildcardPredicate34.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardItor8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(wildcardPredicate34);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        int int4 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        int int7 = wildcardClassItor6.previousIndex();
        int int8 = wildcardClassItor6.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor9 = wildcardClassItor6.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor10 = wildcardClassItor6.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        int int17 = wildcardClassItor15.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        wildcardClassItor13.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor18);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor20 = wildcardClassItor13.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor20);
        int int22 = typeItor21.nextIndex();
        int int23 = typeItor21.previousIndex();
        boolean boolean24 = typeItor21.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor25 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor26 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor25.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor26);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor28 = wildcardClassItor26.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor29 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor30 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor31 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor30.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor31);
        int int33 = wildcardClassItor31.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor34 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor31);
        wildcardClassItor29.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor34);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor36 = wildcardClassItor29.getListIterator();
        wildcardClassItor26.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor29);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor38 = wildcardClassItor29.getListIterator();
        typeItor21.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor29);
        wildcardClassItor12.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass41 = wildcardClassItor12.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardItor9);
        org.junit.Assert.assertNotNull(wildcardItor10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardItor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor36);
        org.junit.Assert.assertNotNull(wildcardItor38);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        int int7 = wildcardClassItor4.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        boolean boolean12 = wildcardClassItor10.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor13.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor14);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor16 = wildcardClassItor14.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor18.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        int int21 = wildcardClassItor19.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor22 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        wildcardClassItor17.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor22);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor24 = wildcardClassItor17.getListIterator();
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor27 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        int int28 = wildcardClassItor27.nextIndex();
        boolean boolean29 = wildcardClassItor27.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor30 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor31 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor30.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor31);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor33 = wildcardClassItor31.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor34 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor35 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor36 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor35.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor36);
        int int38 = wildcardClassItor36.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor39 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor36);
        wildcardClassItor34.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor39);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor41 = wildcardClassItor34.getListIterator();
        wildcardClassItor31.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor34);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor43 = wildcardClassItor34.getListIterator();
        wildcardClassItor27.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor34);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor34);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor34.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardItor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardItor33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor41);
        org.junit.Assert.assertNotNull(wildcardItor43);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor4.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate7 = wildcardClassItor6.getPredicate();
        boolean boolean8 = wildcardClassItor6.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor5);
        org.junit.Assert.assertNull(wildcardPredicate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate3 = wildcardClassItor1.getPredicate();
        int int4 = wildcardClassItor1.previousIndex();
        int int5 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor6.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        int int9 = wildcardClassItor7.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate10 = wildcardClassItor7.getPredicate();
        boolean boolean11 = wildcardClassItor7.hasPrevious();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor12 = wildcardClassItor7.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        int int14 = wildcardClassItor7.nextIndex();
        boolean boolean15 = wildcardClassItor7.hasNext();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardItor12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        boolean boolean4 = wildcardClassItor1.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate9 = wildcardClassItor0.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor10.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = wildcardClassItor10.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate9);
        org.junit.Assert.assertNotNull(wildcardItor11);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor7);
        int int9 = typeItor8.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor12 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor11.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        int int14 = wildcardClassItor12.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor12);
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor17 = wildcardClassItor10.getListIterator();
        int int18 = wildcardClassItor10.previousIndex();
        boolean boolean19 = wildcardClassItor10.hasNext();
        int int20 = wildcardClassItor10.nextIndex();
        typeItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int22 = wildcardClassItor10.nextIndex();
        boolean boolean23 = wildcardClassItor10.hasPrevious();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor24 = wildcardClassItor10.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type> typeItor25 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.Type>((java.util.ListIterator<java.lang.Class<?>>) wildcardItor24);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardItor24);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean3 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor5.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor13);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor8.getListIterator();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate19 = wildcardClassItor8.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertNull(wildcardPredicate19);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        boolean boolean10 = wildcardClassItor9.hasNext();
        int int11 = wildcardClassItor9.previousIndex();
        boolean boolean12 = wildcardClassItor9.hasNext();
        int int13 = wildcardClassItor9.nextIndex();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int15 = wildcardClassItor1.previousIndex();
        java.lang.Class<?> wildcardClass16 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        boolean boolean7 = wildcardClassItor5.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor5.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        int int3 = wildcardClassItor1.previousIndex();
        boolean boolean4 = wildcardClassItor1.hasPrevious();
        java.lang.Class<?> wildcardClass5 = wildcardClassItor1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        int int2 = wildcardClassItor1.previousIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        int int4 = wildcardClassItor1.nextIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        boolean boolean7 = wildcardClassItor1.hasNext();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor4.getListIterator();
        boolean boolean8 = wildcardClassItor4.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        boolean boolean12 = wildcardClassItor10.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor13.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor14);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor16 = wildcardClassItor14.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor17 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor19 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor18.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        int int21 = wildcardClassItor19.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor22 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor19);
        wildcardClassItor17.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor22);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor24 = wildcardClassItor17.getListIterator();
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor27 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor17);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate28 = wildcardClassItor27.getPredicate();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor27);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor30 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor31 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor32 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor31.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor32);
        int int34 = wildcardClassItor32.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor35 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor32);
        wildcardClassItor30.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor35);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor37 = wildcardClassItor30.getListIterator();
        int int38 = wildcardClassItor30.previousIndex();
        boolean boolean39 = wildcardClassItor30.hasNext();
        int int40 = wildcardClassItor30.nextIndex();
        boolean boolean41 = wildcardClassItor30.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor42 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor30);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor43 = wildcardClassItor30.getListIterator();
        int int44 = wildcardClassItor30.previousIndex();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass46 = wildcardClassItor4.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardItor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor24);
        org.junit.Assert.assertNull(wildcardPredicate28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardItor43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        boolean boolean14 = wildcardClassItor13.hasPrevious();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor15 = wildcardClassItor13.getListIterator();
        int int16 = wildcardClassItor13.nextIndex();
        boolean boolean17 = wildcardClassItor13.hasNext();
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor1.getListIterator();
        int int6 = wildcardClassItor1.previousIndex();
        int int7 = wildcardClassItor1.previousIndex();
        boolean boolean8 = wildcardClassItor1.hasPrevious();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor11 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor13 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        int int17 = wildcardClassItor15.previousIndex();
        int int18 = wildcardClassItor15.nextIndex();
        int int19 = wildcardClassItor15.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        int int21 = wildcardClassItor20.previousIndex();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor20);
        int int23 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor24 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.lang.Class<?> wildcardClass25 = wildcardClassItor24.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardItor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor4 = wildcardClassItor1.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertNull(wildcardItor4);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        int int4 = wildcardClassItor1.nextIndex();
        int int5 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int7 = wildcardClassItor6.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = wildcardClassItor6.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        int int7 = wildcardClassItor4.nextIndex();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor8 = wildcardClassItor4.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor10 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor9.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        int int12 = wildcardClassItor10.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor13 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor10);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor14 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor15 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor14.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        int int17 = wildcardClassItor15.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor18 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor15);
        boolean boolean19 = wildcardClassItor18.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor20 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor18);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor21 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor22 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor21.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor22);
        int int24 = wildcardClassItor22.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor25 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor22);
        boolean boolean26 = wildcardClassItor25.hasNext();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement> annotatedElementItor27 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.reflect.AnnotatedElement>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        int int28 = wildcardClassItor25.previousIndex();
        wildcardClassItor18.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor30 = wildcardClassItor25.getListIterator();
        wildcardClassItor10.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor25);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor33 = wildcardClassItor25.getListIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass34 = wildcardClassItor25.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardItor8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor30);
        org.junit.Assert.assertNotNull(wildcardItor33);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        int int7 = wildcardClassItor5.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = wildcardClassItor8.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor5 = wildcardClassItor4.getListIterator();
        int int6 = wildcardClassItor4.nextIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor7 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor7);
        int int9 = wildcardClassItor8.previousIndex();
        int int10 = wildcardClassItor8.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate11 = wildcardClassItor8.getPredicate();
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int13 = wildcardClassItor4.previousIndex();
        int int14 = wildcardClassItor4.nextIndex();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor0.getListIterator();
        int int8 = wildcardClassItor0.previousIndex();
        boolean boolean9 = wildcardClassItor0.hasNext();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor10 = wildcardClassItor0.getListIterator();
        boolean boolean11 = wildcardClassItor0.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = wildcardClassItor0.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate4 = wildcardClassItor1.getPredicate();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        int int7 = wildcardClassItor5.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor8);
        int int10 = wildcardClassItor1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = wildcardClassItor1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor3 = wildcardClassItor1.getListIterator();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor6 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor5.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        int int8 = wildcardClassItor6.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor6);
        wildcardClassItor4.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor11 = wildcardClassItor4.getListIterator();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor4);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate13 = wildcardClassItor4.getPredicate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = wildcardPredicate13.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNull(wildcardItor3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardItor11);
        org.junit.Assert.assertNull(wildcardPredicate13);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor0);
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor2 = wildcardClassItor1.getListIterator();
        java.util.ListIterator<java.lang.Class<?>> wildcardClassItor3 = null;
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>(wildcardClassItor3);
        wildcardClassItor1.setListIterator(wildcardClassItor3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = wildcardClassItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertNotNull(wildcardItor2);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        int int3 = wildcardClassItor1.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor4 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor1);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate5 = wildcardClassItor4.getPredicate();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor6 = wildcardClassItor4.getListIterator();
        java.util.ListIterator<? extends java.lang.Class<?>> wildcardItor7 = wildcardClassItor4.getListIterator();
        boolean boolean8 = wildcardClassItor4.hasPrevious();
        boolean boolean9 = wildcardClassItor4.hasPrevious();
        java.lang.Class<?> wildcardClass10 = wildcardClassItor4.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate5);
        org.junit.Assert.assertNotNull(wildcardItor6);
        org.junit.Assert.assertNotNull(wildcardItor7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor0 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor1 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor2 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor1.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        int int4 = wildcardClassItor2.previousIndex();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor5 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor2);
        org.apache.commons.collections4.Predicate<? super java.lang.Class<?>> wildcardPredicate6 = wildcardClassItor5.getPredicate();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor5);
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor8 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>> wildcardClassItor9 = new org.apache.commons.collections4.iterators.FilterListIterator<java.lang.Class<?>>();
        wildcardClassItor8.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int11 = wildcardClassItor9.previousIndex();
        int int12 = wildcardClassItor9.nextIndex();
        int int13 = wildcardClassItor9.previousIndex();
        wildcardClassItor0.setListIterator((java.util.ListIterator<java.lang.Class<?>>) wildcardClassItor9);
        int int15 = wildcardClassItor9.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            wildcardClassItor9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: FilterListIterator.remove() is not supported.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Constructs a new <code>FilterListIterator</code> that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked. "*/
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(wildcardPredicate6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }
}

