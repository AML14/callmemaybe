[
  {
    "signature": "byteArrayToBase64(byte[] a)",
    "name": "byteArrayToBase64",
    "containingClass": {
      "qualifiedName": "java.util.prefs.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "java.util.prefs.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "a"
      }
    ],
    "protocol": {
      "member": "byteArrayToBase64(byte[] a)",
      "comment": "Translates the specified byte array into a Base64 string as per method_0",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "byteArrayToAltBase64(byte[] a)",
    "name": "byteArrayToAltBase64",
    "containingClass": {
      "qualifiedName": "java.util.prefs.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "java.util.prefs.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "a"
      }
    ],
    "protocol": {
      "member": "byteArrayToAltBase64(byte[] a)",
      "comment": "Translates the specified byte array into an \"alternate representation\" Base64 string. This non-standard variant uses an alphabet that does not contain the uppercase alphabetic characters, which makes it suitable for use in situations where case-folding occurs.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "base64ToByteArray(java.lang.String s)",
    "name": "base64ToByteArray",
    "containingClass": {
      "qualifiedName": "java.util.prefs.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "java.util.prefs.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "protocol": {
      "member": "base64ToByteArray(java.lang.String s)",
      "comment": "Translates the specified Base64 string (as per method_0 into a byte array. @throw IllegalArgumentException if s is not a valid Base64 string.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "altBase64ToByteArray(java.lang.String s)",
    "name": "altBase64ToByteArray",
    "containingClass": {
      "qualifiedName": "java.util.prefs.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "java.util.prefs.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "protocol": {
      "member": "altBase64ToByteArray(java.lang.String s)",
      "comment": "Translates the specified \"alternate representation\" Base64 string into a byte array. @throw IllegalArgumentException or ArrayOutOfBoundsException if s is not a valid alternate representation Base64 string.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "main(java.lang.String[] args)",
    "name": "main",
    "containingClass": {
      "qualifiedName": "java.util.prefs.Base64",
      "name": "Base64",
      "isArray": false
    },
    "targetClass": "java.util.prefs.Base64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "args"
      }
    ],
    "protocol": {
      "member": "main(java.lang.String[] args)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]