[
  {
    "signature": "globalInfo()",
    "name": "globalInfo",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "globalInfo()",
      "comment": "Returns a string describing this classifier",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setEnvironment(weka.core.Environment env)",
    "name": "setEnvironment",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Environment",
          "name": "Environment",
          "isArray": false
        },
        "name": "env"
      }
    ],
    "protocol": {
      "member": "setEnvironment(weka.core.Environment env)",
      "comment": "Set the environment variables to use",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ignoreCaseForNamesTipText()",
    "name": "ignoreCaseForNamesTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "ignoreCaseForNamesTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setIgnoreCaseForNames(boolean ignore)",
    "name": "setIgnoreCaseForNames",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "ignore"
      }
    ],
    "protocol": {
      "member": "setIgnoreCaseForNames(boolean ignore)",
      "comment": "Set whether to ignore case when matching attribute names and nominal values.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getIgnoreCaseForNames()",
    "name": "getIgnoreCaseForNames",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getIgnoreCaseForNames()",
      "comment": "Get whether to ignore case when matching attribute names and nominal values.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "trimTipText()",
    "name": "trimTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "trimTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setTrim(boolean trim)",
    "name": "setTrim",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "trim"
      }
    ],
    "protocol": {
      "member": "setTrim(boolean trim)",
      "comment": "Set whether to trim white space from each end of names before matching.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTrim()",
    "name": "getTrim",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTrim()",
      "comment": "Get whether to trim white space from each end of names before matching.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "suppressMappingReportTipText()",
    "name": "suppressMappingReportTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "suppressMappingReportTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSuppressMappingReport(boolean suppress)",
    "name": "setSuppressMappingReport",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "suppress"
      }
    ],
    "protocol": {
      "member": "setSuppressMappingReport(boolean suppress)",
      "comment": "Set whether to suppress output the report of model to input mappings.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSuppressMappingReport()",
    "name": "getSuppressMappingReport",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getSuppressMappingReport()",
      "comment": "Get whether to suppress output the report of model to input mappings.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "modelPathTipText()",
    "name": "modelPathTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "modelPathTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setModelPath(java.lang.String modelPath)",
    "name": "setModelPath",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "modelPath"
      }
    ],
    "protocol": {
      "member": "setModelPath(java.lang.String modelPath)",
      "comment": "Set the path from which to load a model. Loading occurs when the first test instance is received or method_0 is called programatically. Environment variables can be used in the supplied path - emethod_1. ${HOME}/mymethod_2.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getModelPath()",
    "name": "getModelPath",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getModelPath()",
      "comment": "Get the path used for loading a model.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCapabilities()",
    "name": "getCapabilities",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.Capabilities",
      "name": "weka.core.Capabilities",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getCapabilities()",
      "comment": "Returns default capabilities of the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listOptions()",
    "name": "listOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<weka.core.Option>",
      "name": "java.util.Enumeration<weka.core.Option>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "listOptions()",
      "comment": "Returns an enumeration describing the available options.   -I Ignore case when matching attribute names and nominal values.   -M Suppress the output of the mapping report.   -trim Trim white space from either end of names before matching.   -L <path to model to load> Path to a model to load. If set, this model will be used for prediction and any base classifier specification will be ignored. Environment variables may be used in the path (emethod_0. ${HOME}/mymethod_1)   -D If set, classifier is run in debug mode and may output additional info to the console   -W Full name of base classifier. (default: wekamethod_2method_3method_4)   Options specific to classifier wekamethod_2method_3method_4:   -D If set, classifier is run in debug mode and may output additional info to the console  <!-- options-end -->",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setOptions(java.lang.String[] options)",
    "name": "setOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "options"
      }
    ],
    "protocol": {
      "member": "setOptions(java.lang.String[] options)",
      "comment": "Parses a given list of options.   -I Ignore case when matching attribute names and nominal values.   -M Suppress the output of the mapping report.   -trim Trim white space from either end of names before matching.   -L <path to model to load> Path to a model to load. If set, this model will be used for prediction and any base classifier specification will be ignored. Environment variables may be used in the path (emethod_0. ${HOME}/mymethod_1)   -D If set, classifier is run in debug mode and may output additional info to the console   -W Full name of base classifier. (default: wekamethod_2method_3method_4)   Options specific to classifier wekamethod_2method_3method_4:   -D If set, classifier is run in debug mode and may output additional info to the console  <!-- options-end --> Options after -- are passed to the designated classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOptions()",
    "name": "getOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getOptions()",
      "comment": "Gets the current settings of the Classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setTestStructure(weka.core.Instances testStructure)",
    "name": "setTestStructure",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "testStructure"
      }
    ],
    "protocol": {
      "member": "setTestStructure(weka.core.Instances testStructure)",
      "comment": "Set the test structure (if known in advance) that we are likely to see. If set, then a call to method_0 will not overwrite any test structure that has been recorded with the current training structure. This is useful for getting a correct mapping report output in method_1 after buildClassifier has been called and before any test instance has been seen. Test structure and mapping will get reset if a test instance is received whose structure does not match the recorded test structure.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setModelHeader(weka.core.Instances modelHeader)",
    "name": "setModelHeader",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "modelHeader"
      }
    ],
    "protocol": {
      "member": "setModelHeader(weka.core.Instances modelHeader)",
      "comment": "Set the structure of the data used to create the model. This method is useful for clients who have an existing in-memory model that they'd like to wrap in the InputMappedClassifier",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "buildClassifier(weka.core.Instances data)",
    "name": "buildClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "buildClassifier(weka.core.Instances data)",
      "comment": "Build the classifier",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getModelHeader(weka.core.Instances defaultH)",
    "name": "getModelHeader",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.Instances",
      "name": "weka.core.Instances",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "defaultH"
      }
    ],
    "protocol": {
      "member": "getModelHeader(weka.core.Instances defaultH)",
      "comment": "Return the instance structure that the encapsulated model was built with. If the classifier will be built from scratch by InputMappedClassifier then this method just returns the default structure that is passed in as argument.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMappedClassIndex()",
    "name": "getMappedClassIndex",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMappedClassIndex()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "constructMappedInstance(weka.core.Instance incoming)",
    "name": "constructMappedInstance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.Instance",
      "name": "weka.core.Instance",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "incoming"
      }
    ],
    "protocol": {
      "member": "constructMappedInstance(weka.core.Instance incoming)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "classifyInstance(weka.core.Instance inst)",
    "name": "classifyInstance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "inst"
      }
    ],
    "protocol": {
      "member": "classifyInstance(weka.core.Instance inst)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "distributionForInstance(weka.core.Instance inst)",
    "name": "distributionForInstance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "inst"
      }
    ],
    "protocol": {
      "member": "distributionForInstance(weka.core.Instance inst)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "graphType()",
    "name": "graphType",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "graphType()",
      "comment": "Returns the type of graph this classifier represents.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "enumerateMeasures()",
    "name": "enumerateMeasures",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<java.lang.String>",
      "name": "java.util.Enumeration<java.lang.String>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "enumerateMeasures()",
      "comment": "Returns an enumeration of the additional measure names",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMeasure(java.lang.String additionalMeasureName)",
    "name": "getMeasure",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "additionalMeasureName"
      }
    ],
    "protocol": {
      "member": "getMeasure(java.lang.String additionalMeasureName)",
      "comment": "Returns the value of the named measure",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "graph()",
    "name": "graph",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "graph()",
      "comment": "Returns graph describing the classifier (if possible).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRevision()",
    "name": "getRevision",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRevision()",
      "comment": "Returns the revision string.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "main(java.lang.String[] argv)",
    "name": "main",
    "containingClass": {
      "qualifiedName": "weka.classifiers.misc.InputMappedClassifier",
      "name": "InputMappedClassifier",
      "isArray": false
    },
    "targetClass": "weka.classifiers.misc.InputMappedClassifier",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "argv"
      }
    ],
    "protocol": {
      "member": "main(java.lang.String[] argv)",
      "comment": "Main method for testing this class.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]