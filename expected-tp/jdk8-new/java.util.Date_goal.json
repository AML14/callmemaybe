[
  {
    "signature": "java.util.Date()",
    "name": "java.util.Date",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.Date()",
      "comment": "Allocates a Date object and initializes it so that it represents the time at which it was allocated, measured to the nearest millisecond.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Date(long date)",
    "name": "java.util.Date",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "date"
      }
    ],
    "protocol": {
      "member": "java.util.Date(long date)",
      "comment": "Allocates a Date object and initializes it to represent the specified number of milliseconds since the standard base time known as \"the epoch\", namely January 1, 1970, 00:00:00 GMT.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Date(int year, int month, int date)",
    "name": "java.util.Date",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "year"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "month"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "date"
      }
    ],
    "protocol": {
      "member": "java.util.Date(int year, int month, int date)",
      "comment": "Allocates a Date object and initializes it so that it represents midnight, local time, at the beginning of the day specified by the year, month, and date arguments.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Date(int year, int month, int date, int hrs, int min)",
    "name": "java.util.Date",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "year"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "month"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "date"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hrs"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "min"
      }
    ],
    "protocol": {
      "member": "java.util.Date(int year, int month, int date, int hrs, int min)",
      "comment": "Allocates a Date object and initializes it so that it represents the instant at the start of the minute specified by the year, month, date, hrs, and min arguments, in the local time zone.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Date(int year, int month, int date, int hrs, int min, int sec)",
    "name": "java.util.Date",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "year"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "month"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "date"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hrs"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "min"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "sec"
      }
    ],
    "protocol": {
      "member": "java.util.Date(int year, int month, int date, int hrs, int min, int sec)",
      "comment": "Allocates a Date object and initializes it so that it represents the instant at the start of the second specified by the year, month, date, hrs, min, and sec arguments, in the local time zone.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Date(java.lang.String s)",
    "name": "java.util.Date",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "protocol": {
      "member": "java.util.Date(java.lang.String s)",
      "comment": "Allocates a Date object and initializes it so that it represents the date and time indicated by the string s, which is interpreted as if by the method_0 method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clone()",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clone()",
      "comment": "Return a copy of this object.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "UTC(int year, int month, int date, int hrs, int min, int sec)",
    "name": "UTC",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "year"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "month"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "date"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hrs"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "min"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "sec"
      }
    ],
    "protocol": {
      "member": "UTC(int year, int month, int date, int hrs, int min, int sec)",
      "comment": "Determines the date and time based on the arguments. The arguments are interpreted as a year, month, day of the month, hour of the day, minute within the hour, and second within the minute, exactly as for the Date constructor with six arguments, except that the arguments are interpreted relative to UTC rather than to the local time zone. The time indicated is returned represented as the distance, measured in milliseconds, of that time from the epoch (00:00:00 GMT on January 1, 1970).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parse(java.lang.String s)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "protocol": {
      "member": "parse(java.lang.String s)",
      "comment": "Attempts to interpret the string s as a representation of a date and time. If the attempt is successful, the time indicated is returned represented as the distance, measured in milliseconds, of that time from the epoch (00:00:00 GMT on January 1, 1970). If the attempt fails, an IllegalArgumentException is thrown.  It accepts many syntaxes; in particular, it recognizes the IETF standard date syntax: \"Sat, 12 Aug 1995 13:30:00 GMT\". It also understands the continental Umethod_0. time-zone abbreviations, but for general use, a time-zone offset should be used: \"Sat, 12 Aug 1995 13:30:00 GMT+0430\" (4 hours, 30 minutes west of the Greenwich meridian). If no time zone is specified, the local time zone is assumed. GMT and UTC are considered equivalent.  The string s is processed from left to right, looking for data of interest. Any material in s that is within the ASCII parenthesis characters ( and ) is ignored. Parentheses may be nested. Otherwise, the only characters permitted within s are these ASCII characters: <pre> abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789,+-:/</pre> and whitespace characters. A consecutive sequence of decimal digits is treated as a decimal number: <li>If a number is preceded by <tt>+</tt> or <tt>-</tt> and a year has already been recognized, then the number is a time-zone offset. If the number is less than 24, it is an offset measured in hours. Otherwise, it is regarded as an offset in minutes, expressed in 24-hour time format without punctuation. A preceding <tt>-</tt> means a westward offset. Time zone offsets are always relative to UTC (Greenwich). Thus, for example, <tt>-5</tt> occurring in the string would mean \"five hours west of Greenwich\" and <tt>+0430</tt> would mean \"four hours and thirty minutes east of Greenwich.\" It is permitted for the string to specify <tt>GMT</tt>, <tt>UT</tt>, or <tt>UTC</tt> redundantly-for example, <tt>GMT-5</tt> or <tt>utc+0430</tt>. <li>The number is regarded as a year number if one of the following conditions is true: <ul> <li>The number is equal to or greater than 70 and followed by a space, comma, slash, or end of string <li>The number is less than 70, and both a month and a day of the month have already been recognized</li>  If the recognized year number is less than 100, it is interpreted as an abbreviated year relative to a century of which dates are within 80 years before and 19 years after the time when the Date class is initialized. After adjusting the year number, 1900 is subtracted from it. For example, if the current year is 1999 then years in the range 19 to 99 are assumed to mean 1919 to 1999, while years from 0 to 18 are assumed to mean 2000 to 2018. Note that this is slightly different from the interpretation of years less than 100 that is used in javamethod_1method_0impleDateFormat. <li>If the number is followed by a colon, it is regarded as an hour, unless an hour has already been recognized, in which case it is regarded as a minute. <li>If the number is followed by a slash, it is regarded as a month (it is decreased by 1 to produce a number in the range 0 to 11), unless a month has already been recognized, in which case it is regarded as a day of the month. <li>If the number is followed by whitespace, a comma, a hyphen, or end of string, then if an hour has been recognized but not a minute, it is regarded as a minute; otherwise, if a minute has been recognized but not a second, it is regarded as a second; otherwise, it is regarded as a day of the month. </ul> A consecutive sequence of letters is regarded as a word and treated as follows:<ul> <li>A word that matches <tt>AM</tt>, ignoring case, is ignored (but the parse fails if an hour has not been recognized or is less than <tt>1</tt> or greater than <tt>12</tt>). <li>A word that matches <tt>PM</tt>, ignoring case, adds <tt>12</tt> to the hour (but the parse fails if an hour has not been recognized or is less than <tt>1</tt> or greater than <tt>12</tt>). <li>Any word that matches any prefix of <tt>SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY</tt>, or <tt>SATURDAY</tt>, ignoring case, is ignored. For example, <tt>sat, Friday, TUE</tt>, and <tt>Thurs</tt> are ignored. <li>Otherwise, any word that matches any prefix of <tt>JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER</tt>, or <tt>DECEMBER</tt>, ignoring case, and considering them in the order given here, is recognized as specifying a month and is converted to a number (0 to 11). For example, <tt>aug, Sept, april</tt>, and <tt>NOV</tt> are recognized as months. So is <tt>Ma</tt>, which is recognized as <tt>MARCH</tt>, not <tt>MAY</tt>. <li>Any word that matches <tt>GMT, UT</tt>, or <tt>UTC</tt>, ignoring case, is treated as referring to UTC. <li>Any word that matches <tt>EST, CST, MST</tt>, or <tt>PST</tt>, ignoring case, is recognized as referring to the time zone in North America that is five, six, seven, or eight hours west of Greenwich, respectively. Any word that matches <tt>EDT, CDT, MDT</tt>, or <tt>PDT</tt>, ignoring case, is recognized as referring to the same time zone, respectively, during daylight saving time.</ul> Once the entire string s has been scanned, it is converted to a time result in one of two ways. If a time zone or time-zone offset has been recognized, then the year, month, day of month, hour, minute, and second are interpreted in UTC and then the time-zone offset is applied. Otherwise, the year, month, day of month, hour, minute, and second are interpreted in the local time zone.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getYear()",
    "name": "getYear",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getYear()",
      "comment": "Returns a value that is the result of subtracting 1900 from the year that contains or begins with the instant in time represented by this Date object, as interpreted in the local time zone.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setYear(int year)",
    "name": "setYear",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "year"
      }
    ],
    "protocol": {
      "member": "setYear(int year)",
      "comment": "Sets the year of this Date object to be the specified value plus 1900. This Date object is modified so that it represents a point in time within the specified year, with the month, date, hour, minute, and second the same as before, as interpreted in the local time zone. (Of course, if the date was February 29, for example, and the year is set to a non-leap year, then the new date will be treated as if it were on March 1.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMonth()",
    "name": "getMonth",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMonth()",
      "comment": "Returns a number representing the month that contains or begins with the instant in time represented by this Date object. The value returned is between 0 and 11, with the value 0 representing January.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMonth(int month)",
    "name": "setMonth",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "month"
      }
    ],
    "protocol": {
      "member": "setMonth(int month)",
      "comment": "Sets the month of this date to the specified value. This Date object is modified so that it represents a point in time within the specified month, with the year, date, hour, minute, and second the same as before, as interpreted in the local time zone. If the date was October 31, for example, and the month is set to June, then the new date will be treated as if it were on July 1, because June has only 30 days.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDate()",
    "name": "getDate",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getDate()",
      "comment": "Returns the day of the month represented by this Date object. The value returned is between 1 and 31 representing the day of the month that contains or begins with the instant in time represented by this Date object, as interpreted in the local time zone.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setDate(int date)",
    "name": "setDate",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "date"
      }
    ],
    "protocol": {
      "member": "setDate(int date)",
      "comment": "Sets the day of the month of this Date object to the specified value. This Date object is modified so that it represents a point in time within the specified day of the month, with the year, month, hour, minute, and second the same as before, as interpreted in the local time zone. If the date was April 30, for example, and the date is set to 31, then it will be treated as if it were on May 1, because April has only 30 days.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDay()",
    "name": "getDay",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getDay()",
      "comment": "Returns the day of the week represented by this date. The returned value (0 = Sunday, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday) represents the day of the week that contains or begins with the instant in time represented by this Date object, as interpreted in the local time zone.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getHours()",
    "name": "getHours",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getHours()",
      "comment": "Returns the hour represented by this Date object. The returned value is a number (0 through 23) representing the hour within the day that contains or begins with the instant in time represented by this Date object, as interpreted in the local time zone.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setHours(int hours)",
    "name": "setHours",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hours"
      }
    ],
    "protocol": {
      "member": "setHours(int hours)",
      "comment": "Sets the hour of this Date object to the specified value. This Date object is modified so that it represents a point in time within the specified hour of the day, with the year, month, date, minute, and second the same as before, as interpreted in the local time zone.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMinutes()",
    "name": "getMinutes",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMinutes()",
      "comment": "Returns the number of minutes past the hour represented by this date, as interpreted in the local time zone. The value returned is between 0 and 59.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMinutes(int minutes)",
    "name": "setMinutes",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minutes"
      }
    ],
    "protocol": {
      "member": "setMinutes(int minutes)",
      "comment": "Sets the minutes of this Date object to the specified value. This Date object is modified so that it represents a point in time within the specified minute of the hour, with the year, month, date, hour, and second the same as before, as interpreted in the local time zone.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSeconds()",
    "name": "getSeconds",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getSeconds()",
      "comment": "Returns the number of seconds past the minute represented by this date. The value returned is between 0 and 61. The values 60 and 61 can only occur on those Java Virtual Machines that take leap seconds into account.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSeconds(int seconds)",
    "name": "setSeconds",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "seconds"
      }
    ],
    "protocol": {
      "member": "setSeconds(int seconds)",
      "comment": "Sets the seconds of this Date to the specified value. This Date object is modified so that it represents a point in time within the specified second of the minute, with the year, month, date, hour, and minute the same as before, as interpreted in the local time zone.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTime()",
    "name": "getTime",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTime()",
      "comment": "Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Date object.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setTime(long time)",
    "name": "setTime",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "time"
      }
    ],
    "protocol": {
      "member": "setTime(long time)",
      "comment": "Sets this Date object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "before(java.util.Date when)",
    "name": "before",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Date",
          "name": "Date",
          "isArray": false
        },
        "name": "when"
      }
    ],
    "protocol": {
      "member": "before(java.util.Date when)",
      "comment": "Tests if this date is before the specified date.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "after(java.util.Date when)",
    "name": "after",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Date",
          "name": "Date",
          "isArray": false
        },
        "name": "when"
      }
    ],
    "protocol": {
      "member": "after(java.util.Date when)",
      "comment": "Tests if this date is after the specified date.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object obj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "protocol": {
      "member": "equals(java.lang.Object obj)",
      "comment": "Compares two dates for equality. The result is true if and only if the argument is not null and is a Date object that represents the same point in time, to the millisecond, as this object.  Thus, two Date objects are equal if and only if the getTime method returns the same long value for both.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMillisOf(java.util.Date date)",
    "name": "getMillisOf",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Date",
          "name": "Date",
          "isArray": false
        },
        "name": "date"
      }
    ],
    "protocol": {
      "member": "getMillisOf(java.util.Date date)",
      "comment": "Returns the millisecond value of this Date object without affecting its internal state.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "compareTo(java.util.Date anotherDate)",
    "name": "compareTo",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Date",
          "name": "Date",
          "isArray": false
        },
        "name": "anotherDate"
      }
    ],
    "protocol": {
      "member": "compareTo(java.util.Date anotherDate)",
      "comment": "Compares two Dates for ordering.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hashCode()",
      "comment": "Returns a hash code value for this object. The result is the exclusive OR of the two halves of the primitive long value returned by the method_2 method. That is, the hash code is the value of the expression: <pre>(int)(method_0^(method_0 >>> 32)) </pre>",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Converts this Date object to a String of the form: <pre> dow mon dd hh:mm:ss zzz yyyy</pre> where: <li><tt>dow</tt> is the day of the week (<tt>Sun, Mon, Tue, Wed, Thu, Fri, Sat</tt>). <li><tt>mon</tt> is the month (<tt>Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec</tt>). <li><tt>dd</tt> is the day of the month (<tt>01</tt> through <tt>31</tt>), as two decimal digits. <li><tt>hh</tt> is the hour of the day (<tt>00</tt> through <tt>23</tt>), as two decimal digits. <li><tt>mm</tt> is the minute within the hour (<tt>00</tt> through <tt>59</tt>), as two decimal digits. <li><tt>ss</tt> is the second within the minute (<tt>00</tt> through <tt>61</tt>, as two decimal digits. <li><tt>zzz</tt> is the time zone (and may reflect daylight saving time). Standard time zone abbreviations include those recognized by the method <tt>parse</tt>. If time zone information is not available, then <tt>zzz</tt> is empty - that is, it consists of no characters at all. <li><tt>yyyy</tt> is the year, as four decimal digits.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toLocaleString()",
    "name": "toLocaleString",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toLocaleString()",
      "comment": "Creates a string representation of this Date object in an implementation-dependent form. The intent is that the form should be familiar to the user of the Java application, wherever it may happen to be running. The intent is comparable to that of the \"%c\" format supported by the method_0 function of ISO&nbsp;C.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toGMTString()",
    "name": "toGMTString",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toGMTString()",
      "comment": "Creates a string representation of this Date object of the form: <pre> d mon yyyy hh:mm:ss GMT</pre> where: <li><i>d</i> is the day of the month (<tt>1</tt> through <tt>31</tt>), as one or two decimal digits. <li><i>mon</i> is the month (<tt>Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec</tt>). <li><i>yyyy</i> is the year, as four decimal digits. <li><i>hh</i> is the hour of the day (<tt>00</tt> through <tt>23</tt>), as two decimal digits. <li><i>mm</i> is the minute within the hour (<tt>00</tt> through <tt>59</tt>), as two decimal digits. <li><i>ss</i> is the second within the minute (<tt>00</tt> through <tt>61</tt>), as two decimal digits. <li><i>GMT</i> is exactly the ASCII letters \"<tt>GMT</tt>\" to indicate Greenwich Mean Time.  The result does not depend on the local time zone.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTimezoneOffset()",
    "name": "getTimezoneOffset",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTimezoneOffset()",
      "comment": "Returns the offset, measured in minutes, for the local time zone relative to UTC that is appropriate for the time represented by this Date object.  For example, in Massachusetts, five time zones west of Greenwich: <pre> method_0method_1 returns 300</pre> because on February 14, 1996, standard time (Eastern Standard Time) is in use, which is offset five hours from UTC; but: <pre> method_2method_1 returns 240</pre> because on June 1, 1996, daylight saving time (Eastern Daylight Time) is in use, which is offset only four hours from UTC. This method produces the same result as if it computed: <pre> (method_4 - method_5, method_6, method_7, method_8, method_9, method_10 / (60 * 1000) </pre>",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "from(java.time.Instant instant)",
    "name": "from",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Date",
      "name": "java.util.Date",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.Instant",
          "name": "Instant",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "protocol": {
      "member": "from(java.time.Instant instant)",
      "comment": "Obtains an instance of Date from an Instant object.  Instant uses a precision of nanoseconds, whereas Date uses a precision of milliseconds. The conversion will trancate any excess precision information as though the amount in nanoseconds was subject to integer division by one million.  Instant can store points on the time-line further in the future and further in the past than Date. In this scenario, this method will throw an exception.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toInstant()",
    "name": "toInstant",
    "containingClass": {
      "qualifiedName": "java.util.Date",
      "name": "Date",
      "isArray": false
    },
    "targetClass": "java.util.Date",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toInstant()",
      "comment": "Converts this Date object to an Instant.  The conversion creates an Instant that represents the same point on the time-line as this Date.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]