[
  {
    "signature": "org.graphstream.stream.netstream.NetStreamReceiver(java.lang.String hostname, int port)",
    "name": "org.graphstream.stream.netstream.NetStreamReceiver",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "hostname"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "port"
      }
    ],
    "protocol": {
      "member": "org.graphstream.stream.netstream.NetStreamReceiver(java.lang.String hostname, int port)",
      "comment": "New NetStream Receiver, awaiting in its own thread at the given host name and port, for new graph events.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.graphstream.stream.netstream.NetStreamReceiver(int port)",
    "name": "org.graphstream.stream.netstream.NetStreamReceiver",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "port"
      }
    ],
    "protocol": {
      "member": "org.graphstream.stream.netstream.NetStreamReceiver(int port)",
      "comment": "New NetStream Receiver, awaiting in its own thread at \"localhost\" on the given port, for new graph events.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.graphstream.stream.netstream.NetStreamReceiver(java.lang.String hostname, int port, boolean debug)",
    "name": "org.graphstream.stream.netstream.NetStreamReceiver",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "hostname"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "port"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "debug"
      }
    ],
    "protocol": {
      "member": "org.graphstream.stream.netstream.NetStreamReceiver(java.lang.String hostname, int port, boolean debug)",
      "comment": "New NetStream Receiver, awaiting in its own thread at the given host name and port, for new graph events.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isRunning()",
    "name": "isRunning",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isRunning()",
      "comment": "False as soon as the receiver terminates.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "init()",
    "name": "init",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "init()",
      "comment": "Initialize the server socket.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setDebugOn(boolean on)",
    "name": "setDebugOn",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "on"
      }
    ],
    "protocol": {
      "member": "setDebugOn(boolean on)",
      "comment": "Enable or disable debugging.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "quit()",
    "name": "quit",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "quit()",
      "comment": "Stop the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasActiveConnections()",
    "name": "hasActiveConnections",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasActiveConnections()",
      "comment": "Ask the receiver about its active connections",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setUnpacker(org.graphstream.stream.netstream.packing.NetStreamUnpacker unpaker)",
    "name": "setUnpacker",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.stream.netstream.packing.NetStreamUnpacker",
          "name": "NetStreamUnpacker",
          "isArray": false
        },
        "name": "unpaker"
      }
    ],
    "protocol": {
      "member": "setUnpacker(org.graphstream.stream.netstream.packing.NetStreamUnpacker unpaker)",
      "comment": "Sets an optional NetStreamUnpaker whose \"unpack\" method will be called on each message. It allows to do extra decoding on the all byte array message. You can also decrypt things.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeUnpacker()",
    "name": "removeUnpacker",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "removeUnpacker()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "run()",
    "name": "run",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "run()",
      "comment": "Wait for connections, accept them, demultiplexes them and dispatch messages to registered message boxes.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "poll()",
    "name": "poll",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "poll()",
      "comment": "Wait until one or several chunks of message are acceptable. This method should be called in a loop. It can be used to block a program until some data is available.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "readDataChunk(java.nio.channels.SelectionKey key)",
    "name": "readDataChunk",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.nio.channels.SelectionKey",
          "name": "SelectionKey",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "readDataChunk(java.nio.channels.SelectionKey key)",
      "comment": "When data is readable on a socket, send it to the appropriate buffer (creating it if needed).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "error(java.lang.String message, java.lang.Object... data)",
    "name": "error",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "message"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "error(java.lang.String message, java.lang.Object... data)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "error(java.lang.Throwable e, java.lang.String message, java.lang.Object... data)",
    "name": "error",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Throwable",
          "name": "Throwable",
          "isArray": false
        },
        "name": "e"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "message"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "error(java.lang.Throwable e, java.lang.String message, java.lang.Object... data)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "debug(java.lang.String message, java.lang.Object... data)",
    "name": "debug",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "message"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "debug(java.lang.String message, java.lang.Object... data)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getStream(java.lang.String name)",
    "name": "getStream",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.stream.thread.ThreadProxyPipe",
      "name": "org.graphstream.stream.thread.ThreadProxyPipe",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "protocol": {
      "member": "getStream(java.lang.String name)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDefaultStream()",
    "name": "getDefaultStream",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.stream.thread.ThreadProxyPipe",
      "name": "org.graphstream.stream.thread.ThreadProxyPipe",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getDefaultStream()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "register(java.lang.String name, org.graphstream.stream.thread.ThreadProxyPipe stream)",
    "name": "register",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "org.graphstream.stream.thread.ThreadProxyPipe",
          "name": "ThreadProxyPipe",
          "isArray": false
        },
        "name": "stream"
      }
    ],
    "protocol": {
      "member": "register(java.lang.String name, org.graphstream.stream.thread.ThreadProxyPipe stream)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "decodeMessage(java.io.InputStream in)",
    "name": "decodeMessage",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.netstream.NetStreamReceiver",
      "name": "NetStreamReceiver",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.netstream.NetStreamReceiver",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "in"
      }
    ],
    "protocol": {
      "member": "decodeMessage(java.io.InputStream in)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]