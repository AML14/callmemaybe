[
  {
    "signature": "java.util.concurrent.Semaphore(int permits)",
    "name": "java.util.concurrent.Semaphore",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "permits"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.Semaphore(int permits)",
      "comment": "Creates a Semaphore with the given number of permits and nonfair fairness setting.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.Semaphore(int permits, boolean fair)",
    "name": "java.util.concurrent.Semaphore",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "permits"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "fair"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.Semaphore(int permits, boolean fair)",
      "comment": "Creates a Semaphore with the given number of permits and the given fairness setting.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "acquire()",
    "name": "acquire",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "acquire()",
      "comment": "Acquires a permit from this semaphore, blocking until one is available, or the thread is method_0 interrupted. Acquires a permit, if one is available and returns immediately, reducing the number of available permits by one. If no permit is available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens:  <li>Some other thread invokes the method_1 method for this semaphore and the current thread is next to be assigned a permit; or <li>Some other thread method_0 interrupts the current thread.  If the current thread:  <li>has its interrupted status set on entry to this method; or <li>is method_0 interrupted while waiting for a permit,  then InterruptedException is thrown and the current thread's interrupted status is cleared.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "acquireUninterruptibly()",
    "name": "acquireUninterruptibly",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "acquireUninterruptibly()",
      "comment": "Acquires a permit from this semaphore, blocking until one is available. Acquires a permit, if one is available and returns immediately, reducing the number of available permits by one. If no permit is available then the current thread becomes disabled for thread scheduling purposes and lies dormant until some other thread invokes the method_0 method for this semaphore and the current thread is next to be assigned a permit. If the current thread is method_1 interrupted while waiting for a permit then it will continue to wait, but the time at which the thread is assigned a permit may change compared to the time it would have received the permit had no interruption occurred. When the thread does return from this method its interrupt status will be set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryAcquire()",
    "name": "tryAcquire",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "tryAcquire()",
      "comment": "Acquires a permit from this semaphore, only if one is available at the time of invocation. Acquires a permit, if one is available and returns immediately, with the value true, reducing the number of available permits by one. If no permit is available then this method will return immediately with the value false. Even when this semaphore has been set to use a fair ordering policy, a call to method_0 will immediately acquire a permit if one is available, whether or not other threads are currently waiting. This &quot;barging&quot; behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting, then use method_2  which is almost equivalent (it also detects interruption).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryAcquire(long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "tryAcquire",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "tryAcquire(long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "Acquires a permit from this semaphore, if one becomes available within the given waiting time and the current thread has not been method_0 interrupted. Acquires a permit, if one is available and returns immediately, with the value true, reducing the number of available permits by one. If no permit is available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens:  <li>Some other thread invokes the method_1 method for this semaphore and the current thread is next to be assigned a permit; or <li>Some other thread method_0 interrupts the current thread; or <li>The specified waiting time elapses.  If a permit is acquired then the value true is returned. If the current thread:  <li>has its interrupted status set on entry to this method; or <li>is method_0 interrupted while waiting to acquire a permit,  then InterruptedException is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "release()",
    "name": "release",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "release()",
      "comment": "Releases a permit, returning it to the semaphore. Releases a permit, increasing the number of available permits by one. If any threads are trying to acquire a permit, then one is selected and given the permit that was just released. That thread is (re)enabled for thread scheduling purposes. There is no requirement that a thread that releases a permit must have acquired that permit by calling method_0. Correct usage of a semaphore is established by programming convention in the application.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "acquire(int permits)",
    "name": "acquire",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "permits"
      }
    ],
    "protocol": {
      "member": "acquire(int permits)",
      "comment": "Acquires the given number of permits from this semaphore, blocking until all are available, or the thread is method_2 interrupted. Acquires the given number of permits, if they are available, and returns immediately, reducing the number of available permits by the given amount. If insufficient permits are available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens:  <li>Some other thread invokes one of the method_0 release methods for this semaphore, the current thread is next to be assigned permits and the number of available permits satisfies this request; or <li>Some other thread method_2 interrupts the current thread.  If the current thread:  <li>has its interrupted status set on entry to this method; or <li>is method_2 interrupted while waiting for a permit,  then InterruptedException is thrown and the current thread's interrupted status is cleared. Any permits that were to be assigned to this thread are instead assigned to other threads trying to acquire permits, as if permits had been made available by a call to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "acquireUninterruptibly(int permits)",
    "name": "acquireUninterruptibly",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "permits"
      }
    ],
    "protocol": {
      "member": "acquireUninterruptibly(int permits)",
      "comment": "Acquires the given number of permits from this semaphore, blocking until all are available. Acquires the given number of permits, if they are available, and returns immediately, reducing the number of available permits by the given amount. If insufficient permits are available then the current thread becomes disabled for thread scheduling purposes and lies dormant until some other thread invokes one of the method_0 release methods for this semaphore, the current thread is next to be assigned permits and the number of available permits satisfies this request. If the current thread is method_2 interrupted while waiting for permits then it will continue to wait and its position in the queue is not affected. When the thread does return from this method its interrupt status will be set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryAcquire(int permits)",
    "name": "tryAcquire",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "permits"
      }
    ],
    "protocol": {
      "member": "tryAcquire(int permits)",
      "comment": "Acquires the given number of permits from this semaphore, only if all are available at the time of invocation. Acquires the given number of permits, if they are available, and returns immediately, with the value true, reducing the number of available permits by the given amount. If insufficient permits are available then this method will return immediately with the value false and the number of available permits is unchanged. Even when this semaphore has been set to use a fair ordering policy, a call to tryAcquire will immediately acquire a permit if one is available, whether or not other threads are currently waiting. This &quot;barging&quot; behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting, then use method_1  which is almost equivalent (it also detects interruption).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryAcquire(int permits, long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "tryAcquire",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "permits"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "tryAcquire(int permits, long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "Acquires the given number of permits from this semaphore, if all become available within the given waiting time and the current thread has not been method_3 interrupted. Acquires the given number of permits, if they are available and returns immediately, with the value true, reducing the number of available permits by the given amount. If insufficient permits are available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens:  <li>Some other thread invokes one of the method_0 release methods for this semaphore, the current thread is next to be assigned permits and the number of available permits satisfies this request; or <li>Some other thread method_3 interrupts the current thread; or <li>The specified waiting time elapses.  If the permits are acquired then the value true is returned. If the current thread:  <li>has its interrupted status set on entry to this method; or <li>is method_3 interrupted while waiting to acquire the permits,  then InterruptedException is thrown and the current thread's interrupted status is cleared. Any permits that were to be assigned to this thread, are instead assigned to other threads trying to acquire permits, as if the permits had been made available by a call to method_0. If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all. Any permits that were to be assigned to this thread, are instead assigned to other threads trying to acquire permits, as if the permits had been made available by a call to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "release(int permits)",
    "name": "release",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "permits"
      }
    ],
    "protocol": {
      "member": "release(int permits)",
      "comment": "Releases the given number of permits, returning them to the semaphore. Releases the given number of permits, increasing the number of available permits by that amount. If any threads are trying to acquire permits, then one is selected and given the permits that were just released. If the number of available permits satisfies that thread's request then that thread is (re)enabled for thread scheduling purposes; otherwise the thread will wait until sufficient permits are available. If there are still permits available after this thread's request has been satisfied, then those permits are assigned in turn to other threads trying to acquire permits. There is no requirement that a thread that releases a permit must have acquired that permit by calling method_0 acquire. Correct usage of a semaphore is established by programming convention in the application.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "availablePermits()",
    "name": "availablePermits",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "availablePermits()",
      "comment": "Returns the current number of permits available in this semaphore. This method is typically used for debugging and testing purposes.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "drainPermits()",
    "name": "drainPermits",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "drainPermits()",
      "comment": "Acquires and returns all permits that are immediately available.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reducePermits(int reduction)",
    "name": "reducePermits",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "reduction"
      }
    ],
    "protocol": {
      "member": "reducePermits(int reduction)",
      "comment": "Shrinks the number of available permits by the indicated reduction. This method can be useful in subclasses that use semaphores to track resources that become unavailable. This method differs from acquire in that it does not block waiting for permits to become available.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isFair()",
    "name": "isFair",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isFair()",
      "comment": "Returns true if this semaphore has fairness set true.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasQueuedThreads()",
    "name": "hasQueuedThreads",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasQueuedThreads()",
      "comment": "Queries whether any threads are waiting to acquire. Note that because cancellations may occur at any time, a true return does not guarantee that any other thread will ever acquire. This method is designed primarily for use in monitoring of the system state.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getQueueLength()",
    "name": "getQueueLength",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getQueueLength()",
      "comment": "Returns an estimate of the number of threads waiting to acquire. The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures. This method is designed for use in monitoring of the system state, not for synchronization control.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getQueuedThreads()",
    "name": "getQueuedThreads",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<java.lang.Thread>",
      "name": "java.util.Collection<java.lang.Thread>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getQueuedThreads()",
      "comment": "Returns a collection containing threads that may be waiting to acquire. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order. This method is designed to facilitate construction of subclasses that provide more extensive monitoring facilities.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.Semaphore",
      "name": "Semaphore",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.Semaphore",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns a string identifying this semaphore, as well as its state. The state, in brackets, includes the String \"Permits =\" followed by the number of permits.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]