[
  {
    "signature": "java.util.TreeSet(java.util.NavigableMap<E, java.lang.Object> m)",
    "name": "java.util.TreeSet",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.NavigableMap",
          "name": "NavigableMap",
          "isArray": false
        },
        "name": "m"
      }
    ],
    "protocol": {
      "member": "java.util.TreeSet(java.util.NavigableMap<E, java.lang.Object> m)",
      "comment": "Constructs a set backed by the specified navigable map.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.TreeSet()",
    "name": "java.util.TreeSet",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.TreeSet()",
      "comment": "Constructs a new, empty tree set, sorted according to the natural ordering of its elements. All elements inserted into the set must implement the Comparable interface. Furthermore, all such elements must be mutually comparable: method_0 must not throw a ClassCastException for any elements e1 and e2 in the set. If the user attempts to add an element to the set that violates this constraint (for example, the user attempts to add a string element to a set whose elements are integers), the add call will throw a ClassCastException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.TreeSet(java.util.Comparator<? super E> comparator)",
    "name": "java.util.TreeSet",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "protocol": {
      "member": "java.util.TreeSet(java.util.Comparator<? super E> comparator)",
      "comment": "Constructs a new, empty tree set, sorted according to the specified comparator. All elements inserted into the set must be mutually comparable by the specified comparator: method_0 must not throw a ClassCastException for any elements e1 and e2 in the set. If the user attempts to add an element to the set that violates this constraint, the add call will throw a ClassCastException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.TreeSet(java.util.Collection<? extends E> c)",
    "name": "java.util.TreeSet",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "java.util.TreeSet(java.util.Collection<? extends E> c)",
      "comment": "Constructs a new tree set containing the elements in the specified collection, sorted according to the natural ordering of its elements. All elements inserted into the set must implement the Comparable interface. Furthermore, all such elements must be mutually comparable: method_0 must not throw a ClassCastException for any elements e1 and e2 in the set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.TreeSet(java.util.SortedSet<E> s)",
    "name": "java.util.TreeSet",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.SortedSet",
          "name": "SortedSet",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "protocol": {
      "member": "java.util.TreeSet(java.util.SortedSet<E> s)",
      "comment": "Constructs a new tree set containing the same elements and using the same ordering as the specified sorted set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "iterator()",
      "comment": "Returns an iterator over the elements in this set in ascending order.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "descendingIterator()",
    "name": "descendingIterator",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "descendingIterator()",
      "comment": "Returns an iterator over the elements in this set in descending order.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "descendingSet()",
    "name": "descendingSet",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "descendingSet()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "size()",
      "comment": "Returns the number of elements in this set (its cardinality).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isEmpty()",
      "comment": "Returns true if this set contains no elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contains(java.lang.Object o)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "contains(java.lang.Object o)",
      "comment": "Returns true if this set contains the specified element. More formally, returns true if and only if this set contains an element e such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(E e)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "add(E e)",
      "comment": "Adds the specified element to this set if it is not already present. More formally, adds the specified element e to this set if the set contains no element e2 such that (e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;method_0. If this set already contains the element, the call leaves the set unchanged and returns false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(java.lang.Object o)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "remove(java.lang.Object o)",
      "comment": "Removes the specified element from this set if it is present. More formally, removes an element e such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;method_0, if this set contains such an element. Returns true if this set contained the element (or equivalently, if this set changed as a result of the call). (This set will not contain the element once the call returns.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clear()",
      "comment": "Removes all of the elements from this set. The set will be empty after this call returns.",
      "kind": "FreeText",
      "condition": "receiverObjectID.isEmpty()<-receiverObjectID.isEmpty()"
    }
  },
  {
    "signature": "addAll(java.util.Collection<? extends E> c)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "addAll(java.util.Collection<? extends E> c)",
      "comment": "Adds all of the elements in the specified collection to this set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)",
    "name": "subSet",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromElement"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "fromInclusive"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toElement"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "toInclusive"
      }
    ],
    "protocol": {
      "member": "subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "headSet(E toElement, boolean inclusive)",
    "name": "headSet",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toElement"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "inclusive"
      }
    ],
    "protocol": {
      "member": "headSet(E toElement, boolean inclusive)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tailSet(E fromElement, boolean inclusive)",
    "name": "tailSet",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromElement"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "inclusive"
      }
    ],
    "protocol": {
      "member": "tailSet(E fromElement, boolean inclusive)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subSet(E fromElement, E toElement)",
    "name": "subSet",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedSet<E>",
      "name": "java.util.SortedSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromElement"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toElement"
      }
    ],
    "protocol": {
      "member": "subSet(E fromElement, E toElement)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "headSet(E toElement)",
    "name": "headSet",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedSet<E>",
      "name": "java.util.SortedSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toElement"
      }
    ],
    "protocol": {
      "member": "headSet(E toElement)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tailSet(E fromElement)",
    "name": "tailSet",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedSet<E>",
      "name": "java.util.SortedSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromElement"
      }
    ],
    "protocol": {
      "member": "tailSet(E fromElement)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "comparator()",
    "name": "comparator",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Comparator<? super E>",
      "name": "java.util.Comparator<? super E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "comparator()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "first()",
    "name": "first",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "first()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "last()",
    "name": "last",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "last()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lower(E e)",
    "name": "lower",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "lower(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "floor(E e)",
    "name": "floor",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "floor(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ceiling(E e)",
    "name": "ceiling",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "ceiling(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "higher(E e)",
    "name": "higher",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "higher(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollFirst()",
    "name": "pollFirst",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "pollFirst()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollLast()",
    "name": "pollLast",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "pollLast()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clone()",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clone()",
      "comment": "Returns a shallow copy of this TreeSet instance. (The elements themselves are not cloned.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "spliterator()",
    "name": "spliterator",
    "containingClass": {
      "qualifiedName": "java.util.TreeSet",
      "name": "TreeSet",
      "isArray": false
    },
    "targetClass": "java.util.TreeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator<E>",
      "name": "java.util.Spliterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "spliterator()",
      "comment": "Creates a <a href=\"method_2method_3\">late-binding</a> and fail-fast Spliterator over the elements in this set. The Spliterator reports method_4, method_5, method_6, and method_7. Overriding implementations should document the reporting of additional characteristic values. The spliterator's comparator (see java.method_0) is null if the tree set's comparator (see method_1) is null. Otherwise, the spliterator's comparator is the same as or imposes the same total ordering as the tree set's comparator.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]