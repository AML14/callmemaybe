[
  {
    "signature": "java.util.concurrent.LinkedTransferQueue()",
    "name": "java.util.concurrent.LinkedTransferQueue",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.concurrent.LinkedTransferQueue()",
      "comment": "Creates an initially empty LinkedTransferQueue.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.LinkedTransferQueue(java.util.Collection<? extends E> c)",
    "name": "java.util.concurrent.LinkedTransferQueue",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.LinkedTransferQueue(java.util.Collection<? extends E> c)",
      "comment": "Creates a LinkedTransferQueue initially containing the elements of the given collection, added in traversal order of the collection's iterator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cast(java.lang.Object item)",
    "name": "cast",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "item"
      }
    ],
    "protocol": {
      "member": "cast(java.lang.Object item)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "succ(java.util.concurrent.LinkedTransferQueue$Node p)",
    "name": "succ",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue$Node",
      "name": "java.util.concurrent.LinkedTransferQueue$Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.LinkedTransferQueue$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "protocol": {
      "member": "succ(java.util.concurrent.LinkedTransferQueue$Node p)",
      "comment": "Returns the successor of p, or the head node if pmethod_0 has been linked to self, which will only be true if traversing with a stale pointer that is now off the list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "firstDataNode()",
    "name": "firstDataNode",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue$Node",
      "name": "java.util.concurrent.LinkedTransferQueue$Node",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "firstDataNode()",
      "comment": "Version of firstOfMode used by Spliterator",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "spliterator()",
    "name": "spliterator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator<E>",
      "name": "java.util.Spliterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "spliterator()",
      "comment": "Returns a Spliterator over the elements in this queue. The returned spliterator is <i>weakly consistent</i>. The Spliterator reports method_2, method_3, and method_4. @implNote The Spliterator implements trySplit to permit limited parallelism.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unsplice(java.util.concurrent.LinkedTransferQueue$Node pred, java.util.concurrent.LinkedTransferQueue$Node s)",
    "name": "unsplice",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.LinkedTransferQueue$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "pred"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.LinkedTransferQueue$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "protocol": {
      "member": "unsplice(java.util.concurrent.LinkedTransferQueue$Node pred, java.util.concurrent.LinkedTransferQueue$Node s)",
      "comment": "Unsplices (now or later) the given deleted/cancelled node with the given predecessor.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "put(E e)",
    "name": "put",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "put(E e)",
      "comment": "Inserts the specified element at the tail of this queue. As the queue is unbounded, this method will never block.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "offer(E e, long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "offer",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "offer(E e, long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "Inserts the specified element at the tail of this queue. As the queue is unbounded, this method will never block or return false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "offer(E e)",
    "name": "offer",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "offer(E e)",
      "comment": "Inserts the specified element at the tail of this queue. As the queue is unbounded, this method will never return false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(E e)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "add(E e)",
      "comment": "Inserts the specified element at the tail of this queue. As the queue is unbounded, this method will never throw IllegalStateException or return false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryTransfer(E e)",
    "name": "tryTransfer",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "tryTransfer(E e)",
      "comment": "Transfers the element to a waiting consumer immediately, if possible. More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in method_1 or timed method_0 poll), otherwise returning false without enqueuing the element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "transfer(E e)",
    "name": "transfer",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "transfer(E e)",
      "comment": "Transfers the element to a consumer, waiting if necessary to do so. More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in method_1 or timed method_0 poll), else inserts the specified element at the tail of this queue and waits until the element is received by a consumer.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryTransfer(E e, long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "tryTransfer",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "tryTransfer(E e, long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "Transfers the element to a consumer if it is possible to do so before the timeout elapses. More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in method_1 or timed method_0 poll), else inserts the specified element at the tail of this queue and waits until the element is received by a consumer, returning false if the specified wait time elapses before the element can be transferred.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "take()",
    "name": "take",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "take()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "poll(long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "poll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "poll(long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "poll()",
    "name": "poll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "poll()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "drainTo(java.util.Collection<? super E> c)",
    "name": "drainTo",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "drainTo(java.util.Collection<? super E> c)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "drainTo(java.util.Collection<? super E> c, int maxElements)",
    "name": "drainTo",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxElements"
      }
    ],
    "protocol": {
      "member": "drainTo(java.util.Collection<? super E> c, int maxElements)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "iterator()",
      "comment": "Returns an iterator over the elements in this queue in proper sequence. The elements will be returned in order from first (head) to last (tail). The returned iterator is <i>weakly consistent</i>.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "peek()",
    "name": "peek",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "peek()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isEmpty()",
      "comment": "Returns true if this queue contains no elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasWaitingConsumer()",
    "name": "hasWaitingConsumer",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasWaitingConsumer()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "size()",
      "comment": "Returns the number of elements in this queue. If this queue contains more than method_1 elements, returns method_1. Beware that, unlike in most collections, this method is NOT a constant-time operation. Because of the asynchronous nature of these queues, determining the current number of elements requires an method_0 traversal.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWaitingConsumerCount()",
    "name": "getWaitingConsumerCount",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWaitingConsumerCount()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(java.lang.Object o)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "remove(java.lang.Object o)",
      "comment": "Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element e such that method_0, if this queue contains one or more such elements. Returns true if this queue contained the specified element (or equivalently, if this queue changed as a result of the call).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contains(java.lang.Object o)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "contains(java.lang.Object o)",
      "comment": "Returns true if this queue contains the specified element. More formally, returns true if and only if this queue contains at least one element e such that method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remainingCapacity()",
    "name": "remainingCapacity",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedTransferQueue",
      "name": "LinkedTransferQueue",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedTransferQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "remainingCapacity()",
      "comment": "Always returns method_0 because a LinkedTransferQueue is not capacity constrained.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]