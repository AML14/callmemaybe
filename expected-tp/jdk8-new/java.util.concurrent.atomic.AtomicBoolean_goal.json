[
  {
    "signature": "java.util.concurrent.atomic.AtomicBoolean(boolean initialValue)",
    "name": "java.util.concurrent.atomic.AtomicBoolean",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicBoolean",
      "name": "AtomicBoolean",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicBoolean",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "initialValue"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.atomic.AtomicBoolean(boolean initialValue)",
      "comment": "Creates a new AtomicBoolean with the given initial value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.atomic.AtomicBoolean()",
    "name": "java.util.concurrent.atomic.AtomicBoolean",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicBoolean",
      "name": "AtomicBoolean",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicBoolean",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.concurrent.atomic.AtomicBoolean()",
      "comment": "Creates a new AtomicBoolean with initial value false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get()",
    "name": "get",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicBoolean",
      "name": "AtomicBoolean",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicBoolean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "get()",
      "comment": "Returns the current value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "compareAndSet(boolean expect, boolean update)",
    "name": "compareAndSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicBoolean",
      "name": "AtomicBoolean",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicBoolean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "expect"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "update"
      }
    ],
    "protocol": {
      "member": "compareAndSet(boolean expect, boolean update)",
      "comment": "Atomically sets the value to the given updated value if the current value == the expected value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "weakCompareAndSet(boolean expect, boolean update)",
    "name": "weakCompareAndSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicBoolean",
      "name": "AtomicBoolean",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicBoolean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "expect"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "update"
      }
    ],
    "protocol": {
      "member": "weakCompareAndSet(boolean expect, boolean update)",
      "comment": "Atomically sets the value to the given updated value if the current value == the expected value. May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to compareAndSet.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "set(boolean newValue)",
    "name": "set",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicBoolean",
      "name": "AtomicBoolean",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicBoolean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "newValue"
      }
    ],
    "protocol": {
      "member": "set(boolean newValue)",
      "comment": "Unconditionally sets to the given value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lazySet(boolean newValue)",
    "name": "lazySet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicBoolean",
      "name": "AtomicBoolean",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicBoolean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "newValue"
      }
    ],
    "protocol": {
      "member": "lazySet(boolean newValue)",
      "comment": "Eventually sets to the given value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getAndSet(boolean newValue)",
    "name": "getAndSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicBoolean",
      "name": "AtomicBoolean",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicBoolean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "newValue"
      }
    ],
    "protocol": {
      "member": "getAndSet(boolean newValue)",
      "comment": "Atomically sets to the given value and returns the previous value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicBoolean",
      "name": "AtomicBoolean",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicBoolean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns the String representation of the current value.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]