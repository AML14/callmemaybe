[
  {
    "signature": "java.util.Dictionary()",
    "name": "java.util.Dictionary",
    "containingClass": {
      "qualifiedName": "java.util.Dictionary",
      "name": "Dictionary",
      "isArray": false
    },
    "targetClass": "java.util.Dictionary",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.Dictionary()",
      "comment": "Sole constructor. (For invocation by subclass constructors, typically implicit.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "java.util.Dictionary",
      "name": "Dictionary",
      "isArray": false
    },
    "targetClass": "java.util.Dictionary",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "size()",
      "comment": "Returns the number of entries (distinct keys) in this dictionary.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "java.util.Dictionary",
      "name": "Dictionary",
      "isArray": false
    },
    "targetClass": "java.util.Dictionary",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isEmpty()",
      "comment": "Tests if this dictionary maps no keys to value. The general contract for the isEmpty method is that the result is true if and only if this dictionary contains no entries.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "keys()",
    "name": "keys",
    "containingClass": {
      "qualifiedName": "java.util.Dictionary",
      "name": "Dictionary",
      "isArray": false
    },
    "targetClass": "java.util.Dictionary",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<K>",
      "name": "java.util.Enumeration<K>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "keys()",
      "comment": "Returns an enumeration of the keys in this dictionary. The general contract for the keys method is that an Enumeration object is returned that will generate all the keys for which this dictionary contains entries.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "elements()",
    "name": "elements",
    "containingClass": {
      "qualifiedName": "java.util.Dictionary",
      "name": "Dictionary",
      "isArray": false
    },
    "targetClass": "java.util.Dictionary",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<V>",
      "name": "java.util.Enumeration<V>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "elements()",
      "comment": "Returns an enumeration of the values in this dictionary. The general contract for the elements method is that an Enumeration is returned that will generate all the elements contained in entries in this dictionary.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(java.lang.Object key)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "java.util.Dictionary",
      "name": "Dictionary",
      "isArray": false
    },
    "targetClass": "java.util.Dictionary",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "get(java.lang.Object key)",
      "comment": "Returns the value to which the key is mapped in this dictionary. The general contract for the isEmpty method is that if this dictionary contains an entry for the specified key, the associated value is returned; otherwise, null is returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "put(K key, V value)",
    "name": "put",
    "containingClass": {
      "qualifiedName": "java.util.Dictionary",
      "name": "Dictionary",
      "isArray": false
    },
    "targetClass": "java.util.Dictionary",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "put(K key, V value)",
      "comment": "Maps the specified key to the specified value in this dictionary. Neither the key nor the value can be null.  If this dictionary already contains an entry for the specified key, the value already in this dictionary for that key is returned, after modifying the entry to contain the new element. If this dictionary does not already have an entry for the specified key, an entry is created for the specified key and value, and null is returned.  The value can be retrieved by calling the get method with a key that is equal to the original key.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(java.lang.Object key)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.Dictionary",
      "name": "Dictionary",
      "isArray": false
    },
    "targetClass": "java.util.Dictionary",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "remove(java.lang.Object key)",
      "comment": "Removes the key (and its corresponding value) from this dictionary. This method does nothing if the key is not in this dictionary.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]