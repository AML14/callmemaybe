[
  {
    "signature": "sort(java.util.List<T> list)",
    "name": "sort",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      }
    ],
    "protocol": {
      "member": "sort(java.util.List<T> list)",
      "comment": "Sorts the specified list into ascending order, according to the Comparable natural ordering of its elements. All elements in the list must implement the Comparable interface. Furthermore, all elements in the list must be mutually comparable (that is, method_0 must not throw a ClassCastException for any elements e1 and e2 in the list). This sort is guaranteed to be stable: equal elements will not be reordered as a result of the sort. The specified list must be modifiable, but need not be resizable. Implementation note: This implementation is a stable, adaptive, iterative mergesort that requires far fewer than n method_1 comparisons when the input array is partially sorted, while offering the performance of a traditional mergesort when the input array is randomly ordered. If the input array is nearly sorted, the implementation requires approximately n comparisons. Temporary storage requirements vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered input arrays. The implementation takes equal advantage of ascending and descending order in its input array, and can take advantage of ascending and descending order in different parts of the same input array. It is well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting array. The implementation was adapted from Tim Peters's list sort for Python ( TimSort). It uses techniques from Peter McIlroy's \"Optimistic Sorting and Information Theoretic Complexity\", in Proceedings of the Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, January 1993. This implementation dumps the specified list into an array, sorts the array, and iterates over the list resetting each element from the corresponding position in the array. This avoids the n2 method_2 performance that would result from attempting to sort a linked list in place.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sort(java.util.List<T> list, java.util.Comparator<? super T> c)",
    "name": "sort",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "sort(java.util.List<T> list, java.util.Comparator<? super T> c)",
      "comment": "Sorts the specified list according to the order induced by the specified comparator. All elements in the list must be mutually comparable using the specified comparator (that is, method_0 must not throw a ClassCastException for any elements e1 and e2 in the list). This sort is guaranteed to be stable: equal elements will not be reordered as a result of the sort. The specified list must be modifiable, but need not be resizable. Implementation note: This implementation is a stable, adaptive, iterative mergesort that requires far fewer than n method_1 comparisons when the input array is partially sorted, while offering the performance of a traditional mergesort when the input array is randomly ordered. If the input array is nearly sorted, the implementation requires approximately n comparisons. Temporary storage requirements vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered input arrays. The implementation takes equal advantage of ascending and descending order in its input array, and can take advantage of ascending and descending order in different parts of the same input array. It is well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting array. The implementation was adapted from Tim Peters's list sort for Python ( TimSort). It uses techniques from Peter McIlroy's \"Optimistic Sorting and Information Theoretic Complexity\", in Proceedings of the Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, January 1993. This implementation dumps the specified list into an array, sorts the array, and iterates over the list resetting each element from the corresponding position in the array. This avoids the n2 method_2 performance that would result from attempting to sort a linked list in place.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "binarySearch(java.util.List<? extends java.lang.Comparable<? super T>> list, T key)",
    "name": "binarySearch",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "binarySearch(java.util.List<? extends java.lang.Comparable<? super T>> list, T key)",
      "comment": "Searches the specified list for the specified object using the binary search algorithm. The list must be sorted into ascending order according to the Comparable natural ordering of its elements (as by the method_0 method) prior to making this call. If it is not sorted, the results are undefined. If the list contains multiple elements equal to the specified object, there is no guarantee which one will be found. This method runs in method_1 time for a \"random access\" list (which provides near-constant-time positional access). If the specified list does not implement the RandomAccess interface and is large, this method will do an iterator-based binary search that performs method_2 link traversals and method_3 element comparisons.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "binarySearch(java.util.List<? extends T> list, T key, java.util.Comparator<? super T> c)",
    "name": "binarySearch",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "binarySearch(java.util.List<? extends T> list, T key, java.util.Comparator<? super T> c)",
      "comment": "Searches the specified list for the specified object using the binary search algorithm. The list must be sorted into ascending order according to the specified comparator (as by the method_0 method), prior to making this call. If it is not sorted, the results are undefined. If the list contains multiple elements equal to the specified object, there is no guarantee which one will be found. This method runs in method_2 time for a \"random access\" list (which provides near-constant-time positional access). If the specified list does not implement the RandomAccess interface and is large, this method will do an iterator-based binary search that performs method_3 link traversals and method_4 element comparisons.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reverse(java.util.List<?> list)",
    "name": "reverse",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      }
    ],
    "protocol": {
      "member": "reverse(java.util.List<?> list)",
      "comment": "Reverses the order of the elements in the specified list. This method runs in linear time.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "shuffle(java.util.List<?> list)",
    "name": "shuffle",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      }
    ],
    "protocol": {
      "member": "shuffle(java.util.List<?> list)",
      "comment": "Randomly permutes the specified list using a default source of randomness. All permutations occur with approximately equal likelihood. The hedge \"approximately\" is used in the foregoing description because default source of randomness is only approximately an unbiased source of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm would choose permutations with perfect uniformity. This implementation traverses the list backwards, from the last element up to the second, repeatedly swapping a randomly selected element into the \"current position\". Elements are randomly selected from the portion of the list that runs from the first element to the current position, inclusive. This method runs in linear time. If the specified list does not implement the RandomAccess interface and is large, this implementation dumps the specified list into an array before shuffling it, and dumps the shuffled array back into the list. This avoids the quadratic behavior that would result from shuffling a \"sequential access\" list in place.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "shuffle(java.util.List<?> list, java.util.Random rnd)",
    "name": "shuffle",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "java.util.Random",
          "name": "Random",
          "isArray": false
        },
        "name": "rnd"
      }
    ],
    "protocol": {
      "member": "shuffle(java.util.List<?> list, java.util.Random rnd)",
      "comment": "Randomly permute the specified list using the specified source of randomness. All permutations occur with equal likelihood assuming that the source of randomness is fair. This implementation traverses the list backwards, from the last element up to the second, repeatedly swapping a randomly selected element into the \"current position\". Elements are randomly selected from the portion of the list that runs from the first element to the current position, inclusive. This method runs in linear time. If the specified list does not implement the RandomAccess interface and is large, this implementation dumps the specified list into an array before shuffling it, and dumps the shuffled array back into the list. This avoids the quadratic behavior that would result from shuffling a \"sequential access\" list in place.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "swap(java.util.List<?> list, int i, int j)",
    "name": "swap",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "i"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "j"
      }
    ],
    "protocol": {
      "member": "swap(java.util.List<?> list, int i, int j)",
      "comment": "Swaps the elements at the specified positions in the specified list. (If the specified positions are equal, invoking this method leaves the list unchanged.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "fill(java.util.List<? super T> list, T obj)",
    "name": "fill",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "protocol": {
      "member": "fill(java.util.List<? super T> list, T obj)",
      "comment": "Replaces all of the elements of the specified list with the specified element.  This method runs in linear time.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "copy(java.util.List<? super T> dest, java.util.List<? extends T> src)",
    "name": "copy",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "dest"
      },
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "src"
      }
    ],
    "protocol": {
      "member": "copy(java.util.List<? super T> dest, java.util.List<? extends T> src)",
      "comment": "Copies all of the elements from one list into another. After the operation, the index of each copied element in the destination list will be identical to its index in the source list. The destination list must be at least as long as the source list. If it is longer, the remaining elements in the destination list are unaffected.  This method runs in linear time.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "min(java.util.Collection<? extends T> coll)",
    "name": "min",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "coll"
      }
    ],
    "protocol": {
      "member": "min(java.util.Collection<? extends T> coll)",
      "comment": "Returns the minimum element of the given collection, according to the natural ordering of its elements. All elements in the collection must implement the Comparable interface. Furthermore, all elements in the collection must be mutually comparable (that is, method_0 must not throw a ClassCastException for any elements e1 and e2 in the collection). This method iterates over the entire collection, hence it requires time proportional to the size of the collection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "min(java.util.Collection<? extends T> coll, java.util.Comparator<? super T> comp)",
    "name": "min",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "coll"
      },
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comp"
      }
    ],
    "protocol": {
      "member": "min(java.util.Collection<? extends T> coll, java.util.Comparator<? super T> comp)",
      "comment": "Returns the minimum element of the given collection, according to the order induced by the specified comparator. All elements in the collection must be mutually comparable by the specified comparator (that is, method_0 must not throw a ClassCastException for any elements e1 and e2 in the collection). This method iterates over the entire collection, hence it requires time proportional to the size of the collection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "max(java.util.Collection<? extends T> coll)",
    "name": "max",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "coll"
      }
    ],
    "protocol": {
      "member": "max(java.util.Collection<? extends T> coll)",
      "comment": "Returns the maximum element of the given collection, according to the natural ordering of its elements. All elements in the collection must implement the Comparable interface. Furthermore, all elements in the collection must be mutually comparable (that is, method_0 must not throw a ClassCastException for any elements e1 and e2 in the collection). This method iterates over the entire collection, hence it requires time proportional to the size of the collection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "max(java.util.Collection<? extends T> coll, java.util.Comparator<? super T> comp)",
    "name": "max",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "coll"
      },
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comp"
      }
    ],
    "protocol": {
      "member": "max(java.util.Collection<? extends T> coll, java.util.Comparator<? super T> comp)",
      "comment": "Returns the maximum element of the given collection, according to the order induced by the specified comparator. All elements in the collection must be mutually comparable by the specified comparator (that is, method_0 must not throw a ClassCastException for any elements e1 and e2 in the collection). This method iterates over the entire collection, hence it requires time proportional to the size of the collection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "rotate(java.util.List<?> list, int distance)",
    "name": "rotate",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "distance"
      }
    ],
    "protocol": {
      "member": "rotate(java.util.List<?> list, int distance)",
      "comment": "Rotates the elements in the specified list by the specified distance. After calling this method, the element at index i will be the element previously at index (i - distance) mod method_0, for all values of i between 0 and method_0-1, inclusive. (This method has no effect on the size of the list.) For example, suppose list comprises [t, a, n, k, s]. After invoking method_2 (or method_3), list will comprise [s, t, a, n, k]. Note that this method can usefully be applied to sublists to move one or more elements within a list while preserving the order of the remaining elements. For example, the following idiom moves the element at index j forward to position k (which must be greater than or equal to j):  method_4, -1);  To make this concrete, suppose list comprises [a, b, c, d, e]. To move the element at index 1 (b) forward two positions, perform the following invocation:  method_5, -1);  The resulting list is [a, c, d, b, e]. To move more than one element forward, increase the absolute value of the rotation distance. To move elements backward, use a positive shift distance. If the specified list is small or implements the RandomAccess interface, this implementation exchanges the first element into the location it should go, and then repeatedly exchanges the displaced element into the location it should go until a displaced element is swapped into the first element. If necessary, the process is repeated on the second and successive elements, until the rotation is complete. If the specified list is large and doesn't implement the RandomAccess interface, this implementation breaks the list into two sublist views around index -distance mod size. Then the method_6 method is invoked on each sublist view, and finally it is invoked on the entire list. For a more complete description of both algorithms, see Section 2method_16 of Jon Bentley's Programming Pearls (Addison-Wesley, 1986).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceAll(java.util.List<T> list, T oldVal, T newVal)",
    "name": "replaceAll",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "oldVal"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "newVal"
      }
    ],
    "protocol": {
      "member": "replaceAll(java.util.List<T> list, T oldVal, T newVal)",
      "comment": "Replaces all occurrences of one specified value in a list with another. More formally, replaces with newVal each element e in list such that (oldVal==null ? e==null : method_0. (This method has no effect on the size of the list.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "indexOfSubList(java.util.List<?> source, java.util.List<?> target)",
    "name": "indexOfSubList",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "target"
      }
    ],
    "protocol": {
      "member": "indexOfSubList(java.util.List<?> source, java.util.List<?> target)",
      "comment": "Returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence. More formally, returns the lowest index i such that method_0method_1, or -1 if there is no such index. (Returns -1 if {@code method_2 > method_3}) This implementation uses the \"brute force\" technique of scanning over the source list, looking for a match with the target at each location in turn.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lastIndexOfSubList(java.util.List<?> source, java.util.List<?> target)",
    "name": "lastIndexOfSubList",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "target"
      }
    ],
    "protocol": {
      "member": "lastIndexOfSubList(java.util.List<?> source, java.util.List<?> target)",
      "comment": "Returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence. More formally, returns the highest index i such that method_0method_1, or -1 if there is no such index. (Returns -1 if {@code method_2 > method_3}) This implementation uses the \"brute force\" technique of iterating over the source list, looking for a match with the target at each location in turn.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unmodifiableCollection(java.util.Collection<? extends T> c)",
    "name": "unmodifiableCollection",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<T>",
      "name": "java.util.Collection<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "unmodifiableCollection(java.util.Collection<? extends T> c)",
      "comment": "Returns an unmodifiable view of the specified collection. This method allows modules to provide users with \"read-only\" access to internal collections. Query operations on the returned collection \"read through\" to the specified collection, and attempts to modify the returned collection, whether direct or via its iterator, result in an UnsupportedOperationException. The returned collection does not pass the hashCode and equals operations through to the backing collection, but relies on Object's equals and hashCode methods. This is necessary to preserve the contracts of these operations in the case that the backing collection is a set or a list. The returned collection will be serializable if the specified collection is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unmodifiableSet(java.util.Set<? extends T> s)",
    "name": "unmodifiableSet",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<T>",
      "name": "java.util.Set<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "protocol": {
      "member": "unmodifiableSet(java.util.Set<? extends T> s)",
      "comment": "Returns an unmodifiable view of the specified set. This method allows modules to provide users with \"read-only\" access to internal sets. Query operations on the returned set \"read through\" to the specified set, and attempts to modify the returned set, whether direct or via its iterator, result in an UnsupportedOperationException. The returned set will be serializable if the specified set is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unmodifiableSortedSet(java.util.SortedSet<T> s)",
    "name": "unmodifiableSortedSet",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedSet<T>",
      "name": "java.util.SortedSet<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.SortedSet",
          "name": "SortedSet",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "protocol": {
      "member": "unmodifiableSortedSet(java.util.SortedSet<T> s)",
      "comment": "Returns an unmodifiable view of the specified sorted set. This method allows modules to provide users with \"read-only\" access to internal sorted sets. Query operations on the returned sorted set \"read through\" to the specified sorted set. Attempts to modify the returned sorted set, whether direct, via its iterator, or via its subSet, headSet, or tailSet views, result in an UnsupportedOperationException. The returned sorted set will be serializable if the specified sorted set is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unmodifiableNavigableSet(java.util.NavigableSet<T> s)",
    "name": "unmodifiableNavigableSet",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<T>",
      "name": "java.util.NavigableSet<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.NavigableSet",
          "name": "NavigableSet",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "protocol": {
      "member": "unmodifiableNavigableSet(java.util.NavigableSet<T> s)",
      "comment": "Returns an unmodifiable view of the specified navigable set. This method allows modules to provide users with \"read-only\" access to internal navigable sets. Query operations on the returned navigable set \"read through\" to the specified navigable set. Attempts to modify the returned navigable set, whether direct, via its iterator, or via its subSet, headSet, or tailSet views, result in an UnsupportedOperationException. The returned navigable set will be serializable if the specified navigable set is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unmodifiableList(java.util.List<? extends T> list)",
    "name": "unmodifiableList",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<T>",
      "name": "java.util.List<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      }
    ],
    "protocol": {
      "member": "unmodifiableList(java.util.List<? extends T> list)",
      "comment": "Returns an unmodifiable view of the specified list. This method allows modules to provide users with \"read-only\" access to internal lists. Query operations on the returned list \"read through\" to the specified list, and attempts to modify the returned list, whether direct or via its iterator, result in an UnsupportedOperationException. The returned list will be serializable if the specified list is serializable. Similarly, the returned list will implement RandomAccess if the specified list does.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unmodifiableMap(java.util.Map<? extends K, ? extends V> m)",
    "name": "unmodifiableMap",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<K, V>",
      "name": "java.util.Map<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "m"
      }
    ],
    "protocol": {
      "member": "unmodifiableMap(java.util.Map<? extends K, ? extends V> m)",
      "comment": "Returns an unmodifiable view of the specified map. This method allows modules to provide users with \"read-only\" access to internal maps. Query operations on the returned map \"read through\" to the specified map, and attempts to modify the returned map, whether direct or via its collection views, result in an UnsupportedOperationException. The returned map will be serializable if the specified map is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unmodifiableSortedMap(java.util.SortedMap<K, ? extends V> m)",
    "name": "unmodifiableSortedMap",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedMap<K, V>",
      "name": "java.util.SortedMap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.SortedMap",
          "name": "SortedMap",
          "isArray": false
        },
        "name": "m"
      }
    ],
    "protocol": {
      "member": "unmodifiableSortedMap(java.util.SortedMap<K, ? extends V> m)",
      "comment": "Returns an unmodifiable view of the specified sorted map. This method allows modules to provide users with \"read-only\" access to internal sorted maps. Query operations on the returned sorted map \"read through\" to the specified sorted map. Attempts to modify the returned sorted map, whether direct, via its collection views, or via its subMap, headMap, or tailMap views, result in an UnsupportedOperationException. The returned sorted map will be serializable if the specified sorted map is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unmodifiableNavigableMap(java.util.NavigableMap<K, ? extends V> m)",
    "name": "unmodifiableNavigableMap",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableMap<K, V>",
      "name": "java.util.NavigableMap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.NavigableMap",
          "name": "NavigableMap",
          "isArray": false
        },
        "name": "m"
      }
    ],
    "protocol": {
      "member": "unmodifiableNavigableMap(java.util.NavigableMap<K, ? extends V> m)",
      "comment": "Returns an unmodifiable view of the specified navigable map. This method allows modules to provide users with \"read-only\" access to internal navigable maps. Query operations on the returned navigable map \"read through\" to the specified navigable map. Attempts to modify the returned navigable map, whether direct, via its collection views, or via its subMap, headMap, or tailMap views, result in an UnsupportedOperationException. The returned navigable map will be serializable if the specified navigable map is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "synchronizedCollection(java.util.Collection<T> c)",
    "name": "synchronizedCollection",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<T>",
      "name": "java.util.Collection<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "synchronizedCollection(java.util.Collection<T> c)",
      "comment": "Returns a synchronized (thread-safe) collection backed by the specified collection. In order to guarantee serial access, it is critical that all access to the backing collection is accomplished through the returned collection. It is imperative that the user manually synchronize on the returned collection when traversing it via Iterator, Spliterator or Stream:  Collection c = method_0; ... synchronized (c) { Iterator i = method_1; // Must be in the synchronized block while (method_2 method_3; }  Failure to follow this advice may result in non-deterministic behavior. The returned collection does not pass the hashCode and equals operations through to the backing collection, but relies on {@code Object}'s equals and hashCode methods. This is necessary to preserve the contracts of these operations in the case that the backing collection is a set or a list. The returned collection will be serializable if the specified collection is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "synchronizedCollection(java.util.Collection<T> c, java.lang.Object mutex)",
    "name": "synchronizedCollection",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<T>",
      "name": "java.util.Collection<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "mutex"
      }
    ],
    "protocol": {
      "member": "synchronizedCollection(java.util.Collection<T> c, java.lang.Object mutex)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "synchronizedSet(java.util.Set<T> s)",
    "name": "synchronizedSet",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<T>",
      "name": "java.util.Set<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "protocol": {
      "member": "synchronizedSet(java.util.Set<T> s)",
      "comment": "Returns a synchronized (thread-safe) set backed by the specified set. In order to guarantee serial access, it is critical that all access to the backing set is accomplished through the returned set. It is imperative that the user manually synchronize on the returned set when iterating over it:  Set s = method_0; ... synchronized (s) { Iterator i = method_1; // Must be in the synchronized block while (method_2 method_3; }  Failure to follow this advice may result in non-deterministic behavior. The returned set will be serializable if the specified set is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "synchronizedSet(java.util.Set<T> s, java.lang.Object mutex)",
    "name": "synchronizedSet",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<T>",
      "name": "java.util.Set<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "s"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "mutex"
      }
    ],
    "protocol": {
      "member": "synchronizedSet(java.util.Set<T> s, java.lang.Object mutex)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "synchronizedSortedSet(java.util.SortedSet<T> s)",
    "name": "synchronizedSortedSet",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedSet<T>",
      "name": "java.util.SortedSet<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.SortedSet",
          "name": "SortedSet",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "protocol": {
      "member": "synchronizedSortedSet(java.util.SortedSet<T> s)",
      "comment": "Returns a synchronized (thread-safe) sorted set backed by the specified sorted set. In order to guarantee serial access, it is critical that all access to the backing sorted set is accomplished through the returned sorted set (or its views). It is imperative that the user manually synchronize on the returned sorted set when iterating over it or any of its subSet, headSet, or tailSet views.  SortedSet s = method_0; ... synchronized (s) { Iterator i = method_1; // Must be in the synchronized block while (method_2 method_3; }  or:  SortedSet s = method_0; SortedSet s2 = method_5; ... synchronized (s) { // Note: s, not s2!!! Iterator i = method_6; // Must be in the synchronized block while (method_2 method_3; }  Failure to follow this advice may result in non-deterministic behavior. The returned sorted set will be serializable if the specified sorted set is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "synchronizedNavigableSet(java.util.NavigableSet<T> s)",
    "name": "synchronizedNavigableSet",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<T>",
      "name": "java.util.NavigableSet<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.NavigableSet",
          "name": "NavigableSet",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "protocol": {
      "member": "synchronizedNavigableSet(java.util.NavigableSet<T> s)",
      "comment": "Returns a synchronized (thread-safe) navigable set backed by the specified navigable set. In order to guarantee serial access, it is critical that all access to the backing navigable set is accomplished through the returned navigable set (or its views). It is imperative that the user manually synchronize on the returned navigable set when iterating over it or any of its subSet, headSet, or tailSet views.  NavigableSet s = method_0; ... synchronized (s) { Iterator i = method_1; // Must be in the synchronized block while (method_2 method_3; }  or:  NavigableSet s = method_0; NavigableSet s2 = method_5; ... synchronized (s) { // Note: s, not s2!!! Iterator i = method_6; // Must be in the synchronized block while (method_2 method_3; }  Failure to follow this advice may result in non-deterministic behavior. The returned navigable set will be serializable if the specified navigable set is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "synchronizedList(java.util.List<T> list)",
    "name": "synchronizedList",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<T>",
      "name": "java.util.List<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      }
    ],
    "protocol": {
      "member": "synchronizedList(java.util.List<T> list)",
      "comment": "Returns a synchronized (thread-safe) list backed by the specified list. In order to guarantee serial access, it is critical that all access to the backing list is accomplished through the returned list. It is imperative that the user manually synchronize on the returned list when iterating over it:  List list = method_0; ... synchronized (list) { Iterator i = method_1; // Must be in synchronized block while (method_2 method_3; }  Failure to follow this advice may result in non-deterministic behavior. The returned list will be serializable if the specified list is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "synchronizedList(java.util.List<T> list, java.lang.Object mutex)",
    "name": "synchronizedList",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<T>",
      "name": "java.util.List<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "mutex"
      }
    ],
    "protocol": {
      "member": "synchronizedList(java.util.List<T> list, java.lang.Object mutex)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "synchronizedMap(java.util.Map<K, V> m)",
    "name": "synchronizedMap",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<K, V>",
      "name": "java.util.Map<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "m"
      }
    ],
    "protocol": {
      "member": "synchronizedMap(java.util.Map<K, V> m)",
      "comment": "Returns a synchronized (thread-safe) map backed by the specified map. In order to guarantee serial access, it is critical that all access to the backing map is accomplished through the returned map. It is imperative that the user manually synchronize on the returned map when iterating over any of its collection views:  Map m = method_0; ... Set s = method_1; // Needn't be in synchronized block ... synchronized (m) { // Synchronizing on m, not s! Iterator i = method_2; // Must be in synchronized block while (method_3 method_4; }  Failure to follow this advice may result in non-deterministic behavior. The returned map will be serializable if the specified map is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "synchronizedSortedMap(java.util.SortedMap<K, V> m)",
    "name": "synchronizedSortedMap",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedMap<K, V>",
      "name": "java.util.SortedMap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.SortedMap",
          "name": "SortedMap",
          "isArray": false
        },
        "name": "m"
      }
    ],
    "protocol": {
      "member": "synchronizedSortedMap(java.util.SortedMap<K, V> m)",
      "comment": "Returns a synchronized (thread-safe) sorted map backed by the specified sorted map. In order to guarantee serial access, it is critical that all access to the backing sorted map is accomplished through the returned sorted map (or its views). It is imperative that the user manually synchronize on the returned sorted map when iterating over any of its collection views, or the collections views of any of its subMap, headMap or tailMap views.  SortedMap m = method_0; ... Set s = method_1; // Needn't be in synchronized block ... synchronized (m) { // Synchronizing on m, not s! Iterator i = method_2; // Must be in synchronized block while (method_3 method_4; }  or:  SortedMap m = method_0; SortedMap m2 = method_6; ... Set s2 = method_7; // Needn't be in synchronized block ... synchronized (m) { // Synchronizing on m, not m2 or s2! Iterator i = method_2; // Must be in synchronized block while (method_3 method_4; }  Failure to follow this advice may result in non-deterministic behavior. The returned sorted map will be serializable if the specified sorted map is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "synchronizedNavigableMap(java.util.NavigableMap<K, V> m)",
    "name": "synchronizedNavigableMap",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableMap<K, V>",
      "name": "java.util.NavigableMap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.NavigableMap",
          "name": "NavigableMap",
          "isArray": false
        },
        "name": "m"
      }
    ],
    "protocol": {
      "member": "synchronizedNavigableMap(java.util.NavigableMap<K, V> m)",
      "comment": "Returns a synchronized (thread-safe) navigable map backed by the specified navigable map. In order to guarantee serial access, it is critical that all access to the backing navigable map is accomplished through the returned navigable map (or its views). It is imperative that the user manually synchronize on the returned navigable map when iterating over any of its collection views, or the collections views of any of its subMap, headMap or tailMap views.  NavigableMap m = method_0; ... Set s = method_1; // Needn't be in synchronized block ... synchronized (m) { // Synchronizing on m, not s! Iterator i = method_2; // Must be in synchronized block while (method_3 method_4; }  or:  NavigableMap m = method_0; NavigableMap m2 = method_6; ... Set s2 = method_7; // Needn't be in synchronized block ... synchronized (m) { // Synchronizing on m, not m2 or s2! Iterator i = method_2; // Must be in synchronized block while (method_3 method_4; }  Failure to follow this advice may result in non-deterministic behavior. The returned navigable map will be serializable if the specified navigable map is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "checkedCollection(java.util.Collection<E> c, java.lang.Class<E> type)",
    "name": "checkedCollection",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<E>",
      "name": "java.util.Collection<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "protocol": {
      "member": "checkedCollection(java.util.Collection<E> c, java.lang.Class<E> type)",
      "comment": "Returns a dynamically typesafe view of the specified collection. Any attempt to insert an element of the wrong type will result in an immediate ClassCastException. Assuming a collection contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the collection takes place through the view, it is guaranteed that the collection cannot contain an incorrectly typed element. The generics mechanism in the language provides compile-time (static) type checking, but it is possible to defeat this mechanism with unchecked casts. Usually this is not a problem, as the compiler issues warnings on all such unchecked operations. There are, however, times when static type checking alone is not sufficient. For example, suppose a collection is passed to a third-party library and it is imperative that the library code not corrupt the collection by inserting an element of the wrong type. Another use of dynamically typesafe views is debugging. Suppose a program fails with a ClassCastException, indicating that an incorrectly typed element was put into a parameterized collection. Unfortunately, the exception can occur at any time after the erroneous element is inserted, so it typically provides little or no information as to the real source of the problem. If the problem is reproducible, one can quickly determine its source by temporarily modifying the program to wrap the collection with a dynamically typesafe view. For example, this declaration:  Collection<String> c = new HashSet<>();  may be replaced temporarily by this one:  Collection<String> c = method_1( new HashSet<>(), method_2);  Running the program again will cause it to fail at the point where an incorrectly typed element is inserted into the collection, clearly identifying the source of the problem. Once the problem is fixed, the modified declaration may be reverted back to the original. The returned collection does not pass the hashCode and equals operations through to the backing collection, but relies on Object}'s {@code equals and hashCode methods. This is necessary to preserve the contracts of these operations in the case that the backing collection is a set or a list. The returned collection will be serializable if the specified collection is serializable. Since null is considered to be a value of any reference type, the returned collection permits insertion of null elements whenever the backing collection does.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "zeroLengthArray(java.lang.Class<T> type)",
    "name": "zeroLengthArray",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "protocol": {
      "member": "zeroLengthArray(java.lang.Class<T> type)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "checkedQueue(java.util.Queue<E> queue, java.lang.Class<E> type)",
    "name": "checkedQueue",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Queue<E>",
      "name": "java.util.Queue<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Queue",
          "name": "Queue",
          "isArray": false
        },
        "name": "queue"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "protocol": {
      "member": "checkedQueue(java.util.Queue<E> queue, java.lang.Class<E> type)",
      "comment": "Returns a dynamically typesafe view of the specified queue. Any attempt to insert an element of the wrong type will result in an immediate ClassCastException. Assuming a queue contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the queue takes place through the view, it is guaranteed that the queue cannot contain an incorrectly typed element. A discussion of the use of dynamically typesafe views may be found in the documentation for the method_0 checkedCollection method. The returned queue will be serializable if the specified queue is serializable. Since null is considered to be a value of any reference type, the returned queue permits insertion of null elements whenever the backing queue does.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "checkedSet(java.util.Set<E> s, java.lang.Class<E> type)",
    "name": "checkedSet",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<E>",
      "name": "java.util.Set<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "s"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "protocol": {
      "member": "checkedSet(java.util.Set<E> s, java.lang.Class<E> type)",
      "comment": "Returns a dynamically typesafe view of the specified set. Any attempt to insert an element of the wrong type will result in an immediate ClassCastException. Assuming a set contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the set takes place through the view, it is guaranteed that the set cannot contain an incorrectly typed element. A discussion of the use of dynamically typesafe views may be found in the documentation for the method_0 checkedCollection method. The returned set will be serializable if the specified set is serializable. Since null is considered to be a value of any reference type, the returned set permits insertion of null elements whenever the backing set does.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "checkedSortedSet(java.util.SortedSet<E> s, java.lang.Class<E> type)",
    "name": "checkedSortedSet",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedSet<E>",
      "name": "java.util.SortedSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.SortedSet",
          "name": "SortedSet",
          "isArray": false
        },
        "name": "s"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "protocol": {
      "member": "checkedSortedSet(java.util.SortedSet<E> s, java.lang.Class<E> type)",
      "comment": "Returns a dynamically typesafe view of the specified sorted set. Any attempt to insert an element of the wrong type will result in an immediate ClassCastException. Assuming a sorted set contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the sorted set takes place through the view, it is guaranteed that the sorted set cannot contain an incorrectly typed element. A discussion of the use of dynamically typesafe views may be found in the documentation for the method_0 checkedCollection method. The returned sorted set will be serializable if the specified sorted set is serializable. Since null is considered to be a value of any reference type, the returned sorted set permits insertion of null elements whenever the backing sorted set does.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "checkedNavigableSet(java.util.NavigableSet<E> s, java.lang.Class<E> type)",
    "name": "checkedNavigableSet",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.NavigableSet",
          "name": "NavigableSet",
          "isArray": false
        },
        "name": "s"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "protocol": {
      "member": "checkedNavigableSet(java.util.NavigableSet<E> s, java.lang.Class<E> type)",
      "comment": "Returns a dynamically typesafe view of the specified navigable set. Any attempt to insert an element of the wrong type will result in an immediate ClassCastException. Assuming a navigable set contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the navigable set takes place through the view, it is guaranteed that the navigable set cannot contain an incorrectly typed element. A discussion of the use of dynamically typesafe views may be found in the documentation for the method_0 checkedCollection method. The returned navigable set will be serializable if the specified navigable set is serializable. Since null is considered to be a value of any reference type, the returned navigable set permits insertion of null elements whenever the backing sorted set does.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "checkedList(java.util.List<E> list, java.lang.Class<E> type)",
    "name": "checkedList",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<E>",
      "name": "java.util.List<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "protocol": {
      "member": "checkedList(java.util.List<E> list, java.lang.Class<E> type)",
      "comment": "Returns a dynamically typesafe view of the specified list. Any attempt to insert an element of the wrong type will result in an immediate ClassCastException. Assuming a list contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the list takes place through the view, it is guaranteed that the list cannot contain an incorrectly typed element. A discussion of the use of dynamically typesafe views may be found in the documentation for the method_0 checkedCollection method. The returned list will be serializable if the specified list is serializable. Since null is considered to be a value of any reference type, the returned list permits insertion of null elements whenever the backing list does.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "checkedMap(java.util.Map<K, V> m, java.lang.Class<K> keyType, java.lang.Class<V> valueType)",
    "name": "checkedMap",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<K, V>",
      "name": "java.util.Map<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "m"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "keyType"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "valueType"
      }
    ],
    "protocol": {
      "member": "checkedMap(java.util.Map<K, V> m, java.lang.Class<K> keyType, java.lang.Class<V> valueType)",
      "comment": "Returns a dynamically typesafe view of the specified map. Any attempt to insert a mapping whose key or value have the wrong type will result in an immediate ClassCastException. Similarly, any attempt to modify the value currently associated with a key will result in an immediate ClassCastException, whether the modification is attempted directly through the map itself, or through a method_1 instance obtained from the map's method_0 entry set view. Assuming a map contains no incorrectly typed keys or values prior to the time a dynamically typesafe view is generated, and that all subsequent access to the map takes place through the view (or one of its collection views), it is guaranteed that the map cannot contain an incorrectly typed key or value. A discussion of the use of dynamically typesafe views may be found in the documentation for the method_3 checkedCollection method. The returned map will be serializable if the specified map is serializable. Since null is considered to be a value of any reference type, the returned map permits insertion of null keys or values whenever the backing map does.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "checkedSortedMap(java.util.SortedMap<K, V> m, java.lang.Class<K> keyType, java.lang.Class<V> valueType)",
    "name": "checkedSortedMap",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedMap<K, V>",
      "name": "java.util.SortedMap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.SortedMap",
          "name": "SortedMap",
          "isArray": false
        },
        "name": "m"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "keyType"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "valueType"
      }
    ],
    "protocol": {
      "member": "checkedSortedMap(java.util.SortedMap<K, V> m, java.lang.Class<K> keyType, java.lang.Class<V> valueType)",
      "comment": "Returns a dynamically typesafe view of the specified sorted map. Any attempt to insert a mapping whose key or value have the wrong type will result in an immediate ClassCastException. Similarly, any attempt to modify the value currently associated with a key will result in an immediate ClassCastException, whether the modification is attempted directly through the map itself, or through a method_1 instance obtained from the map's method_0 entry set view. Assuming a map contains no incorrectly typed keys or values prior to the time a dynamically typesafe view is generated, and that all subsequent access to the map takes place through the view (or one of its collection views), it is guaranteed that the map cannot contain an incorrectly typed key or value. A discussion of the use of dynamically typesafe views may be found in the documentation for the method_3 checkedCollection method. The returned map will be serializable if the specified map is serializable. Since null is considered to be a value of any reference type, the returned map permits insertion of null keys or values whenever the backing map does.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "checkedNavigableMap(java.util.NavigableMap<K, V> m, java.lang.Class<K> keyType, java.lang.Class<V> valueType)",
    "name": "checkedNavigableMap",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableMap<K, V>",
      "name": "java.util.NavigableMap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.NavigableMap",
          "name": "NavigableMap",
          "isArray": false
        },
        "name": "m"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "keyType"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "valueType"
      }
    ],
    "protocol": {
      "member": "checkedNavigableMap(java.util.NavigableMap<K, V> m, java.lang.Class<K> keyType, java.lang.Class<V> valueType)",
      "comment": "Returns a dynamically typesafe view of the specified navigable map. Any attempt to insert a mapping whose key or value have the wrong type will result in an immediate ClassCastException. Similarly, any attempt to modify the value currently associated with a key will result in an immediate ClassCastException, whether the modification is attempted directly through the map itself, or through a method_1 instance obtained from the map's method_0 entry set view. Assuming a map contains no incorrectly typed keys or values prior to the time a dynamically typesafe view is generated, and that all subsequent access to the map takes place through the view (or one of its collection views), it is guaranteed that the map cannot contain an incorrectly typed key or value. A discussion of the use of dynamically typesafe views may be found in the documentation for the method_3 checkedCollection method. The returned map will be serializable if the specified map is serializable. Since null is considered to be a value of any reference type, the returned map permits insertion of null keys or values whenever the backing map does.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "emptyIterator()",
    "name": "emptyIterator",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<T>",
      "name": "java.util.Iterator<T>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "emptyIterator()",
      "comment": "Returns an iterator that has no elements. More precisely,  <li>method_0 hasNext always returns false.</li> <li>method_1 next always throws NoSuchElementException.</li> <li>method_2 remove always throws IllegalStateException.</li>  Implementations of this method are permitted, but not required, to return the same object from multiple invocations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "emptyListIterator()",
    "name": "emptyListIterator",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ListIterator<T>",
      "name": "java.util.ListIterator<T>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "emptyListIterator()",
      "comment": "Returns a list iterator that has no elements. More precisely,  <li>method_0 hasNext and method_1 hasPrevious always return false.</li> <li>method_2 next and method_3 previous always throw NoSuchElementException.</li> <li>method_4 remove and method_5 set always throw IllegalStateException.</li> <li>method_6 add always throws UnsupportedOperationException.</li> <li>Listmethod_2Index nextIndex always returns 0.</li> <li>method_3Index previousIndex always returns -1.</li>  Implementations of this method are permitted, but not required, to return the same object from multiple invocations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "emptyEnumeration()",
    "name": "emptyEnumeration",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<T>",
      "name": "java.util.Enumeration<T>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "emptyEnumeration()",
      "comment": "Returns an enumeration that has no elements. More precisely,  <li>method_0 hasMoreElements always returns false.</li> <li> method_1 nextElement always throws NoSuchElementException.</li>  Implementations of this method are permitted, but not required, to return the same object from multiple invocations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "emptySet()",
    "name": "emptySet",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<T>",
      "name": "java.util.Set<T>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "emptySet()",
      "comment": "Returns an empty set (immutable). This set is serializable. Unlike the like-named field, this method is parameterized. This example illustrates the type-safe way to obtain an empty set:  Set<String> s = method_0;  @implNote Implementations of this method need not create a separate Set object for each call. Using this method is likely to have comparable cost to using the like-named field. (Unlike this method, the field does not provide type safety.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "emptySortedSet()",
    "name": "emptySortedSet",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedSet<E>",
      "name": "java.util.SortedSet<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "emptySortedSet()",
      "comment": "Returns an empty sorted set (immutable). This set is serializable. This example illustrates the type-safe way to obtain an empty sorted set:  SortedSet<String> s = method_0;  @implNote Implementations of this method need not create a separate SortedSet object for each call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "emptyNavigableSet()",
    "name": "emptyNavigableSet",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "emptyNavigableSet()",
      "comment": "Returns an empty navigable set (immutable). This set is serializable. This example illustrates the type-safe way to obtain an empty navigable set:  NavigableSet<String> s = method_0;  @implNote Implementations of this method need not create a separate NavigableSet object for each call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "emptyList()",
    "name": "emptyList",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<T>",
      "name": "java.util.List<T>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "emptyList()",
      "comment": "Returns an empty list (immutable). This list is serializable. This example illustrates the type-safe way to obtain an empty list:  List<String> s = method_0;  Implementation note: Implementations of this method need not create a separate List object for each call. Using this method is likely to have comparable cost to using the like-named field. (Unlike this method, the field does not provide type safety.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "emptyMap()",
    "name": "emptyMap",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<K, V>",
      "name": "java.util.Map<K, V>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "emptyMap()",
      "comment": "Returns an empty map (immutable). This map is serializable. This example illustrates the type-safe way to obtain an empty map:  Map<String, Date> s = method_0;  @implNote Implementations of this method need not create a separate Map object for each call. Using this method is likely to have comparable cost to using the like-named field. (Unlike this method, the field does not provide type safety.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "emptySortedMap()",
    "name": "emptySortedMap",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedMap<K, V>",
      "name": "java.util.SortedMap<K, V>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "emptySortedMap()",
      "comment": "Returns an empty sorted map (immutable). This map is serializable. This example illustrates the type-safe way to obtain an empty map:  SortedMap<String, Date> s = method_0;  @implNote Implementations of this method need not create a separate SortedMap object for each call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "emptyNavigableMap()",
    "name": "emptyNavigableMap",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableMap<K, V>",
      "name": "java.util.NavigableMap<K, V>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "emptyNavigableMap()",
      "comment": "Returns an empty navigable map (immutable). This map is serializable. This example illustrates the type-safe way to obtain an empty map:  NavigableMap<String, Date> s = method_0;  @implNote Implementations of this method need not create a separate NavigableMap object for each call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "singleton(T o)",
    "name": "singleton",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<T>",
      "name": "java.util.Set<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "singleton(T o)",
      "comment": "Returns an immutable set containing only the specified object. The returned set is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "singletonIterator(E e)",
    "name": "singletonIterator",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "singletonIterator(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "singletonSpliterator(T element)",
    "name": "singletonSpliterator",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator<T>",
      "name": "java.util.Spliterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "singletonSpliterator(T element)",
      "comment": "Creates a Spliterator with only the specified element",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "singletonList(T o)",
    "name": "singletonList",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<T>",
      "name": "java.util.List<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "singletonList(T o)",
      "comment": "Returns an immutable list containing only the specified object. The returned list is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "singletonMap(K key, V value)",
    "name": "singletonMap",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<K, V>",
      "name": "java.util.Map<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "singletonMap(K key, V value)",
      "comment": "Returns an immutable map, mapping only the specified key to the specified value. The returned map is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nCopies(int n, T o)",
    "name": "nCopies",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<T>",
      "name": "java.util.List<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "nCopies(int n, T o)",
      "comment": "Returns an immutable list consisting of n copies of the specified object. The newly allocated data object is tiny (it contains a single reference to the data object). This method is useful in combination with the method_0 method to grow lists. The returned list is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reverseOrder()",
    "name": "reverseOrder",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Comparator<T>",
      "name": "java.util.Comparator<T>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "reverseOrder()",
      "comment": "Returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface. (The natural ordering is the ordering imposed by the objects' own compareTo method.) This enables a simple idiom for sorting (or maintaining) collections (or arrays) of objects that implement the Comparable interface in reverse-natural-order. For example, suppose a is an array of strings. Then:  method_0;  sorts the array in reverse-lexicographic (alphabetical) order. The returned comparator is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reverseOrder(java.util.Comparator<T> cmp)",
    "name": "reverseOrder",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Comparator<T>",
      "name": "java.util.Comparator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "cmp"
      }
    ],
    "protocol": {
      "member": "reverseOrder(java.util.Comparator<T> cmp)",
      "comment": "Returns a comparator that imposes the reverse ordering of the specified comparator. If the specified comparator is null, this method is equivalent to method_0 (in other words, it returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface). The returned comparator is serializable (assuming the specified comparator is also serializable or null).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "enumeration(java.util.Collection<T> c)",
    "name": "enumeration",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<T>",
      "name": "java.util.Enumeration<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "enumeration(java.util.Collection<T> c)",
      "comment": "Returns an enumeration over the specified collection. This provides interoperability with legacy APIs that require an enumeration as input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "list(java.util.Enumeration<T> e)",
    "name": "list",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ArrayList<T>",
      "name": "java.util.ArrayList<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Enumeration",
          "name": "Enumeration",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "list(java.util.Enumeration<T> e)",
      "comment": "Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration. This method provides interoperability between legacy APIs that return enumerations and new APIs that require collections.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "eq(java.lang.Object o1, java.lang.Object o2)",
    "name": "eq",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o1"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o2"
      }
    ],
    "protocol": {
      "member": "eq(java.lang.Object o1, java.lang.Object o2)",
      "comment": "Returns true if the specified arguments are equal, or both null. NB: Do not replace with method_0 until JDK-8015417 is resolved.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "frequency(java.util.Collection<?> c, java.lang.Object o)",
    "name": "frequency",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "frequency(java.util.Collection<?> c, java.lang.Object o)",
      "comment": "Returns the number of elements in the specified collection equal to the specified object. More formally, returns the number of elements e in the collection such that (o == null ? e == null : method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "disjoint(java.util.Collection<?> c1, java.util.Collection<?> c2)",
    "name": "disjoint",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c1"
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c2"
      }
    ],
    "protocol": {
      "member": "disjoint(java.util.Collection<?> c1, java.util.Collection<?> c2)",
      "comment": "Returns true if the two specified collections have no elements in common. Care must be exercised if this method is used on collections that do not comply with the general contract for Collection. Implementations may elect to iterate over either collection and test for containment in the other collection (or to perform any equivalent computation). If either collection uses a nonstandard equality test (as does a SortedSet whose ordering is not compatible with equals, or the key set of an IdentityHashMap), both collections must use the same nonstandard equality test, or the result of this method is undefined. Care must also be exercised when using collections that have restrictions on the elements that they may contain. Collection implementations are allowed to throw exceptions for any operation involving elements they deem ineligible. For absolute safety the specified collections should contain only elements which are eligible elements for both collections. Note that it is permissible to pass the same collection in both parameters, in which case the method will return true if and only if the collection is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addAll(java.util.Collection<? super T> c, T... elements)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "elements"
      }
    ],
    "protocol": {
      "member": "addAll(java.util.Collection<? super T> c, T... elements)",
      "comment": "Adds all of the specified elements to the specified collection. Elements to be added may be specified individually or as an array. The behavior of this convenience method is identical to that of method_0, but this method is likely to run significantly faster under most implementations. When elements are specified individually, this method provides a convenient way to add a few elements to an existing collection:  method_1;",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "newSetFromMap(java.util.Map<E, java.lang.Boolean> map)",
    "name": "newSetFromMap",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<E>",
      "name": "java.util.Set<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "map"
      }
    ],
    "protocol": {
      "member": "newSetFromMap(java.util.Map<E, java.lang.Boolean> map)",
      "comment": "Returns a set backed by the specified map. The resulting set displays the same ordering, concurrency, and performance characteristics as the backing map. In essence, this factory method provides a Set implementation corresponding to any Map implementation. There is no need to use this method on a Map implementation that already has a corresponding Set implementation (such as HashMap or TreeMap). Each method invocation on the set returned by this method results in exactly one method invocation on the backing map or its keySet view, with one exception. The addAll method is implemented as a sequence of put invocations on the backing map. The specified map must be empty at the time this method is invoked, and should not be accessed directly after this method returns. These conditions are ensured if the map is created empty, passed directly to this method, and no reference to the map is retained, as illustrated in the following code fragment:  Set<Object> weakHashSet = method_1( new WeakHashMap<Object, Boolean>());",
      "kind": "FreeText",
      "condition": "!(receiverObjectID.newSetFromMap(args[0])->args[0])"
    }
  },
  {
    "signature": "asLifoQueue(java.util.Deque<T> deque)",
    "name": "asLifoQueue",
    "containingClass": {
      "qualifiedName": "java.util.Collections",
      "name": "Collections",
      "isArray": false
    },
    "targetClass": "java.util.Collections",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Queue<T>",
      "name": "java.util.Queue<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Deque",
          "name": "Deque",
          "isArray": false
        },
        "name": "deque"
      }
    ],
    "protocol": {
      "member": "asLifoQueue(java.util.Deque<T> deque)",
      "comment": "Returns a view of a Deque as a Last-in-first-out (Lifo) Queue. Method add is mapped to push, remove is mapped to pop and so on. This view can be useful when you would like to use a method requiring a Queue but you need Lifo ordering. Each method invocation on the queue returned by this method results in exactly one method invocation on the backing deque, with one exception. The method_0 addAll method is implemented as a sequence of method_1 addFirst invocations on the backing deque.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]