[
  {
    "signature": "java.util.concurrent.CountDownLatch(int count)",
    "name": "java.util.concurrent.CountDownLatch",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CountDownLatch",
      "name": "CountDownLatch",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CountDownLatch",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "count"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.CountDownLatch(int count)",
      "comment": "Constructs a CountDownLatch initialized with the given count.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "await()",
    "name": "await",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CountDownLatch",
      "name": "CountDownLatch",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CountDownLatch",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "await()",
      "comment": "Causes the current thread to wait until the latch has counted down to zero, unless the thread is method_0 interrupted. If the current count is zero then this method returns immediately. If the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happen:  <li>The count reaches zero due to invocations of the method_1 method; or <li>Some other thread method_0 interrupts the current thread.  If the current thread:  <li>has its interrupted status set on entry to this method; or <li>is method_0 interrupted while waiting,  then InterruptedException is thrown and the current thread's interrupted status is cleared.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "await(long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "await",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CountDownLatch",
      "name": "CountDownLatch",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CountDownLatch",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "await(long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "Causes the current thread to wait until the latch has counted down to zero, unless the thread is method_0 interrupted, or the specified waiting time elapses. If the current count is zero then this method returns immediately with the value true. If the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happen:  <li>The count reaches zero due to invocations of the method_1 method; or <li>Some other thread method_0 interrupts the current thread; or <li>The specified waiting time elapses.  If the count reaches zero then the method returns with the value true. If the current thread:  <li>has its interrupted status set on entry to this method; or <li>is method_0 interrupted while waiting,  then InterruptedException is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "countDown()",
    "name": "countDown",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CountDownLatch",
      "name": "CountDownLatch",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CountDownLatch",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "countDown()",
      "comment": "Decrements the count of the latch, releasing all waiting threads if the count reaches zero. If the current count is greater than zero then it is decremented. If the new count is zero then all waiting threads are re-enabled for thread scheduling purposes. If the current count equals zero then nothing happens.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCount()",
    "name": "getCount",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CountDownLatch",
      "name": "CountDownLatch",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CountDownLatch",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getCount()",
      "comment": "Returns the current count. This method is typically used for debugging and testing purposes.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CountDownLatch",
      "name": "CountDownLatch",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CountDownLatch",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns a string identifying this latch, as well as its state. The state, in brackets, includes the String \"Count =\" followed by the current count.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]