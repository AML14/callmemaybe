[
  {
    "signature": "weka.classifiers.trees.RandomForest()",
    "name": "weka.classifiers.trees.RandomForest",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "weka.classifiers.trees.RandomForest()",
      "comment": "Constructor that sets base classifier for bagging to RandomTre and default number of iterations to 100.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "defaultNumberOfIterations()",
    "name": "defaultNumberOfIterations",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "defaultNumberOfIterations()",
      "comment": "The default number of iterations to perform.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCapabilities()",
    "name": "getCapabilities",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.Capabilities",
      "name": "weka.core.Capabilities",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getCapabilities()",
      "comment": "Returns default capabilities of the base classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "defaultClassifierString()",
    "name": "defaultClassifierString",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "defaultClassifierString()",
      "comment": "String describing default classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "defaultClassifierOptions()",
    "name": "defaultClassifierOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "defaultClassifierOptions()",
      "comment": "String describing default classifier options.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "globalInfo()",
    "name": "globalInfo",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "globalInfo()",
      "comment": "Returns a string describing classifier",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTechnicalInformation()",
    "name": "getTechnicalInformation",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.TechnicalInformation",
      "name": "weka.core.TechnicalInformation",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTechnicalInformation()",
      "comment": "Returns an instance of a TechnicalInformation object, containing detailed information about the technical background of this class, emethod_0., paper reference or book this class is based on.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setClassifier(weka.classifiers.Classifier newClassifier)",
    "name": "setClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.classifiers.Classifier",
          "name": "Classifier",
          "isArray": false
        },
        "name": "newClassifier"
      }
    ],
    "protocol": {
      "member": "setClassifier(weka.classifiers.Classifier newClassifier)",
      "comment": "This method only accepts RandomTree arguments.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setRepresentCopiesUsingWeights(boolean representUsingWeights)",
    "name": "setRepresentCopiesUsingWeights",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "representUsingWeights"
      }
    ],
    "protocol": {
      "member": "setRepresentCopiesUsingWeights(boolean representUsingWeights)",
      "comment": "This method only accepts true as its argument",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "numFeaturesTipText()",
    "name": "numFeaturesTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "numFeaturesTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNumFeatures()",
    "name": "getNumFeatures",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getNumFeatures()",
      "comment": "Get the number of features used in random selection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setNumFeatures(int newNumFeatures)",
    "name": "setNumFeatures",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "newNumFeatures"
      }
    ],
    "protocol": {
      "member": "setNumFeatures(int newNumFeatures)",
      "comment": "Set the number of features to use in random selection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "maxDepthTipText()",
    "name": "maxDepthTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "maxDepthTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMaxDepth()",
    "name": "getMaxDepth",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMaxDepth()",
      "comment": "Get the maximum depth of trh tree, 0 for unlimited.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMaxDepth(int value)",
    "name": "setMaxDepth",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "setMaxDepth(int value)",
      "comment": "Set the maximum depth of the tree, 0 for unlimited.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "breakTiesRandomlyTipText()",
    "name": "breakTiesRandomlyTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "breakTiesRandomlyTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getBreakTiesRandomly()",
    "name": "getBreakTiesRandomly",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getBreakTiesRandomly()",
      "comment": "Get whether to break ties randomly.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setBreakTiesRandomly(boolean newBreakTiesRandomly)",
    "name": "setBreakTiesRandomly",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "newBreakTiesRandomly"
      }
    ],
    "protocol": {
      "member": "setBreakTiesRandomly(boolean newBreakTiesRandomly)",
      "comment": "Set whether to break ties randomly.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns description of the bagged classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listOptions()",
    "name": "listOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<weka.core.Option>",
      "name": "java.util.Enumeration<weka.core.Option>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "listOptions()",
      "comment": "Returns an enumeration describing the available options.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOptions()",
    "name": "getOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getOptions()",
      "comment": "Gets the current settings of the forest.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setOptions(java.lang.String[] options)",
    "name": "setOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "options"
      }
    ],
    "protocol": {
      "member": "setOptions(java.lang.String[] options)",
      "comment": "Parses a given list of options.  Valid options are:   -P Size of each bag, as a percentage of the training set size. (default 100)  -O Calculate the out of bag error.  -store-out-of-bag-predictions Whether to store out of bag predictions in internal evaluation object.  -output-out-of-bag-complexity-statistics Whether to output complexity-based statistics when out-of-bag evaluation is performed.  -print Print the individual classifiers in the output  -I <num> Number of iterations. (current value 100)  -num-slots <num> Number of execution slots. (default 1 - imethod_1. no parallelism) (use 0 to auto-detect number of cores)  -K <number of attributes> Number of attributes to randomly investigate. (default 0) (<1 = method_0+1)).  -M <minimum number of instances> Set minimum number of instances per leaf. (default 1)  -V <minimum variance for split> Set minimum numeric class variance proportion of train variance for split (default 1e-3).  -S <num> Seed for random number generator. (default 1)  -depth <num> The maximum depth of the tree, 0 for unlimited. (default 0)  -N <num> Number of folds for backfitting (default 0, no backfitting).  -U Allow unclassified instances.  -B Break ties randomly when several attributes look equally good.  -output-debug-info If set, classifier is run in debug mode and may output additional info to the console  -do-not-check-capabilities If set, classifier capabilities are not checked before classifier is built (use with caution).  -num-decimal-places The number of decimal places for the output of numbers in the model (default 2).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRevision()",
    "name": "getRevision",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRevision()",
      "comment": "Returns the revision string.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "main(java.lang.String[] argv)",
    "name": "main",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomForest",
      "name": "RandomForest",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomForest",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "argv"
      }
    ],
    "protocol": {
      "member": "main(java.lang.String[] argv)",
      "comment": "Main method for this class.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]