[
  {
    "signature": "java.util.regex.PatternSyntaxException(java.lang.String desc, java.lang.String regex, int index)",
    "name": "java.util.regex.PatternSyntaxException",
    "containingClass": {
      "qualifiedName": "java.util.regex.PatternSyntaxException",
      "name": "PatternSyntaxException",
      "isArray": false
    },
    "targetClass": "java.util.regex.PatternSyntaxException",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "desc"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "regex"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "java.util.regex.PatternSyntaxException(java.lang.String desc, java.lang.String regex, int index)",
      "comment": "Constructs a new instance of this class.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getIndex()",
    "name": "getIndex",
    "containingClass": {
      "qualifiedName": "java.util.regex.PatternSyntaxException",
      "name": "PatternSyntaxException",
      "isArray": false
    },
    "targetClass": "java.util.regex.PatternSyntaxException",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getIndex()",
      "comment": "Retrieves the error index.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDescription()",
    "name": "getDescription",
    "containingClass": {
      "qualifiedName": "java.util.regex.PatternSyntaxException",
      "name": "PatternSyntaxException",
      "isArray": false
    },
    "targetClass": "java.util.regex.PatternSyntaxException",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getDescription()",
      "comment": "Retrieves the description of the error.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getPattern()",
    "name": "getPattern",
    "containingClass": {
      "qualifiedName": "java.util.regex.PatternSyntaxException",
      "name": "PatternSyntaxException",
      "isArray": false
    },
    "targetClass": "java.util.regex.PatternSyntaxException",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getPattern()",
      "comment": "Retrieves the erroneous regular-expression pattern.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMessage()",
    "name": "getMessage",
    "containingClass": {
      "qualifiedName": "java.util.regex.PatternSyntaxException",
      "name": "PatternSyntaxException",
      "isArray": false
    },
    "targetClass": "java.util.regex.PatternSyntaxException",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMessage()",
      "comment": "Returns a multi-line string containing the description of the syntax error and its index, the erroneous regular-expression pattern, and a visual indication of the error index within the pattern.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]