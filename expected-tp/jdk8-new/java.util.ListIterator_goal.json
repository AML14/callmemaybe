[
  {
    "signature": "hasNext()",
    "name": "hasNext",
    "containingClass": {
      "qualifiedName": "java.util.ListIterator",
      "name": "ListIterator",
      "isArray": false
    },
    "targetClass": "java.util.ListIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasNext()",
      "comment": "Returns true if this list iterator has more elements when traversing the list in the forward direction. (In other words, returns true if method_0 would return an element rather than throwing an exception.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "next()",
    "name": "next",
    "containingClass": {
      "qualifiedName": "java.util.ListIterator",
      "name": "ListIterator",
      "isArray": false
    },
    "targetClass": "java.util.ListIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "next()",
      "comment": "Returns the next element in the list and advances the cursor position. This method may be called repeatedly to iterate through the list, or intermixed with calls to method_0 to go back and forth. (Note that alternating calls to next and previous will return the same element repeatedly.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasPrevious()",
    "name": "hasPrevious",
    "containingClass": {
      "qualifiedName": "java.util.ListIterator",
      "name": "ListIterator",
      "isArray": false
    },
    "targetClass": "java.util.ListIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasPrevious()",
      "comment": "Returns true if this list iterator has more elements when traversing the list in the reverse direction. (In other words, returns true if method_0 would return an element rather than throwing an exception.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "previous()",
    "name": "previous",
    "containingClass": {
      "qualifiedName": "java.util.ListIterator",
      "name": "ListIterator",
      "isArray": false
    },
    "targetClass": "java.util.ListIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "previous()",
      "comment": "Returns the previous element in the list and moves the cursor position backwards. This method may be called repeatedly to iterate through the list backwards, or intermixed with calls to method_0 to go back and forth. (Note that alternating calls to next and previous will return the same element repeatedly.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextIndex()",
    "name": "nextIndex",
    "containingClass": {
      "qualifiedName": "java.util.ListIterator",
      "name": "ListIterator",
      "isArray": false
    },
    "targetClass": "java.util.ListIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextIndex()",
      "comment": "Returns the index of the element that would be returned by a subsequent call to method_0. (Returns list size if the list iterator is at the end of the list.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "previousIndex()",
    "name": "previousIndex",
    "containingClass": {
      "qualifiedName": "java.util.ListIterator",
      "name": "ListIterator",
      "isArray": false
    },
    "targetClass": "java.util.ListIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "previousIndex()",
      "comment": "Returns the index of the element that would be returned by a subsequent call to method_0. (Returns -1 if the list iterator is at the beginning of the list.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove()",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.ListIterator",
      "name": "ListIterator",
      "isArray": false
    },
    "targetClass": "java.util.ListIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "remove()",
      "comment": "Removes from the list the last element that was returned by method_0 or method_1 (optional operation). This call can only be made once per call to next or previous. It can be made only if method_2 has not been called after the last call to next or previous.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "set(E e)",
    "name": "set",
    "containingClass": {
      "qualifiedName": "java.util.ListIterator",
      "name": "ListIterator",
      "isArray": false
    },
    "targetClass": "java.util.ListIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "set(E e)",
      "comment": "Replaces the last element returned by method_0 or method_1 with the specified element (optional operation). This call can be made only if neither method_2 nor method_3 have been called after the last call to next or previous.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(E e)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.ListIterator",
      "name": "ListIterator",
      "isArray": false
    },
    "targetClass": "java.util.ListIterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "add(E e)",
      "comment": "Inserts the specified element into the list (optional operation). The element is inserted immediately before the element that would be returned by method_0, if any, and after the element that would be returned by method_1, if any. (If the list contains no elements, the new element becomes the sole element on the list.) The new element is inserted before the implicit cursor: a subsequent call to next would be unaffected, and a subsequent call to previous would return the new element. (This call increases by one the value that would be returned by a call to nextIndex or previousIndex.)",
      "kind": "FreeText",
      "condition": ""
    }
  }
]