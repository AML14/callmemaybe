[
  {
    "signature": "tryAdvance(java.util.function.Consumer<? super T> action)",
    "name": "tryAdvance",
    "containingClass": {
      "qualifiedName": "java.util.Spliterator",
      "name": "Spliterator",
      "isArray": false
    },
    "targetClass": "java.util.Spliterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Consumer",
          "name": "Consumer",
          "isArray": false
        },
        "name": "action"
      }
    ],
    "protocol": {
      "member": "tryAdvance(java.util.function.Consumer<? super T> action)",
      "comment": "If a remaining element exists, performs the given action on it, returning true; else returns false. If this Spliterator is method_0 the action is performed on the next element in encounter order. Exceptions thrown by the action are relayed to the caller.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forEachRemaining(java.util.function.Consumer<? super T> action)",
    "name": "forEachRemaining",
    "containingClass": {
      "qualifiedName": "java.util.Spliterator",
      "name": "Spliterator",
      "isArray": false
    },
    "targetClass": "java.util.Spliterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Consumer",
          "name": "Consumer",
          "isArray": false
        },
        "name": "action"
      }
    ],
    "protocol": {
      "member": "forEachRemaining(java.util.function.Consumer<? super T> action)",
      "comment": "Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception. If this Spliterator is method_0, actions are performed in encounter order. Exceptions thrown by the action are relayed to the caller. @implSpec The default implementation repeatedly invokes method_1 until it returns false. It should be overridden whenever possible.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "trySplit()",
    "name": "trySplit",
    "containingClass": {
      "qualifiedName": "java.util.Spliterator",
      "name": "Spliterator",
      "isArray": false
    },
    "targetClass": "java.util.Spliterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator<T>",
      "name": "java.util.Spliterator<T>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "trySplit()",
      "comment": "If this spliterator can be partitioned, returns a Spliterator covering elements, that will, upon return from this method, not be covered by this Spliterator. If this Spliterator is method_5, the returned Spliterator must cover a strict prefix of the elements. Unless this Spliterator covers an infinite number of elements, repeated calls to method_0 must eventually return null. Upon non-null return:  <li>the value reported for method_1 before splitting, must, after splitting, be greater than or equal to method_1 for this and the returned Spliterator; and</li> <li>if this Spliterator is SUBSIZED, then method_1 for this spliterator before splitting must be equal to the sum of method_1 for this and the returned Spliterator after splitting.</li>  This method may return null for any reason, including emptiness, inability to split after traversal has commenced, data structure constraints, and efficiency considerations. @apiNote An ideal trySplit method efficiently (without traversal) divides its elements exactly in half, allowing balanced parallel computation. Many departures from this ideal remain highly effective; for example, only approximately splitting an approximately balanced tree, or for a tree in which leaf nodes may contain either one or two elements, failing to further split these nodes. However, large deviations in balance and/or overly inefficient trySplit mechanics typically result in poor parallel performance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "estimateSize()",
    "name": "estimateSize",
    "containingClass": {
      "qualifiedName": "java.util.Spliterator",
      "name": "Spliterator",
      "isArray": false
    },
    "targetClass": "java.util.Spliterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "estimateSize()",
      "comment": "Returns an estimate of the number of elements that would be encountered by a method_0 traversal, or returns method_1 if infinite, unknown, or too expensive to compute. If this Spliterator is method_2 and has not yet been partially traversed or split, or this Spliterator is method_3 and has not yet been partially traversed, this estimate must be an accurate count of elements that would be encountered by a complete traversal. Otherwise, this estimate may be arbitrarily inaccurate, but must decrease as specified across invocations of method_4. @apiNote Even an inexact estimate is often useful and inexpensive to compute. For example, a sub-spliterator of an approximately balanced binary tree may return a value that estimates the number of elements to be half of that of its parent; if the root Spliterator does not maintain an accurate count, it could estimate size to be the power of two corresponding to its maximum depth.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getExactSizeIfKnown()",
    "name": "getExactSizeIfKnown",
    "containingClass": {
      "qualifiedName": "java.util.Spliterator",
      "name": "Spliterator",
      "isArray": false
    },
    "targetClass": "java.util.Spliterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getExactSizeIfKnown()",
      "comment": "Convenience method that returns method_0 if this Spliterator is method_3, else -1. @implSpec The default implementation returns the result of method_0 if the Spliterator reports a characteristic of SIZED, and -1 otherwise.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "characteristics()",
    "name": "characteristics",
    "containingClass": {
      "qualifiedName": "java.util.Spliterator",
      "name": "Spliterator",
      "isArray": false
    },
    "targetClass": "java.util.Spliterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "characteristics()",
      "comment": "Returns a set of characteristics of this Spliterator and its elements. The result is represented as ORed values from method_1, method_2, method_3, method_4, method_5, method_6, method_7, method_8. Repeated calls to method_0 on a given spliterator, prior to or in-between calls to trySplit, should always return the same result. If a Spliterator reports an inconsistent set of characteristics (either those returned from a single invocation or across multiple invocations), no guarantees can be made about any computation using this Spliterator. @apiNote The characteristics of a given spliterator before splitting may differ from the characteristics after splitting. For specific examples see the characteristic values method_4, method_8 and method_7.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasCharacteristics(int characteristics)",
    "name": "hasCharacteristics",
    "containingClass": {
      "qualifiedName": "java.util.Spliterator",
      "name": "Spliterator",
      "isArray": false
    },
    "targetClass": "java.util.Spliterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "characteristics"
      }
    ],
    "protocol": {
      "member": "hasCharacteristics(int characteristics)",
      "comment": "Returns true if this Spliterator's method_0 contain all of the given characteristics. @implSpec The default implementation returns true if the corresponding bits of the given characteristics are set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getComparator()",
    "name": "getComparator",
    "containingClass": {
      "qualifiedName": "java.util.Spliterator",
      "name": "Spliterator",
      "isArray": false
    },
    "targetClass": "java.util.Spliterator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Comparator<? super T>",
      "name": "java.util.Comparator<? super T>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getComparator()",
      "comment": "If this Spliterator's source is method_0 by a Comparator, returns that Comparator. If the source is SORTED in Comparable natural order, returns null. Otherwise, if the source is not SORTED, throws IllegalStateException. @implSpec The default implementation always throws IllegalStateException.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]