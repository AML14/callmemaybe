[
  {
    "signature": "java.util.concurrent.FutureTask(java.util.concurrent.Callable<V> callable)",
    "name": "java.util.concurrent.FutureTask",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.FutureTask",
      "name": "FutureTask",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.FutureTask",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Callable",
          "name": "Callable",
          "isArray": false
        },
        "name": "callable"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.FutureTask(java.util.concurrent.Callable<V> callable)",
      "comment": "Creates a FutureTask that will, upon running, execute the given Callable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.FutureTask(java.lang.Runnable runnable, V result)",
    "name": "java.util.concurrent.FutureTask",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.FutureTask",
      "name": "FutureTask",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.FutureTask",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Runnable",
          "name": "Runnable",
          "isArray": false
        },
        "name": "runnable"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "result"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.FutureTask(java.lang.Runnable runnable, V result)",
      "comment": "Creates a FutureTask that will, upon running, execute the given Runnable, and arrange that get will return the given result on successful completion.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isCancelled()",
    "name": "isCancelled",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.FutureTask",
      "name": "FutureTask",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.FutureTask",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isCancelled()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isDone()",
    "name": "isDone",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.FutureTask",
      "name": "FutureTask",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.FutureTask",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isDone()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cancel(boolean mayInterruptIfRunning)",
    "name": "cancel",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.FutureTask",
      "name": "FutureTask",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.FutureTask",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "mayInterruptIfRunning"
      }
    ],
    "protocol": {
      "member": "cancel(boolean mayInterruptIfRunning)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get()",
    "name": "get",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.FutureTask",
      "name": "FutureTask",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.FutureTask",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "get()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.FutureTask",
      "name": "FutureTask",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.FutureTask",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "get(long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "done()",
    "name": "done",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.FutureTask",
      "name": "FutureTask",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.FutureTask",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "done()",
      "comment": "Protected method invoked when this task transitions to state isDone (whether normally or via cancellation). The default implementation does nothing. Subclasses may override this method to invoke completion callbacks or perform bookkeeping. Note that you can query status inside the implementation of this method to determine whether this task has been cancelled.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "set(V v)",
    "name": "set",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.FutureTask",
      "name": "FutureTask",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.FutureTask",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "protocol": {
      "member": "set(V v)",
      "comment": "Sets the result of this future to the given value unless this future has already been set or has been cancelled. This method is invoked internally by the method_0 method upon successful completion of the computation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setException(java.lang.Throwable t)",
    "name": "setException",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.FutureTask",
      "name": "FutureTask",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.FutureTask",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Throwable",
          "name": "Throwable",
          "isArray": false
        },
        "name": "t"
      }
    ],
    "protocol": {
      "member": "setException(java.lang.Throwable t)",
      "comment": "Causes this future to report an ExecutionException with the given throwable as its cause, unless this future has already been set or has been cancelled. This method is invoked internally by the method_0 method upon failure of the computation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "run()",
    "name": "run",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.FutureTask",
      "name": "FutureTask",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.FutureTask",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "run()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "runAndReset()",
    "name": "runAndReset",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.FutureTask",
      "name": "FutureTask",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.FutureTask",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "runAndReset()",
      "comment": "Executes the computation without setting its result, and then resets this future to initial state, failing to do so if the computation encounters an exception or is cancelled. This is designed for use with tasks that intrinsically execute more than once.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]