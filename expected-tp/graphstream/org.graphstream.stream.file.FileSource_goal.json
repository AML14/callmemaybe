[
  {
    "signature": "readAll(java.lang.String fileName)",
    "name": "readAll",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSource",
      "name": "FileSource",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "fileName"
      }
    ],
    "protocol": {
      "member": "readAll(java.lang.String fileName)",
      "comment": "Read the whole file in one big non-interruptible operation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "readAll(java.net.URL url)",
    "name": "readAll",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSource",
      "name": "FileSource",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.net.URL",
          "name": "URL",
          "isArray": false
        },
        "name": "url"
      }
    ],
    "protocol": {
      "member": "readAll(java.net.URL url)",
      "comment": "Read the whole file in one big non-interruptible operation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "readAll(java.io.InputStream stream)",
    "name": "readAll",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSource",
      "name": "FileSource",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "stream"
      }
    ],
    "protocol": {
      "member": "readAll(java.io.InputStream stream)",
      "comment": "Read the whole file in one big non-interruptible operation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "readAll(java.io.Reader reader)",
    "name": "readAll",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSource",
      "name": "FileSource",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Reader",
          "name": "Reader",
          "isArray": false
        },
        "name": "reader"
      }
    ],
    "protocol": {
      "member": "readAll(java.io.Reader reader)",
      "comment": "Read the whole file in one big non-interruptible operation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "begin(java.lang.String fileName)",
    "name": "begin",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSource",
      "name": "FileSource",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "fileName"
      }
    ],
    "protocol": {
      "member": "begin(java.lang.String fileName)",
      "comment": "Begin reading the file stopping as soon as possible. Next graph events stored in the file will be sent by calling #method_0 or #method_1. Once method_2 has been called, you must finish the reading process using #method_3. You cannot call method_2 twice without having called #method_3 in between.",
      "kind": "FreeText",
      "condition": "org.graphstream.stream.file.FileSource.end()<-receiverObjectID.begin(args[0])"
    }
  },
  {
    "signature": "begin(java.net.URL url)",
    "name": "begin",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSource",
      "name": "FileSource",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.net.URL",
          "name": "URL",
          "isArray": false
        },
        "name": "url"
      }
    ],
    "protocol": {
      "member": "begin(java.net.URL url)",
      "comment": "Begin reading the file stopping as soon as possible. Next graph events stored in the file will be sent by calling #method_0 or #method_1. Once method_2 has been called, you must finish the reading process using #method_3. You cannot call method_2 twice without having called #method_3 in between.",
      "kind": "FreeText",
      "condition": "org.graphstream.stream.file.FileSource.end()<-receiverObjectID.begin(args[0])"
    }
  },
  {
    "signature": "begin(java.io.InputStream stream)",
    "name": "begin",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSource",
      "name": "FileSource",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "stream"
      }
    ],
    "protocol": {
      "member": "begin(java.io.InputStream stream)",
      "comment": "Begin reading the file stopping as soon as possible. Next graph events stored in the file will be sent by calling #method_0 or #method_1. Once method_2 has been called, you must finish the reading process using #method_3. You cannot call method_2 twice without having called #method_3 in between.",
      "kind": "FreeText",
      "condition": "org.graphstream.stream.file.FileSource.end()<-receiverObjectID.begin(args[0])"
    }
  },
  {
    "signature": "begin(java.io.Reader reader)",
    "name": "begin",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSource",
      "name": "FileSource",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Reader",
          "name": "Reader",
          "isArray": false
        },
        "name": "reader"
      }
    ],
    "protocol": {
      "member": "begin(java.io.Reader reader)",
      "comment": "Begin reading the file stopping as soon as possible. Next graph events stored in the file will be sent by calling #method_0 or #method_1. Once method_2 has been called, you must finish the reading process using #method_3. You cannot call method_2 twice without having called #method_3 in between.",
      "kind": "FreeText",
      "condition": "org.graphstream.stream.file.FileSource.end()<-receiverObjectID.begin(args[0])"
    }
  },
  {
    "signature": "nextEvents()",
    "name": "nextEvents",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSource",
      "name": "FileSource",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextEvents()",
      "comment": "Try to process one graph event, or as few as possible, if more must be read at once. For this method to work, you must have called #method_0 or #method_1 before. This method return true while there are still events to read.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextStep()",
    "name": "nextStep",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSource",
      "name": "FileSource",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextStep()",
      "comment": "Try to process all the events occurring during one time step. In GraphStream, a time step is a group of events that are considered occurring at the same time. Most file formats do not have this notion of step. The DGS format designed for GraphStream handles steps. This method return true while there are still events to read.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "end()",
    "name": "end",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSource",
      "name": "FileSource",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "end()",
      "comment": "Finish the reading process (even if #method_0 or #method_1 did not returned false). You must call this method after reading.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]