[
  {
    "signature": "weka.classifiers.trees.LMT()",
    "name": "weka.classifiers.trees.LMT",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "weka.classifiers.trees.LMT()",
      "comment": "Creates an instance of LMT with standard options",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCapabilities()",
    "name": "getCapabilities",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.Capabilities",
      "name": "weka.core.Capabilities",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getCapabilities()",
      "comment": "Returns default capabilities of the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "buildClassifier(weka.core.Instances data)",
    "name": "buildClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "buildClassifier(weka.core.Instances data)",
      "comment": "Builds the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "distributionForInstance(weka.core.Instance instance)",
    "name": "distributionForInstance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "instance"
      }
    ],
    "protocol": {
      "member": "distributionForInstance(weka.core.Instance instance)",
      "comment": "Returns class probabilities for an instance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "classifyInstance(weka.core.Instance instance)",
    "name": "classifyInstance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "instance"
      }
    ],
    "protocol": {
      "member": "classifyInstance(weka.core.Instance instance)",
      "comment": "Classifies an instance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns a description of the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listOptions()",
    "name": "listOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<weka.core.Option>",
      "name": "java.util.Enumeration<weka.core.Option>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "listOptions()",
      "comment": "Returns an enumeration describing the available options.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setOptions(java.lang.String[] options)",
    "name": "setOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "options"
      }
    ],
    "protocol": {
      "member": "setOptions(java.lang.String[] options)",
      "comment": "Parses a given list of options.   -B Binary splits (convert nominal attributes to binary ones)   -R Split on residuals instead of class values   -C Use cross-validation for boosting at all nodes (imethod_0., disable heuristic)   -P Use error on probabilities instead of misclassification error for stopping criterion of LogitBoost.   -I <numIterations> Set fixed number of iterations for LogitBoost (instead of using cross-validation)   -M <numInstances> Set minimum number of instances at which a node can be split (default 15)   -W <beta> Set beta for weight trimming for LogitBoost. Set to 0 (default) for no weight trimming.   -A The AIC is used to choose the best iteration.   -doNotMakeSplitPointActualValue Do not make split point actual value.  <!-- options-end -->",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOptions()",
    "name": "getOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getOptions()",
      "comment": "Gets the current settings of the Classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWeightTrimBeta()",
    "name": "getWeightTrimBeta",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWeightTrimBeta()",
      "comment": "Get the value of weightTrimBeta.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getUseAIC()",
    "name": "getUseAIC",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getUseAIC()",
      "comment": "Get the value of useAIC.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setWeightTrimBeta(double n)",
    "name": "setWeightTrimBeta",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "protocol": {
      "member": "setWeightTrimBeta(double n)",
      "comment": "Set the value of weightTrimBeta.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setUseAIC(boolean c)",
    "name": "setUseAIC",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "setUseAIC(boolean c)",
      "comment": "Set the value of useAIC.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getConvertNominal()",
    "name": "getConvertNominal",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getConvertNominal()",
      "comment": "Get the value of convertNominal.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSplitOnResiduals()",
    "name": "getSplitOnResiduals",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getSplitOnResiduals()",
      "comment": "Get the value of splitOnResiduals.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getFastRegression()",
    "name": "getFastRegression",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getFastRegression()",
      "comment": "Get the value of fastRegression.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getErrorOnProbabilities()",
    "name": "getErrorOnProbabilities",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getErrorOnProbabilities()",
      "comment": "Get the value of errorOnProbabilities.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNumBoostingIterations()",
    "name": "getNumBoostingIterations",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getNumBoostingIterations()",
      "comment": "Get the value of numBoostingIterations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMinNumInstances()",
    "name": "getMinNumInstances",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMinNumInstances()",
      "comment": "Get the value of minNumInstances.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setConvertNominal(boolean c)",
    "name": "setConvertNominal",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "setConvertNominal(boolean c)",
      "comment": "Set the value of convertNominal.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSplitOnResiduals(boolean c)",
    "name": "setSplitOnResiduals",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "setSplitOnResiduals(boolean c)",
      "comment": "Set the value of splitOnResiduals.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setFastRegression(boolean c)",
    "name": "setFastRegression",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "setFastRegression(boolean c)",
      "comment": "Set the value of fastRegression.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setErrorOnProbabilities(boolean c)",
    "name": "setErrorOnProbabilities",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "setErrorOnProbabilities(boolean c)",
      "comment": "Set the value of errorOnProbabilities.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setNumBoostingIterations(int c)",
    "name": "setNumBoostingIterations",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "setNumBoostingIterations(int c)",
      "comment": "Set the value of numBoostingIterations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMinNumInstances(int c)",
    "name": "setMinNumInstances",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "setMinNumInstances(int c)",
      "comment": "Set the value of minNumInstances.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "graphType()",
    "name": "graphType",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "graphType()",
      "comment": "Returns the type of graph this classifier represents.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "graph()",
    "name": "graph",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "graph()",
      "comment": "Returns graph describing the tree.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "measureTreeSize()",
    "name": "measureTreeSize",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "measureTreeSize()",
      "comment": "Returns the size of the tree",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "measureNumLeaves()",
    "name": "measureNumLeaves",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "measureNumLeaves()",
      "comment": "Returns the number of leaves in the tree",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "enumerateMeasures()",
    "name": "enumerateMeasures",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<java.lang.String>",
      "name": "java.util.Enumeration<java.lang.String>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "enumerateMeasures()",
      "comment": "Returns an enumeration of the additional measure names",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMeasure(java.lang.String additionalMeasureName)",
    "name": "getMeasure",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "additionalMeasureName"
      }
    ],
    "protocol": {
      "member": "getMeasure(java.lang.String additionalMeasureName)",
      "comment": "Returns the value of the named measure",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "globalInfo()",
    "name": "globalInfo",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "globalInfo()",
      "comment": "Returns a string describing classifier",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTechnicalInformation()",
    "name": "getTechnicalInformation",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.TechnicalInformation",
      "name": "weka.core.TechnicalInformation",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTechnicalInformation()",
      "comment": "Returns an instance of a TechnicalInformation object, containing detailed information about the technical background of this class, emethod_0., paper reference or book this class is based on.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "convertNominalTipText()",
    "name": "convertNominalTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "convertNominalTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "splitOnResidualsTipText()",
    "name": "splitOnResidualsTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "splitOnResidualsTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "fastRegressionTipText()",
    "name": "fastRegressionTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "fastRegressionTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "errorOnProbabilitiesTipText()",
    "name": "errorOnProbabilitiesTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "errorOnProbabilitiesTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "numBoostingIterationsTipText()",
    "name": "numBoostingIterationsTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "numBoostingIterationsTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minNumInstancesTipText()",
    "name": "minNumInstancesTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "minNumInstancesTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "weightTrimBetaTipText()",
    "name": "weightTrimBetaTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "weightTrimBetaTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "useAICTipText()",
    "name": "useAICTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "useAICTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "doNotMakeSplitPointActualValueTipText()",
    "name": "doNotMakeSplitPointActualValueTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "doNotMakeSplitPointActualValueTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "numDecimalPlacesTipText()",
    "name": "numDecimalPlacesTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "numDecimalPlacesTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDoNotMakeSplitPointActualValue()",
    "name": "getDoNotMakeSplitPointActualValue",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getDoNotMakeSplitPointActualValue()",
      "comment": "Gets the value of doNotMakeSplitPointActualValue.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setDoNotMakeSplitPointActualValue(boolean m_doNotMakeSplitPointActualValue)",
    "name": "setDoNotMakeSplitPointActualValue",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "m_doNotMakeSplitPointActualValue"
      }
    ],
    "protocol": {
      "member": "setDoNotMakeSplitPointActualValue(boolean m_doNotMakeSplitPointActualValue)",
      "comment": "Sets the value of doNotMakeSplitPointActualValue.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRevision()",
    "name": "getRevision",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRevision()",
      "comment": "Returns the revision string.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "main(java.lang.String[] argv)",
    "name": "main",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.LMT",
      "name": "LMT",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.LMT",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "argv"
      }
    ],
    "protocol": {
      "member": "main(java.lang.String[] argv)",
      "comment": "Main method for testing this class",
      "kind": "FreeText",
      "condition": ""
    }
  }
]