[
  {
    "signature": "java.util.AbstractList()",
    "name": "java.util.AbstractList",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.AbstractList()",
      "comment": "Sole constructor. (For invocation by subclass constructors, typically implicit.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(E e)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "add(E e)",
      "comment": "Appends the specified element to the end of this list (optional operation). Lists that support this operation may place limitations on what elements may be added to this list. In particular, some lists will refuse to add null elements, and others will impose restrictions on the type of elements that may be added. List classes should clearly specify in their documentation any restrictions on what elements may be added. This implementation calls method_0, e). Note that this implementation throws an UnsupportedOperationException unless method_2 is overridden.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(int index)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "get(int index)",
      "comment": "{@inheritDoc}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "set(int index, E element)",
    "name": "set",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "set(int index, E element)",
      "comment": "{@inheritDoc} This implementation always throws an UnsupportedOperationException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(int index, E element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "add(int index, E element)",
      "comment": "{@inheritDoc} This implementation always throws an UnsupportedOperationException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(int index)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "remove(int index)",
      "comment": "{@inheritDoc} This implementation always throws an UnsupportedOperationException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "indexOf(java.lang.Object o)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "indexOf(java.lang.Object o)",
      "comment": "{@inheritDoc} This implementation first gets a list iterator (with {@code method_0}). Then, it iterates over the list until the specified element is found or the end of the list is reached.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lastIndexOf(java.lang.Object o)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "lastIndexOf(java.lang.Object o)",
      "comment": "{@inheritDoc} This implementation first gets a list iterator that points to the end of the list (with {@code method_0}). Then, it iterates backwards over the list until the specified element is found, or the beginning of the list is reached.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clear()",
      "comment": "Removes all of the elements from this list (optional operation). The list will be empty after this call returns. This implementation calls method_0. Note that this implementation throws an UnsupportedOperationException unless method_1 or method_2 is overridden.",
      "kind": "FreeText",
      "condition": "receiverObjectID.isEmpty()<-receiverObjectID.clear()"
    }
  },
  {
    "signature": "addAll(int index, java.util.Collection<? extends E> c)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "addAll(int index, java.util.Collection<? extends E> c)",
      "comment": "{@inheritDoc} This implementation gets an iterator over the specified collection and iterates over it, inserting the elements obtained from the iterator into this list at the appropriate position, one at a time, using method_0. Many implementations will override this method for efficiency. Note that this implementation throws an UnsupportedOperationException unless method_0 is overridden.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "iterator()",
      "comment": "Returns an iterator over the elements in this list in proper sequence. This implementation returns a straightforward implementation of the iterator interface, relying on the backing list's method_0, method_1, and method_2 methods. Note that the iterator returned by this method will throw an UnsupportedOperationException in response to its remove method unless the list's method_2 method is overridden. This implementation can be made to throw runtime exceptions in the face of concurrent modification, as described in the specification for the (protected) method_4 field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listIterator()",
    "name": "listIterator",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ListIterator<E>",
      "name": "java.util.ListIterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "listIterator()",
      "comment": "{@inheritDoc} This implementation returns method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listIterator(int index)",
    "name": "listIterator",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ListIterator<E>",
      "name": "java.util.ListIterator<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "listIterator(int index)",
      "comment": "{@inheritDoc} This implementation returns a straightforward implementation of the ListIterator interface that extends the implementation of the Iterator interface returned by the method_0 method. The ListIterator implementation relies on the backing list's method_1, method_2, method_3 and method_4 methods. Note that the list iterator returned by this implementation will throw an UnsupportedOperationException in response to its remove, set and add methods unless the list's method_4, method_2, and method_3 methods are overridden. This implementation can be made to throw runtime exceptions in the face of concurrent modification, as described in the specification for the (protected) method_8 field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subList(int fromIndex, int toIndex)",
    "name": "subList",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<E>",
      "name": "java.util.List<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "fromIndex"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "toIndex"
      }
    ],
    "protocol": {
      "member": "subList(int fromIndex, int toIndex)",
      "comment": "{@inheritDoc} This implementation returns a list that subclasses AbstractList. The subclass stores, in private fields, the offset of the subList within the backing list, the size of the subList (which can change over its lifetime), and the expected modCount value of the backing list. There are two variants of the subclass, one of which implements RandomAccess. If this list implements RandomAccess the returned list will be an instance of the subclass that implements RandomAccess. The subclass's method_0, method_1, method_2, method_3, method_4 and method_5 methods all delegate to the corresponding methods on the backing abstract list, after bounds-checking the index and adjusting for the offset. The method_6 method merely returns method_7. The method_8 method returns a \"wrapper object\" over a list iterator on the backing list, which is created with the corresponding method on the backing list. The iterator method merely returns method_9, and the size method merely returns the subclass's size field. All methods first check to see if the actual modCount of the backing list is equal to its expected value, and throw a ConcurrentModificationException if it is not.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object o)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "equals(java.lang.Object o)",
      "comment": "Compares the specified object with this list for equality. Returns true if and only if the specified object is also a list, both lists have the same size, and all corresponding pairs of elements in the two lists are equal. (Two elements e1 and e2 are equal if (e1==null ? e2==null : method_0.) In other words, two lists are defined to be equal if they contain the same elements in the same order. This implementation first checks if the specified object is this list. If so, it returns true; if not, it checks if the specified object is a list. If not, it returns false; if so, it iterates over both lists, comparing corresponding pairs of elements. If any comparison returns false, this method returns false. If either iterator runs out of elements before the other it returns false (as the lists are of unequal length); otherwise it returns true when the iterations complete.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hashCode()",
      "comment": "Returns the hash code value for this list. This implementation uses exactly the code that is used to define the list hash function in the documentation for the method_0 method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeRange(int fromIndex, int toIndex)",
    "name": "removeRange",
    "containingClass": {
      "qualifiedName": "java.util.AbstractList",
      "name": "AbstractList",
      "isArray": false
    },
    "targetClass": "java.util.AbstractList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "fromIndex"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "toIndex"
      }
    ],
    "protocol": {
      "member": "removeRange(int fromIndex, int toIndex)",
      "comment": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (toIndex - fromIndex) elements. (If toIndex==fromIndex, this operation has no effect.) This method is called by the clear operation on this list and its subLists. Overriding this method to take advantage of the internals of the list implementation can substantially improve the performance of the clear operation on this list and its subLists. This implementation gets a list iterator positioned before fromIndex, and repeatedly calls method_0 followed by method_1 until the entire range has been removed. Note: if method_1 requires linear time, this implementation requires quadratic time.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]