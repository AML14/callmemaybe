[
  {
    "signature": "weka.classifiers.functions.supportVector.RegOptimizer()",
    "name": "weka.classifiers.functions.supportVector.RegOptimizer",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "weka.classifiers.functions.supportVector.RegOptimizer()",
      "comment": "the default constructor",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listOptions()",
    "name": "listOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<weka.core.Option>",
      "name": "java.util.Enumeration<weka.core.Option>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "listOptions()",
      "comment": "Gets an enumeration describing the available options.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setOptions(java.lang.String[] options)",
    "name": "setOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "options"
      }
    ],
    "protocol": {
      "member": "setOptions(java.lang.String[] options)",
      "comment": "Parses a given list of options.   -L <double> The epsilon parameter in epsilon-insensitive loss function. (default 1method_0-3)   -W <double> The random number seed. (default 1)  <!-- options-end -->",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOptions()",
    "name": "getOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getOptions()",
      "comment": "Gets the current settings of the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "modelBuilt()",
    "name": "modelBuilt",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "modelBuilt()",
      "comment": "flag to indicate whether the model was built yet",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSMOReg(weka.classifiers.functions.SMOreg value)",
    "name": "setSMOReg",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.classifiers.functions.SMOreg",
          "name": "SMOreg",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "setSMOReg(weka.classifiers.functions.SMOreg value)",
      "comment": "sets the parent SVM",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getKernelEvaluations()",
    "name": "getKernelEvaluations",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getKernelEvaluations()",
      "comment": "returns the number of kernel evaluations",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCacheHits()",
    "name": "getCacheHits",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getCacheHits()",
      "comment": "return the number of kernel cache hits",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "init(weka.core.Instances data)",
    "name": "init",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "init(weka.core.Instances data)",
      "comment": "initializes the algorithm",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "wrapUp()",
    "name": "wrapUp",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "wrapUp()",
      "comment": "wrap up various variables to save memeory and do some housekeeping after optimization has finished.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getScore()",
    "name": "getScore",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getScore()",
      "comment": "Compute the value of the objective function.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "buildClassifier(weka.core.Instances data)",
    "name": "buildClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "buildClassifier(weka.core.Instances data)",
      "comment": "learn SVM parameters from data. Subclasses should implement something more interesting.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "SVMOutput(int index)",
    "name": "SVMOutput",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "SVMOutput(int index)",
      "comment": "SVMOutput of an instance in the training set, m_data This uses the cache, unlike method_0",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "SVMOutput(weka.core.Instance inst)",
    "name": "SVMOutput",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "inst"
      }
    ],
    "protocol": {
      "member": "SVMOutput(weka.core.Instance inst)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "seedTipText()",
    "name": "seedTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "seedTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSeed()",
    "name": "getSeed",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getSeed()",
      "comment": "Gets the current seed value for the random number generator",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSeed(int value)",
    "name": "setSeed",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "setSeed(int value)",
      "comment": "Sets the seed value for the random number generator",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "epsilonParameterTipText()",
    "name": "epsilonParameterTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "epsilonParameterTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getEpsilonParameter()",
    "name": "getEpsilonParameter",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getEpsilonParameter()",
      "comment": "Get the value of epsilon parameter of the epsilon insensitive loss function.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setEpsilonParameter(double v)",
    "name": "setEpsilonParameter",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "protocol": {
      "member": "setEpsilonParameter(double v)",
      "comment": "Set the value of epsilon parameter of the epsilon insensitive loss function.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Prints out the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRevision()",
    "name": "getRevision",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegOptimizer",
      "name": "RegOptimizer",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRevision()",
      "comment": "Returns the revision string.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]