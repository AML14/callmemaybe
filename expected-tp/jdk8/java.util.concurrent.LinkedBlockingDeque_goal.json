[
  {
    "signature": "java.util.concurrent.LinkedBlockingDeque()",
    "name": "java.util.concurrent.LinkedBlockingDeque",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.concurrent.LinkedBlockingDeque()",
      "comment": "Creates a LinkedBlockingDeque with a capacity of method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.LinkedBlockingDeque(int capacity)",
    "name": "java.util.concurrent.LinkedBlockingDeque",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "capacity"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.LinkedBlockingDeque(int capacity)",
      "comment": "Creates a LinkedBlockingDeque with the given (fixed) capacity.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.LinkedBlockingDeque(java.util.Collection<? extends E> c)",
    "name": "java.util.concurrent.LinkedBlockingDeque",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.LinkedBlockingDeque(java.util.Collection<? extends E> c)",
      "comment": "Creates a LinkedBlockingDeque with a capacity of method_0, initially containing the elements of the given collection, added in traversal order of the collection's iterator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unlink(java.util.concurrent.LinkedBlockingDeque$Node<E> x)",
    "name": "unlink",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.LinkedBlockingDeque$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "protocol": {
      "member": "unlink(java.util.concurrent.LinkedBlockingDeque$Node<E> x)",
      "comment": "Unlinks x.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addFirst(E e)",
    "name": "addFirst",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "addFirst(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addLast(E e)",
    "name": "addLast",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "addLast(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "offerFirst(E e)",
    "name": "offerFirst",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "offerFirst(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "offerLast(E e)",
    "name": "offerLast",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "offerLast(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "putFirst(E e)",
    "name": "putFirst",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "putFirst(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "putLast(E e)",
    "name": "putLast",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "putLast(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "offerFirst(E e, long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "offerFirst",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "offerFirst(E e, long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "offerLast(E e, long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "offerLast",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "offerLast(E e, long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeFirst()",
    "name": "removeFirst",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "removeFirst()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeLast()",
    "name": "removeLast",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "removeLast()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollFirst()",
    "name": "pollFirst",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "pollFirst()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollLast()",
    "name": "pollLast",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "pollLast()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "takeFirst()",
    "name": "takeFirst",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "takeFirst()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "takeLast()",
    "name": "takeLast",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "takeLast()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollFirst(long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "pollFirst",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "pollFirst(long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollLast(long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "pollLast",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "pollLast(long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getFirst()",
    "name": "getFirst",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getFirst()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLast()",
    "name": "getLast",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getLast()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "peekFirst()",
    "name": "peekFirst",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "peekFirst()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "peekLast()",
    "name": "peekLast",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "peekLast()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeFirstOccurrence(java.lang.Object o)",
    "name": "removeFirstOccurrence",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "removeFirstOccurrence(java.lang.Object o)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeLastOccurrence(java.lang.Object o)",
    "name": "removeLastOccurrence",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "removeLastOccurrence(java.lang.Object o)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(E e)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "add(E e)",
      "comment": "Inserts the specified element at the end of this deque unless it would violate capacity restrictions. When using a capacity-restricted deque, it is generally preferable to use method method_0 offer. This method is equivalent to method_2.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "offer(E e)",
    "name": "offer",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "offer(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "put(E e)",
    "name": "put",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "put(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "offer(E e, long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "offer",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "offer(E e, long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove()",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "remove()",
      "comment": "Retrieves and removes the head of the queue represented by this deque. This method differs from method_1 poll only in that it throws an exception if this deque is empty. This method is equivalent to method_0 removeFirst.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "poll()",
    "name": "poll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "poll()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "take()",
    "name": "take",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "take()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "poll(long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "poll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "poll(long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "element()",
    "name": "element",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "element()",
      "comment": "Retrieves, but does not remove, the head of the queue represented by this deque. This method differs from method_1 peek only in that it throws an exception if this deque is empty. This method is equivalent to method_0 getFirst.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "peek()",
    "name": "peek",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "peek()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remainingCapacity()",
    "name": "remainingCapacity",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "remainingCapacity()",
      "comment": "Returns the number of additional elements that this deque can ideally (in the absence of memory or resource constraints) accept without blocking. This is always equal to the initial capacity of this deque less the current size of this deque. Note that you cannot always tell if an attempt to insert an element will succeed by inspecting remainingCapacity because it may be the case that another thread is about to insert or remove an element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "drainTo(java.util.Collection<? super E> c)",
    "name": "drainTo",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "drainTo(java.util.Collection<? super E> c)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "drainTo(java.util.Collection<? super E> c, int maxElements)",
    "name": "drainTo",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxElements"
      }
    ],
    "protocol": {
      "member": "drainTo(java.util.Collection<? super E> c, int maxElements)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "push(E e)",
    "name": "push",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "push(E e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pop()",
    "name": "pop",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "pop()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(java.lang.Object o)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "remove(java.lang.Object o)",
      "comment": "Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that method_0 (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). This method is equivalent to method_1 removeFirstOccurrence.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "size()",
      "comment": "Returns the number of elements in this deque.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contains(java.lang.Object o)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "contains(java.lang.Object o)",
      "comment": "Returns true if this deque contains the specified element. More formally, returns true if and only if this deque contains at least one element e such that method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray()",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object[]",
      "name": "java.lang.Object[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "toArray()",
      "comment": "Returns an array containing all of the elements in this deque, in proper sequence (from first to last element). The returned array will be \"safe\" in that no references to it are maintained by this deque. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray(T[] a)",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "a"
      }
    ],
    "protocol": {
      "member": "toArray(T[] a)",
      "comment": "Returns an array containing all of the elements in this deque, in proper sequence; the runtime type of the returned array is that of the specified array. If the deque fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this deque. If this deque fits in the specified array with room to spare (imethod_4., the array has more elements than this deque), the element in the array immediately following the end of the deque is set to null. Like the method_0 method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a deque known to contain only strings. The following code can be used to dump the deque into a newly allocated array of String}:  {@code String[] y = method_1; Note that method_2 is identical in function to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clear()",
      "comment": "Atomically removes all of the elements from this deque. The deque will be empty after this call returns.",
      "kind": "FreeText",
      "condition": "receiverObjectID.isEmpty()<-receiverObjectID.clear()"
    }
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "iterator()",
      "comment": "Returns an iterator over the elements in this deque in proper sequence. The elements will be returned in order from first (head) to last (tail). The returned iterator is <i>weakly consistent</i>.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "descendingIterator()",
    "name": "descendingIterator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "descendingIterator()",
      "comment": "Returns an iterator over the elements in this deque in reverse sequential order. The elements will be returned in order from last (tail) to first (head). The returned iterator is <i>weakly consistent</i>.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "spliterator()",
    "name": "spliterator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.LinkedBlockingDeque",
      "name": "LinkedBlockingDeque",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.LinkedBlockingDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator<E>",
      "name": "java.util.Spliterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "spliterator()",
      "comment": "Returns a Spliterator over the elements in this deque. The returned spliterator is <i>weakly consistent</i>. The Spliterator reports method_2, method_3, and method_4. @implNote The Spliterator implements trySplit to permit limited parallelism.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]