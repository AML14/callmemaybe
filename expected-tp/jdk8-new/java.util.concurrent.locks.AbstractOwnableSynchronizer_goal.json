[
  {
    "signature": "java.util.concurrent.locks.AbstractOwnableSynchronizer()",
    "name": "java.util.concurrent.locks.AbstractOwnableSynchronizer",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractOwnableSynchronizer",
      "name": "AbstractOwnableSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractOwnableSynchronizer",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.concurrent.locks.AbstractOwnableSynchronizer()",
      "comment": "Empty constructor for use by subclasses.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setExclusiveOwnerThread(java.lang.Thread thread)",
    "name": "setExclusiveOwnerThread",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractOwnableSynchronizer",
      "name": "AbstractOwnableSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractOwnableSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Thread",
          "name": "Thread",
          "isArray": false
        },
        "name": "thread"
      }
    ],
    "protocol": {
      "member": "setExclusiveOwnerThread(java.lang.Thread thread)",
      "comment": "Sets the thread that currently owns exclusive access. A null argument indicates that no thread owns access. This method does not otherwise impose any synchronization or volatile field accesses.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getExclusiveOwnerThread()",
    "name": "getExclusiveOwnerThread",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.AbstractOwnableSynchronizer",
      "name": "AbstractOwnableSynchronizer",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.AbstractOwnableSynchronizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Thread",
      "name": "java.lang.Thread",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getExclusiveOwnerThread()",
      "comment": "Returns the thread last set by setExclusiveOwnerThread, or null if never set. This method does not otherwise impose any synchronization or volatile field accesses.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]