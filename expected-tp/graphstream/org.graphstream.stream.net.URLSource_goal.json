[
  {
    "signature": "fetchAll(java.net.URL url)",
    "name": "fetchAll",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.net.URLSource",
      "name": "URLSource",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.net.URLSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.net.URL",
          "name": "URL",
          "isArray": false
        },
        "name": "url"
      }
    ],
    "protocol": {
      "member": "fetchAll(java.net.URL url)",
      "comment": "Read the whole URL in one big non-interruptible operation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "begin(java.net.URL url)",
    "name": "begin",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.net.URLSource",
      "name": "URLSource",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.net.URLSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.net.URL",
          "name": "URL",
          "isArray": false
        },
        "name": "url"
      }
    ],
    "protocol": {
      "member": "begin(java.net.URL url)",
      "comment": "Begin fetching the URL stopping as soon as possible. Next graph events from the URL will be send by calling #method_0. Once method_1 as been called, you must finish the reading process using #method_2. You cannot call method_1 twice without having called #method_2 in between.",
      "kind": "FreeText",
      "condition": "org.graphstream.stream.net.URLSource.end()<-receiverObjectID.begin(args[0])"
    }
  },
  {
    "signature": "nextEvents()",
    "name": "nextEvents",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.net.URLSource",
      "name": "URLSource",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.net.URLSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextEvents()",
      "comment": "Try to process one graph event, or as few as possible, if more must be read at once. For this method to work, you must have called #method_0. This method return true while there are still events to read.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "end()",
    "name": "end",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.net.URLSource",
      "name": "URLSource",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.net.URLSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "end()",
      "comment": "Finish the reading process (even if #method_0 did not returned false). You must call this method after reading.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]