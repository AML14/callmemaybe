[
  {
    "signature": "java.util.logging.ConsoleHandler()",
    "name": "java.util.logging.ConsoleHandler",
    "containingClass": {
      "qualifiedName": "java.util.logging.ConsoleHandler",
      "name": "ConsoleHandler",
      "isArray": false
    },
    "targetClass": "java.util.logging.ConsoleHandler",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.logging.ConsoleHandler()",
      "comment": "Create a ConsoleHandler for method_0.  The ConsoleHandler is configured based on LogManager properties (or their default values).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "publish(java.util.logging.LogRecord record)",
    "name": "publish",
    "containingClass": {
      "qualifiedName": "java.util.logging.ConsoleHandler",
      "name": "ConsoleHandler",
      "isArray": false
    },
    "targetClass": "java.util.logging.ConsoleHandler",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.logging.LogRecord",
          "name": "LogRecord",
          "isArray": false
        },
        "name": "record"
      }
    ],
    "protocol": {
      "member": "publish(java.util.logging.LogRecord record)",
      "comment": "Publish a LogRecord.  The logging request was made initially to a Logger object, which initialized the LogRecord and forwarded it here.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "close()",
    "name": "close",
    "containingClass": {
      "qualifiedName": "java.util.logging.ConsoleHandler",
      "name": "ConsoleHandler",
      "isArray": false
    },
    "targetClass": "java.util.logging.ConsoleHandler",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "close()",
      "comment": "Override method_0 to do a flush but not to close the output stream. That is, we do not close method_1.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]