[
  {
    "signature": "cern.colt.list.DistinctNumberList(long[] distinctValues, int initialCapacity)",
    "name": "cern.colt.list.DistinctNumberList",
    "containingClass": {
      "qualifiedName": "cern.colt.list.DistinctNumberList",
      "name": "DistinctNumberList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.DistinctNumberList",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "distinctValues"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "initialCapacity"
      }
    ],
    "protocol": {
      "member": "cern.colt.list.DistinctNumberList(long[] distinctValues, int initialCapacity)",
      "comment": "Constructs an empty list with the specified initial capacity and the specified distinct values allowed to be hold in this list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(long element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "cern.colt.list.DistinctNumberList",
      "name": "DistinctNumberList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.DistinctNumberList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "add(long element)",
      "comment": "Appends the specified element to the end of this list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "codeOf(long element)",
    "name": "codeOf",
    "containingClass": {
      "qualifiedName": "cern.colt.list.DistinctNumberList",
      "name": "DistinctNumberList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.DistinctNumberList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "codeOf(long element)",
      "comment": "Returns the code that shall be stored for the given element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ensureCapacity(int minCapacity)",
    "name": "ensureCapacity",
    "containingClass": {
      "qualifiedName": "cern.colt.list.DistinctNumberList",
      "name": "DistinctNumberList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.DistinctNumberList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minCapacity"
      }
    ],
    "protocol": {
      "member": "ensureCapacity(int minCapacity)",
      "comment": "Ensures that the receiver can hold at least the specified number of elements without needing to allocate new internal memory. If necessary, allocates new internal memory and increases the capacity of the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getQuick(int index)",
    "name": "getQuick",
    "containingClass": {
      "qualifiedName": "cern.colt.list.DistinctNumberList",
      "name": "DistinctNumberList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.DistinctNumberList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "getQuick(int index)",
      "comment": "Returns the element at the specified position in the receiver; WARNING: Does not check preconditions. Provided with invalid parameters this method may return invalid elements without throwing any exception! You should only use this method when you are absolutely sure that the index is within bounds. Precondition (unchecked): index >= 0 && index < method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeFromTo(int from, int to)",
    "name": "removeFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.DistinctNumberList",
      "name": "DistinctNumberList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.DistinctNumberList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "removeFromTo(int from, int to)",
      "comment": "Removes from the receiver all elements whose index is between from, inclusive and to, inclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (to - from + 1) elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setQuick(int index, long element)",
    "name": "setQuick",
    "containingClass": {
      "qualifiedName": "cern.colt.list.DistinctNumberList",
      "name": "DistinctNumberList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.DistinctNumberList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "setQuick(int index, long element)",
      "comment": "Replaces the element at the specified position in the receiver with the specified element; WARNING: Does not check preconditions. Provided with invalid parameters this method may access invalid indexes without throwing any exception! You should only use this method when you are absolutely sure that the index is within bounds. Precondition (unchecked): index >= 0 && index < method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSizeRaw(int newSize)",
    "name": "setSizeRaw",
    "containingClass": {
      "qualifiedName": "cern.colt.list.DistinctNumberList",
      "name": "DistinctNumberList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.DistinctNumberList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "newSize"
      }
    ],
    "protocol": {
      "member": "setSizeRaw(int newSize)",
      "comment": "Sets the size of the receiver without modifying it otherwise. This method should not release or allocate new memory but simply set some instance variable like size.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setUp(long[] distinctValues, int initialCapacity)",
    "name": "setUp",
    "containingClass": {
      "qualifiedName": "cern.colt.list.DistinctNumberList",
      "name": "DistinctNumberList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.DistinctNumberList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "distinctValues"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "initialCapacity"
      }
    ],
    "protocol": {
      "member": "setUp(long[] distinctValues, int initialCapacity)",
      "comment": "Sets the receiver to an empty list with the specified initial capacity and the specified distinct values allowed to be hold in this list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "trimToSize()",
    "name": "trimToSize",
    "containingClass": {
      "qualifiedName": "cern.colt.list.DistinctNumberList",
      "name": "DistinctNumberList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.DistinctNumberList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "trimToSize()",
      "comment": "Trims the capacity of the receiver to be the receiver's current size. An application can use this operation to minimize the storage of the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]