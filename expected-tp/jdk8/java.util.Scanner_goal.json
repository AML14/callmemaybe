[
  {
    "signature": "java.util.Scanner(java.lang.Readable source)",
    "name": "java.util.Scanner",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Readable",
          "name": "Readable",
          "isArray": false
        },
        "name": "source"
      }
    ],
    "protocol": {
      "member": "java.util.Scanner(java.lang.Readable source)",
      "comment": "Constructs a new Scanner that produces values scanned from the specified source.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Scanner(java.io.InputStream source)",
    "name": "java.util.Scanner",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "source"
      }
    ],
    "protocol": {
      "member": "java.util.Scanner(java.io.InputStream source)",
      "comment": "Constructs a new Scanner that produces values scanned from the specified input stream. Bytes from the stream are converted into characters using the underlying platform's java.nio.charset.Charset#defaultCharset() default charset.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Scanner(java.io.InputStream source, java.lang.String charsetName)",
    "name": "java.util.Scanner",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "charsetName"
      }
    ],
    "protocol": {
      "member": "java.util.Scanner(java.io.InputStream source, java.lang.String charsetName)",
      "comment": "Constructs a new Scanner that produces values scanned from the specified input stream. Bytes from the stream are converted into characters using the specified charset.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Scanner(java.io.File source)",
    "name": "java.util.Scanner",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.File",
          "name": "File",
          "isArray": false
        },
        "name": "source"
      }
    ],
    "protocol": {
      "member": "java.util.Scanner(java.io.File source)",
      "comment": "Constructs a new Scanner that produces values scanned from the specified file. Bytes from the file are converted into characters using the underlying platform's java.nio.charset.Charset#defaultCharset() default charset.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Scanner(java.io.File source, java.lang.String charsetName)",
    "name": "java.util.Scanner",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.File",
          "name": "File",
          "isArray": false
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "charsetName"
      }
    ],
    "protocol": {
      "member": "java.util.Scanner(java.io.File source, java.lang.String charsetName)",
      "comment": "Constructs a new Scanner that produces values scanned from the specified file. Bytes from the file are converted into characters using the specified charset.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Scanner(java.nio.file.Path source)",
    "name": "java.util.Scanner",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.nio.file.Path",
          "name": "Path",
          "isArray": false
        },
        "name": "source"
      }
    ],
    "protocol": {
      "member": "java.util.Scanner(java.nio.file.Path source)",
      "comment": "Constructs a new Scanner that produces values scanned from the specified file. Bytes from the file are converted into characters using the underlying platform's java.nio.charset.Charset#defaultCharset() default charset.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Scanner(java.nio.file.Path source, java.lang.String charsetName)",
    "name": "java.util.Scanner",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.nio.file.Path",
          "name": "Path",
          "isArray": false
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "charsetName"
      }
    ],
    "protocol": {
      "member": "java.util.Scanner(java.nio.file.Path source, java.lang.String charsetName)",
      "comment": "Constructs a new Scanner that produces values scanned from the specified file. Bytes from the file are converted into characters using the specified charset.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Scanner(java.lang.String source)",
    "name": "java.util.Scanner",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "source"
      }
    ],
    "protocol": {
      "member": "java.util.Scanner(java.lang.String source)",
      "comment": "Constructs a new Scanner that produces values scanned from the specified string.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Scanner(java.nio.channels.ReadableByteChannel source)",
    "name": "java.util.Scanner",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.nio.channels.ReadableByteChannel",
          "name": "ReadableByteChannel",
          "isArray": false
        },
        "name": "source"
      }
    ],
    "protocol": {
      "member": "java.util.Scanner(java.nio.channels.ReadableByteChannel source)",
      "comment": "Constructs a new Scanner that produces values scanned from the specified channel. Bytes from the source are converted into characters using the underlying platform's java.nio.charset.Charset#defaultCharset() default charset.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Scanner(java.nio.channels.ReadableByteChannel source, java.lang.String charsetName)",
    "name": "java.util.Scanner",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.nio.channels.ReadableByteChannel",
          "name": "ReadableByteChannel",
          "isArray": false
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "charsetName"
      }
    ],
    "protocol": {
      "member": "java.util.Scanner(java.nio.channels.ReadableByteChannel source, java.lang.String charsetName)",
      "comment": "Constructs a new Scanner that produces values scanned from the specified channel. Bytes from the source are converted into characters using the specified charset.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "close()",
    "name": "close",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "close()",
      "comment": "Closes this scanner.  If this scanner has not yet been closed then if its underlying java.lang.Readable readable also implements the java.io.Closeable interface then the readable's close method will be invoked. If this scanner is already closed then invoking this method will have no effect. Attempting to perform search operations after a scanner has been closed will result in an IllegalStateException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ioException()",
    "name": "ioException",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.io.IOException",
      "name": "java.io.IOException",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "ioException()",
      "comment": "Returns the IOException last thrown by this Scanner's underlying Readable. This method returns null if no such exception exists.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "delimiter()",
    "name": "delimiter",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.regex.Pattern",
      "name": "java.util.regex.Pattern",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "delimiter()",
      "comment": "Returns the Pattern this Scanner is currently using to match delimiters.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "useDelimiter(java.util.regex.Pattern pattern)",
    "name": "useDelimiter",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Scanner",
      "name": "java.util.Scanner",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.regex.Pattern",
          "name": "Pattern",
          "isArray": false
        },
        "name": "pattern"
      }
    ],
    "protocol": {
      "member": "useDelimiter(java.util.regex.Pattern pattern)",
      "comment": "Sets this scanner's delimiting pattern to the specified pattern.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "useDelimiter(java.lang.String pattern)",
    "name": "useDelimiter",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Scanner",
      "name": "java.util.Scanner",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "pattern"
      }
    ],
    "protocol": {
      "member": "useDelimiter(java.lang.String pattern)",
      "comment": "Sets this scanner's delimiting pattern to a pattern constructed from the specified String.  An invocation of this method of the form useDelimiter(pattern) behaves in exactly the same way as the invocation useDelimiter(Pattern.compile(pattern)).  Invoking the #reset method will set the scanner's delimiter to the default.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "locale()",
    "name": "locale",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Locale",
      "name": "java.util.Locale",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "locale()",
      "comment": "Returns this scanner's locale. A scanner's locale affects many elements of its default primitive matching regular expressions; see localized numbers above.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "useLocale(java.util.Locale locale)",
    "name": "useLocale",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Scanner",
      "name": "java.util.Scanner",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Locale",
          "name": "Locale",
          "isArray": false
        },
        "name": "locale"
      }
    ],
    "protocol": {
      "member": "useLocale(java.util.Locale locale)",
      "comment": "Sets this scanner's locale to the specified locale. A scanner's locale affects many elements of its default primitive matching regular expressions; see localized numbers above. Invoking the #reset method will set the scanner's locale to the initial locale.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "radix()",
    "name": "radix",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "radix()",
      "comment": "Returns this scanner's default radix. A scanner's radix affects elements of its default number matching regular expressions; see localized numbers above.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "useRadix(int radix)",
    "name": "useRadix",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Scanner",
      "name": "java.util.Scanner",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "radix"
      }
    ],
    "protocol": {
      "member": "useRadix(int radix)",
      "comment": "Sets this scanner's default radix to the specified radix. A scanner's radix affects elements of its default number matching regular expressions; see localized numbers above. If the radix is less than Character.MIN_RADIX or greater than Character.MAX_RADIX, then an IllegalArgumentException is thrown. Invoking the #reset method will set the scanner's radix to 10.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "match()",
    "name": "match",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.regex.MatchResult",
      "name": "java.util.regex.MatchResult",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "match()",
      "comment": "Returns the match result of the last scanning operation performed by this scanner. This method throws IllegalStateException if no match has been performed, or if the last match was not successful. The various nextmethods of Scanner make a match result available if they complete without throwing an exception. For instance, after an invocation of the #nextInt method that returned an int, this method returns a MatchResult for the search of the <i>Integer</i> regular expression defined above. Similarly the #findInLine, #findWithinHorizon, and #skip methods will make a match available if they succeed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns the string representation of this Scanner. The string representation of a Scanner contains information that may be useful for debugging. The exact format is unspecified.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNext()",
    "name": "hasNext",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasNext()",
      "comment": "Returns true if this scanner has another token in its input. This method may block while waiting for input to scan. The scanner does not advance past any input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "next()",
    "name": "next",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "next()",
      "comment": "Finds and returns the next complete token from this scanner. A complete token is preceded and followed by input that matches the delimiter pattern. This method may block while waiting for input to scan, even if a previous invocation of #hasNext returned true.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove()",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "remove()",
      "comment": "The remove operation is not supported by this implementation of Iterator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNext(java.lang.String pattern)",
    "name": "hasNext",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "pattern"
      }
    ],
    "protocol": {
      "member": "hasNext(java.lang.String pattern)",
      "comment": "Returns true if the next token matches the pattern constructed from the specified string. The scanner does not advance past any input.  An invocation of this method of the form hasNext(pattern) behaves in exactly the same way as the invocation hasNext(Pattern.compile(pattern)).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "next(java.lang.String pattern)",
    "name": "next",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "pattern"
      }
    ],
    "protocol": {
      "member": "next(java.lang.String pattern)",
      "comment": "Returns the next token if it matches the pattern constructed from the specified string. If the match is successful, the scanner advances past the input that matched the pattern.  An invocation of this method of the form next(pattern) behaves in exactly the same way as the invocation next(Pattern.compile(pattern)).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNext(java.util.regex.Pattern pattern)",
    "name": "hasNext",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.regex.Pattern",
          "name": "Pattern",
          "isArray": false
        },
        "name": "pattern"
      }
    ],
    "protocol": {
      "member": "hasNext(java.util.regex.Pattern pattern)",
      "comment": "Returns true if the next complete token matches the specified pattern. A complete token is prefixed and postfixed by input that matches the delimiter pattern. This method may block while waiting for input. The scanner does not advance past any input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "next(java.util.regex.Pattern pattern)",
    "name": "next",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.regex.Pattern",
          "name": "Pattern",
          "isArray": false
        },
        "name": "pattern"
      }
    ],
    "protocol": {
      "member": "next(java.util.regex.Pattern pattern)",
      "comment": "Returns the next token if it matches the specified pattern. This method may block while waiting for input to scan, even if a previous invocation of #hasNext(Pattern) returned true. If the match is successful, the scanner advances past the input that matched the pattern.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNextLine()",
    "name": "hasNextLine",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasNextLine()",
      "comment": "Returns true if there is another line in the input of this scanner. This method may block while waiting for input. The scanner does not advance past any input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextLine()",
    "name": "nextLine",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextLine()",
      "comment": "Advances this scanner past the current line and returns the input that was skipped. This method returns the rest of the current line, excluding any line separator at the end. The position is set to the beginning of the next line. Since this method continues to search through the input looking for a line separator, it may buffer all of the input searching for the line to skip if no line separators are present.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "findInLine(java.lang.String pattern)",
    "name": "findInLine",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "pattern"
      }
    ],
    "protocol": {
      "member": "findInLine(java.lang.String pattern)",
      "comment": "Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters. An invocation of this method of the form findInLine(pattern) behaves in exactly the same way as the invocation findInLine(Pattern.compile(pattern)).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "findInLine(java.util.regex.Pattern pattern)",
    "name": "findInLine",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.regex.Pattern",
          "name": "Pattern",
          "isArray": false
        },
        "name": "pattern"
      }
    ],
    "protocol": {
      "member": "findInLine(java.util.regex.Pattern pattern)",
      "comment": "Attempts to find the next occurrence of the specified pattern ignoring delimiters. If the pattern is found before the next line separator, the scanner advances past the input that matched and returns the string that matched the pattern. If no such pattern is detected in the input up to the next line separator, then null is returned and the scanner's position is unchanged. This method may block waiting for input that matches the pattern. Since this method continues to search through the input looking for the specified pattern, it may buffer all of the input searching for the desired token if no line separators are present.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "findWithinHorizon(java.lang.String pattern, int horizon)",
    "name": "findWithinHorizon",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "pattern"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "horizon"
      }
    ],
    "protocol": {
      "member": "findWithinHorizon(java.lang.String pattern, int horizon)",
      "comment": "Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters. An invocation of this method of the form findWithinHorizon(pattern) behaves in exactly the same way as the invocation findWithinHorizon(Pattern.compile(pattern, horizon)).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "findWithinHorizon(java.util.regex.Pattern pattern, int horizon)",
    "name": "findWithinHorizon",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.regex.Pattern",
          "name": "Pattern",
          "isArray": false
        },
        "name": "pattern"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "horizon"
      }
    ],
    "protocol": {
      "member": "findWithinHorizon(java.util.regex.Pattern pattern, int horizon)",
      "comment": "Attempts to find the next occurrence of the specified pattern. This method searches through the input up to the specified search horizon, ignoring delimiters. If the pattern is found the scanner advances past the input that matched and returns the string that matched the pattern. If no such pattern is detected then the null is returned and the scanner's position remains unchanged. This method may block waiting for input that matches the pattern. A scanner will never search more than horizon code points beyond its current position. Note that a match may be clipped by the horizon; that is, an arbitrary match result may have been different if the horizon had been larger. The scanner treats the horizon as a transparent, non-anchoring bound (see Matcher#useTransparentBounds and Matcher#useAnchoringBounds). If horizon is 0, then the horizon is ignored and this method continues to search through the input looking for the specified pattern without bound. In this case it may buffer all of the input searching for the pattern. If horizon is negative, then an IllegalArgumentException is thrown.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "skip(java.util.regex.Pattern pattern)",
    "name": "skip",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Scanner",
      "name": "java.util.Scanner",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.regex.Pattern",
          "name": "Pattern",
          "isArray": false
        },
        "name": "pattern"
      }
    ],
    "protocol": {
      "member": "skip(java.util.regex.Pattern pattern)",
      "comment": "Skips input that matches the specified pattern, ignoring delimiters. This method will skip input if an anchored match of the specified pattern succeeds. If a match to the specified pattern is not found at the current position, then no input is skipped and a NoSuchElementException is thrown. Since this method seeks to match the specified pattern starting at the scanner's current position, patterns that can match a lot of input (\".*\", for example) may cause the scanner to buffer a large amount of input. Note that it is possible to skip something without risking a NoSuchElementException by using a pattern that can match nothing, e.g., sc.skip(\"[ \\t]*\").",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "skip(java.lang.String pattern)",
    "name": "skip",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Scanner",
      "name": "java.util.Scanner",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "pattern"
      }
    ],
    "protocol": {
      "member": "skip(java.lang.String pattern)",
      "comment": "Skips input that matches a pattern constructed from the specified string.  An invocation of this method of the form skip(pattern) behaves in exactly the same way as the invocation skip(Pattern.compile(pattern)).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNextBoolean()",
    "name": "hasNextBoolean",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasNextBoolean()",
      "comment": "Returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string \"true|false\". The scanner does not advance past the input that matched.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextBoolean()",
    "name": "nextBoolean",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextBoolean()",
      "comment": "Scans the next token of the input into a boolean value and returns that value. This method will throw InputMismatchException if the next token cannot be translated into a valid boolean value. If the match is successful, the scanner advances past the input that matched.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNextByte()",
    "name": "hasNextByte",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasNextByte()",
      "comment": "Returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the #nextByte method. The scanner does not advance past any input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNextByte(int radix)",
    "name": "hasNextByte",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "radix"
      }
    ],
    "protocol": {
      "member": "hasNextByte(int radix)",
      "comment": "Returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the #nextByte method. The scanner does not advance past any input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextByte()",
    "name": "nextByte",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte",
      "name": "byte",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextByte()",
      "comment": "Scans the next token of the input as a byte.  An invocation of this method of the form nextByte() behaves in exactly the same way as the invocation nextByte(radix), where radix is the default radix of this scanner.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextByte(int radix)",
    "name": "nextByte",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte",
      "name": "byte",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "radix"
      }
    ],
    "protocol": {
      "member": "nextByte(int radix)",
      "comment": "Scans the next token of the input as a byte. This method will throw InputMismatchException if the next token cannot be translated into a valid byte value as described below. If the translation is successful, the scanner advances past the input that matched.  If the next token matches the <i>Integer</i> regular expression defined above then the token is converted into a byte value as if by removing all locale specific prefixes, group separators, and locale specific suffixes, then mapping non-ASCII digits into ASCII digits via Character#digit Character.digit, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to Byte#parseByte(String, int) Byte.parseByte with the specified radix.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNextShort()",
    "name": "hasNextShort",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasNextShort()",
      "comment": "Returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the #nextShort method. The scanner does not advance past any input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNextShort(int radix)",
    "name": "hasNextShort",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "radix"
      }
    ],
    "protocol": {
      "member": "hasNextShort(int radix)",
      "comment": "Returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the #nextShort method. The scanner does not advance past any input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextShort()",
    "name": "nextShort",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "short",
      "name": "short",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextShort()",
      "comment": "Scans the next token of the input as a short.  An invocation of this method of the form nextShort() behaves in exactly the same way as the invocation nextShort(radix), where radix is the default radix of this scanner.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextShort(int radix)",
    "name": "nextShort",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "short",
      "name": "short",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "radix"
      }
    ],
    "protocol": {
      "member": "nextShort(int radix)",
      "comment": "Scans the next token of the input as a short. This method will throw InputMismatchException if the next token cannot be translated into a valid short value as described below. If the translation is successful, the scanner advances past the input that matched.  If the next token matches the <i>Integer</i> regular expression defined above then the token is converted into a short value as if by removing all locale specific prefixes, group separators, and locale specific suffixes, then mapping non-ASCII digits into ASCII digits via Character#digit Character.digit, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to Short#parseShort(String, int) Short.parseShort with the specified radix.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNextInt()",
    "name": "hasNextInt",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasNextInt()",
      "comment": "Returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the #nextInt method. The scanner does not advance past any input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNextInt(int radix)",
    "name": "hasNextInt",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "radix"
      }
    ],
    "protocol": {
      "member": "hasNextInt(int radix)",
      "comment": "Returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the #nextInt method. The scanner does not advance past any input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextInt()",
    "name": "nextInt",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextInt()",
      "comment": "Scans the next token of the input as an int.  An invocation of this method of the form nextInt() behaves in exactly the same way as the invocation nextInt(radix), where radix is the default radix of this scanner.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextInt(int radix)",
    "name": "nextInt",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "radix"
      }
    ],
    "protocol": {
      "member": "nextInt(int radix)",
      "comment": "Scans the next token of the input as an int. This method will throw InputMismatchException if the next token cannot be translated into a valid int value as described below. If the translation is successful, the scanner advances past the input that matched.  If the next token matches the <i>Integer</i> regular expression defined above then the token is converted into an int value as if by removing all locale specific prefixes, group separators, and locale specific suffixes, then mapping non-ASCII digits into ASCII digits via Character#digit Character.digit, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to Integer#parseInt(String, int) Integer.parseInt with the specified radix.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNextLong()",
    "name": "hasNextLong",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasNextLong()",
      "comment": "Returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the #nextLong method. The scanner does not advance past any input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNextLong(int radix)",
    "name": "hasNextLong",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "radix"
      }
    ],
    "protocol": {
      "member": "hasNextLong(int radix)",
      "comment": "Returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the #nextLong method. The scanner does not advance past any input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextLong()",
    "name": "nextLong",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextLong()",
      "comment": "Scans the next token of the input as a long.  An invocation of this method of the form nextLong() behaves in exactly the same way as the invocation nextLong(radix), where radix is the default radix of this scanner.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextLong(int radix)",
    "name": "nextLong",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "radix"
      }
    ],
    "protocol": {
      "member": "nextLong(int radix)",
      "comment": "Scans the next token of the input as a long. This method will throw InputMismatchException if the next token cannot be translated into a valid long value as described below. If the translation is successful, the scanner advances past the input that matched.  If the next token matches the <i>Integer</i> regular expression defined above then the token is converted into a long value as if by removing all locale specific prefixes, group separators, and locale specific suffixes, then mapping non-ASCII digits into ASCII digits via Character#digit Character.digit, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to Long#parseLong(String, int) Long.parseLong with the specified radix.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNextFloat()",
    "name": "hasNextFloat",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasNextFloat()",
      "comment": "Returns true if the next token in this scanner's input can be interpreted as a float value using the #nextFloat method. The scanner does not advance past any input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextFloat()",
    "name": "nextFloat",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float",
      "name": "float",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextFloat()",
      "comment": "Scans the next token of the input as a float. This method will throw InputMismatchException if the next token cannot be translated into a valid float value as described below. If the translation is successful, the scanner advances past the input that matched.  If the next token matches the <i>Float</i> regular expression defined above then the token is converted into a float value as if by removing all locale specific prefixes, group separators, and locale specific suffixes, then mapping non-ASCII digits into ASCII digits via Character#digit Character.digit, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to Float#parseFloat Float.parseFloat. If the token matches the localized NaN or infinity strings, then either \"Nan\" or \"Infinity\" is passed to Float#parseFloat(String) Float.parseFloat as appropriate.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNextDouble()",
    "name": "hasNextDouble",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasNextDouble()",
      "comment": "Returns true if the next token in this scanner's input can be interpreted as a double value using the #nextDouble method. The scanner does not advance past any input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextDouble()",
    "name": "nextDouble",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextDouble()",
      "comment": "Scans the next token of the input as a double. This method will throw InputMismatchException if the next token cannot be translated into a valid double value. If the translation is successful, the scanner advances past the input that matched.  If the next token matches the <i>Float</i> regular expression defined above then the token is converted into a double value as if by removing all locale specific prefixes, group separators, and locale specific suffixes, then mapping non-ASCII digits into ASCII digits via Character#digit Character.digit, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to Double#parseDouble Double.parseDouble. If the token matches the localized NaN or infinity strings, then either \"Nan\" or \"Infinity\" is passed to Double#parseDouble(String) Double.parseDouble as appropriate.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNextBigInteger()",
    "name": "hasNextBigInteger",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasNextBigInteger()",
      "comment": "Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the default radix using the #nextBigInteger method. The scanner does not advance past any input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNextBigInteger(int radix)",
    "name": "hasNextBigInteger",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "radix"
      }
    ],
    "protocol": {
      "member": "hasNextBigInteger(int radix)",
      "comment": "Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the specified radix using the #nextBigInteger method. The scanner does not advance past any input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextBigInteger()",
    "name": "nextBigInteger",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.math.BigInteger",
      "name": "java.math.BigInteger",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextBigInteger()",
      "comment": "Scans the next token of the input as a java.math.BigInteger BigInteger.  An invocation of this method of the form nextBigInteger() behaves in exactly the same way as the invocation nextBigInteger(radix), where radix is the default radix of this scanner.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextBigInteger(int radix)",
    "name": "nextBigInteger",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.math.BigInteger",
      "name": "java.math.BigInteger",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "radix"
      }
    ],
    "protocol": {
      "member": "nextBigInteger(int radix)",
      "comment": "Scans the next token of the input as a java.math.BigInteger BigInteger.  If the next token matches the <i>Integer</i> regular expression defined above then the token is converted into a BigInteger value as if by removing all group separators, mapping non-ASCII digits into ASCII digits via the Character#digit Character.digit, and passing the resulting string to the java.math.BigIntegerBigInteger(String, int) constructor with the specified radix.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNextBigDecimal()",
    "name": "hasNextBigDecimal",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasNextBigDecimal()",
      "comment": "Returns true if the next token in this scanner's input can be interpreted as a BigDecimal using the #nextBigDecimal method. The scanner does not advance past any input.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextBigDecimal()",
    "name": "nextBigDecimal",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.math.BigDecimal",
      "name": "java.math.BigDecimal",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextBigDecimal()",
      "comment": "Scans the next token of the input as a java.math.BigDecimal BigDecimal.  If the next token matches the <i>Decimal</i> regular expression defined above then the token is converted into a BigDecimal value as if by removing all group separators, mapping non-ASCII digits into ASCII digits via the Character#digit Character.digit, and passing the resulting string to the java.math.BigDecimalBigDecimal(String) constructor.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reset()",
    "name": "reset",
    "containingClass": {
      "qualifiedName": "java.util.Scanner",
      "name": "Scanner",
      "isArray": false
    },
    "targetClass": "java.util.Scanner",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Scanner",
      "name": "java.util.Scanner",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "reset()",
      "comment": "Resets this scanner.  Resetting a scanner discards all of its explicit state information which may have been changed by invocations of #useDelimiter, #useLocale, or #useRadix.  An invocation of this method of the form scanner.reset() behaves in exactly the same way as the invocation <pre>scanner.useDelimiter(\"\\\\p{javaWhitespace}+\") .useLocale(Locale.getDefault(Locale.Category.FORMAT)) .useRadix(10); </pre>",
      "kind": "FreeText",
      "condition": ""
    }
  }
]