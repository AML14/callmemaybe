[
  {
    "signature": "java.util.AbstractQueue()",
    "name": "java.util.AbstractQueue",
    "containingClass": {
      "qualifiedName": "java.util.AbstractQueue",
      "name": "AbstractQueue",
      "isArray": false
    },
    "targetClass": "java.util.AbstractQueue",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.AbstractQueue()",
      "comment": "Constructor for use by subclasses.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(E e)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.AbstractQueue",
      "name": "AbstractQueue",
      "isArray": false
    },
    "targetClass": "java.util.AbstractQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "add(E e)",
      "comment": "Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available. This implementation returns true if offer succeeds, else throws an IllegalStateException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove()",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.AbstractQueue",
      "name": "AbstractQueue",
      "isArray": false
    },
    "targetClass": "java.util.AbstractQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "remove()",
      "comment": "Retrieves and removes the head of this queue. This method differs from method_0 poll only in that it throws an exception if this queue is empty. This implementation returns the result of poll unless the queue is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "element()",
    "name": "element",
    "containingClass": {
      "qualifiedName": "java.util.AbstractQueue",
      "name": "AbstractQueue",
      "isArray": false
    },
    "targetClass": "java.util.AbstractQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "element()",
      "comment": "Retrieves, but does not remove, the head of this queue. This method differs from method_0 peek only in that it throws an exception if this queue is empty. This implementation returns the result of peek unless the queue is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "java.util.AbstractQueue",
      "name": "AbstractQueue",
      "isArray": false
    },
    "targetClass": "java.util.AbstractQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clear()",
      "comment": "Removes all of the elements from this queue. The queue will be empty after this call returns. This implementation repeatedly invokes method_0 poll until it returns null.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addAll(java.util.Collection<? extends E> c)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "java.util.AbstractQueue",
      "name": "AbstractQueue",
      "isArray": false
    },
    "targetClass": "java.util.AbstractQueue",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "addAll(java.util.Collection<? extends E> c)",
      "comment": "Adds all of the elements in the specified collection to this queue. Attempts to addAll of a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress. This implementation iterates over the specified collection, and adds each element returned by the iterator to this queue, in turn. A runtime exception encountered while trying to add an element (including, in particular, a null element) may result in only some of the elements having been successfully added when the associated exception is thrown.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]