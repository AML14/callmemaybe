[
  {
    "signature": "java.util.stream.ReferencePipeline(java.util.function.Supplier<? extends java.util.Spliterator<?>> source, int sourceFlags, boolean parallel)",
    "name": "java.util.stream.ReferencePipeline",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Supplier",
          "name": "Supplier",
          "isArray": false
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "sourceFlags"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "parallel"
      }
    ],
    "protocol": {
      "member": "java.util.stream.ReferencePipeline(java.util.function.Supplier<? extends java.util.Spliterator<?>> source, int sourceFlags, boolean parallel)",
      "comment": "Constructor for the head of a stream pipeline.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.stream.ReferencePipeline(java.util.Spliterator<?> source, int sourceFlags, boolean parallel)",
    "name": "java.util.stream.ReferencePipeline",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Spliterator",
          "name": "Spliterator",
          "isArray": false
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "sourceFlags"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "parallel"
      }
    ],
    "protocol": {
      "member": "java.util.stream.ReferencePipeline(java.util.Spliterator<?> source, int sourceFlags, boolean parallel)",
      "comment": "Constructor for the head of a stream pipeline.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.stream.ReferencePipeline(java.util.stream.AbstractPipeline<?, P_IN, ?> upstream, int opFlags)",
    "name": "java.util.stream.ReferencePipeline",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.stream.AbstractPipeline",
          "name": "AbstractPipeline",
          "isArray": false
        },
        "name": "upstream"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "opFlags"
      }
    ],
    "protocol": {
      "member": "java.util.stream.ReferencePipeline(java.util.stream.AbstractPipeline<?, P_IN, ?> upstream, int opFlags)",
      "comment": "Constructor for appending an intermediate operation onto an existing pipeline.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOutputShape()",
    "name": "getOutputShape",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.StreamShape",
      "name": "java.util.stream.StreamShape",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getOutputShape()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "evaluateToNode(java.util.stream.PipelineHelper<P_OUT> helper, java.util.Spliterator<P_IN> spliterator, boolean flattenTree, java.util.function.IntFunction<P_OUT[]> generator)",
    "name": "evaluateToNode",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Node<P_OUT>",
      "name": "java.util.stream.Node<P_OUT>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.stream.PipelineHelper",
          "name": "PipelineHelper",
          "isArray": false
        },
        "name": "helper"
      },
      {
        "type": {
          "qualifiedName": "java.util.Spliterator",
          "name": "Spliterator",
          "isArray": false
        },
        "name": "spliterator"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "flattenTree"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.IntFunction",
          "name": "IntFunction",
          "isArray": false
        },
        "name": "generator"
      }
    ],
    "protocol": {
      "member": "evaluateToNode(java.util.stream.PipelineHelper<P_OUT> helper, java.util.Spliterator<P_IN> spliterator, boolean flattenTree, java.util.function.IntFunction<P_OUT[]> generator)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "wrap(java.util.stream.PipelineHelper<P_OUT> ph, java.util.function.Supplier<java.util.Spliterator<P_IN>> supplier, boolean isParallel)",
    "name": "wrap",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator<P_OUT>",
      "name": "java.util.Spliterator<P_OUT>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.stream.PipelineHelper",
          "name": "PipelineHelper",
          "isArray": false
        },
        "name": "ph"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Supplier",
          "name": "Supplier",
          "isArray": false
        },
        "name": "supplier"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "isParallel"
      }
    ],
    "protocol": {
      "member": "wrap(java.util.stream.PipelineHelper<P_OUT> ph, java.util.function.Supplier<java.util.Spliterator<P_IN>> supplier, boolean isParallel)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lazySpliterator(java.util.function.Supplier<? extends java.util.Spliterator<P_OUT>> supplier)",
    "name": "lazySpliterator",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator<P_OUT>",
      "name": "java.util.Spliterator<P_OUT>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Supplier",
          "name": "Supplier",
          "isArray": false
        },
        "name": "supplier"
      }
    ],
    "protocol": {
      "member": "lazySpliterator(java.util.function.Supplier<? extends java.util.Spliterator<P_OUT>> supplier)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forEachWithCancel(java.util.Spliterator<P_OUT> spliterator, java.util.stream.Sink<P_OUT> sink)",
    "name": "forEachWithCancel",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Spliterator",
          "name": "Spliterator",
          "isArray": false
        },
        "name": "spliterator"
      },
      {
        "type": {
          "qualifiedName": "java.util.stream.Sink",
          "name": "Sink",
          "isArray": false
        },
        "name": "sink"
      }
    ],
    "protocol": {
      "member": "forEachWithCancel(java.util.Spliterator<P_OUT> spliterator, java.util.stream.Sink<P_OUT> sink)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "makeNodeBuilder(long exactSizeIfKnown, java.util.function.IntFunction<P_OUT[]> generator)",
    "name": "makeNodeBuilder",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Node$Builder<P_OUT>",
      "name": "java.util.stream.Node$Builder<P_OUT>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "exactSizeIfKnown"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.IntFunction",
          "name": "IntFunction",
          "isArray": false
        },
        "name": "generator"
      }
    ],
    "protocol": {
      "member": "makeNodeBuilder(long exactSizeIfKnown, java.util.function.IntFunction<P_OUT[]> generator)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<P_OUT>",
      "name": "java.util.Iterator<P_OUT>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "iterator()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unordered()",
    "name": "unordered",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Stream<P_OUT>",
      "name": "java.util.stream.Stream<P_OUT>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "unordered()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "filter(java.util.function.Predicate<? super P_OUT> predicate)",
    "name": "filter",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Stream<P_OUT>",
      "name": "java.util.stream.Stream<P_OUT>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "protocol": {
      "member": "filter(java.util.function.Predicate<? super P_OUT> predicate)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "map(java.util.function.Function<? super P_OUT, ? extends R> mapper)",
    "name": "map",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Stream<R>",
      "name": "java.util.stream.Stream<R>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "mapper"
      }
    ],
    "protocol": {
      "member": "map(java.util.function.Function<? super P_OUT, ? extends R> mapper)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mapToInt(java.util.function.ToIntFunction<? super P_OUT> mapper)",
    "name": "mapToInt",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.ToIntFunction",
          "name": "ToIntFunction",
          "isArray": false
        },
        "name": "mapper"
      }
    ],
    "protocol": {
      "member": "mapToInt(java.util.function.ToIntFunction<? super P_OUT> mapper)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mapToLong(java.util.function.ToLongFunction<? super P_OUT> mapper)",
    "name": "mapToLong",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.LongStream",
      "name": "java.util.stream.LongStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.ToLongFunction",
          "name": "ToLongFunction",
          "isArray": false
        },
        "name": "mapper"
      }
    ],
    "protocol": {
      "member": "mapToLong(java.util.function.ToLongFunction<? super P_OUT> mapper)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mapToDouble(java.util.function.ToDoubleFunction<? super P_OUT> mapper)",
    "name": "mapToDouble",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.DoubleStream",
      "name": "java.util.stream.DoubleStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.ToDoubleFunction",
          "name": "ToDoubleFunction",
          "isArray": false
        },
        "name": "mapper"
      }
    ],
    "protocol": {
      "member": "mapToDouble(java.util.function.ToDoubleFunction<? super P_OUT> mapper)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "flatMap(java.util.function.Function<? super P_OUT, ? extends java.util.stream.Stream<? extends R>> mapper)",
    "name": "flatMap",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Stream<R>",
      "name": "java.util.stream.Stream<R>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "mapper"
      }
    ],
    "protocol": {
      "member": "flatMap(java.util.function.Function<? super P_OUT, ? extends java.util.stream.Stream<? extends R>> mapper)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "flatMapToInt(java.util.function.Function<? super P_OUT, ? extends java.util.stream.IntStream> mapper)",
    "name": "flatMapToInt",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "mapper"
      }
    ],
    "protocol": {
      "member": "flatMapToInt(java.util.function.Function<? super P_OUT, ? extends java.util.stream.IntStream> mapper)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "flatMapToDouble(java.util.function.Function<? super P_OUT, ? extends java.util.stream.DoubleStream> mapper)",
    "name": "flatMapToDouble",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.DoubleStream",
      "name": "java.util.stream.DoubleStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "mapper"
      }
    ],
    "protocol": {
      "member": "flatMapToDouble(java.util.function.Function<? super P_OUT, ? extends java.util.stream.DoubleStream> mapper)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "flatMapToLong(java.util.function.Function<? super P_OUT, ? extends java.util.stream.LongStream> mapper)",
    "name": "flatMapToLong",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.LongStream",
      "name": "java.util.stream.LongStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "mapper"
      }
    ],
    "protocol": {
      "member": "flatMapToLong(java.util.function.Function<? super P_OUT, ? extends java.util.stream.LongStream> mapper)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "peek(java.util.function.Consumer<? super P_OUT> action)",
    "name": "peek",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Stream<P_OUT>",
      "name": "java.util.stream.Stream<P_OUT>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Consumer",
          "name": "Consumer",
          "isArray": false
        },
        "name": "action"
      }
    ],
    "protocol": {
      "member": "peek(java.util.function.Consumer<? super P_OUT> action)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "distinct()",
    "name": "distinct",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Stream<P_OUT>",
      "name": "java.util.stream.Stream<P_OUT>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "distinct()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sorted()",
    "name": "sorted",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Stream<P_OUT>",
      "name": "java.util.stream.Stream<P_OUT>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "sorted()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sorted(java.util.Comparator<? super P_OUT> comparator)",
    "name": "sorted",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Stream<P_OUT>",
      "name": "java.util.stream.Stream<P_OUT>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "protocol": {
      "member": "sorted(java.util.Comparator<? super P_OUT> comparator)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "limit(long maxSize)",
    "name": "limit",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Stream<P_OUT>",
      "name": "java.util.stream.Stream<P_OUT>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "maxSize"
      }
    ],
    "protocol": {
      "member": "limit(long maxSize)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "skip(long n)",
    "name": "skip",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Stream<P_OUT>",
      "name": "java.util.stream.Stream<P_OUT>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "protocol": {
      "member": "skip(long n)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forEach(java.util.function.Consumer<? super P_OUT> action)",
    "name": "forEach",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Consumer",
          "name": "Consumer",
          "isArray": false
        },
        "name": "action"
      }
    ],
    "protocol": {
      "member": "forEach(java.util.function.Consumer<? super P_OUT> action)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forEachOrdered(java.util.function.Consumer<? super P_OUT> action)",
    "name": "forEachOrdered",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Consumer",
          "name": "Consumer",
          "isArray": false
        },
        "name": "action"
      }
    ],
    "protocol": {
      "member": "forEachOrdered(java.util.function.Consumer<? super P_OUT> action)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray(java.util.function.IntFunction<A[]> generator)",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "A[]",
      "name": "A[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.IntFunction",
          "name": "IntFunction",
          "isArray": false
        },
        "name": "generator"
      }
    ],
    "protocol": {
      "member": "toArray(java.util.function.IntFunction<A[]> generator)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray()",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object[]",
      "name": "java.lang.Object[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "toArray()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "anyMatch(java.util.function.Predicate<? super P_OUT> predicate)",
    "name": "anyMatch",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "protocol": {
      "member": "anyMatch(java.util.function.Predicate<? super P_OUT> predicate)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "allMatch(java.util.function.Predicate<? super P_OUT> predicate)",
    "name": "allMatch",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "protocol": {
      "member": "allMatch(java.util.function.Predicate<? super P_OUT> predicate)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "noneMatch(java.util.function.Predicate<? super P_OUT> predicate)",
    "name": "noneMatch",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "protocol": {
      "member": "noneMatch(java.util.function.Predicate<? super P_OUT> predicate)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "findFirst()",
    "name": "findFirst",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Optional<P_OUT>",
      "name": "java.util.Optional<P_OUT>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "findFirst()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "findAny()",
    "name": "findAny",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Optional<P_OUT>",
      "name": "java.util.Optional<P_OUT>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "findAny()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reduce(P_OUT identity, java.util.function.BinaryOperator<P_OUT> accumulator)",
    "name": "reduce",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "P_OUT",
      "name": "P_OUT",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "identity"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.BinaryOperator",
          "name": "BinaryOperator",
          "isArray": false
        },
        "name": "accumulator"
      }
    ],
    "protocol": {
      "member": "reduce(P_OUT identity, java.util.function.BinaryOperator<P_OUT> accumulator)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reduce(java.util.function.BinaryOperator<P_OUT> accumulator)",
    "name": "reduce",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Optional<P_OUT>",
      "name": "java.util.Optional<P_OUT>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.BinaryOperator",
          "name": "BinaryOperator",
          "isArray": false
        },
        "name": "accumulator"
      }
    ],
    "protocol": {
      "member": "reduce(java.util.function.BinaryOperator<P_OUT> accumulator)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reduce(R identity, java.util.function.BiFunction<R, ? super P_OUT, R> accumulator, java.util.function.BinaryOperator<R> combiner)",
    "name": "reduce",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "R",
      "name": "R",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "identity"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.BiFunction",
          "name": "BiFunction",
          "isArray": false
        },
        "name": "accumulator"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.BinaryOperator",
          "name": "BinaryOperator",
          "isArray": false
        },
        "name": "combiner"
      }
    ],
    "protocol": {
      "member": "reduce(R identity, java.util.function.BiFunction<R, ? super P_OUT, R> accumulator, java.util.function.BinaryOperator<R> combiner)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "collect(java.util.stream.Collector<? super P_OUT, A, R> collector)",
    "name": "collect",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "R",
      "name": "R",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.stream.Collector",
          "name": "Collector",
          "isArray": false
        },
        "name": "collector"
      }
    ],
    "protocol": {
      "member": "collect(java.util.stream.Collector<? super P_OUT, A, R> collector)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "collect(java.util.function.Supplier<R> supplier, java.util.function.BiConsumer<R, ? super P_OUT> accumulator, java.util.function.BiConsumer<R, R> combiner)",
    "name": "collect",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "R",
      "name": "R",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Supplier",
          "name": "Supplier",
          "isArray": false
        },
        "name": "supplier"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.BiConsumer",
          "name": "BiConsumer",
          "isArray": false
        },
        "name": "accumulator"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.BiConsumer",
          "name": "BiConsumer",
          "isArray": false
        },
        "name": "combiner"
      }
    ],
    "protocol": {
      "member": "collect(java.util.function.Supplier<R> supplier, java.util.function.BiConsumer<R, ? super P_OUT> accumulator, java.util.function.BiConsumer<R, R> combiner)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "max(java.util.Comparator<? super P_OUT> comparator)",
    "name": "max",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Optional<P_OUT>",
      "name": "java.util.Optional<P_OUT>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "protocol": {
      "member": "max(java.util.Comparator<? super P_OUT> comparator)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "min(java.util.Comparator<? super P_OUT> comparator)",
    "name": "min",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Optional<P_OUT>",
      "name": "java.util.Optional<P_OUT>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "protocol": {
      "member": "min(java.util.Comparator<? super P_OUT> comparator)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "count()",
    "name": "count",
    "containingClass": {
      "qualifiedName": "java.util.stream.ReferencePipeline",
      "name": "ReferencePipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.ReferencePipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "count()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]