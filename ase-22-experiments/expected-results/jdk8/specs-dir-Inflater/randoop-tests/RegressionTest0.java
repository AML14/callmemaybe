import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        java.lang.Class<?> wildcardClass4 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        int int5 = inflater2.inflate(byteArray4);
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int11 = inflater2.inflate(byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = inflater1.inflate(byteArray10, (int) (short) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        java.lang.Class<?> wildcardClass1 = inflater0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        inflater0.reset();
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        int int5 = inflater2.inflate(byteArray4);
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int11 = inflater2.inflate(byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = inflater0.inflate(byteArray10, (int) (byte) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray7, (int) (short) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        byte[] byteArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = inflater0.inflate(byteArray4, (int) ' ', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        byte[] byteArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray5, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray7, (int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        int int5 = inflater2.inflate(byteArray4);
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int11 = inflater2.inflate(byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = inflater0.inflate(byteArray10, (int) (short) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray14, (int) (short) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int15 = inflater6.inflate(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray8, 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        boolean boolean3 = inflater2.finished();
        int int4 = inflater2.getRemaining();
        boolean boolean5 = inflater2.finished();
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater2.setInput(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setDictionary(byteArray12, (int) (short) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = inflater0.inflate(byteArray16, 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        boolean boolean3 = inflater2.finished();
        int int4 = inflater2.getRemaining();
        boolean boolean5 = inflater2.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        inflater2.setInput(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setDictionary(byteArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        java.lang.Class<?> wildcardClass17 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int13 = inflater4.inflate(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = inflater0.inflate(byteArray12, (int) (byte) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        java.lang.Class<?> wildcardClass2 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        inflater7.reset();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        inflater7.setInput(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        inflater6.reset();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        inflater6.setInput(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass2 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater0.setInput(byteArray7);
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray18, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.finished();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int20 = inflater11.inflate(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray19, (int) (byte) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        java.lang.Class<?> wildcardClass2 = inflater1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        inflater0.end();
        int int2 = inflater0.getRemaining();
        byte[] byteArray3 = new byte[] {};
        // The following exception was thrown during execution in test generation
        try {
            int int6 = inflater0.inflate(byteArray3, (int) (byte) 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        inflater0.reset();
        java.lang.Class<?> wildcardClass2 = inflater0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsInput();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = inflater0.inflate(byteArray6, (int) '#', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        long long9 = inflater5.getBytesWritten();
        inflater5.reset();
        long long11 = inflater5.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        boolean boolean16 = inflater12.needsInput();
        int int17 = inflater12.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        int int30 = inflater12.inflate(byteArray28);
        inflater5.setInput(byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        inflater19.reset();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int38 = inflater29.inflate(byteArray37);
        int int39 = inflater24.inflate(byteArray37);
        inflater19.setInput(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        byte[] byteArray13 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) 10, (byte) 10, (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray13, (int) (short) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 100, 10, 10, -1]");
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.lang.Class<?> wildcardClass5 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        java.lang.Class<?> wildcardClass4 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater3 = new java.util.zip.Inflater();
        boolean boolean4 = inflater3.finished();
        int int5 = inflater3.getRemaining();
        boolean boolean6 = inflater3.needsDictionary();
        boolean boolean7 = inflater3.needsInput();
        int int8 = inflater3.getRemaining();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        int int21 = inflater3.inflate(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        inflater0.end();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        byte[] byteArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray4, (int) (byte) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray18, 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        java.lang.Class<?> wildcardClass22 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        long long9 = inflater5.getBytesWritten();
        inflater5.reset();
        long long11 = inflater5.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        boolean boolean16 = inflater12.needsInput();
        int int17 = inflater12.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        int int30 = inflater12.inflate(byteArray28);
        inflater5.setInput(byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray28, (int) '#', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        boolean boolean3 = inflater2.finished();
        int int4 = inflater2.getRemaining();
        inflater2.end();
        boolean boolean6 = inflater2.needsInput();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        inflater2.setInput(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray9, (int) (short) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        inflater0.reset();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        int int10 = inflater6.getTotalIn();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        inflater11.end();
        boolean boolean15 = inflater11.needsInput();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        inflater11.setInput(byteArray18);
        inflater6.setInput(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int15 = inflater6.inflate(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray14, (int) (short) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        int int5 = inflater0.getRemaining();
        int int6 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsInput();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater11.setInput(byteArray21);
        inflater7.setInput(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        int int7 = inflater0.getAdler();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        inflater8.reset();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        long long17 = inflater13.getBytesWritten();
        inflater13.reset();
        long long19 = inflater13.getBytesWritten();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        boolean boolean24 = inflater20.needsInput();
        int int25 = inflater20.getRemaining();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.finished();
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater26.setInput(byteArray36);
        int int38 = inflater20.inflate(byteArray36);
        inflater13.setInput(byteArray36);
        inflater8.setInput(byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray36, (int) '4', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        int int7 = inflater0.getAdler();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        inflater8.reset();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        int int17 = inflater13.getTotalIn();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int27 = inflater18.inflate(byteArray26);
        int int28 = inflater13.inflate(byteArray26);
        inflater8.setInput(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        long long7 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        long long12 = inflater8.getBytesWritten();
        inflater8.reset();
        long long14 = inflater8.getBytesWritten();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.needsDictionary();
        boolean boolean19 = inflater15.needsInput();
        int int20 = inflater15.getRemaining();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.finished();
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater21.setInput(byteArray31);
        int int33 = inflater15.inflate(byteArray31);
        inflater8.setInput(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray31, (int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = inflater0.inflate(byteArray20);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        inflater7.reset();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        int int16 = inflater12.getTotalIn();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int26 = inflater17.inflate(byteArray25);
        int int27 = inflater12.inflate(byteArray25);
        inflater7.setInput(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray25, (int) (short) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        java.lang.Class<?> wildcardClass17 = byteArray14.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        long long10 = inflater6.getBytesWritten();
        inflater6.reset();
        long long12 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        inflater6.setInput(byteArray29);
        inflater0.setInput(byteArray29);
        java.lang.Class<?> wildcardClass34 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        byte[] byteArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray6, (-1), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        long long21 = inflater17.getBytesWritten();
        inflater17.reset();
        long long23 = inflater17.getBytesWritten();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getRemaining();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        int int42 = inflater24.inflate(byteArray40);
        inflater17.setInput(byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = inflater0.inflate(byteArray40, (int) '#', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        long long8 = inflater4.getBytesWritten();
        inflater4.reset();
        long long10 = inflater4.getBytesWritten();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        boolean boolean15 = inflater11.needsInput();
        int int16 = inflater11.getRemaining();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater17.setInput(byteArray27);
        int int29 = inflater11.inflate(byteArray27);
        inflater4.setInput(byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        inflater6.reset();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        inflater13.reset();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        inflater13.setInput(byteArray30);
        int int35 = inflater6.inflate(byteArray30, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        int int5 = inflater0.getRemaining();
        int int6 = inflater0.getTotalOut();
        inflater0.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.needsDictionary();
        boolean boolean19 = inflater15.needsInput();
        int int20 = inflater15.getRemaining();
        inflater15.reset();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.finished();
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater22.setInput(byteArray32);
        inflater15.setInput(byteArray32);
        int int37 = inflater8.inflate(byteArray32, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray32, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray7, (-1), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        int int4 = inflater1.inflate(byteArray3);
        int int5 = inflater1.getTotalIn();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int15 = inflater6.inflate(byteArray14);
        int int16 = inflater1.inflate(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray14, (int) 'a', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getAdler();
        java.lang.Class<?> wildcardClass3 = inflater1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        inflater0.end();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater11.setInput(byteArray21);
        inflater7.setInput(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray21, (-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        long long7 = inflater0.getBytesWritten();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        int int10 = inflater7.getTotalOut();
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) -1 };
        inflater7.setInput(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray13, (int) (byte) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, -1]");
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        inflater0.reset();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        inflater6.reset();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        inflater13.reset();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        inflater13.setInput(byteArray30);
        int int35 = inflater6.inflate(byteArray30, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray30, (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getTotalIn();
        java.util.zip.Inflater inflater3 = new java.util.zip.Inflater();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        int int6 = inflater3.inflate(byteArray5);
        long long7 = inflater3.getBytesWritten();
        inflater3.reset();
        long long9 = inflater3.getBytesWritten();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsDictionary();
        boolean boolean14 = inflater10.needsInput();
        int int15 = inflater10.getRemaining();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        int int28 = inflater10.inflate(byteArray26);
        inflater3.setInput(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setDictionary(byteArray26, (int) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        inflater0.end();
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        boolean boolean3 = inflater2.finished();
        int int4 = inflater2.getRemaining();
        boolean boolean5 = inflater2.needsDictionary();
        boolean boolean6 = inflater2.needsInput();
        int int7 = inflater2.getRemaining();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        int int20 = inflater2.inflate(byteArray18);
        boolean boolean21 = inflater2.finished();
        int int22 = inflater2.getTotalOut();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        long long27 = inflater23.getBytesRead();
        boolean boolean28 = inflater23.needsDictionary();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        long long33 = inflater29.getBytesWritten();
        inflater29.reset();
        long long35 = inflater29.getBytesWritten();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.needsDictionary();
        boolean boolean40 = inflater36.needsInput();
        int int41 = inflater36.getRemaining();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.finished();
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater42.setInput(byteArray52);
        int int54 = inflater36.inflate(byteArray52);
        inflater29.setInput(byteArray52);
        inflater23.setInput(byteArray52);
        int int57 = inflater2.inflate(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray52, (int) (short) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray34, (int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        boolean boolean18 = inflater0.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray23, (int) (byte) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 1, 1, 1]");
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getAdler();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray9, (int) (short) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsInput();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        inflater56.setInput(byteArray70);
        int int73 = inflater0.inflate(byteArray70);
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        int int76 = inflater74.getRemaining();
        inflater74.end();
        boolean boolean78 = inflater74.needsInput();
        java.util.zip.Inflater inflater79 = new java.util.zip.Inflater();
        byte[] byteArray81 = new byte[] { (byte) 1 };
        int int82 = inflater79.inflate(byteArray81);
        inflater74.setInput(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = inflater0.inflate(byteArray81, (-1), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getAdler();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        int int11 = inflater8.getTotalOut();
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) -1 };
        inflater8.setInput(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray14, 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, -1]");
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsInput();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater11.setInput(byteArray21);
        inflater7.setInput(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        boolean boolean27 = inflater23.needsInput();
        int int28 = inflater23.getRemaining();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.finished();
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater29.setInput(byteArray39);
        int int41 = inflater23.inflate(byteArray39);
        boolean boolean42 = inflater23.finished();
        int int43 = inflater23.getTotalOut();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        long long48 = inflater44.getBytesRead();
        boolean boolean49 = inflater44.needsDictionary();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        byte[] byteArray52 = new byte[] { (byte) 1 };
        int int53 = inflater50.inflate(byteArray52);
        long long54 = inflater50.getBytesWritten();
        inflater50.reset();
        long long56 = inflater50.getBytesWritten();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.needsDictionary();
        boolean boolean61 = inflater57.needsInput();
        int int62 = inflater57.getRemaining();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.finished();
        int int65 = inflater63.getRemaining();
        boolean boolean66 = inflater63.finished();
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater63.setInput(byteArray73);
        int int75 = inflater57.inflate(byteArray73);
        inflater50.setInput(byteArray73);
        inflater44.setInput(byteArray73);
        int int78 = inflater23.inflate(byteArray73);
        java.util.zip.Inflater inflater79 = new java.util.zip.Inflater();
        boolean boolean80 = inflater79.finished();
        int int81 = inflater79.getRemaining();
        boolean boolean82 = inflater79.needsInput();
        java.util.zip.Inflater inflater83 = new java.util.zip.Inflater();
        boolean boolean84 = inflater83.finished();
        int int85 = inflater83.getRemaining();
        boolean boolean86 = inflater83.finished();
        byte[] byteArray93 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater83.setInput(byteArray93);
        inflater79.setInput(byteArray93);
        int int96 = inflater23.inflate(byteArray93);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        boolean boolean17 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        boolean boolean23 = inflater18.needsDictionary();
        boolean boolean24 = inflater18.needsDictionary();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.finished();
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater25.setInput(byteArray35);
        int int37 = inflater18.inflate(byteArray35);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray35, (int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        boolean boolean6 = inflater0.needsInput();
        byte[] byteArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater5.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int24 = inflater15.inflate(byteArray23);
        int int25 = inflater10.inflate(byteArray23);
        inflater5.setInput(byteArray23);
        inflater0.setInput(byteArray23);
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        int int32 = inflater28.getTotalIn();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        inflater33.end();
        boolean boolean37 = inflater33.needsInput();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        inflater33.setInput(byteArray40);
        inflater28.setInput(byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = inflater0.inflate(byteArray40);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: incorrect header check");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        boolean boolean12 = inflater7.needsDictionary();
        boolean boolean13 = inflater7.needsDictionary();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater7.inflate(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        inflater0.reset();
        java.util.zip.Inflater inflater3 = new java.util.zip.Inflater();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        int int6 = inflater3.inflate(byteArray5);
        inflater3.reset();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        long long12 = inflater8.getBytesWritten();
        inflater8.reset();
        long long14 = inflater8.getBytesWritten();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.needsDictionary();
        boolean boolean19 = inflater15.needsInput();
        int int20 = inflater15.getRemaining();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.finished();
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater21.setInput(byteArray31);
        int int33 = inflater15.inflate(byteArray31);
        inflater8.setInput(byteArray31);
        inflater3.setInput(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray31, (int) (short) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        java.lang.Class<?> wildcardClass4 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        inflater5.end();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray19, 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray29, 6, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsDictionary();
        boolean boolean13 = inflater0.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        int int20 = inflater16.getTotalIn();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        inflater21.end();
        boolean boolean25 = inflater21.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        inflater21.setInput(byteArray28);
        inflater16.setInput(byteArray28);
        inflater14.setInput(byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = inflater0.inflate(byteArray28);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater5.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int24 = inflater15.inflate(byteArray23);
        int int25 = inflater10.inflate(byteArray23);
        inflater5.setInput(byteArray23);
        inflater0.setInput(byteArray23);
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        inflater28.reset();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        int int37 = inflater33.getTotalIn();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int47 = inflater38.inflate(byteArray46);
        int int48 = inflater33.inflate(byteArray46);
        inflater28.setInput(byteArray46);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        java.lang.Class<?> wildcardClass6 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        inflater0.end();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        byte[] byteArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        java.lang.Class<?> wildcardClass22 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater(true);
        int int22 = inflater21.getRemaining();
        long long23 = inflater21.getBytesRead();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater21.inflate(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = inflater0.inflate(byteArray26, (int) '#', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        int int10 = inflater5.getRemaining();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater11.setInput(byteArray21);
        int int23 = inflater5.inflate(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        boolean boolean17 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass18 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        inflater0.end();
        byte[] byteArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        long long10 = inflater6.getBytesWritten();
        inflater6.reset();
        long long12 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        inflater6.setInput(byteArray29);
        inflater0.setInput(byteArray29);
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsInput();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater38.setInput(byteArray48);
        inflater34.setInput(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = inflater0.inflate(byteArray48, (int) '#', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        int int4 = inflater0.getRemaining();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        long long10 = inflater5.getBytesWritten();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        boolean boolean15 = inflater11.needsInput();
        int int16 = inflater11.getRemaining();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater17.setInput(byteArray27);
        int int29 = inflater11.inflate(byteArray27);
        boolean boolean30 = inflater11.finished();
        int int31 = inflater11.getTotalOut();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        long long36 = inflater32.getBytesRead();
        boolean boolean37 = inflater32.needsDictionary();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        long long42 = inflater38.getBytesWritten();
        inflater38.reset();
        long long44 = inflater38.getBytesWritten();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.needsDictionary();
        boolean boolean49 = inflater45.needsInput();
        int int50 = inflater45.getRemaining();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater51.setInput(byteArray61);
        int int63 = inflater45.inflate(byteArray61);
        inflater38.setInput(byteArray61);
        inflater32.setInput(byteArray61);
        int int66 = inflater11.inflate(byteArray61);
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        boolean boolean68 = inflater67.finished();
        int int69 = inflater67.getRemaining();
        boolean boolean70 = inflater67.needsInput();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        boolean boolean72 = inflater71.finished();
        int int73 = inflater71.getRemaining();
        boolean boolean74 = inflater71.finished();
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater71.setInput(byteArray81);
        inflater67.setInput(byteArray81);
        int int84 = inflater11.inflate(byteArray81);
        inflater5.setInput(byteArray81, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray81, 6, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        inflater19.setInput(byteArray33);
        inflater0.setInput(byteArray33);
        java.lang.Class<?> wildcardClass37 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        long long11 = inflater7.getBytesWritten();
        boolean boolean12 = inflater7.needsInput();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        boolean boolean32 = inflater13.finished();
        int int33 = inflater13.getTotalOut();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        long long38 = inflater34.getBytesRead();
        boolean boolean39 = inflater34.needsDictionary();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        long long44 = inflater40.getBytesWritten();
        inflater40.reset();
        long long46 = inflater40.getBytesWritten();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.needsDictionary();
        boolean boolean51 = inflater47.needsInput();
        int int52 = inflater47.getRemaining();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.finished();
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater53.setInput(byteArray63);
        int int65 = inflater47.inflate(byteArray63);
        inflater40.setInput(byteArray63);
        inflater34.setInput(byteArray63);
        int int68 = inflater13.inflate(byteArray63);
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.needsInput();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        boolean boolean74 = inflater73.finished();
        int int75 = inflater73.getRemaining();
        boolean boolean76 = inflater73.finished();
        byte[] byteArray83 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater73.setInput(byteArray83);
        inflater69.setInput(byteArray83);
        int int86 = inflater13.inflate(byteArray83);
        inflater7.setInput(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        inflater0.reset();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int38 = inflater29.inflate(byteArray37);
        int int39 = inflater24.inflate(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray37, (int) (byte) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        boolean boolean18 = inflater0.finished();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        inflater19.setInput(byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = inflater0.inflate(byteArray33);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        java.lang.Class<?> wildcardClass6 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        inflater0.reset();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = inflater0.inflate(byteArray24, (int) '#', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getAdler();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.needsDictionary();
        int int9 = inflater7.getTotalOut();
        int int10 = inflater7.getTotalOut();
        boolean boolean11 = inflater7.needsInput();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        inflater12.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        int int21 = inflater17.getTotalIn();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int31 = inflater22.inflate(byteArray30);
        int int32 = inflater17.inflate(byteArray30);
        inflater12.setInput(byteArray30);
        inflater7.setInput(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray30, (int) (short) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        inflater0.reset();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        inflater27.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        long long36 = inflater32.getBytesWritten();
        inflater32.reset();
        long long38 = inflater32.getBytesWritten();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.needsDictionary();
        boolean boolean43 = inflater39.needsInput();
        int int44 = inflater39.getRemaining();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater45.setInput(byteArray55);
        int int57 = inflater39.inflate(byteArray55);
        inflater32.setInput(byteArray55);
        inflater27.setInput(byteArray55);
        int int60 = inflater24.inflate(byteArray55);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.needsDictionary();
        int int8 = inflater6.getTotalOut();
        int int9 = inflater6.getTotalOut();
        long long10 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        long long15 = inflater11.getBytesRead();
        boolean boolean16 = inflater11.needsDictionary();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        long long21 = inflater17.getBytesWritten();
        inflater17.reset();
        long long23 = inflater17.getBytesWritten();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getRemaining();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        int int42 = inflater24.inflate(byteArray40);
        inflater17.setInput(byteArray40);
        inflater11.setInput(byteArray40);
        int int45 = inflater6.inflate(byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        boolean boolean6 = inflater0.needsInput();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = inflater0.inflate(byteArray17, (int) (short) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        int int15 = inflater0.inflate(byteArray13);
        int int16 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        inflater17.reset();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        int int26 = inflater22.getTotalIn();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int36 = inflater27.inflate(byteArray35);
        int int37 = inflater22.inflate(byteArray35);
        inflater17.setInput(byteArray35);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray35, 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        inflater0.reset();
        inflater0.end();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray18, (int) 'a', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        long long5 = inflater0.getBytesWritten();
        java.lang.Class<?> wildcardClass6 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        int int19 = inflater0.inflate(byteArray17);
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        boolean boolean25 = inflater21.needsInput();
        int int26 = inflater21.getRemaining();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.finished();
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater27.setInput(byteArray37);
        int int39 = inflater21.inflate(byteArray37);
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.finished();
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater44.setInput(byteArray54);
        inflater40.setInput(byteArray54);
        inflater21.setInput(byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = inflater0.inflate(byteArray54, (int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        long long56 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.needsDictionary();
        int int59 = inflater57.getTotalOut();
        int int60 = inflater57.getTotalOut();
        long long61 = inflater57.getBytesWritten();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsDictionary();
        long long66 = inflater62.getBytesRead();
        boolean boolean67 = inflater62.needsDictionary();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        byte[] byteArray70 = new byte[] { (byte) 1 };
        int int71 = inflater68.inflate(byteArray70);
        long long72 = inflater68.getBytesWritten();
        inflater68.reset();
        long long74 = inflater68.getBytesWritten();
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        boolean boolean76 = inflater75.finished();
        int int77 = inflater75.getRemaining();
        boolean boolean78 = inflater75.needsDictionary();
        boolean boolean79 = inflater75.needsInput();
        int int80 = inflater75.getRemaining();
        java.util.zip.Inflater inflater81 = new java.util.zip.Inflater();
        boolean boolean82 = inflater81.finished();
        int int83 = inflater81.getRemaining();
        boolean boolean84 = inflater81.finished();
        byte[] byteArray91 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater81.setInput(byteArray91);
        int int93 = inflater75.inflate(byteArray91);
        inflater68.setInput(byteArray91);
        inflater62.setInput(byteArray91);
        int int96 = inflater57.inflate(byteArray91);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray91, (int) (byte) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        int int15 = inflater0.inflate(byteArray13);
        int int16 = inflater0.getTotalOut();
        java.lang.Class<?> wildcardClass17 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        inflater6.reset();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        inflater6.setInput(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray23, (int) (short) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int33 = inflater24.inflate(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray32, (int) (short) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        inflater8.end();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        inflater8.setInput(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray22, (int) (short) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getRemaining();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater11.setInput(byteArray21);
        inflater7.setInput(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray21, (int) (byte) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getTotalIn();
        byte[] byteArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = inflater0.inflate(byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        inflater7.end();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater11.setInput(byteArray21);
        inflater7.setInput(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray21, (int) (short) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.needsDictionary();
        int int10 = inflater8.getTotalOut();
        int int11 = inflater8.getTotalOut();
        long long12 = inflater8.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        long long17 = inflater13.getBytesRead();
        boolean boolean18 = inflater13.needsDictionary();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        long long23 = inflater19.getBytesWritten();
        inflater19.reset();
        long long25 = inflater19.getBytesWritten();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        boolean boolean30 = inflater26.needsInput();
        int int31 = inflater26.getRemaining();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        int int44 = inflater26.inflate(byteArray42);
        inflater19.setInput(byteArray42);
        inflater13.setInput(byteArray42);
        int int47 = inflater8.inflate(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray42, (int) (short) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        inflater0.end();
        java.lang.Class<?> wildcardClass20 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        int int4 = inflater1.inflate(byteArray3);
        int int5 = inflater1.getTotalIn();
        long long6 = inflater1.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        boolean boolean26 = inflater7.finished();
        int int27 = inflater7.getTotalOut();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        long long32 = inflater28.getBytesRead();
        boolean boolean33 = inflater28.needsDictionary();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        long long38 = inflater34.getBytesWritten();
        inflater34.reset();
        long long40 = inflater34.getBytesWritten();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.needsDictionary();
        boolean boolean45 = inflater41.needsInput();
        int int46 = inflater41.getRemaining();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.finished();
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater47.setInput(byteArray57);
        int int59 = inflater41.inflate(byteArray57);
        inflater34.setInput(byteArray57);
        inflater28.setInput(byteArray57);
        int int62 = inflater7.inflate(byteArray57);
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.finished();
        int int65 = inflater63.getRemaining();
        boolean boolean66 = inflater63.needsInput();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        boolean boolean68 = inflater67.finished();
        int int69 = inflater67.getRemaining();
        boolean boolean70 = inflater67.finished();
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater67.setInput(byteArray77);
        inflater63.setInput(byteArray77);
        int int80 = inflater7.inflate(byteArray77);
        inflater1.setInput(byteArray77, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray77, (-1), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater0.setInput(byteArray7);
        int int10 = inflater0.getRemaining();
        boolean boolean11 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        int int15 = inflater12.getTotalOut();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) -1 };
        inflater12.setInput(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray18, (int) (byte) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, -1]");
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        int int7 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        int int11 = inflater8.getTotalOut();
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) -1 };
        inflater8.setInput(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray14, 6, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, -1]");
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        int int56 = inflater0.getAdler();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.needsDictionary();
        boolean boolean61 = inflater57.needsInput();
        boolean boolean62 = inflater57.needsDictionary();
        boolean boolean63 = inflater57.needsDictionary();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.finished();
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater64.setInput(byteArray74);
        int int76 = inflater57.inflate(byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray74, (int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray33, (int) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.lang.Class<?> wildcardClass5 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        long long27 = inflater23.getBytesRead();
        boolean boolean28 = inflater23.needsDictionary();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        long long33 = inflater29.getBytesWritten();
        inflater29.reset();
        long long35 = inflater29.getBytesWritten();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.needsDictionary();
        boolean boolean40 = inflater36.needsInput();
        int int41 = inflater36.getRemaining();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.finished();
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater42.setInput(byteArray52);
        int int54 = inflater36.inflate(byteArray52);
        inflater29.setInput(byteArray52);
        inflater23.setInput(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = inflater0.inflate(byteArray52, (int) (byte) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        inflater22.reset();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater22.setInput(byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = inflater0.inflate(byteArray50);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        boolean boolean27 = inflater8.finished();
        int int28 = inflater8.getTotalOut();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        long long33 = inflater29.getBytesRead();
        boolean boolean34 = inflater29.needsDictionary();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        long long39 = inflater35.getBytesWritten();
        inflater35.reset();
        long long41 = inflater35.getBytesWritten();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        boolean boolean46 = inflater42.needsInput();
        int int47 = inflater42.getRemaining();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater48.setInput(byteArray58);
        int int60 = inflater42.inflate(byteArray58);
        inflater35.setInput(byteArray58);
        inflater29.setInput(byteArray58);
        int int63 = inflater8.inflate(byteArray58);
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.needsInput();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.finished();
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater68.setInput(byteArray78);
        inflater64.setInput(byteArray78);
        int int81 = inflater8.inflate(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        inflater0.end();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        long long6 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        long long11 = inflater7.getBytesRead();
        boolean boolean12 = inflater7.needsInput();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        long long17 = inflater13.getBytesWritten();
        inflater13.reset();
        long long19 = inflater13.getBytesWritten();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        boolean boolean24 = inflater20.needsInput();
        int int25 = inflater20.getRemaining();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.finished();
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater26.setInput(byteArray36);
        int int38 = inflater20.inflate(byteArray36);
        inflater13.setInput(byteArray36);
        int int40 = inflater7.inflate(byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray36, 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsInput();
        int int13 = inflater0.getTotalOut();
        java.lang.Class<?> wildcardClass14 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getTotalIn();
        java.lang.Class<?> wildcardClass5 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        inflater0.end();
        int int8 = inflater0.getRemaining();
        byte[] byteArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        inflater19.setInput(byteArray33);
        inflater0.setInput(byteArray33);
        long long37 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater(true);
        int int40 = inflater39.getRemaining();
        long long41 = inflater39.getBytesRead();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        inflater42.end();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        inflater42.setInput(byteArray56);
        inflater39.setInput(byteArray56, (int) (byte) 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray56, (int) (short) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        int int7 = inflater0.getAdler();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) 0, (byte) 100, (byte) -1, (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray14, (int) (short) 10, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 10, 0, 100, -1, 100]");
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesRead();
        byte[] byteArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray8, (int) (short) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        inflater19.setInput(byteArray33);
        inflater0.setInput(byteArray33);
        long long37 = inflater0.getBytesRead();
        inflater0.end();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        inflater39.end();
        boolean boolean43 = inflater39.needsInput();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        int int47 = inflater44.inflate(byteArray46);
        inflater39.setInput(byteArray46);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray46, (-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        int int8 = inflater1.inflate(byteArray6);
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        inflater9.reset();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        inflater9.setInput(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = inflater1.inflate(byteArray26, (int) ' ', 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = inflater0.inflate(byteArray19, (int) (byte) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getTotalIn();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int22 = inflater13.inflate(byteArray21);
        int int23 = inflater8.inflate(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        boolean boolean27 = inflater8.finished();
        int int28 = inflater8.getTotalOut();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        long long33 = inflater29.getBytesRead();
        boolean boolean34 = inflater29.needsDictionary();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        long long39 = inflater35.getBytesWritten();
        inflater35.reset();
        long long41 = inflater35.getBytesWritten();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        boolean boolean46 = inflater42.needsInput();
        int int47 = inflater42.getRemaining();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater48.setInput(byteArray58);
        int int60 = inflater42.inflate(byteArray58);
        inflater35.setInput(byteArray58);
        inflater29.setInput(byteArray58);
        int int63 = inflater8.inflate(byteArray58);
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.needsInput();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.finished();
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater68.setInput(byteArray78);
        inflater64.setInput(byteArray78);
        int int81 = inflater8.inflate(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = inflater0.inflate(byteArray78, (int) (short) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        inflater6.end();
        boolean boolean10 = inflater6.needsInput();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        inflater6.setInput(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray13, (int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int16 = inflater7.inflate(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray15, (int) '4', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        boolean boolean10 = inflater6.finished();
        int int11 = inflater6.getRemaining();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        inflater12.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        int int21 = inflater17.getTotalIn();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int31 = inflater22.inflate(byteArray30);
        int int32 = inflater17.inflate(byteArray30);
        inflater12.setInput(byteArray30);
        inflater6.setInput(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray30, (-1), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        boolean boolean2 = inflater0.needsInput();
        java.util.zip.Inflater inflater3 = new java.util.zip.Inflater();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        int int6 = inflater3.inflate(byteArray5);
        long long7 = inflater3.getBytesWritten();
        boolean boolean8 = inflater3.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        int int27 = inflater9.inflate(byteArray25);
        boolean boolean28 = inflater9.finished();
        int int29 = inflater9.getTotalOut();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        long long34 = inflater30.getBytesRead();
        boolean boolean35 = inflater30.needsDictionary();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        long long40 = inflater36.getBytesWritten();
        inflater36.reset();
        long long42 = inflater36.getBytesWritten();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.needsDictionary();
        boolean boolean47 = inflater43.needsInput();
        int int48 = inflater43.getRemaining();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.finished();
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater49.setInput(byteArray59);
        int int61 = inflater43.inflate(byteArray59);
        inflater36.setInput(byteArray59);
        inflater30.setInput(byteArray59);
        int int64 = inflater9.inflate(byteArray59);
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.finished();
        int int67 = inflater65.getRemaining();
        boolean boolean68 = inflater65.needsInput();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.finished();
        byte[] byteArray79 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater69.setInput(byteArray79);
        inflater65.setInput(byteArray79);
        int int82 = inflater9.inflate(byteArray79);
        inflater3.setInput(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = inflater0.inflate(byteArray79, 10, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        long long7 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getTotalIn();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        inflater13.end();
        boolean boolean17 = inflater13.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        inflater13.setInput(byteArray20);
        inflater8.setInput(byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray20, (int) (byte) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        inflater23.end();
        boolean boolean27 = inflater23.needsInput();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        inflater28.reset();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        inflater28.setInput(byteArray45);
        inflater23.setInput(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = inflater0.inflate(byteArray45, (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getRemaining();
        int int7 = inflater0.getAdler();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        boolean boolean11 = inflater7.finished();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        inflater13.reset();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        int int22 = inflater18.getTotalIn();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int32 = inflater23.inflate(byteArray31);
        int int33 = inflater18.inflate(byteArray31);
        inflater13.setInput(byteArray31);
        inflater7.setInput(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = inflater0.inflate(byteArray31, (int) '#', 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        inflater7.reset();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        long long16 = inflater12.getBytesWritten();
        inflater12.reset();
        long long18 = inflater12.getBytesWritten();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsDictionary();
        boolean boolean23 = inflater19.needsInput();
        int int24 = inflater19.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.finished();
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater25.setInput(byteArray35);
        int int37 = inflater19.inflate(byteArray35);
        inflater12.setInput(byteArray35);
        inflater7.setInput(byteArray35);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray35, (int) (byte) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater(true);
        int int25 = inflater24.getRemaining();
        long long26 = inflater24.getBytesRead();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        inflater27.end();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        inflater27.setInput(byteArray41);
        inflater24.setInput(byteArray41, (int) (byte) 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        boolean boolean3 = inflater2.finished();
        int int4 = inflater2.getRemaining();
        boolean boolean5 = inflater2.needsDictionary();
        boolean boolean6 = inflater2.needsInput();
        int int7 = inflater2.getRemaining();
        inflater2.reset();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        inflater9.reset();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        inflater9.setInput(byteArray26);
        int int31 = inflater2.inflate(byteArray26, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setDictionary(byteArray26, (int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.needsDictionary();
        int int9 = inflater7.getTotalOut();
        int int10 = inflater7.getTotalOut();
        long long11 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        long long16 = inflater12.getBytesRead();
        boolean boolean17 = inflater12.needsDictionary();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        long long22 = inflater18.getBytesWritten();
        inflater18.reset();
        long long24 = inflater18.getBytesWritten();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        int int43 = inflater25.inflate(byteArray41);
        inflater18.setInput(byteArray41);
        inflater12.setInput(byteArray41);
        int int46 = inflater7.inflate(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray41, 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        inflater0.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        boolean boolean27 = inflater8.finished();
        int int28 = inflater8.getAdler();
        boolean boolean29 = inflater8.finished();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        long long34 = inflater30.getBytesRead();
        boolean boolean35 = inflater30.needsDictionary();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        long long40 = inflater36.getBytesWritten();
        inflater36.reset();
        long long42 = inflater36.getBytesWritten();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.needsDictionary();
        boolean boolean47 = inflater43.needsInput();
        int int48 = inflater43.getRemaining();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.finished();
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater49.setInput(byteArray59);
        int int61 = inflater43.inflate(byteArray59);
        inflater36.setInput(byteArray59);
        inflater30.setInput(byteArray59);
        inflater8.setInput(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray59, (int) (short) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.needsDictionary();
        int int6 = inflater4.getTotalOut();
        int int7 = inflater4.getTotalOut();
        long long8 = inflater4.getBytesWritten();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        long long13 = inflater9.getBytesRead();
        boolean boolean14 = inflater9.needsDictionary();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        long long19 = inflater15.getBytesWritten();
        inflater15.reset();
        long long21 = inflater15.getBytesWritten();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        int int27 = inflater22.getRemaining();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater28.setInput(byteArray38);
        int int40 = inflater22.inflate(byteArray38);
        inflater15.setInput(byteArray38);
        inflater9.setInput(byteArray38);
        int int43 = inflater4.inflate(byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray38, (int) (short) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        long long5 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        inflater6.end();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.finished();
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater10.setInput(byteArray20);
        inflater6.setInput(byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray20, (int) 'a', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        inflater0.end();
        int int8 = inflater0.getRemaining();
        java.lang.Class<?> wildcardClass9 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        int int8 = inflater4.getTotalIn();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        inflater9.end();
        boolean boolean13 = inflater9.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        inflater9.setInput(byteArray16);
        inflater4.setInput(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = inflater0.inflate(byteArray16, 0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        inflater0.end();
        inflater0.end();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.needsDictionary();
        int int10 = inflater8.getTotalOut();
        int int11 = inflater8.getTotalOut();
        boolean boolean12 = inflater8.needsInput();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        inflater13.reset();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        int int22 = inflater18.getTotalIn();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int32 = inflater23.inflate(byteArray31);
        int int33 = inflater18.inflate(byteArray31);
        inflater13.setInput(byteArray31);
        inflater8.setInput(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = inflater0.inflate(byteArray31, 6, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsInput();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        inflater56.setInput(byteArray70);
        int int73 = inflater0.inflate(byteArray70);
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        byte[] byteArray78 = new byte[] { (byte) 1 };
        int int79 = inflater76.inflate(byteArray78);
        int int80 = inflater76.getTotalIn();
        java.util.zip.Inflater inflater81 = new java.util.zip.Inflater();
        boolean boolean82 = inflater81.finished();
        int int83 = inflater81.getRemaining();
        inflater81.end();
        boolean boolean85 = inflater81.needsInput();
        java.util.zip.Inflater inflater86 = new java.util.zip.Inflater();
        byte[] byteArray88 = new byte[] { (byte) 1 };
        int int89 = inflater86.inflate(byteArray88);
        inflater81.setInput(byteArray88);
        inflater76.setInput(byteArray88);
        inflater74.setInput(byteArray88);
        inflater0.setInput(byteArray88);
        java.lang.Class<?> wildcardClass94 = byteArray88.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        boolean boolean2 = inflater0.needsInput();
        boolean boolean3 = inflater0.needsInput();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        long long8 = inflater4.getBytesWritten();
        inflater4.reset();
        long long10 = inflater4.getBytesWritten();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        boolean boolean15 = inflater11.needsInput();
        int int16 = inflater11.getRemaining();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater17.setInput(byteArray27);
        int int29 = inflater11.inflate(byteArray27);
        inflater4.setInput(byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray27, (int) (byte) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        boolean boolean29 = inflater24.needsDictionary();
        boolean boolean30 = inflater24.needsDictionary();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        int int43 = inflater24.inflate(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = inflater0.inflate(byteArray41, (int) (byte) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        boolean boolean9 = inflater0.finished();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater(true);
        int int12 = inflater11.getRemaining();
        long long13 = inflater11.getBytesRead();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        int int18 = inflater11.inflate(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = inflater0.inflate(byteArray16, (int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        long long19 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        long long24 = inflater20.getBytesRead();
        boolean boolean25 = inflater20.needsDictionary();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        long long30 = inflater26.getBytesWritten();
        inflater26.reset();
        long long32 = inflater26.getBytesWritten();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        int int51 = inflater33.inflate(byteArray49);
        inflater26.setInput(byteArray49);
        inflater20.setInput(byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray49, 6, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        long long8 = inflater4.getBytesWritten();
        inflater4.reset();
        long long10 = inflater4.getBytesWritten();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        boolean boolean15 = inflater11.needsInput();
        int int16 = inflater11.getRemaining();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater17.setInput(byteArray27);
        int int29 = inflater11.inflate(byteArray27);
        inflater4.setInput(byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater0.setInput(byteArray7);
        int int10 = inflater0.getRemaining();
        byte[] byteArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.finished();
        boolean boolean25 = inflater0.needsInput();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater(true);
        int int28 = inflater27.getRemaining();
        long long29 = inflater27.getBytesRead();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        inflater30.end();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater34.setInput(byteArray44);
        inflater30.setInput(byteArray44);
        inflater27.setInput(byteArray44, (int) (byte) 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray44, (int) (short) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        boolean boolean6 = inflater0.needsDictionary();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater(true);
        int int6 = inflater5.getRemaining();
        long long7 = inflater5.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater5.inflate(byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = inflater0.inflate(byteArray10, (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        int int41 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        long long46 = inflater42.getBytesWritten();
        inflater42.reset();
        long long48 = inflater42.getBytesWritten();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.needsDictionary();
        boolean boolean53 = inflater49.needsInput();
        int int54 = inflater49.getRemaining();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater55.setInput(byteArray65);
        int int67 = inflater49.inflate(byteArray65);
        inflater42.setInput(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray65, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        int int10 = inflater5.getRemaining();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater11.setInput(byteArray21);
        int int23 = inflater5.inflate(byteArray21);
        boolean boolean24 = inflater5.finished();
        int int25 = inflater5.getAdler();
        boolean boolean26 = inflater5.finished();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        long long31 = inflater27.getBytesRead();
        boolean boolean32 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        long long37 = inflater33.getBytesWritten();
        inflater33.reset();
        long long39 = inflater33.getBytesWritten();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        int int58 = inflater40.inflate(byteArray56);
        inflater33.setInput(byteArray56);
        inflater27.setInput(byteArray56);
        inflater5.setInput(byteArray56);
        inflater0.setInput(byteArray56);
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.finished();
        int int65 = inflater63.getRemaining();
        int int66 = inflater63.getTotalOut();
        byte[] byteArray69 = new byte[] { (byte) -1, (byte) -1 };
        inflater63.setInput(byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            int int73 = inflater0.inflate(byteArray69, (int) (short) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1, -1]");
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsInput();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        inflater56.setInput(byteArray70);
        int int73 = inflater0.inflate(byteArray70);
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        int int24 = inflater6.inflate(byteArray22);
        boolean boolean25 = inflater6.finished();
        int int26 = inflater6.getAdler();
        boolean boolean27 = inflater6.finished();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        long long32 = inflater28.getBytesRead();
        boolean boolean33 = inflater28.needsDictionary();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        long long38 = inflater34.getBytesWritten();
        inflater34.reset();
        long long40 = inflater34.getBytesWritten();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.needsDictionary();
        boolean boolean45 = inflater41.needsInput();
        int int46 = inflater41.getRemaining();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.finished();
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater47.setInput(byteArray57);
        int int59 = inflater41.inflate(byteArray57);
        inflater34.setInput(byteArray57);
        inflater28.setInput(byteArray57);
        inflater6.setInput(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = inflater0.inflate(byteArray57, (int) (short) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        boolean boolean22 = inflater0.finished();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        boolean boolean27 = inflater23.needsInput();
        int int28 = inflater23.getRemaining();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.finished();
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater29.setInput(byteArray39);
        int int41 = inflater23.inflate(byteArray39);
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.finished();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        inflater42.setInput(byteArray56);
        inflater23.setInput(byteArray56);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray56, (int) (byte) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getRemaining();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.finished();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        inflater27.setInput(byteArray41);
        inflater8.setInput(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        boolean boolean9 = inflater5.finished();
        int int10 = inflater5.getRemaining();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        inflater11.reset();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        int int20 = inflater16.getTotalIn();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int30 = inflater21.inflate(byteArray29);
        int int31 = inflater16.inflate(byteArray29);
        inflater11.setInput(byteArray29);
        inflater5.setInput(byteArray29);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray29, (int) (byte) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        int int8 = inflater0.getTotalIn();
        boolean boolean9 = inflater0.finished();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray18, (-1), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        int int8 = inflater0.getTotalIn();
        boolean boolean9 = inflater0.finished();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        boolean boolean20 = inflater10.needsInput();
        boolean boolean21 = inflater10.needsDictionary();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        long long26 = inflater22.getBytesRead();
        boolean boolean27 = inflater22.needsInput();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        long long32 = inflater28.getBytesWritten();
        inflater28.reset();
        long long34 = inflater28.getBytesWritten();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        boolean boolean39 = inflater35.needsInput();
        int int40 = inflater35.getRemaining();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.finished();
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater41.setInput(byteArray51);
        int int53 = inflater35.inflate(byteArray51);
        inflater28.setInput(byteArray51);
        int int55 = inflater22.inflate(byteArray51);
        inflater10.setInput(byteArray51, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int61 = inflater0.inflate(byteArray51, (int) (byte) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getRemaining();
        long long23 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsInput();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater28.setInput(byteArray38);
        inflater24.setInput(byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = inflater0.inflate(byteArray38);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        inflater5.end();
        boolean boolean9 = inflater5.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        inflater5.setInput(byteArray12);
        inflater0.setInput(byteArray12);
        java.lang.Class<?> wildcardClass16 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalIn();
        int int7 = inflater0.getTotalOut();
        int int8 = inflater0.getTotalOut();
        boolean boolean9 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getTotalIn();
        long long3 = inflater1.getBytesWritten();
        inflater1.end();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        inflater6.end();
        boolean boolean10 = inflater6.needsInput();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        boolean boolean15 = inflater11.needsInput();
        int int16 = inflater11.getRemaining();
        inflater11.reset();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        inflater11.setInput(byteArray28);
        inflater6.setInput(byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray28, (int) 'a', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsInput();
        boolean boolean22 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        int int27 = inflater23.getTotalIn();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int37 = inflater28.inflate(byteArray36);
        int int38 = inflater23.inflate(byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getAdler();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater17.setInput(byteArray27);
        inflater13.setInput(byteArray27);
        inflater8.setInput(byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = inflater0.inflate(byteArray27, (int) (byte) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater0.setInput(byteArray7);
        int int10 = inflater0.getRemaining();
        boolean boolean11 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        int int16 = inflater12.getTotalIn();
        long long17 = inflater12.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        boolean boolean37 = inflater18.finished();
        int int38 = inflater18.getTotalOut();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.needsDictionary();
        long long43 = inflater39.getBytesRead();
        boolean boolean44 = inflater39.needsDictionary();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        long long49 = inflater45.getBytesWritten();
        inflater45.reset();
        long long51 = inflater45.getBytesWritten();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.needsDictionary();
        boolean boolean56 = inflater52.needsInput();
        int int57 = inflater52.getRemaining();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.finished();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater58.setInput(byteArray68);
        int int70 = inflater52.inflate(byteArray68);
        inflater45.setInput(byteArray68);
        inflater39.setInput(byteArray68);
        int int73 = inflater18.inflate(byteArray68);
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        int int76 = inflater74.getRemaining();
        boolean boolean77 = inflater74.needsInput();
        java.util.zip.Inflater inflater78 = new java.util.zip.Inflater();
        boolean boolean79 = inflater78.finished();
        int int80 = inflater78.getRemaining();
        boolean boolean81 = inflater78.finished();
        byte[] byteArray88 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater78.setInput(byteArray88);
        inflater74.setInput(byteArray88);
        int int91 = inflater18.inflate(byteArray88);
        inflater12.setInput(byteArray88, 0, (int) (short) 0);
        inflater0.setInput(byteArray88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        boolean boolean3 = inflater2.finished();
        int int4 = inflater2.getRemaining();
        boolean boolean5 = inflater2.needsDictionary();
        boolean boolean6 = inflater2.needsInput();
        int int7 = inflater2.getRemaining();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        int int20 = inflater2.inflate(byteArray18);
        boolean boolean21 = inflater2.finished();
        int int22 = inflater2.getAdler();
        boolean boolean23 = inflater2.finished();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        long long28 = inflater24.getBytesRead();
        boolean boolean29 = inflater24.needsDictionary();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        long long34 = inflater30.getBytesWritten();
        inflater30.reset();
        long long36 = inflater30.getBytesWritten();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.needsDictionary();
        boolean boolean41 = inflater37.needsInput();
        int int42 = inflater37.getRemaining();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater43.setInput(byteArray53);
        int int55 = inflater37.inflate(byteArray53);
        inflater30.setInput(byteArray53);
        inflater24.setInput(byteArray53);
        inflater2.setInput(byteArray53);
        // The following exception was thrown during execution in test generation
        try {
            int int61 = inflater0.inflate(byteArray53, (int) (byte) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        boolean boolean24 = inflater20.needsInput();
        int int25 = inflater20.getRemaining();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.finished();
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater26.setInput(byteArray36);
        int int38 = inflater20.inflate(byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray36, (int) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        boolean boolean9 = inflater0.finished();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        inflater10.end();
        boolean boolean14 = inflater10.needsInput();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.needsDictionary();
        boolean boolean19 = inflater15.needsInput();
        int int20 = inflater15.getRemaining();
        inflater15.reset();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.finished();
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater22.setInput(byteArray32);
        inflater15.setInput(byteArray32);
        inflater10.setInput(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray32, 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        inflater0.end();
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        boolean boolean3 = inflater2.finished();
        int int4 = inflater2.getRemaining();
        boolean boolean5 = inflater2.finished();
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater2.setInput(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = inflater0.inflate(byteArray12, (int) (byte) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        java.lang.Class<?> wildcardClass56 = byteArray50.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsInput();
        boolean boolean2 = inflater0.needsDictionary();
        byte[] byteArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.needsDictionary();
        int int8 = inflater6.getTotalOut();
        int int9 = inflater6.getTotalOut();
        long long10 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        long long15 = inflater11.getBytesRead();
        boolean boolean16 = inflater11.needsDictionary();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        long long21 = inflater17.getBytesWritten();
        inflater17.reset();
        long long23 = inflater17.getBytesWritten();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getRemaining();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        int int42 = inflater24.inflate(byteArray40);
        inflater17.setInput(byteArray40);
        inflater11.setInput(byteArray40);
        int int45 = inflater6.inflate(byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.needsInput();
        boolean boolean11 = inflater0.finished();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        long long16 = inflater12.getBytesRead();
        boolean boolean17 = inflater12.needsInput();
        int int18 = inflater12.getTotalOut();
        long long19 = inflater12.getBytesRead();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        boolean boolean24 = inflater20.needsInput();
        int int25 = inflater20.getRemaining();
        inflater20.reset();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.finished();
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater27.setInput(byteArray37);
        inflater20.setInput(byteArray37);
        int int42 = inflater12.inflate(byteArray37, 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray37, (int) '4', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.needsDictionary();
        int int6 = inflater4.getTotalOut();
        int int7 = inflater4.getTotalOut();
        long long8 = inflater4.getBytesWritten();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        long long13 = inflater9.getBytesRead();
        boolean boolean14 = inflater9.needsDictionary();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        long long19 = inflater15.getBytesWritten();
        inflater15.reset();
        long long21 = inflater15.getBytesWritten();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        int int27 = inflater22.getRemaining();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater28.setInput(byteArray38);
        int int40 = inflater22.inflate(byteArray38);
        inflater15.setInput(byteArray38);
        inflater9.setInput(byteArray38);
        int int43 = inflater4.inflate(byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = inflater0.inflate(byteArray38, 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        long long23 = inflater0.getBytesWritten();
        long long24 = inflater0.getBytesRead();
        java.lang.Class<?> wildcardClass25 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        inflater6.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater6.setInput(byteArray34);
        inflater0.setInput(byteArray34, (int) (byte) 0, 1);
        java.lang.Class<?> wildcardClass42 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsInput();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        inflater56.setInput(byteArray70);
        int int73 = inflater0.inflate(byteArray70);
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        byte[] byteArray78 = new byte[] { (byte) 1 };
        int int79 = inflater76.inflate(byteArray78);
        int int80 = inflater76.getTotalIn();
        java.util.zip.Inflater inflater81 = new java.util.zip.Inflater();
        boolean boolean82 = inflater81.finished();
        int int83 = inflater81.getRemaining();
        inflater81.end();
        boolean boolean85 = inflater81.needsInput();
        java.util.zip.Inflater inflater86 = new java.util.zip.Inflater();
        byte[] byteArray88 = new byte[] { (byte) 1 };
        int int89 = inflater86.inflate(byteArray88);
        inflater81.setInput(byteArray88);
        inflater76.setInput(byteArray88);
        inflater74.setInput(byteArray88);
        inflater0.setInput(byteArray88);
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        inflater19.setInput(byteArray33);
        inflater0.setInput(byteArray33);
        long long37 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        boolean boolean42 = inflater38.needsInput();
        int int43 = inflater38.getRemaining();
        inflater38.reset();
        boolean boolean45 = inflater38.needsDictionary();
        int int46 = inflater38.getTotalIn();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.needsDictionary();
        boolean boolean51 = inflater47.needsInput();
        int int52 = inflater47.getRemaining();
        inflater47.reset();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.needsDictionary();
        boolean boolean58 = inflater54.needsInput();
        int int59 = inflater54.getRemaining();
        inflater54.reset();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.finished();
        int int63 = inflater61.getRemaining();
        boolean boolean64 = inflater61.finished();
        byte[] byteArray71 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater61.setInput(byteArray71);
        inflater54.setInput(byteArray71);
        int int76 = inflater47.inflate(byteArray71, 0, (int) (byte) 0);
        int int77 = inflater38.inflate(byteArray71);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = inflater0.inflate(byteArray71);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        boolean boolean10 = inflater5.needsDictionary();
        boolean boolean11 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        int int24 = inflater5.inflate(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray22, 6, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalIn();
        int int10 = inflater0.getTotalIn();
        boolean boolean11 = inflater0.needsInput();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        int int16 = inflater12.getAdler();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsInput();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.finished();
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater21.setInput(byteArray31);
        inflater17.setInput(byteArray31);
        inflater12.setInput(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        boolean boolean23 = inflater0.finished();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        java.lang.Class<?> wildcardClass6 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater8.setInput(byteArray25);
        int int30 = inflater0.inflate(byteArray25, 1, (int) (short) 1);
        int int31 = inflater0.getTotalIn();
        java.lang.Class<?> wildcardClass32 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalIn();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsInput();
        boolean boolean8 = inflater0.finished();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        inflater9.reset();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.needsDictionary();
        boolean boolean20 = inflater16.needsInput();
        int int21 = inflater16.getRemaining();
        inflater16.reset();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        inflater16.setInput(byteArray33);
        int int38 = inflater9.inflate(byteArray33, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = inflater0.inflate(byteArray33, (int) '4', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.needsDictionary();
        int int27 = inflater25.getTotalOut();
        int int28 = inflater25.getTotalOut();
        boolean boolean29 = inflater25.needsInput();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        inflater30.reset();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        int int39 = inflater35.getTotalIn();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int49 = inflater40.inflate(byteArray48);
        int int50 = inflater35.inflate(byteArray48);
        inflater30.setInput(byteArray48);
        inflater25.setInput(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray48, (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater(true);
        int int8 = inflater7.getRemaining();
        long long9 = inflater7.getBytesRead();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        inflater10.end();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        inflater10.setInput(byteArray24);
        inflater7.setInput(byteArray24, (int) (byte) 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        long long9 = inflater5.getBytesWritten();
        inflater5.reset();
        long long11 = inflater5.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        boolean boolean16 = inflater12.needsInput();
        int int17 = inflater12.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        int int30 = inflater12.inflate(byteArray28);
        inflater5.setInput(byteArray28);
        inflater0.setInput(byteArray28);
        int int33 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        boolean boolean53 = inflater34.finished();
        int int54 = inflater34.getAdler();
        boolean boolean55 = inflater34.finished();
        int int56 = inflater34.getAdler();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.needsDictionary();
        boolean boolean61 = inflater57.needsInput();
        int int62 = inflater57.getRemaining();
        inflater57.reset();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.finished();
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater64.setInput(byteArray74);
        inflater57.setInput(byteArray74);
        int int77 = inflater34.inflate(byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = inflater0.inflate(byteArray74);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        inflater0.end();
        inflater0.end();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsInput();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        inflater8.setInput(byteArray22);
        inflater0.setInput(byteArray22);
        java.lang.Class<?> wildcardClass26 = byteArray22.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        int int5 = inflater0.getTotalOut();
        long long6 = inflater0.getBytesRead();
        byte[] byteArray7 = new byte[] {};
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray7, 6, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        boolean boolean2 = inflater0.needsInput();
        boolean boolean3 = inflater0.needsInput();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.needsDictionary();
        long long8 = inflater4.getBytesRead();
        boolean boolean9 = inflater4.needsDictionary();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        long long14 = inflater10.getBytesWritten();
        inflater10.reset();
        long long16 = inflater10.getBytesWritten();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        int int35 = inflater17.inflate(byteArray33);
        inflater10.setInput(byteArray33);
        inflater4.setInput(byteArray33);
        int int38 = inflater0.inflate(byteArray33);
        java.lang.Class<?> wildcardClass39 = byteArray33.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        long long10 = inflater6.getBytesWritten();
        inflater6.reset();
        long long12 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        inflater6.setInput(byteArray29);
        inflater0.setInput(byteArray29);
        int int34 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        inflater0.end();
        java.lang.Class<?> wildcardClass23 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        inflater1.end();
        java.util.zip.Inflater inflater3 = new java.util.zip.Inflater();
        boolean boolean4 = inflater3.needsDictionary();
        int int5 = inflater3.getTotalOut();
        int int6 = inflater3.getTotalOut();
        boolean boolean7 = inflater3.needsInput();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        inflater8.reset();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        int int17 = inflater13.getTotalIn();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int27 = inflater18.inflate(byteArray26);
        int int28 = inflater13.inflate(byteArray26);
        inflater8.setInput(byteArray26);
        inflater3.setInput(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray26, (-1), (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1 };
        inflater0.setInput(byteArray6);
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        boolean boolean12 = inflater8.finished();
        inflater8.end();
        inflater8.end();
        boolean boolean15 = inflater8.needsDictionary();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        inflater16.setInput(byteArray30);
        inflater8.setInput(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray30, 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        int int6 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        int int11 = inflater7.getTotalIn();
        long long12 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        boolean boolean32 = inflater13.finished();
        int int33 = inflater13.getTotalOut();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        long long38 = inflater34.getBytesRead();
        boolean boolean39 = inflater34.needsDictionary();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        long long44 = inflater40.getBytesWritten();
        inflater40.reset();
        long long46 = inflater40.getBytesWritten();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.needsDictionary();
        boolean boolean51 = inflater47.needsInput();
        int int52 = inflater47.getRemaining();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.finished();
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater53.setInput(byteArray63);
        int int65 = inflater47.inflate(byteArray63);
        inflater40.setInput(byteArray63);
        inflater34.setInput(byteArray63);
        int int68 = inflater13.inflate(byteArray63);
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.needsInput();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        boolean boolean74 = inflater73.finished();
        int int75 = inflater73.getRemaining();
        boolean boolean76 = inflater73.finished();
        byte[] byteArray83 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater73.setInput(byteArray83);
        inflater69.setInput(byteArray83);
        int int86 = inflater13.inflate(byteArray83);
        inflater7.setInput(byteArray83, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray83, (int) (byte) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsInput();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        int int38 = inflater5.inflate(byteArray34);
        inflater0.setInput(byteArray34);
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        inflater0.setInput(byteArray42);
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        int int49 = inflater45.getTotalIn();
        boolean boolean50 = inflater45.needsDictionary();
        long long51 = inflater45.getBytesRead();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        int int58 = inflater54.getTotalIn();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        inflater59.end();
        boolean boolean63 = inflater59.needsInput();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        inflater59.setInput(byteArray66);
        inflater54.setInput(byteArray66);
        inflater52.setInput(byteArray66);
        int int71 = inflater45.inflate(byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = inflater0.inflate(byteArray66, 6, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        int int5 = inflater0.getTotalOut();
        int int6 = inflater0.getAdler();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater(true);
        int int9 = inflater8.getRemaining();
        long long10 = inflater8.getBytesRead();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        int int15 = inflater8.inflate(byteArray13);
        int int18 = inflater0.inflate(byteArray13, (int) (short) 1, (int) (short) 0);
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater(true);
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        inflater21.reset();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        long long30 = inflater26.getBytesWritten();
        inflater26.reset();
        long long32 = inflater26.getBytesWritten();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        int int51 = inflater33.inflate(byteArray49);
        inflater26.setInput(byteArray49);
        inflater21.setInput(byteArray49);
        inflater20.setDictionary(byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray49, (-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalIn();
        boolean boolean6 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        inflater7.reset();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        inflater14.reset();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.finished();
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater21.setInput(byteArray31);
        inflater14.setInput(byteArray31);
        int int36 = inflater7.inflate(byteArray31, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = inflater0.inflate(byteArray31, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        inflater0.reset();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        int int15 = inflater11.getTotalIn();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        inflater16.end();
        boolean boolean20 = inflater16.needsInput();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        inflater16.setInput(byteArray23);
        inflater11.setInput(byteArray23);
        inflater9.setInput(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray23, (int) (byte) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        boolean boolean20 = inflater0.finished();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        inflater21.end();
        boolean boolean25 = inflater21.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        long long30 = inflater26.getBytesRead();
        boolean boolean31 = inflater26.needsInput();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        long long36 = inflater32.getBytesWritten();
        inflater32.reset();
        long long38 = inflater32.getBytesWritten();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.needsDictionary();
        boolean boolean43 = inflater39.needsInput();
        int int44 = inflater39.getRemaining();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater45.setInput(byteArray55);
        int int57 = inflater39.inflate(byteArray55);
        inflater32.setInput(byteArray55);
        int int59 = inflater26.inflate(byteArray55);
        inflater21.setInput(byteArray55);
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        byte[] byteArray63 = new byte[] { (byte) 1 };
        int int64 = inflater61.inflate(byteArray63);
        inflater21.setInput(byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = inflater0.inflate(byteArray63, (int) (short) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        boolean boolean27 = inflater23.finished();
        inflater23.end();
        inflater23.end();
        boolean boolean30 = inflater23.needsDictionary();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.needsInput();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        inflater31.setInput(byteArray45);
        inflater23.setInput(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalIn();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsInput();
        int int8 = inflater0.getAdler();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        int int27 = inflater9.inflate(byteArray25);
        boolean boolean28 = inflater9.finished();
        int int29 = inflater9.getAdler();
        boolean boolean30 = inflater9.finished();
        int int31 = inflater9.getAdler();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        inflater32.reset();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        inflater32.setInput(byteArray49);
        int int52 = inflater9.inflate(byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray49, (int) (short) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.finished();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        inflater11.end();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater11.setInput(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = inflater0.inflate(byteArray25, (int) (short) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        int int12 = inflater0.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater36.setInput(byteArray46);
        inflater32.setInput(byteArray46);
        inflater13.setInput(byteArray46);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray46, (int) (short) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        inflater5.end();
        boolean boolean9 = inflater5.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        inflater5.setInput(byteArray12);
        inflater0.setInput(byteArray12);
        boolean boolean16 = inflater0.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        int int21 = inflater17.getAdler();
        int int22 = inflater17.getAdler();
        int int23 = inflater17.getAdler();
        int int24 = inflater17.getTotalOut();
        inflater17.reset();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.needsDictionary();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        inflater28.reset();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        inflater28.setInput(byteArray45);
        inflater26.setInput(byteArray45);
        inflater17.setInput(byteArray45, (int) (byte) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = inflater0.inflate(byteArray45, 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        int int5 = inflater2.inflate(byteArray4);
        inflater2.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        long long11 = inflater7.getBytesWritten();
        inflater7.reset();
        long long13 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        int int32 = inflater14.inflate(byteArray30);
        inflater7.setInput(byteArray30);
        inflater2.setInput(byteArray30);
        inflater1.setDictionary(byteArray30);
        byte[] byteArray36 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray36, (int) (short) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getTotalIn();
        long long13 = inflater8.getBytesWritten();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        int int32 = inflater14.inflate(byteArray30);
        boolean boolean33 = inflater14.finished();
        int int34 = inflater14.getTotalOut();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        long long39 = inflater35.getBytesRead();
        boolean boolean40 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        long long45 = inflater41.getBytesWritten();
        inflater41.reset();
        long long47 = inflater41.getBytesWritten();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.needsDictionary();
        boolean boolean52 = inflater48.needsInput();
        int int53 = inflater48.getRemaining();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.finished();
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater54.setInput(byteArray64);
        int int66 = inflater48.inflate(byteArray64);
        inflater41.setInput(byteArray64);
        inflater35.setInput(byteArray64);
        int int69 = inflater14.inflate(byteArray64);
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        boolean boolean71 = inflater70.finished();
        int int72 = inflater70.getRemaining();
        boolean boolean73 = inflater70.needsInput();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        int int76 = inflater74.getRemaining();
        boolean boolean77 = inflater74.finished();
        byte[] byteArray84 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater74.setInput(byteArray84);
        inflater70.setInput(byteArray84);
        int int87 = inflater14.inflate(byteArray84);
        inflater8.setInput(byteArray84, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        boolean boolean27 = inflater0.needsInput();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        int int32 = inflater28.getAdler();
        boolean boolean33 = inflater28.finished();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        inflater34.reset();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        byte[] byteArray41 = new byte[] { (byte) 1 };
        int int42 = inflater39.inflate(byteArray41);
        long long43 = inflater39.getBytesWritten();
        inflater39.reset();
        long long45 = inflater39.getBytesWritten();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.needsDictionary();
        boolean boolean50 = inflater46.needsInput();
        int int51 = inflater46.getRemaining();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.finished();
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater52.setInput(byteArray62);
        int int64 = inflater46.inflate(byteArray62);
        inflater39.setInput(byteArray62);
        inflater34.setInput(byteArray62);
        inflater28.setInput(byteArray62, (int) (byte) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray62, 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsInput();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        boolean boolean8 = inflater4.finished();
        int int9 = inflater4.getRemaining();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        inflater10.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        int int19 = inflater15.getTotalIn();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int29 = inflater20.inflate(byteArray28);
        int int30 = inflater15.inflate(byteArray28);
        inflater10.setInput(byteArray28);
        inflater4.setInput(byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray28, (int) (short) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalIn();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.needsDictionary();
        boolean boolean19 = inflater15.needsInput();
        int int20 = inflater15.getRemaining();
        inflater15.reset();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.finished();
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater22.setInput(byteArray32);
        inflater15.setInput(byteArray32);
        int int37 = inflater8.inflate(byteArray32, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        boolean boolean20 = inflater0.finished();
        java.lang.Class<?> wildcardClass21 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        inflater0.end();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        inflater7.end();
        boolean boolean11 = inflater7.needsInput();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        inflater7.setInput(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray14, (int) ' ', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        long long23 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = inflater0.inflate(byteArray34, (int) (byte) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        inflater0.reset();
        java.lang.Class<?> wildcardClass3 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getRemaining();
        inflater0.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int17 = inflater8.inflate(byteArray16);
        boolean boolean18 = inflater8.needsInput();
        boolean boolean19 = inflater8.needsDictionary();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        long long24 = inflater20.getBytesRead();
        boolean boolean25 = inflater20.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        long long30 = inflater26.getBytesWritten();
        inflater26.reset();
        long long32 = inflater26.getBytesWritten();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        int int51 = inflater33.inflate(byteArray49);
        inflater26.setInput(byteArray49);
        int int53 = inflater20.inflate(byteArray49);
        inflater8.setInput(byteArray49, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray49, 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        long long9 = inflater0.getBytesWritten();
        int int10 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        int int15 = inflater11.getAdler();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        inflater16.setInput(byteArray30);
        inflater11.setInput(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        boolean boolean10 = inflater6.finished();
        int int11 = inflater6.getRemaining();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        inflater12.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        int int21 = inflater17.getTotalIn();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int31 = inflater22.inflate(byteArray30);
        int int32 = inflater17.inflate(byteArray30);
        inflater12.setInput(byteArray30);
        inflater6.setInput(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray30, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        boolean boolean2 = inflater0.needsInput();
        boolean boolean3 = inflater0.needsInput();
        long long4 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        int int10 = inflater5.getRemaining();
        inflater5.reset();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        inflater5.setInput(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = inflater0.inflate(byteArray22, 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        inflater6.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater6.setInput(byteArray34);
        inflater0.setInput(byteArray34, (int) (byte) 0, 1);
        byte[] byteArray42 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray42, 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        inflater0.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        int int12 = inflater8.getAdler();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        inflater13.end();
        boolean boolean17 = inflater13.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        inflater13.setInput(byteArray20);
        int int23 = inflater8.inflate(byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray20, (int) (byte) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsInput();
        int int2 = inflater0.getAdler();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        int int8 = inflater4.getTotalIn();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int18 = inflater9.inflate(byteArray17);
        int int19 = inflater4.inflate(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        inflater0.end();
        boolean boolean22 = inflater0.finished();
        java.lang.Class<?> wildcardClass23 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        inflater15.end();
        boolean boolean19 = inflater15.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        inflater15.setInput(byteArray22);
        inflater10.setInput(byteArray22);
        inflater8.setInput(byteArray22);
        int int27 = inflater0.inflate(byteArray22);
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater34.setInput(byteArray44);
        int int46 = inflater28.inflate(byteArray44);
        boolean boolean47 = inflater28.finished();
        int int48 = inflater28.getTotalOut();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.needsDictionary();
        long long53 = inflater49.getBytesRead();
        boolean boolean54 = inflater49.needsDictionary();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        byte[] byteArray57 = new byte[] { (byte) 1 };
        int int58 = inflater55.inflate(byteArray57);
        long long59 = inflater55.getBytesWritten();
        inflater55.reset();
        long long61 = inflater55.getBytesWritten();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsDictionary();
        boolean boolean66 = inflater62.needsInput();
        int int67 = inflater62.getRemaining();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.finished();
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater68.setInput(byteArray78);
        int int80 = inflater62.inflate(byteArray78);
        inflater55.setInput(byteArray78);
        inflater49.setInput(byteArray78);
        int int83 = inflater28.inflate(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray78, (int) 'a', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        boolean boolean17 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        boolean boolean5 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        inflater6.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater6.setInput(byteArray34);
        inflater0.setInput(byteArray34, (int) (byte) 0, 1);
        int int42 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        byte[] byteArray45 = new byte[] { (byte) 1 };
        int int46 = inflater43.inflate(byteArray45);
        int int47 = inflater43.getTotalIn();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        inflater48.end();
        boolean boolean52 = inflater48.needsInput();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        byte[] byteArray55 = new byte[] { (byte) 1 };
        int int56 = inflater53.inflate(byteArray55);
        inflater48.setInput(byteArray55);
        inflater43.setInput(byteArray55);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        boolean boolean27 = inflater23.needsInput();
        int int28 = inflater23.getRemaining();
        inflater23.reset();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        inflater23.setInput(byteArray40);
        int int43 = inflater0.inflate(byteArray40);
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        int int47 = inflater44.inflate(byteArray46);
        int int48 = inflater44.getAdler();
        boolean boolean49 = inflater44.finished();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        byte[] byteArray52 = new byte[] { (byte) 1 };
        int int53 = inflater50.inflate(byteArray52);
        inflater50.reset();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        byte[] byteArray57 = new byte[] { (byte) 1 };
        int int58 = inflater55.inflate(byteArray57);
        long long59 = inflater55.getBytesWritten();
        inflater55.reset();
        long long61 = inflater55.getBytesWritten();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsDictionary();
        boolean boolean66 = inflater62.needsInput();
        int int67 = inflater62.getRemaining();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.finished();
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater68.setInput(byteArray78);
        int int80 = inflater62.inflate(byteArray78);
        inflater55.setInput(byteArray78);
        inflater50.setInput(byteArray78);
        inflater44.setInput(byteArray78, (int) (byte) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = inflater0.inflate(byteArray78, 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        inflater0.end();
        boolean boolean6 = inflater0.finished();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        long long23 = inflater0.getBytesWritten();
        java.lang.Class<?> wildcardClass24 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        long long7 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater(true);
        int int10 = inflater9.getRemaining();
        long long11 = inflater9.getBytesRead();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        inflater12.end();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        inflater12.setInput(byteArray26);
        inflater9.setInput(byteArray26, (int) (byte) 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        long long23 = inflater0.getBytesWritten();
        long long24 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        int int29 = inflater25.getTotalIn();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int39 = inflater30.inflate(byteArray38);
        int int40 = inflater25.inflate(byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray38, (int) (byte) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        int int5 = inflater0.getTotalOut();
        int int6 = inflater0.getAdler();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater(true);
        int int9 = inflater8.getRemaining();
        long long10 = inflater8.getBytesRead();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        int int15 = inflater8.inflate(byteArray13);
        int int18 = inflater0.inflate(byteArray13, (int) (short) 1, (int) (short) 0);
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        int int23 = inflater19.getAdler();
        boolean boolean24 = inflater19.finished();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        inflater25.reset();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        long long34 = inflater30.getBytesWritten();
        inflater30.reset();
        long long36 = inflater30.getBytesWritten();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.needsDictionary();
        boolean boolean41 = inflater37.needsInput();
        int int42 = inflater37.getRemaining();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater43.setInput(byteArray53);
        int int55 = inflater37.inflate(byteArray53);
        inflater30.setInput(byteArray53);
        inflater25.setInput(byteArray53);
        inflater19.setInput(byteArray53, (int) (byte) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray53, (int) (short) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        inflater5.end();
        boolean boolean9 = inflater5.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        inflater5.setInput(byteArray12);
        int int15 = inflater0.inflate(byteArray12);
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.needsDictionary();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        inflater20.end();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        inflater20.setInput(byteArray34);
        int int37 = inflater16.inflate(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray34, (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        inflater1.reset();
        java.util.zip.Inflater inflater3 = new java.util.zip.Inflater();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        int int6 = inflater3.inflate(byteArray5);
        boolean boolean7 = inflater3.finished();
        inflater3.end();
        inflater3.end();
        boolean boolean10 = inflater3.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsInput();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater11.setInput(byteArray25);
        inflater3.setInput(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray25, 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        boolean boolean24 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        int int29 = inflater25.getAdler();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsInput();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater34.setInput(byteArray44);
        inflater30.setInput(byteArray44);
        inflater25.setInput(byteArray44);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = inflater0.inflate(byteArray44, (int) (byte) -1, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        inflater12.end();
        boolean boolean16 = inflater12.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        long long21 = inflater17.getBytesRead();
        boolean boolean22 = inflater17.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        long long27 = inflater23.getBytesWritten();
        inflater23.reset();
        long long29 = inflater23.getBytesWritten();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        boolean boolean34 = inflater30.needsInput();
        int int35 = inflater30.getRemaining();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater36.setInput(byteArray46);
        int int48 = inflater30.inflate(byteArray46);
        inflater23.setInput(byteArray46);
        int int50 = inflater17.inflate(byteArray46);
        inflater12.setInput(byteArray46);
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        int int55 = inflater52.inflate(byteArray54);
        inflater12.setInput(byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray54, (int) (short) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.needsDictionary();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        inflater9.reset();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        inflater9.setInput(byteArray26);
        inflater7.setInput(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray26, (int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        int int41 = inflater0.getTotalIn();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        boolean boolean2 = inflater0.needsInput();
        boolean boolean3 = inflater0.needsInput();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.needsDictionary();
        long long8 = inflater4.getBytesRead();
        boolean boolean9 = inflater4.needsDictionary();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        long long14 = inflater10.getBytesWritten();
        inflater10.reset();
        long long16 = inflater10.getBytesWritten();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        int int35 = inflater17.inflate(byteArray33);
        inflater10.setInput(byteArray33);
        inflater4.setInput(byteArray33);
        int int38 = inflater0.inflate(byteArray33);
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        byte[] byteArray41 = new byte[] { (byte) 1 };
        int int42 = inflater39.inflate(byteArray41);
        int int43 = inflater39.getTotalIn();
        boolean boolean44 = inflater39.needsDictionary();
        long long45 = inflater39.getBytesRead();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        byte[] byteArray50 = new byte[] { (byte) 1 };
        int int51 = inflater48.inflate(byteArray50);
        int int52 = inflater48.getTotalIn();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        inflater53.end();
        boolean boolean57 = inflater53.needsInput();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        byte[] byteArray60 = new byte[] { (byte) 1 };
        int int61 = inflater58.inflate(byteArray60);
        inflater53.setInput(byteArray60);
        inflater48.setInput(byteArray60);
        inflater46.setInput(byteArray60);
        int int65 = inflater39.inflate(byteArray60);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        long long24 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray27, (int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        int int11 = inflater7.getTotalIn();
        long long12 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        boolean boolean32 = inflater13.finished();
        int int33 = inflater13.getTotalOut();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        long long38 = inflater34.getBytesRead();
        boolean boolean39 = inflater34.needsDictionary();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        long long44 = inflater40.getBytesWritten();
        inflater40.reset();
        long long46 = inflater40.getBytesWritten();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.needsDictionary();
        boolean boolean51 = inflater47.needsInput();
        int int52 = inflater47.getRemaining();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.finished();
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater53.setInput(byteArray63);
        int int65 = inflater47.inflate(byteArray63);
        inflater40.setInput(byteArray63);
        inflater34.setInput(byteArray63);
        int int68 = inflater13.inflate(byteArray63);
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.needsInput();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        boolean boolean74 = inflater73.finished();
        int int75 = inflater73.getRemaining();
        boolean boolean76 = inflater73.finished();
        byte[] byteArray83 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater73.setInput(byteArray83);
        inflater69.setInput(byteArray83);
        int int86 = inflater13.inflate(byteArray83);
        inflater7.setInput(byteArray83, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray83, (int) (short) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.finished();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int20 = inflater11.inflate(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray19, (int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsInput();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        int int38 = inflater5.inflate(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = inflater0.inflate(byteArray34, 4, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        inflater7.reset();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        inflater7.setInput(byteArray24);
        int int29 = inflater0.inflate(byteArray24, 0, (int) (byte) 0);
        java.lang.Class<?> wildcardClass30 = byteArray24.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        boolean boolean20 = inflater0.finished();
        inflater0.end();
        java.lang.Class<?> wildcardClass22 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        long long22 = inflater18.getBytesRead();
        inflater18.reset();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        boolean boolean29 = inflater24.needsDictionary();
        boolean boolean30 = inflater24.needsDictionary();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        int int43 = inflater24.inflate(byteArray41);
        int int44 = inflater18.inflate(byteArray41);
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        int int49 = inflater45.getAdler();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        inflater50.end();
        boolean boolean54 = inflater50.needsInput();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        byte[] byteArray57 = new byte[] { (byte) 1 };
        int int58 = inflater55.inflate(byteArray57);
        inflater50.setInput(byteArray57);
        int int60 = inflater45.inflate(byteArray57);
        inflater18.setInput(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        inflater0.end();
        inflater0.end();
        boolean boolean7 = inflater0.needsInput();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        boolean boolean15 = inflater8.needsDictionary();
        int int16 = inflater8.getTotalIn();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        inflater17.reset();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getRemaining();
        inflater24.reset();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        inflater24.setInput(byteArray41);
        int int46 = inflater17.inflate(byteArray41, 0, (int) (byte) 0);
        int int47 = inflater8.inflate(byteArray41);
        inflater0.setInput(byteArray41);
        java.lang.Class<?> wildcardClass49 = byteArray41.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        long long24 = inflater20.getBytesRead();
        boolean boolean25 = inflater20.needsInput();
        int int26 = inflater20.getTotalOut();
        long long27 = inflater20.getBytesRead();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        inflater28.reset();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        inflater28.setInput(byteArray45);
        int int50 = inflater20.inflate(byteArray45, 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.needsDictionary();
        long long6 = inflater0.getBytesRead();
        byte[] byteArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray7, (int) (short) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        inflater7.reset();
        boolean boolean14 = inflater7.needsDictionary();
        int int15 = inflater7.getTotalIn();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.needsDictionary();
        boolean boolean20 = inflater16.needsInput();
        int int21 = inflater16.getRemaining();
        inflater16.reset();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        boolean boolean27 = inflater23.needsInput();
        int int28 = inflater23.getRemaining();
        inflater23.reset();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        inflater23.setInput(byteArray40);
        int int45 = inflater16.inflate(byteArray40, 0, (int) (byte) 0);
        int int46 = inflater7.inflate(byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        inflater10.end();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        inflater10.setInput(byteArray24);
        int int27 = inflater6.inflate(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        long long23 = inflater0.getBytesWritten();
        int int24 = inflater0.getAdler();
        byte[] byteArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int26 = inflater0.inflate(byteArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        int int8 = inflater0.getTotalOut();
        java.lang.Class<?> wildcardClass9 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.needsDictionary();
        long long6 = inflater0.getBytesWritten();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        boolean boolean15 = inflater10.needsDictionary();
        long long16 = inflater10.getBytesRead();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        int int23 = inflater19.getTotalIn();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        inflater24.end();
        boolean boolean28 = inflater24.needsInput();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        inflater24.setInput(byteArray31);
        inflater19.setInput(byteArray31);
        inflater17.setInput(byteArray31);
        int int36 = inflater10.inflate(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        inflater0.setInput(byteArray19);
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getAdler();
        byte[] byteArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int28 = inflater0.inflate(byteArray25, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        long long10 = inflater6.getBytesWritten();
        inflater6.reset();
        long long12 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        inflater6.setInput(byteArray29);
        inflater0.setInput(byteArray29);
        boolean boolean34 = inflater0.needsInput();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        inflater39.end();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater43.setInput(byteArray53);
        inflater39.setInput(byteArray53);
        int int56 = inflater35.inflate(byteArray53);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray53, 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getAdler();
        byte[] byteArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = inflater0.inflate(byteArray7, (int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        inflater0.reset();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = inflater0.inflate(byteArray10, (int) (short) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsInput();
        boolean boolean24 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        int int10 = inflater6.getTotalIn();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int20 = inflater11.inflate(byteArray19);
        int int21 = inflater6.inflate(byteArray19);
        int int22 = inflater6.getTotalOut();
        int int23 = inflater6.getTotalOut();
        long long24 = inflater6.getBytesRead();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.finished();
        long long29 = inflater25.getBytesRead();
        boolean boolean30 = inflater25.finished();
        long long31 = inflater25.getBytesRead();
        boolean boolean32 = inflater25.needsDictionary();
        boolean boolean33 = inflater25.needsDictionary();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.needsDictionary();
        int int36 = inflater34.getTotalOut();
        int int37 = inflater34.getTotalOut();
        boolean boolean38 = inflater34.needsInput();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        byte[] byteArray41 = new byte[] { (byte) 1 };
        int int42 = inflater39.inflate(byteArray41);
        inflater39.reset();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        int int47 = inflater44.inflate(byteArray46);
        int int48 = inflater44.getTotalIn();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int58 = inflater49.inflate(byteArray57);
        int int59 = inflater44.inflate(byteArray57);
        inflater39.setInput(byteArray57);
        inflater34.setInput(byteArray57);
        int int62 = inflater25.inflate(byteArray57);
        inflater6.setInput(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray57, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        int int23 = inflater0.getTotalOut();
        int int24 = inflater0.getAdler();
        int int25 = inflater0.getAdler();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        long long30 = inflater26.getBytesRead();
        boolean boolean31 = inflater26.needsInput();
        int int32 = inflater26.getTotalOut();
        long long33 = inflater26.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        int int40 = inflater36.getTotalIn();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        inflater41.end();
        boolean boolean45 = inflater41.needsInput();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        byte[] byteArray48 = new byte[] { (byte) 1 };
        int int49 = inflater46.inflate(byteArray48);
        inflater41.setInput(byteArray48);
        inflater36.setInput(byteArray48);
        inflater34.setInput(byteArray48);
        int int53 = inflater26.inflate(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        int int41 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        boolean boolean46 = inflater42.needsInput();
        int int47 = inflater42.getRemaining();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater48.setInput(byteArray58);
        int int60 = inflater42.inflate(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray58, (int) (byte) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.finished();
        long long11 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater(true);
        int int14 = inflater13.getRemaining();
        long long15 = inflater13.getBytesRead();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        int int20 = inflater13.inflate(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.finished();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        inflater27.setInput(byteArray41);
        inflater8.setInput(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray41, (int) 'a', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        long long7 = inflater0.getBytesWritten();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.finished();
        long long11 = inflater0.getBytesRead();
        byte[] byteArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        boolean boolean27 = inflater0.needsInput();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater34.setInput(byteArray44);
        int int46 = inflater28.inflate(byteArray44);
        boolean boolean47 = inflater28.finished();
        int int48 = inflater28.getTotalIn();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.needsDictionary();
        boolean boolean53 = inflater49.needsInput();
        int int54 = inflater49.getRemaining();
        inflater49.reset();
        boolean boolean56 = inflater49.needsDictionary();
        int int57 = inflater49.getTotalIn();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.needsDictionary();
        boolean boolean62 = inflater58.needsInput();
        int int63 = inflater58.getRemaining();
        inflater58.reset();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.finished();
        int int67 = inflater65.getRemaining();
        boolean boolean68 = inflater65.needsDictionary();
        boolean boolean69 = inflater65.needsInput();
        int int70 = inflater65.getRemaining();
        inflater65.reset();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        boolean boolean73 = inflater72.finished();
        int int74 = inflater72.getRemaining();
        boolean boolean75 = inflater72.finished();
        byte[] byteArray82 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater72.setInput(byteArray82);
        inflater65.setInput(byteArray82);
        int int87 = inflater58.inflate(byteArray82, 0, (int) (byte) 0);
        int int88 = inflater49.inflate(byteArray82);
        int int89 = inflater28.inflate(byteArray82);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray82, (int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsInput();
        inflater0.end();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        int int11 = inflater7.getAdler();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsInput();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        inflater12.setInput(byteArray26);
        inflater7.setInput(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray26, (int) (byte) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        inflater0.end();
        int int8 = inflater0.getRemaining();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.needsDictionary();
        int int11 = inflater9.getTotalOut();
        int int12 = inflater9.getTotalOut();
        long long13 = inflater9.getBytesWritten();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        long long18 = inflater14.getBytesRead();
        boolean boolean19 = inflater14.needsDictionary();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        long long24 = inflater20.getBytesWritten();
        inflater20.reset();
        long long26 = inflater20.getBytesWritten();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        boolean boolean31 = inflater27.needsInput();
        int int32 = inflater27.getRemaining();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.finished();
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater33.setInput(byteArray43);
        int int45 = inflater27.inflate(byteArray43);
        inflater20.setInput(byteArray43);
        inflater14.setInput(byteArray43);
        int int48 = inflater9.inflate(byteArray43);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray43, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsInput();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        java.lang.Class<?> wildcardClass17 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        int int19 = inflater0.inflate(byteArray17);
        int int20 = inflater0.getTotalOut();
        java.lang.Class<?> wildcardClass21 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        int int24 = inflater6.inflate(byteArray22);
        boolean boolean25 = inflater6.finished();
        int int26 = inflater6.getTotalOut();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        long long31 = inflater27.getBytesRead();
        boolean boolean32 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        long long37 = inflater33.getBytesWritten();
        inflater33.reset();
        long long39 = inflater33.getBytesWritten();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        int int58 = inflater40.inflate(byteArray56);
        inflater33.setInput(byteArray56);
        inflater27.setInput(byteArray56);
        int int61 = inflater6.inflate(byteArray56);
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsInput();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater66.setInput(byteArray76);
        inflater62.setInput(byteArray76);
        int int79 = inflater6.inflate(byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray76, (int) 'a', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        inflater0.end();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        inflater6.end();
        boolean boolean10 = inflater6.needsInput();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        long long15 = inflater11.getBytesRead();
        boolean boolean16 = inflater11.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        long long21 = inflater17.getBytesWritten();
        inflater17.reset();
        long long23 = inflater17.getBytesWritten();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getRemaining();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        int int42 = inflater24.inflate(byteArray40);
        inflater17.setInput(byteArray40);
        int int44 = inflater11.inflate(byteArray40);
        inflater6.setInput(byteArray40);
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        byte[] byteArray48 = new byte[] { (byte) 1 };
        int int49 = inflater46.inflate(byteArray48);
        inflater6.setInput(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray48, (int) (byte) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater(true);
        int int8 = inflater7.getRemaining();
        long long9 = inflater7.getBytesRead();
        int int10 = inflater7.getTotalIn();
        long long11 = inflater7.getBytesWritten();
        int int12 = inflater7.getTotalIn();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        inflater13.reset();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        int int22 = inflater18.getTotalIn();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int32 = inflater23.inflate(byteArray31);
        int int33 = inflater18.inflate(byteArray31);
        inflater13.setInput(byteArray31);
        int int35 = inflater7.inflate(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray31, (int) (byte) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        long long29 = inflater25.getBytesRead();
        boolean boolean30 = inflater25.needsInput();
        int int31 = inflater25.getTotalOut();
        long long32 = inflater25.getBytesWritten();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        int int39 = inflater35.getTotalIn();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        inflater40.end();
        boolean boolean44 = inflater40.needsInput();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        inflater40.setInput(byteArray47);
        inflater35.setInput(byteArray47);
        inflater33.setInput(byteArray47);
        int int52 = inflater25.inflate(byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray47, (-1), 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getRemaining();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getAdler();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        long long17 = inflater13.getBytesRead();
        boolean boolean18 = inflater13.finished();
        long long19 = inflater13.getBytesRead();
        boolean boolean20 = inflater13.needsDictionary();
        boolean boolean21 = inflater13.needsDictionary();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.needsDictionary();
        int int24 = inflater22.getTotalOut();
        int int25 = inflater22.getTotalOut();
        boolean boolean26 = inflater22.needsInput();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        inflater27.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        int int36 = inflater32.getTotalIn();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int46 = inflater37.inflate(byteArray45);
        int int47 = inflater32.inflate(byteArray45);
        inflater27.setInput(byteArray45);
        inflater22.setInput(byteArray45);
        int int50 = inflater13.inflate(byteArray45);
        inflater8.setInput(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        inflater1.end();
        boolean boolean3 = inflater1.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.needsDictionary();
        boolean boolean8 = inflater4.needsInput();
        int int9 = inflater4.getRemaining();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.finished();
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater10.setInput(byteArray20);
        int int22 = inflater4.inflate(byteArray20);
        boolean boolean23 = inflater4.finished();
        int int24 = inflater4.getTotalIn();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        inflater25.reset();
        boolean boolean32 = inflater25.needsDictionary();
        int int33 = inflater25.getTotalIn();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        inflater34.reset();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.needsDictionary();
        boolean boolean45 = inflater41.needsInput();
        int int46 = inflater41.getRemaining();
        inflater41.reset();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater48.setInput(byteArray58);
        inflater41.setInput(byteArray58);
        int int63 = inflater34.inflate(byteArray58, 0, (int) (byte) 0);
        int int64 = inflater25.inflate(byteArray58);
        int int65 = inflater4.inflate(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setDictionary(byteArray58, (int) (byte) -1, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        inflater5.end();
        boolean boolean9 = inflater5.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        inflater5.setInput(byteArray12);
        inflater0.setInput(byteArray12);
        boolean boolean16 = inflater0.needsInput();
        boolean boolean17 = inflater0.needsInput();
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.finished();
        int int11 = inflater0.getTotalOut();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsDictionary();
        inflater0.end();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        inflater14.reset();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        boolean boolean25 = inflater21.needsInput();
        int int26 = inflater21.getRemaining();
        inflater21.reset();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater28.setInput(byteArray38);
        inflater21.setInput(byteArray38);
        int int43 = inflater14.inflate(byteArray38, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray38, (int) '4', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.finished();
        boolean boolean25 = inflater0.needsInput();
        int int26 = inflater0.getRemaining();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        boolean boolean31 = inflater27.finished();
        inflater27.end();
        inflater27.end();
        boolean boolean34 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsInput();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        inflater35.setInput(byteArray49);
        inflater27.setInput(byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        int int19 = inflater0.inflate(byteArray17);
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.needsDictionary();
        int int23 = inflater21.getTotalOut();
        int int24 = inflater21.getTotalOut();
        boolean boolean25 = inflater21.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        inflater26.reset();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        int int35 = inflater31.getTotalIn();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int45 = inflater36.inflate(byteArray44);
        int int46 = inflater31.inflate(byteArray44);
        inflater26.setInput(byteArray44);
        inflater21.setInput(byteArray44);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray44, 4, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        int int10 = inflater0.getTotalIn();
        int int11 = inflater0.getRemaining();
        int int12 = inflater0.getTotalOut();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        long long23 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getRemaining();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        int int42 = inflater24.inflate(byteArray40);
        boolean boolean43 = inflater24.finished();
        int int44 = inflater24.getTotalOut();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.needsDictionary();
        long long49 = inflater45.getBytesRead();
        boolean boolean50 = inflater45.needsDictionary();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        byte[] byteArray53 = new byte[] { (byte) 1 };
        int int54 = inflater51.inflate(byteArray53);
        long long55 = inflater51.getBytesWritten();
        inflater51.reset();
        long long57 = inflater51.getBytesWritten();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.needsDictionary();
        boolean boolean62 = inflater58.needsInput();
        int int63 = inflater58.getRemaining();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.finished();
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater64.setInput(byteArray74);
        int int76 = inflater58.inflate(byteArray74);
        inflater51.setInput(byteArray74);
        inflater45.setInput(byteArray74);
        int int79 = inflater24.inflate(byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray74, (int) (short) -1, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        boolean boolean22 = inflater0.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        inflater23.end();
        boolean boolean27 = inflater23.needsInput();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        long long32 = inflater28.getBytesRead();
        boolean boolean33 = inflater28.needsInput();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        long long38 = inflater34.getBytesWritten();
        inflater34.reset();
        long long40 = inflater34.getBytesWritten();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.needsDictionary();
        boolean boolean45 = inflater41.needsInput();
        int int46 = inflater41.getRemaining();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.finished();
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater47.setInput(byteArray57);
        int int59 = inflater41.inflate(byteArray57);
        inflater34.setInput(byteArray57);
        int int61 = inflater28.inflate(byteArray57);
        inflater23.setInput(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray57, (int) (byte) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        inflater0.end();
        int int2 = inflater0.getRemaining();
        java.lang.Class<?> wildcardClass3 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass4 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        long long18 = inflater0.getBytesRead();
        long long19 = inflater0.getBytesWritten();
        int int20 = inflater0.getRemaining();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsInput();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        int int54 = inflater21.inflate(byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsDictionary();
        boolean boolean5 = inflater0.finished();
        boolean boolean6 = inflater0.finished();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        long long11 = inflater7.getBytesRead();
        boolean boolean12 = inflater7.needsInput();
        int int13 = inflater7.getTotalOut();
        long long14 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        int int21 = inflater17.getTotalIn();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        inflater22.end();
        boolean boolean26 = inflater22.needsInput();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        inflater22.setInput(byteArray29);
        inflater17.setInput(byteArray29);
        inflater15.setInput(byteArray29);
        int int34 = inflater7.inflate(byteArray29);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        inflater0.reset();
        inflater0.reset();
        java.lang.Class<?> wildcardClass25 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        boolean boolean18 = inflater0.finished();
        boolean boolean19 = inflater0.finished();
        long long20 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        int int25 = inflater21.getTotalIn();
        long long26 = inflater21.getBytesWritten();
        int int27 = inflater21.getTotalIn();
        int int28 = inflater21.getTotalOut();
        int int29 = inflater21.getTotalOut();
        boolean boolean30 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        int int35 = inflater31.getAdler();
        boolean boolean36 = inflater31.finished();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        inflater37.reset();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        long long46 = inflater42.getBytesWritten();
        inflater42.reset();
        long long48 = inflater42.getBytesWritten();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.needsDictionary();
        boolean boolean53 = inflater49.needsInput();
        int int54 = inflater49.getRemaining();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater55.setInput(byteArray65);
        int int67 = inflater49.inflate(byteArray65);
        inflater42.setInput(byteArray65);
        inflater37.setInput(byteArray65);
        inflater31.setInput(byteArray65, (int) (byte) 0, 1);
        int int73 = inflater21.inflate(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = inflater0.inflate(byteArray65);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.lang.Class<?> wildcardClass21 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.finished();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        int int11 = inflater7.getAdler();
        boolean boolean12 = inflater7.finished();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        inflater13.reset();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        long long22 = inflater18.getBytesWritten();
        inflater18.reset();
        long long24 = inflater18.getBytesWritten();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        int int43 = inflater25.inflate(byteArray41);
        inflater18.setInput(byteArray41);
        inflater13.setInput(byteArray41);
        inflater7.setInput(byteArray41, (int) (byte) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray41, (int) ' ', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        int int24 = inflater0.getAdler();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        int int43 = inflater25.inflate(byteArray41);
        boolean boolean44 = inflater25.finished();
        int int45 = inflater25.getAdler();
        boolean boolean46 = inflater25.finished();
        int int47 = inflater25.getAdler();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.needsDictionary();
        boolean boolean52 = inflater48.needsInput();
        int int53 = inflater48.getRemaining();
        inflater48.reset();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater55.setInput(byteArray65);
        inflater48.setInput(byteArray65);
        int int68 = inflater25.inflate(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = inflater0.inflate(byteArray65, (int) (byte) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        int int5 = inflater0.getRemaining();
        long long6 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        long long11 = inflater7.getBytesWritten();
        inflater7.reset();
        int int13 = inflater7.getRemaining();
        boolean boolean14 = inflater7.needsDictionary();
        boolean boolean15 = inflater7.needsInput();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        long long20 = inflater16.getBytesRead();
        boolean boolean21 = inflater16.finished();
        long long22 = inflater16.getBytesRead();
        boolean boolean23 = inflater16.needsDictionary();
        boolean boolean24 = inflater16.needsDictionary();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.needsDictionary();
        int int27 = inflater25.getTotalOut();
        int int28 = inflater25.getTotalOut();
        boolean boolean29 = inflater25.needsInput();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        inflater30.reset();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        int int39 = inflater35.getTotalIn();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int49 = inflater40.inflate(byteArray48);
        int int50 = inflater35.inflate(byteArray48);
        inflater30.setInput(byteArray48);
        inflater25.setInput(byteArray48);
        int int53 = inflater16.inflate(byteArray48);
        inflater7.setInput(byteArray48, (int) (short) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray48, 6, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        inflater0.reset();
        boolean boolean2 = inflater0.needsInput();
        boolean boolean3 = inflater0.needsDictionary();
        byte[] byteArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = inflater0.inflate(byteArray4, (int) 'a', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        inflater0.reset();
        byte[] byteArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = inflater0.inflate(byteArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater5.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int24 = inflater15.inflate(byteArray23);
        int int25 = inflater10.inflate(byteArray23);
        inflater5.setInput(byteArray23);
        inflater0.setInput(byteArray23);
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater34.setInput(byteArray44);
        int int46 = inflater28.inflate(byteArray44);
        boolean boolean47 = inflater28.finished();
        int int48 = inflater28.getAdler();
        boolean boolean49 = inflater28.finished();
        int int50 = inflater28.getAdler();
        boolean boolean51 = inflater28.needsInput();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        int int55 = inflater52.inflate(byteArray54);
        int int56 = inflater52.getTotalIn();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int66 = inflater57.inflate(byteArray65);
        int int67 = inflater52.inflate(byteArray65);
        int int68 = inflater28.inflate(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray65, (int) (byte) 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        boolean boolean7 = inflater0.finished();
        int int8 = inflater0.getTotalOut();
        boolean boolean9 = inflater0.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsDictionary();
        boolean boolean14 = inflater10.needsInput();
        int int15 = inflater10.getRemaining();
        inflater10.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater17.setInput(byteArray27);
        inflater10.setInput(byteArray27);
        int int30 = inflater10.getTotalOut();
        boolean boolean31 = inflater10.finished();
        inflater10.reset();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.needsDictionary();
        int int35 = inflater33.getTotalOut();
        boolean boolean36 = inflater33.finished();
        boolean boolean37 = inflater33.needsDictionary();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        boolean boolean40 = inflater38.needsInput();
        boolean boolean41 = inflater38.needsInput();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        long long46 = inflater42.getBytesRead();
        boolean boolean47 = inflater42.needsDictionary();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        byte[] byteArray50 = new byte[] { (byte) 1 };
        int int51 = inflater48.inflate(byteArray50);
        long long52 = inflater48.getBytesWritten();
        inflater48.reset();
        long long54 = inflater48.getBytesWritten();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.needsDictionary();
        boolean boolean59 = inflater55.needsInput();
        int int60 = inflater55.getRemaining();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.finished();
        int int63 = inflater61.getRemaining();
        boolean boolean64 = inflater61.finished();
        byte[] byteArray71 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater61.setInput(byteArray71);
        int int73 = inflater55.inflate(byteArray71);
        inflater48.setInput(byteArray71);
        inflater42.setInput(byteArray71);
        int int76 = inflater38.inflate(byteArray71);
        int int77 = inflater33.inflate(byteArray71);
        inflater10.setInput(byteArray71);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray71, (int) (byte) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsInput();
        int int13 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        inflater14.end();
        boolean boolean18 = inflater14.needsInput();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsDictionary();
        long long23 = inflater19.getBytesRead();
        boolean boolean24 = inflater19.needsInput();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        long long29 = inflater25.getBytesWritten();
        inflater25.reset();
        long long31 = inflater25.getBytesWritten();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater38.setInput(byteArray48);
        int int50 = inflater32.inflate(byteArray48);
        inflater25.setInput(byteArray48);
        int int52 = inflater19.inflate(byteArray48);
        inflater14.setInput(byteArray48);
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        inflater14.setInput(byteArray56);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray56, (int) (byte) 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        boolean boolean12 = inflater8.finished();
        inflater8.end();
        inflater8.end();
        boolean boolean15 = inflater8.needsInput();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.needsDictionary();
        boolean boolean20 = inflater16.needsInput();
        int int21 = inflater16.getRemaining();
        inflater16.reset();
        boolean boolean23 = inflater16.needsDictionary();
        int int24 = inflater16.getTotalIn();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        inflater25.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        inflater32.reset();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        inflater32.setInput(byteArray49);
        int int54 = inflater25.inflate(byteArray49, 0, (int) (byte) 0);
        int int55 = inflater16.inflate(byteArray49);
        inflater8.setInput(byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = inflater0.inflate(byteArray49, (int) ' ', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalOut();
        inflater0.reset();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getTotalIn();
        int int6 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getAdler();
        long long8 = inflater0.getBytesRead();
        boolean boolean9 = inflater0.finished();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.needsDictionary();
        int int12 = inflater10.getTotalOut();
        int int13 = inflater10.getTotalOut();
        long long14 = inflater10.getBytesWritten();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.needsDictionary();
        long long19 = inflater15.getBytesRead();
        boolean boolean20 = inflater15.needsDictionary();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        long long25 = inflater21.getBytesWritten();
        inflater21.reset();
        long long27 = inflater21.getBytesWritten();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater34.setInput(byteArray44);
        int int46 = inflater28.inflate(byteArray44);
        inflater21.setInput(byteArray44);
        inflater15.setInput(byteArray44);
        int int49 = inflater10.inflate(byteArray44);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = inflater0.inflate(byteArray44, (int) (byte) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        long long18 = inflater0.getBytesRead();
        long long19 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        boolean boolean22 = inflater20.needsInput();
        boolean boolean23 = inflater20.needsInput();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        long long28 = inflater24.getBytesRead();
        boolean boolean29 = inflater24.needsDictionary();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        long long34 = inflater30.getBytesWritten();
        inflater30.reset();
        long long36 = inflater30.getBytesWritten();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.needsDictionary();
        boolean boolean41 = inflater37.needsInput();
        int int42 = inflater37.getRemaining();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater43.setInput(byteArray53);
        int int55 = inflater37.inflate(byteArray53);
        inflater30.setInput(byteArray53);
        inflater24.setInput(byteArray53);
        int int58 = inflater20.inflate(byteArray53);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsDictionary();
        inflater0.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.finished();
        long long14 = inflater10.getBytesRead();
        boolean boolean15 = inflater10.finished();
        long long16 = inflater10.getBytesRead();
        boolean boolean17 = inflater10.needsDictionary();
        boolean boolean18 = inflater10.needsDictionary();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.needsDictionary();
        int int21 = inflater19.getTotalOut();
        int int22 = inflater19.getTotalOut();
        boolean boolean23 = inflater19.needsInput();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        inflater24.reset();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        int int33 = inflater29.getTotalIn();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int43 = inflater34.inflate(byteArray42);
        int int44 = inflater29.inflate(byteArray42);
        inflater24.setInput(byteArray42);
        inflater19.setInput(byteArray42);
        int int47 = inflater10.inflate(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = inflater0.inflate(byteArray42, (int) (short) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        boolean boolean25 = inflater21.needsInput();
        int int26 = inflater21.getRemaining();
        inflater21.reset();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater28.setInput(byteArray38);
        inflater21.setInput(byteArray38);
        int int41 = inflater21.getTotalOut();
        boolean boolean42 = inflater21.needsDictionary();
        long long43 = inflater21.getBytesWritten();
        int int44 = inflater21.getRemaining();
        int int45 = inflater21.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        byte[] byteArray48 = new byte[] { (byte) 1 };
        int int49 = inflater46.inflate(byteArray48);
        boolean boolean50 = inflater46.finished();
        inflater46.end();
        inflater46.end();
        boolean boolean53 = inflater46.needsDictionary();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.needsInput();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.finished();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater58.setInput(byteArray68);
        inflater54.setInput(byteArray68);
        inflater46.setInput(byteArray68);
        inflater21.setInput(byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray68, (int) (byte) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 6 + "'", int44 == 6);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsInput();
        boolean boolean13 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass14 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        int int27 = inflater0.getRemaining();
        long long28 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        boolean boolean33 = inflater29.finished();
        int int34 = inflater29.getRemaining();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        int int41 = inflater37.getTotalIn();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        inflater42.end();
        boolean boolean46 = inflater42.needsInput();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        inflater42.setInput(byteArray49);
        inflater37.setInput(byteArray49);
        inflater35.setInput(byteArray49);
        int int54 = inflater29.inflate(byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = inflater0.inflate(byteArray49);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        boolean boolean22 = inflater18.finished();
        inflater18.end();
        inflater18.end();
        boolean boolean25 = inflater18.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        boolean boolean30 = inflater26.needsInput();
        int int31 = inflater26.getRemaining();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        int int44 = inflater26.inflate(byteArray42);
        boolean boolean45 = inflater26.finished();
        int int46 = inflater26.getAdler();
        boolean boolean47 = inflater26.finished();
        int int48 = inflater26.getAdler();
        boolean boolean49 = inflater26.needsInput();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        byte[] byteArray52 = new byte[] { (byte) 1 };
        int int53 = inflater50.inflate(byteArray52);
        int int54 = inflater50.getTotalIn();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        byte[] byteArray57 = new byte[] { (byte) 1 };
        int int58 = inflater55.inflate(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int64 = inflater55.inflate(byteArray63);
        int int65 = inflater50.inflate(byteArray63);
        int int66 = inflater26.inflate(byteArray63);
        inflater18.setInput(byteArray63, (int) (byte) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = inflater0.inflate(byteArray63);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.finished();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        long long29 = inflater25.getBytesWritten();
        inflater25.reset();
        long long31 = inflater25.getBytesWritten();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater38.setInput(byteArray48);
        int int50 = inflater32.inflate(byteArray48);
        inflater25.setInput(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray48, 6, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        inflater0.end();
        int int6 = inflater0.getRemaining();
        byte[] byteArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalIn();
        int int10 = inflater0.getTotalIn();
        boolean boolean11 = inflater0.needsInput();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater(true);
        int int14 = inflater13.getRemaining();
        long long15 = inflater13.getBytesRead();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        int int20 = inflater13.inflate(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray18, (int) (short) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getRemaining();
        boolean boolean25 = inflater0.needsInput();
        java.lang.Class<?> wildcardClass26 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater5.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int24 = inflater15.inflate(byteArray23);
        int int25 = inflater10.inflate(byteArray23);
        inflater5.setInput(byteArray23);
        inflater0.setInput(byteArray23);
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        inflater28.end();
        boolean boolean32 = inflater28.needsInput();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        long long37 = inflater33.getBytesRead();
        boolean boolean38 = inflater33.needsInput();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        byte[] byteArray41 = new byte[] { (byte) 1 };
        int int42 = inflater39.inflate(byteArray41);
        long long43 = inflater39.getBytesWritten();
        inflater39.reset();
        long long45 = inflater39.getBytesWritten();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.needsDictionary();
        boolean boolean50 = inflater46.needsInput();
        int int51 = inflater46.getRemaining();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.finished();
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater52.setInput(byteArray62);
        int int64 = inflater46.inflate(byteArray62);
        inflater39.setInput(byteArray62);
        int int66 = inflater33.inflate(byteArray62);
        inflater28.setInput(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = inflater0.inflate(byteArray62);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: incorrect header check");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getAdler();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater17.setInput(byteArray27);
        inflater13.setInput(byteArray27);
        inflater8.setInput(byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = inflater0.inflate(byteArray27, 4, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        int int23 = inflater0.getTotalOut();
        int int24 = inflater0.getAdler();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        int int43 = inflater25.inflate(byteArray41);
        boolean boolean44 = inflater25.finished();
        int int45 = inflater25.getAdler();
        boolean boolean46 = inflater25.finished();
        int int47 = inflater25.getAdler();
        boolean boolean48 = inflater25.needsInput();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        int int53 = inflater49.getTotalIn();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int63 = inflater54.inflate(byteArray62);
        int int64 = inflater49.inflate(byteArray62);
        int int65 = inflater25.inflate(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray62, (int) (short) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getRemaining();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalIn();
        int int7 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        java.lang.Class<?> wildcardClass19 = byteArray16.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getTotalIn();
        java.lang.Class<?> wildcardClass3 = inflater1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getTotalOut();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass9 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsDictionary();
        long long14 = inflater10.getBytesRead();
        boolean boolean15 = inflater10.needsDictionary();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        long long20 = inflater16.getBytesWritten();
        inflater16.reset();
        long long22 = inflater16.getBytesWritten();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        boolean boolean27 = inflater23.needsInput();
        int int28 = inflater23.getRemaining();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.finished();
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater29.setInput(byteArray39);
        int int41 = inflater23.inflate(byteArray39);
        inflater16.setInput(byteArray39);
        inflater10.setInput(byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = inflater0.inflate(byteArray39, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        inflater1.end();
        java.lang.Class<?> wildcardClass3 = inflater1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        int int56 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        inflater57.end();
        boolean boolean61 = inflater57.needsInput();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        inflater57.setInput(byteArray64);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray64, 4, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getRemaining();
        boolean boolean25 = inflater0.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.needsDictionary();
        int int28 = inflater26.getTotalOut();
        int int29 = inflater26.getTotalOut();
        boolean boolean30 = inflater26.needsInput();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        inflater31.reset();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        int int40 = inflater36.getTotalIn();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int50 = inflater41.inflate(byteArray49);
        int int51 = inflater36.inflate(byteArray49);
        inflater31.setInput(byteArray49);
        inflater26.setInput(byteArray49);
        inflater0.setInput(byteArray49);
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.finished();
        byte[] byteArray69 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater59.setInput(byteArray69);
        inflater55.setInput(byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray69, (int) '4', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        inflater1.end();
        int int3 = inflater1.getRemaining();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setDictionary(byteArray18, (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        boolean boolean12 = inflater8.finished();
        inflater8.end();
        inflater8.end();
        boolean boolean15 = inflater8.needsInput();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.needsDictionary();
        boolean boolean20 = inflater16.needsInput();
        int int21 = inflater16.getRemaining();
        inflater16.reset();
        boolean boolean23 = inflater16.needsDictionary();
        int int24 = inflater16.getTotalIn();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        inflater25.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        inflater32.reset();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        inflater32.setInput(byteArray49);
        int int54 = inflater25.inflate(byteArray49, 0, (int) (byte) 0);
        int int55 = inflater16.inflate(byteArray49);
        inflater8.setInput(byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray49, (int) ' ', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        int int24 = inflater6.inflate(byteArray22);
        boolean boolean25 = inflater6.finished();
        int int26 = inflater6.getTotalOut();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        long long31 = inflater27.getBytesRead();
        boolean boolean32 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        long long37 = inflater33.getBytesWritten();
        inflater33.reset();
        long long39 = inflater33.getBytesWritten();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        int int58 = inflater40.inflate(byteArray56);
        inflater33.setInput(byteArray56);
        inflater27.setInput(byteArray56);
        int int61 = inflater6.inflate(byteArray56);
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsInput();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater66.setInput(byteArray76);
        inflater62.setInput(byteArray76);
        int int79 = inflater6.inflate(byteArray76);
        inflater0.setInput(byteArray76, 0, (int) (short) 0);
        java.lang.Class<?> wildcardClass83 = byteArray76.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        inflater17.reset();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        inflater17.setInput(byteArray34);
        int int37 = inflater17.getTotalOut();
        boolean boolean38 = inflater17.needsDictionary();
        long long39 = inflater17.getBytesWritten();
        boolean boolean40 = inflater17.needsInput();
        int int41 = inflater17.getRemaining();
        boolean boolean42 = inflater17.needsInput();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.needsDictionary();
        int int45 = inflater43.getTotalOut();
        int int46 = inflater43.getTotalOut();
        boolean boolean47 = inflater43.needsInput();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        byte[] byteArray50 = new byte[] { (byte) 1 };
        int int51 = inflater48.inflate(byteArray50);
        inflater48.reset();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        byte[] byteArray55 = new byte[] { (byte) 1 };
        int int56 = inflater53.inflate(byteArray55);
        int int57 = inflater53.getTotalIn();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        byte[] byteArray60 = new byte[] { (byte) 1 };
        int int61 = inflater58.inflate(byteArray60);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int67 = inflater58.inflate(byteArray66);
        int int68 = inflater53.inflate(byteArray66);
        inflater48.setInput(byteArray66);
        inflater43.setInput(byteArray66);
        inflater17.setInput(byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray66, (-1), (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        inflater25.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        inflater25.setInput(byteArray42);
        inflater0.setInput(byteArray42, 1, (int) (byte) 1);
        java.lang.Class<?> wildcardClass48 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        inflater0.reset();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        inflater31.reset();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        long long40 = inflater36.getBytesWritten();
        inflater36.reset();
        long long42 = inflater36.getBytesWritten();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.needsDictionary();
        boolean boolean47 = inflater43.needsInput();
        int int48 = inflater43.getRemaining();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.finished();
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater49.setInput(byteArray59);
        int int61 = inflater43.inflate(byteArray59);
        inflater36.setInput(byteArray59);
        inflater31.setInput(byteArray59);
        int int64 = inflater28.inflate(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        boolean boolean25 = inflater21.needsInput();
        int int26 = inflater21.getRemaining();
        inflater21.reset();
        boolean boolean28 = inflater21.needsDictionary();
        int int29 = inflater21.getTotalIn();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        boolean boolean34 = inflater30.needsInput();
        int int35 = inflater30.getRemaining();
        inflater30.reset();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.needsDictionary();
        boolean boolean41 = inflater37.needsInput();
        int int42 = inflater37.getRemaining();
        inflater37.reset();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.finished();
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater44.setInput(byteArray54);
        inflater37.setInput(byteArray54);
        int int59 = inflater30.inflate(byteArray54, 0, (int) (byte) 0);
        int int60 = inflater21.inflate(byteArray54);
        int int61 = inflater0.inflate(byteArray54);
        java.lang.Class<?> wildcardClass62 = byteArray54.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalIn();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        boolean boolean7 = inflater0.needsInput();
        byte[] byteArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray8, (int) (short) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsDictionary();
        boolean boolean5 = inflater0.finished();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        boolean boolean8 = inflater6.needsInput();
        boolean boolean9 = inflater6.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsDictionary();
        long long14 = inflater10.getBytesRead();
        boolean boolean15 = inflater10.needsDictionary();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        long long20 = inflater16.getBytesWritten();
        inflater16.reset();
        long long22 = inflater16.getBytesWritten();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        boolean boolean27 = inflater23.needsInput();
        int int28 = inflater23.getRemaining();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.finished();
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater29.setInput(byteArray39);
        int int41 = inflater23.inflate(byteArray39);
        inflater16.setInput(byteArray39);
        inflater10.setInput(byteArray39);
        int int44 = inflater6.inflate(byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray39, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        boolean boolean18 = inflater0.finished();
        boolean boolean19 = inflater0.finished();
        long long20 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.finished();
        int int25 = inflater21.getAdler();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        inflater26.end();
        boolean boolean30 = inflater26.needsInput();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        inflater26.setInput(byteArray33);
        int int36 = inflater21.inflate(byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray33, 0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        long long10 = inflater6.getBytesWritten();
        inflater6.reset();
        long long12 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        inflater6.setInput(byteArray29);
        inflater0.setInput(byteArray29);
        int int34 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        boolean boolean39 = inflater35.finished();
        int int40 = inflater35.getRemaining();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        inflater41.reset();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        byte[] byteArray48 = new byte[] { (byte) 1 };
        int int49 = inflater46.inflate(byteArray48);
        int int50 = inflater46.getTotalIn();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        byte[] byteArray53 = new byte[] { (byte) 1 };
        int int54 = inflater51.inflate(byteArray53);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int60 = inflater51.inflate(byteArray59);
        int int61 = inflater46.inflate(byteArray59);
        inflater41.setInput(byteArray59);
        inflater35.setInput(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = inflater0.inflate(byteArray59, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.finished();
        java.lang.Class<?> wildcardClass6 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getRemaining();
        int int7 = inflater0.getAdler();
        byte[] byteArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray8, 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        int int41 = inflater0.getTotalIn();
        boolean boolean42 = inflater0.finished();
        inflater0.reset();
        long long44 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.needsDictionary();
        boolean boolean49 = inflater45.needsInput();
        int int50 = inflater45.getRemaining();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater51.setInput(byteArray61);
        int int63 = inflater45.inflate(byteArray61);
        boolean boolean64 = inflater45.finished();
        int int65 = inflater45.getAdler();
        boolean boolean66 = inflater45.finished();
        int int67 = inflater45.getAdler();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.needsDictionary();
        boolean boolean72 = inflater68.needsInput();
        int int73 = inflater68.getRemaining();
        inflater68.reset();
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        boolean boolean76 = inflater75.finished();
        int int77 = inflater75.getRemaining();
        boolean boolean78 = inflater75.finished();
        byte[] byteArray85 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater75.setInput(byteArray85);
        inflater68.setInput(byteArray85);
        int int88 = inflater45.inflate(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        int int24 = inflater1.getTotalIn();
        int int25 = inflater1.getRemaining();
        long long26 = inflater1.getBytesRead();
        boolean boolean27 = inflater1.finished();
        boolean boolean28 = inflater1.needsInput();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        int int47 = inflater29.inflate(byteArray45);
        boolean boolean48 = inflater29.finished();
        int int49 = inflater29.getAdler();
        boolean boolean50 = inflater29.finished();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.needsDictionary();
        long long55 = inflater51.getBytesRead();
        boolean boolean56 = inflater51.needsDictionary();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        long long61 = inflater57.getBytesWritten();
        inflater57.reset();
        long long63 = inflater57.getBytesWritten();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.needsDictionary();
        boolean boolean68 = inflater64.needsInput();
        int int69 = inflater64.getRemaining();
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        boolean boolean71 = inflater70.finished();
        int int72 = inflater70.getRemaining();
        boolean boolean73 = inflater70.finished();
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater70.setInput(byteArray80);
        int int82 = inflater64.inflate(byteArray80);
        inflater57.setInput(byteArray80);
        inflater51.setInput(byteArray80);
        inflater29.setInput(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setDictionary(byteArray80, (int) (short) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.needsInput();
        boolean boolean11 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        long long16 = inflater12.getBytesRead();
        boolean boolean17 = inflater12.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        long long22 = inflater18.getBytesWritten();
        inflater18.reset();
        long long24 = inflater18.getBytesWritten();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        int int43 = inflater25.inflate(byteArray41);
        inflater18.setInput(byteArray41);
        int int45 = inflater12.inflate(byteArray41);
        inflater0.setInput(byteArray41, 0, (int) (byte) 0);
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.finished();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsInput();
        inflater0.reset();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsInput();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        inflater9.setInput(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray23, (int) (short) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        int int5 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        int int10 = inflater6.getAdler();
        boolean boolean11 = inflater6.finished();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        inflater12.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        long long21 = inflater17.getBytesWritten();
        inflater17.reset();
        long long23 = inflater17.getBytesWritten();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getRemaining();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        int int42 = inflater24.inflate(byteArray40);
        inflater17.setInput(byteArray40);
        inflater12.setInput(byteArray40);
        inflater6.setInput(byteArray40, (int) (byte) 0, 1);
        int int48 = inflater6.getTotalIn();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.needsDictionary();
        int int51 = inflater49.getTotalOut();
        int int52 = inflater49.getTotalOut();
        boolean boolean53 = inflater49.needsInput();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        inflater54.reset();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        int int63 = inflater59.getTotalIn();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int73 = inflater64.inflate(byteArray72);
        int int74 = inflater59.inflate(byteArray72);
        inflater54.setInput(byteArray72);
        inflater49.setInput(byteArray72);
        inflater6.setInput(byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater8.setInput(byteArray25);
        int int30 = inflater0.inflate(byteArray25, 1, (int) (short) 1);
        int int31 = inflater0.getTotalIn();
        byte[] byteArray32 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getRemaining();
        long long23 = inflater0.getBytesWritten();
        boolean boolean24 = inflater0.needsDictionary();
        inflater0.end();
        java.lang.Class<?> wildcardClass26 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.finished();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        int int15 = inflater0.inflate(byteArray13);
        int int16 = inflater0.getTotalOut();
        int int17 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        long long23 = inflater18.getBytesWritten();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater(true);
        int int26 = inflater25.getRemaining();
        long long27 = inflater25.getBytesRead();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        inflater28.end();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        inflater28.setInput(byteArray42);
        inflater25.setInput(byteArray42, (int) (byte) 1, (int) (short) 1);
        int int48 = inflater18.inflate(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray42, (int) (byte) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        int int18 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsDictionary();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        long long10 = inflater6.getBytesWritten();
        int int11 = inflater6.getRemaining();
        int int12 = inflater6.getTotalOut();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        int int16 = inflater13.getTotalOut();
        inflater13.reset();
        boolean boolean18 = inflater13.needsInput();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsDictionary();
        long long23 = inflater19.getBytesRead();
        boolean boolean24 = inflater19.needsDictionary();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        long long29 = inflater25.getBytesWritten();
        inflater25.reset();
        long long31 = inflater25.getBytesWritten();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater38.setInput(byteArray48);
        int int50 = inflater32.inflate(byteArray48);
        inflater25.setInput(byteArray48);
        inflater19.setInput(byteArray48);
        int int53 = inflater13.inflate(byteArray48);
        int int56 = inflater6.inflate(byteArray48, (int) (byte) 1, 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray48, (int) '#', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        int int8 = inflater1.inflate(byteArray6);
        int int9 = inflater1.getAdler();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        int int15 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        long long20 = inflater16.getBytesRead();
        boolean boolean21 = inflater16.finished();
        long long22 = inflater16.getBytesRead();
        boolean boolean23 = inflater16.needsDictionary();
        boolean boolean24 = inflater16.needsDictionary();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.needsDictionary();
        int int27 = inflater25.getTotalOut();
        int int28 = inflater25.getTotalOut();
        boolean boolean29 = inflater25.needsInput();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        inflater30.reset();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        int int39 = inflater35.getTotalIn();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int49 = inflater40.inflate(byteArray48);
        int int50 = inflater35.inflate(byteArray48);
        inflater30.setInput(byteArray48);
        inflater25.setInput(byteArray48);
        int int53 = inflater16.inflate(byteArray48);
        inflater10.setInput(byteArray48);
        inflater1.setDictionary(byteArray48);
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.finished();
        long long60 = inflater56.getBytesRead();
        boolean boolean61 = inflater56.finished();
        long long62 = inflater56.getBytesRead();
        boolean boolean63 = inflater56.needsDictionary();
        boolean boolean64 = inflater56.needsDictionary();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.needsDictionary();
        int int67 = inflater65.getTotalOut();
        int int68 = inflater65.getTotalOut();
        boolean boolean69 = inflater65.needsInput();
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        byte[] byteArray72 = new byte[] { (byte) 1 };
        int int73 = inflater70.inflate(byteArray72);
        inflater70.reset();
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        byte[] byteArray77 = new byte[] { (byte) 1 };
        int int78 = inflater75.inflate(byteArray77);
        int int79 = inflater75.getTotalIn();
        java.util.zip.Inflater inflater80 = new java.util.zip.Inflater();
        byte[] byteArray82 = new byte[] { (byte) 1 };
        int int83 = inflater80.inflate(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int89 = inflater80.inflate(byteArray88);
        int int90 = inflater75.inflate(byteArray88);
        inflater70.setInput(byteArray88);
        inflater65.setInput(byteArray88);
        int int93 = inflater56.inflate(byteArray88);
        int int94 = inflater1.inflate(byteArray88);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        inflater0.setInput(byteArray19);
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getAdler();
        boolean boolean25 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater(true);
        inflater27.end();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        inflater29.reset();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater36.setInput(byteArray46);
        inflater29.setInput(byteArray46);
        inflater27.setInput(byteArray46);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray46, 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsInput();
        boolean boolean2 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater3 = new java.util.zip.Inflater();
        boolean boolean4 = inflater3.finished();
        int int5 = inflater3.getRemaining();
        boolean boolean6 = inflater3.finished();
        long long7 = inflater3.getBytesRead();
        boolean boolean8 = inflater3.finished();
        long long9 = inflater3.getBytesRead();
        boolean boolean10 = inflater3.needsDictionary();
        boolean boolean11 = inflater3.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.needsDictionary();
        int int14 = inflater12.getTotalOut();
        int int15 = inflater12.getTotalOut();
        boolean boolean16 = inflater12.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        inflater17.reset();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        int int26 = inflater22.getTotalIn();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int36 = inflater27.inflate(byteArray35);
        int int37 = inflater22.inflate(byteArray35);
        inflater17.setInput(byteArray35);
        inflater12.setInput(byteArray35);
        int int40 = inflater3.inflate(byteArray35);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        boolean boolean18 = inflater0.finished();
        boolean boolean19 = inflater0.finished();
        long long20 = inflater0.getBytesRead();
        boolean boolean21 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass22 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getAdler();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        long long11 = inflater7.getBytesRead();
        boolean boolean12 = inflater7.needsInput();
        int int13 = inflater7.getTotalOut();
        long long14 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        int int21 = inflater17.getTotalIn();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        inflater22.end();
        boolean boolean26 = inflater22.needsInput();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        inflater22.setInput(byteArray29);
        inflater17.setInput(byteArray29);
        inflater15.setInput(byteArray29);
        int int34 = inflater7.inflate(byteArray29);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = inflater0.inflate(byteArray29, (int) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsInput();
        byte[] byteArray22 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int25 = inflater0.inflate(byteArray22, 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        int int4 = inflater0.getRemaining();
        int int5 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        inflater0.end();
        int int23 = inflater0.getRemaining();
        byte[] byteArray24 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray24, (int) 'a', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        long long11 = inflater7.getBytesRead();
        inflater7.reset();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        boolean boolean18 = inflater13.needsDictionary();
        boolean boolean19 = inflater13.needsDictionary();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        int int32 = inflater13.inflate(byteArray30);
        int int33 = inflater7.inflate(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = inflater0.inflate(byteArray30, (int) (byte) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        inflater6.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater6.setInput(byteArray34);
        inflater0.setInput(byteArray34, (int) (byte) 0, 1);
        int int42 = inflater0.getTotalIn();
        java.lang.Class<?> wildcardClass43 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getTotalOut();
        int int7 = inflater0.getTotalIn();
        long long8 = inflater0.getBytesRead();
        java.lang.Class<?> wildcardClass9 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        long long56 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.needsDictionary();
        boolean boolean61 = inflater57.needsInput();
        int int62 = inflater57.getRemaining();
        inflater57.reset();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.needsDictionary();
        boolean boolean68 = inflater64.needsInput();
        int int69 = inflater64.getRemaining();
        inflater64.reset();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        boolean boolean72 = inflater71.finished();
        int int73 = inflater71.getRemaining();
        boolean boolean74 = inflater71.finished();
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater71.setInput(byteArray81);
        inflater64.setInput(byteArray81);
        int int86 = inflater57.inflate(byteArray81, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = inflater0.inflate(byteArray81, (int) (byte) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalIn();
        long long10 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        int int15 = inflater11.getAdler();
        int int16 = inflater11.getAdler();
        int int17 = inflater11.getAdler();
        int int18 = inflater11.getTotalOut();
        inflater11.reset();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.needsDictionary();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        int int27 = inflater22.getRemaining();
        inflater22.reset();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.finished();
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater29.setInput(byteArray39);
        inflater22.setInput(byteArray39);
        inflater20.setInput(byteArray39);
        inflater11.setInput(byteArray39, (int) (byte) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = inflater0.inflate(byteArray39, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        inflater1.end();
        java.util.zip.Inflater inflater3 = new java.util.zip.Inflater();
        boolean boolean4 = inflater3.finished();
        int int5 = inflater3.getRemaining();
        boolean boolean6 = inflater3.needsDictionary();
        boolean boolean7 = inflater3.needsInput();
        int int8 = inflater3.getRemaining();
        inflater3.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.finished();
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater10.setInput(byteArray20);
        inflater3.setInput(byteArray20);
        inflater1.setInput(byteArray20);
        java.lang.Class<?> wildcardClass24 = inflater1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        int int22 = inflater18.getAdler();
        int int23 = inflater18.getAdler();
        int int24 = inflater18.getAdler();
        int int25 = inflater18.getTotalOut();
        inflater18.reset();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        inflater29.reset();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater36.setInput(byteArray46);
        inflater29.setInput(byteArray46);
        inflater27.setInput(byteArray46);
        inflater18.setInput(byteArray46, (int) (byte) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = inflater0.inflate(byteArray46, (int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesRead();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.finished();
        long long9 = inflater5.getBytesRead();
        int int10 = inflater5.getTotalOut();
        int int11 = inflater5.getAdler();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater(true);
        int int14 = inflater13.getRemaining();
        long long15 = inflater13.getBytesRead();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        int int20 = inflater13.inflate(byteArray18);
        int int23 = inflater5.inflate(byteArray18, (int) (short) 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray18, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        inflater0.reset();
        inflater0.end();
        boolean boolean4 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        inflater0.end();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        int int4 = inflater0.getRemaining();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        int int10 = inflater5.getRemaining();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater11.setInput(byteArray21);
        int int23 = inflater5.inflate(byteArray21);
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater28.setInput(byteArray38);
        inflater24.setInput(byteArray38);
        inflater5.setInput(byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray38, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        long long26 = inflater22.getBytesRead();
        boolean boolean27 = inflater22.needsDictionary();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        long long32 = inflater28.getBytesWritten();
        inflater28.reset();
        long long34 = inflater28.getBytesWritten();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        boolean boolean39 = inflater35.needsInput();
        int int40 = inflater35.getRemaining();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.finished();
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater41.setInput(byteArray51);
        int int53 = inflater35.inflate(byteArray51);
        inflater28.setInput(byteArray51);
        inflater22.setInput(byteArray51);
        inflater0.setInput(byteArray51);
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        int int61 = inflater57.getTotalIn();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int71 = inflater62.inflate(byteArray70);
        int int72 = inflater57.inflate(byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            int int73 = inflater0.inflate(byteArray70);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        int int7 = inflater0.getRemaining();
        boolean boolean8 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        inflater5.end();
        boolean boolean9 = inflater5.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        inflater5.setInput(byteArray12);
        inflater0.setInput(byteArray12);
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        int int20 = inflater16.getTotalIn();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int30 = inflater21.inflate(byteArray29);
        int int31 = inflater16.inflate(byteArray29);
        int int32 = inflater16.getTotalOut();
        int int33 = inflater16.getTotalOut();
        long long34 = inflater16.getBytesRead();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        long long39 = inflater35.getBytesRead();
        boolean boolean40 = inflater35.finished();
        long long41 = inflater35.getBytesRead();
        boolean boolean42 = inflater35.needsDictionary();
        boolean boolean43 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.needsDictionary();
        int int46 = inflater44.getTotalOut();
        int int47 = inflater44.getTotalOut();
        boolean boolean48 = inflater44.needsInput();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        inflater49.reset();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        int int58 = inflater54.getTotalIn();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int68 = inflater59.inflate(byteArray67);
        int int69 = inflater54.inflate(byteArray67);
        inflater49.setInput(byteArray67);
        inflater44.setInput(byteArray67);
        int int72 = inflater35.inflate(byteArray67);
        inflater16.setInput(byteArray67);
        inflater0.setInput(byteArray67);
        int int75 = inflater0.getRemaining();
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsDictionary();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        long long10 = inflater6.getBytesWritten();
        inflater6.reset();
        long long12 = inflater6.getBytesWritten();
        int int13 = inflater6.getTotalIn();
        boolean boolean14 = inflater6.needsDictionary();
        int int15 = inflater6.getTotalIn();
        int int16 = inflater6.getTotalIn();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        int int35 = inflater17.inflate(byteArray33);
        boolean boolean36 = inflater17.finished();
        int int37 = inflater17.getTotalOut();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        long long42 = inflater38.getBytesRead();
        boolean boolean43 = inflater38.needsDictionary();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        int int47 = inflater44.inflate(byteArray46);
        long long48 = inflater44.getBytesWritten();
        inflater44.reset();
        long long50 = inflater44.getBytesWritten();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.needsDictionary();
        boolean boolean55 = inflater51.needsInput();
        int int56 = inflater51.getRemaining();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.finished();
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater57.setInput(byteArray67);
        int int69 = inflater51.inflate(byteArray67);
        inflater44.setInput(byteArray67);
        inflater38.setInput(byteArray67);
        int int72 = inflater17.inflate(byteArray67);
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        boolean boolean74 = inflater73.finished();
        int int75 = inflater73.getRemaining();
        boolean boolean76 = inflater73.needsInput();
        java.util.zip.Inflater inflater77 = new java.util.zip.Inflater();
        boolean boolean78 = inflater77.finished();
        int int79 = inflater77.getRemaining();
        boolean boolean80 = inflater77.finished();
        byte[] byteArray87 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater77.setInput(byteArray87);
        inflater73.setInput(byteArray87);
        int int90 = inflater17.inflate(byteArray87);
        int int91 = inflater6.inflate(byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        java.lang.Class<?> wildcardClass6 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater8.setInput(byteArray25);
        int int30 = inflater0.inflate(byteArray25, 1, (int) (short) 1);
        int int31 = inflater0.getTotalIn();
        boolean boolean32 = inflater0.needsDictionary();
        int int33 = inflater0.getAdler();
        int int34 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        int int39 = inflater35.getTotalIn();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int49 = inflater40.inflate(byteArray48);
        int int50 = inflater35.inflate(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray48, (int) '4', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        int int5 = inflater1.getRemaining();
        boolean boolean6 = inflater1.needsInput();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.needsDictionary();
        int int9 = inflater7.getTotalOut();
        int int10 = inflater7.getTotalOut();
        int int11 = inflater7.getAdler();
        boolean boolean12 = inflater7.needsDictionary();
        int int13 = inflater7.getTotalOut();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        boolean boolean18 = inflater14.finished();
        inflater14.end();
        inflater14.end();
        boolean boolean21 = inflater14.needsInput();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        int int27 = inflater22.getRemaining();
        inflater22.reset();
        boolean boolean29 = inflater22.needsDictionary();
        int int30 = inflater22.getTotalIn();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.needsDictionary();
        boolean boolean35 = inflater31.needsInput();
        int int36 = inflater31.getRemaining();
        inflater31.reset();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        boolean boolean42 = inflater38.needsInput();
        int int43 = inflater38.getRemaining();
        inflater38.reset();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater45.setInput(byteArray55);
        inflater38.setInput(byteArray55);
        int int60 = inflater31.inflate(byteArray55, 0, (int) (byte) 0);
        int int61 = inflater22.inflate(byteArray55);
        inflater14.setInput(byteArray55);
        int int65 = inflater7.inflate(byteArray55, 0, (int) (byte) 0);
        inflater1.setDictionary(byteArray55);
        java.lang.Class<?> wildcardClass67 = inflater1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        boolean boolean27 = inflater8.finished();
        int int28 = inflater8.getTotalOut();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        long long33 = inflater29.getBytesRead();
        boolean boolean34 = inflater29.needsDictionary();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        long long39 = inflater35.getBytesWritten();
        inflater35.reset();
        long long41 = inflater35.getBytesWritten();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        boolean boolean46 = inflater42.needsInput();
        int int47 = inflater42.getRemaining();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater48.setInput(byteArray58);
        int int60 = inflater42.inflate(byteArray58);
        inflater35.setInput(byteArray58);
        inflater29.setInput(byteArray58);
        int int63 = inflater8.inflate(byteArray58);
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.needsInput();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.finished();
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater68.setInput(byteArray78);
        inflater64.setInput(byteArray78);
        int int81 = inflater8.inflate(byteArray78);
        inflater0.setInput(byteArray78);
        java.lang.Class<?> wildcardClass83 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        long long11 = inflater7.getBytesWritten();
        inflater7.reset();
        int int13 = inflater7.getRemaining();
        boolean boolean14 = inflater7.needsDictionary();
        boolean boolean15 = inflater7.needsInput();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        long long20 = inflater16.getBytesRead();
        boolean boolean21 = inflater16.finished();
        long long22 = inflater16.getBytesRead();
        boolean boolean23 = inflater16.needsDictionary();
        boolean boolean24 = inflater16.needsDictionary();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.needsDictionary();
        int int27 = inflater25.getTotalOut();
        int int28 = inflater25.getTotalOut();
        boolean boolean29 = inflater25.needsInput();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        inflater30.reset();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        int int39 = inflater35.getTotalIn();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int49 = inflater40.inflate(byteArray48);
        int int50 = inflater35.inflate(byteArray48);
        inflater30.setInput(byteArray48);
        inflater25.setInput(byteArray48);
        int int53 = inflater16.inflate(byteArray48);
        inflater7.setInput(byteArray48, (int) (short) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray48, (-1), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        inflater8.reset();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        long long17 = inflater13.getBytesWritten();
        inflater13.reset();
        long long19 = inflater13.getBytesWritten();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        boolean boolean24 = inflater20.needsInput();
        int int25 = inflater20.getRemaining();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.finished();
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater26.setInput(byteArray36);
        int int38 = inflater20.inflate(byteArray36);
        inflater13.setInput(byteArray36);
        inflater8.setInput(byteArray36);
        int int41 = inflater5.inflate(byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray36, (int) (byte) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        boolean boolean3 = inflater2.finished();
        int int4 = inflater2.getRemaining();
        boolean boolean5 = inflater2.needsDictionary();
        boolean boolean6 = inflater2.needsInput();
        int int7 = inflater2.getRemaining();
        inflater2.reset();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater2.setInput(byteArray19);
        inflater0.setInput(byteArray19);
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        boolean boolean27 = inflater23.needsInput();
        int int28 = inflater23.getRemaining();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.finished();
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater29.setInput(byteArray39);
        int int41 = inflater23.inflate(byteArray39);
        boolean boolean42 = inflater23.finished();
        int int43 = inflater23.getAdler();
        boolean boolean44 = inflater23.finished();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.needsDictionary();
        long long49 = inflater45.getBytesRead();
        boolean boolean50 = inflater45.needsDictionary();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        byte[] byteArray53 = new byte[] { (byte) 1 };
        int int54 = inflater51.inflate(byteArray53);
        long long55 = inflater51.getBytesWritten();
        inflater51.reset();
        long long57 = inflater51.getBytesWritten();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.needsDictionary();
        boolean boolean62 = inflater58.needsInput();
        int int63 = inflater58.getRemaining();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.finished();
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater64.setInput(byteArray74);
        int int76 = inflater58.inflate(byteArray74);
        inflater51.setInput(byteArray74);
        inflater45.setInput(byteArray74);
        inflater23.setInput(byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray74, (int) (byte) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        boolean boolean22 = inflater0.needsInput();
        boolean boolean23 = inflater0.needsInput();
        long long24 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater(false);
        int int27 = inflater26.getTotalIn();
        boolean boolean28 = inflater26.finished();
        boolean boolean29 = inflater26.needsDictionary();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        long long34 = inflater30.getBytesRead();
        inflater30.reset();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.needsDictionary();
        boolean boolean40 = inflater36.needsInput();
        boolean boolean41 = inflater36.needsDictionary();
        boolean boolean42 = inflater36.needsDictionary();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater43.setInput(byteArray53);
        int int55 = inflater36.inflate(byteArray53);
        int int56 = inflater30.inflate(byteArray53);
        inflater26.setInput(byteArray53, (int) (byte) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = inflater0.inflate(byteArray53);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        boolean boolean26 = inflater7.finished();
        int int27 = inflater7.getTotalIn();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        inflater28.reset();
        boolean boolean35 = inflater28.needsDictionary();
        int int36 = inflater28.getTotalIn();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.needsDictionary();
        boolean boolean41 = inflater37.needsInput();
        int int42 = inflater37.getRemaining();
        inflater37.reset();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        boolean boolean48 = inflater44.needsInput();
        int int49 = inflater44.getRemaining();
        inflater44.reset();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater51.setInput(byteArray61);
        inflater44.setInput(byteArray61);
        int int66 = inflater37.inflate(byteArray61, 0, (int) (byte) 0);
        int int67 = inflater28.inflate(byteArray61);
        int int68 = inflater7.inflate(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray61, (int) (short) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        inflater0.setInput(byteArray19);
        long long23 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        long long28 = inflater24.getBytesRead();
        int int29 = inflater24.getTotalOut();
        int int30 = inflater24.getAdler();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater(true);
        int int33 = inflater32.getRemaining();
        long long34 = inflater32.getBytesRead();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        int int39 = inflater32.inflate(byteArray37);
        int int42 = inflater24.inflate(byteArray37, (int) (short) 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray37, (int) (byte) 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        boolean boolean26 = inflater7.finished();
        int int27 = inflater7.getAdler();
        boolean boolean28 = inflater7.finished();
        int int29 = inflater7.getAdler();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        boolean boolean34 = inflater30.needsInput();
        int int35 = inflater30.getRemaining();
        inflater30.reset();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        inflater30.setInput(byteArray47);
        int int50 = inflater7.inflate(byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray47, 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        inflater0.end();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.finished();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getTotalIn();
        long long13 = inflater8.getBytesWritten();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        int int32 = inflater14.inflate(byteArray30);
        boolean boolean33 = inflater14.finished();
        int int34 = inflater14.getTotalOut();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        long long39 = inflater35.getBytesRead();
        boolean boolean40 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        long long45 = inflater41.getBytesWritten();
        inflater41.reset();
        long long47 = inflater41.getBytesWritten();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.needsDictionary();
        boolean boolean52 = inflater48.needsInput();
        int int53 = inflater48.getRemaining();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.finished();
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater54.setInput(byteArray64);
        int int66 = inflater48.inflate(byteArray64);
        inflater41.setInput(byteArray64);
        inflater35.setInput(byteArray64);
        int int69 = inflater14.inflate(byteArray64);
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        boolean boolean71 = inflater70.finished();
        int int72 = inflater70.getRemaining();
        boolean boolean73 = inflater70.needsInput();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        int int76 = inflater74.getRemaining();
        boolean boolean77 = inflater74.finished();
        byte[] byteArray84 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater74.setInput(byteArray84);
        inflater70.setInput(byteArray84);
        int int87 = inflater14.inflate(byteArray84);
        inflater8.setInput(byteArray84, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = inflater0.inflate(byteArray84, (int) (short) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        boolean boolean8 = inflater0.needsDictionary();
        long long9 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getAdler();
        boolean boolean15 = inflater10.finished();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        inflater16.reset();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        long long25 = inflater21.getBytesWritten();
        inflater21.reset();
        long long27 = inflater21.getBytesWritten();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater34.setInput(byteArray44);
        int int46 = inflater28.inflate(byteArray44);
        inflater21.setInput(byteArray44);
        inflater16.setInput(byteArray44);
        inflater10.setInput(byteArray44, (int) (byte) 0, 1);
        int int52 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.needsDictionary();
        int int55 = inflater53.getTotalOut();
        int int56 = inflater53.getTotalOut();
        boolean boolean57 = inflater53.needsInput();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        byte[] byteArray60 = new byte[] { (byte) 1 };
        int int61 = inflater58.inflate(byteArray60);
        inflater58.reset();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        byte[] byteArray65 = new byte[] { (byte) 1 };
        int int66 = inflater63.inflate(byteArray65);
        int int67 = inflater63.getTotalIn();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        byte[] byteArray70 = new byte[] { (byte) 1 };
        int int71 = inflater68.inflate(byteArray70);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int77 = inflater68.inflate(byteArray76);
        int int78 = inflater63.inflate(byteArray76);
        inflater58.setInput(byteArray76);
        inflater53.setInput(byteArray76);
        inflater10.setInput(byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = inflater0.inflate(byteArray76, (int) (byte) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        long long10 = inflater5.getBytesWritten();
        int int11 = inflater5.getTotalIn();
        int int12 = inflater5.getTotalOut();
        int int13 = inflater5.getTotalOut();
        boolean boolean14 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        int int19 = inflater15.getAdler();
        boolean boolean20 = inflater15.finished();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        inflater21.reset();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        long long30 = inflater26.getBytesWritten();
        inflater26.reset();
        long long32 = inflater26.getBytesWritten();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        int int51 = inflater33.inflate(byteArray49);
        inflater26.setInput(byteArray49);
        inflater21.setInput(byteArray49);
        inflater15.setInput(byteArray49, (int) (byte) 0, 1);
        int int57 = inflater5.inflate(byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray49, 4, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        long long18 = inflater0.getBytesRead();
        long long19 = inflater0.getBytesWritten();
        byte[] byteArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray20, (int) (byte) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int38 = inflater29.inflate(byteArray37);
        int int39 = inflater24.inflate(byteArray37);
        int int40 = inflater0.inflate(byteArray37);
        java.lang.Class<?> wildcardClass41 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        inflater0.reset();
        long long28 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        int int32 = inflater29.getTotalOut();
        inflater29.reset();
        boolean boolean34 = inflater29.needsInput();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        long long39 = inflater35.getBytesRead();
        boolean boolean40 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        long long45 = inflater41.getBytesWritten();
        inflater41.reset();
        long long47 = inflater41.getBytesWritten();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.needsDictionary();
        boolean boolean52 = inflater48.needsInput();
        int int53 = inflater48.getRemaining();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.finished();
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater54.setInput(byteArray64);
        int int66 = inflater48.inflate(byteArray64);
        inflater41.setInput(byteArray64);
        inflater35.setInput(byteArray64);
        int int69 = inflater29.inflate(byteArray64);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray64, (int) (short) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        long long21 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.needsDictionary();
        int int24 = inflater22.getTotalOut();
        int int25 = inflater22.getTotalOut();
        long long26 = inflater22.getBytesWritten();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        long long31 = inflater27.getBytesRead();
        boolean boolean32 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        long long37 = inflater33.getBytesWritten();
        inflater33.reset();
        long long39 = inflater33.getBytesWritten();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        int int58 = inflater40.inflate(byteArray56);
        inflater33.setInput(byteArray56);
        inflater27.setInput(byteArray56);
        int int61 = inflater22.inflate(byteArray56);
        int int62 = inflater22.getRemaining();
        int int63 = inflater22.getTotalIn();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        inflater64.reset();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        byte[] byteArray71 = new byte[] { (byte) 1 };
        int int72 = inflater69.inflate(byteArray71);
        long long73 = inflater69.getBytesWritten();
        inflater69.reset();
        long long75 = inflater69.getBytesWritten();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        boolean boolean77 = inflater76.finished();
        int int78 = inflater76.getRemaining();
        boolean boolean79 = inflater76.needsDictionary();
        boolean boolean80 = inflater76.needsInput();
        int int81 = inflater76.getRemaining();
        java.util.zip.Inflater inflater82 = new java.util.zip.Inflater();
        boolean boolean83 = inflater82.finished();
        int int84 = inflater82.getRemaining();
        boolean boolean85 = inflater82.finished();
        byte[] byteArray92 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater82.setInput(byteArray92);
        int int94 = inflater76.inflate(byteArray92);
        inflater69.setInput(byteArray92);
        inflater64.setInput(byteArray92);
        int int97 = inflater22.inflate(byteArray92);
        inflater0.setInput(byteArray92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        boolean boolean27 = inflater23.needsInput();
        int int28 = inflater23.getRemaining();
        inflater23.reset();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        inflater23.setInput(byteArray40);
        int int43 = inflater0.inflate(byteArray40);
        long long44 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getAdler();
        java.lang.Class<?> wildcardClass6 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        long long10 = inflater6.getBytesRead();
        inflater6.reset();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        boolean boolean16 = inflater12.needsInput();
        boolean boolean17 = inflater12.needsDictionary();
        boolean boolean18 = inflater12.needsDictionary();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater12.inflate(byteArray29);
        int int32 = inflater6.inflate(byteArray29);
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        int int37 = inflater33.getAdler();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsInput();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.finished();
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater42.setInput(byteArray52);
        inflater38.setInput(byteArray52);
        inflater33.setInput(byteArray52);
        inflater6.setInput(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = inflater0.inflate(byteArray52, (int) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getTotalOut();
        byte[] byteArray13 = new byte[] { (byte) 0, (byte) 100, (byte) 100, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray13, (int) (short) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 100, 100, 0]");
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        int int10 = inflater5.getRemaining();
        inflater5.reset();
        boolean boolean12 = inflater5.needsDictionary();
        int int13 = inflater5.getTotalOut();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        boolean boolean18 = inflater14.finished();
        inflater14.end();
        inflater14.end();
        boolean boolean21 = inflater14.needsInput();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        int int27 = inflater22.getRemaining();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater28.setInput(byteArray38);
        int int40 = inflater22.inflate(byteArray38);
        boolean boolean41 = inflater22.finished();
        int int42 = inflater22.getAdler();
        boolean boolean43 = inflater22.finished();
        int int44 = inflater22.getAdler();
        boolean boolean45 = inflater22.needsInput();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        byte[] byteArray48 = new byte[] { (byte) 1 };
        int int49 = inflater46.inflate(byteArray48);
        int int50 = inflater46.getTotalIn();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        byte[] byteArray53 = new byte[] { (byte) 1 };
        int int54 = inflater51.inflate(byteArray53);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int60 = inflater51.inflate(byteArray59);
        int int61 = inflater46.inflate(byteArray59);
        int int62 = inflater22.inflate(byteArray59);
        inflater14.setInput(byteArray59, (int) (byte) 0, (int) (short) 1);
        int int66 = inflater5.inflate(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        inflater0.reset();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        inflater6.reset();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        inflater13.reset();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        inflater13.setInput(byteArray30);
        int int35 = inflater6.inflate(byteArray30, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray30, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        long long5 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        inflater6.reset();
        boolean boolean13 = inflater6.needsDictionary();
        int int14 = inflater6.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.needsDictionary();
        boolean boolean19 = inflater15.needsInput();
        int int20 = inflater15.getRemaining();
        inflater15.reset();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        int int27 = inflater22.getRemaining();
        inflater22.reset();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.finished();
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater29.setInput(byteArray39);
        inflater22.setInput(byteArray39);
        int int44 = inflater15.inflate(byteArray39, 0, (int) (byte) 0);
        int int45 = inflater6.inflate(byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        boolean boolean24 = inflater0.needsDictionary();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.needsInput();
        boolean boolean11 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        long long16 = inflater12.getBytesRead();
        boolean boolean17 = inflater12.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        long long22 = inflater18.getBytesWritten();
        inflater18.reset();
        long long24 = inflater18.getBytesWritten();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        int int43 = inflater25.inflate(byteArray41);
        inflater18.setInput(byteArray41);
        int int45 = inflater12.inflate(byteArray41);
        inflater0.setInput(byteArray41, 0, (int) (byte) 0);
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        long long53 = inflater49.getBytesWritten();
        inflater49.end();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        inflater55.end();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.finished();
        byte[] byteArray69 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater59.setInput(byteArray69);
        inflater55.setInput(byteArray69);
        inflater49.setInput(byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        boolean boolean22 = inflater0.needsInput();
        inflater0.reset();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        long long28 = inflater24.getBytesRead();
        inflater24.reset();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        boolean boolean34 = inflater30.needsInput();
        boolean boolean35 = inflater30.needsDictionary();
        boolean boolean36 = inflater30.needsDictionary();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        int int49 = inflater30.inflate(byteArray47);
        int int50 = inflater24.inflate(byteArray47);
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        byte[] byteArray53 = new byte[] { (byte) 1 };
        int int54 = inflater51.inflate(byteArray53);
        int int55 = inflater51.getAdler();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsInput();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        inflater56.setInput(byteArray70);
        inflater51.setInput(byteArray70);
        inflater24.setInput(byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        boolean boolean9 = inflater0.finished();
        long long10 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.needsDictionary();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        inflater13.reset();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        inflater13.setInput(byteArray30);
        inflater11.setInput(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray30, (int) '4', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater8.setInput(byteArray25);
        int int30 = inflater0.inflate(byteArray25, 1, (int) (short) 1);
        int int31 = inflater0.getTotalIn();
        boolean boolean32 = inflater0.needsDictionary();
        int int33 = inflater0.getAdler();
        int int34 = inflater0.getTotalOut();
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        inflater0.reset();
        java.lang.Class<?> wildcardClass23 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getRemaining();
        int int7 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater(true);
        int int11 = inflater10.getRemaining();
        long long12 = inflater10.getBytesRead();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        int int17 = inflater10.inflate(byteArray15);
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int27 = inflater18.inflate(byteArray26);
        boolean boolean28 = inflater18.needsInput();
        boolean boolean29 = inflater18.needsDictionary();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        long long34 = inflater30.getBytesRead();
        boolean boolean35 = inflater30.needsInput();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        long long40 = inflater36.getBytesWritten();
        inflater36.reset();
        long long42 = inflater36.getBytesWritten();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.needsDictionary();
        boolean boolean47 = inflater43.needsInput();
        int int48 = inflater43.getRemaining();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.finished();
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater49.setInput(byteArray59);
        int int61 = inflater43.inflate(byteArray59);
        inflater36.setInput(byteArray59);
        int int63 = inflater30.inflate(byteArray59);
        inflater18.setInput(byteArray59, 0, (int) (byte) 0);
        inflater10.setDictionary(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalIn();
        int int6 = inflater0.getRemaining();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.finished();
        boolean boolean25 = inflater0.needsInput();
        int int26 = inflater0.getRemaining();
        boolean boolean27 = inflater0.finished();
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        inflater0.end();
        boolean boolean8 = inflater0.needsInput();
        java.lang.Class<?> wildcardClass9 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        boolean boolean27 = inflater23.needsInput();
        int int28 = inflater23.getRemaining();
        inflater23.reset();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        inflater23.setInput(byteArray40);
        int int43 = inflater23.getTotalOut();
        boolean boolean44 = inflater23.needsDictionary();
        long long45 = inflater23.getBytesWritten();
        int int46 = inflater23.getRemaining();
        int int47 = inflater23.getRemaining();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.needsDictionary();
        boolean boolean52 = inflater48.needsInput();
        int int53 = inflater48.getRemaining();
        inflater48.reset();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater55.setInput(byteArray65);
        inflater48.setInput(byteArray65);
        inflater23.setInput(byteArray65, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        boolean boolean7 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalIn();
        int int7 = inflater0.getTotalOut();
        int int8 = inflater0.getTotalOut();
        boolean boolean9 = inflater0.needsDictionary();
        int int10 = inflater0.getTotalOut();
        long long11 = inflater0.getBytesRead();
        java.lang.Class<?> wildcardClass12 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        boolean boolean3 = inflater0.finished();
        inflater0.reset();
        long long5 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        long long10 = inflater6.getBytesRead();
        long long11 = inflater6.getBytesWritten();
        boolean boolean12 = inflater6.finished();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        boolean boolean17 = inflater13.finished();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        inflater19.reset();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int38 = inflater29.inflate(byteArray37);
        int int39 = inflater24.inflate(byteArray37);
        inflater19.setInput(byteArray37);
        inflater13.setInput(byteArray37);
        int int42 = inflater6.inflate(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = inflater0.inflate(byteArray37, 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        int int10 = inflater5.getRemaining();
        int int11 = inflater5.getTotalOut();
        boolean boolean12 = inflater5.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater(true);
        int int15 = inflater14.getRemaining();
        long long16 = inflater14.getBytesRead();
        int int17 = inflater14.getTotalIn();
        int int18 = inflater14.getRemaining();
        boolean boolean19 = inflater14.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.needsDictionary();
        int int22 = inflater20.getTotalOut();
        int int23 = inflater20.getTotalOut();
        int int24 = inflater20.getAdler();
        boolean boolean25 = inflater20.needsDictionary();
        int int26 = inflater20.getTotalOut();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        boolean boolean31 = inflater27.finished();
        inflater27.end();
        inflater27.end();
        boolean boolean34 = inflater27.needsInput();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        boolean boolean39 = inflater35.needsInput();
        int int40 = inflater35.getRemaining();
        inflater35.reset();
        boolean boolean42 = inflater35.needsDictionary();
        int int43 = inflater35.getTotalIn();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        boolean boolean48 = inflater44.needsInput();
        int int49 = inflater44.getRemaining();
        inflater44.reset();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.needsDictionary();
        boolean boolean55 = inflater51.needsInput();
        int int56 = inflater51.getRemaining();
        inflater51.reset();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.finished();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater58.setInput(byteArray68);
        inflater51.setInput(byteArray68);
        int int73 = inflater44.inflate(byteArray68, 0, (int) (byte) 0);
        int int74 = inflater35.inflate(byteArray68);
        inflater27.setInput(byteArray68);
        int int78 = inflater20.inflate(byteArray68, 0, (int) (byte) 0);
        inflater14.setDictionary(byteArray68);
        int int80 = inflater5.inflate(byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        int int5 = inflater2.inflate(byteArray4);
        inflater2.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        long long11 = inflater7.getBytesWritten();
        inflater7.reset();
        long long13 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        int int32 = inflater14.inflate(byteArray30);
        inflater7.setInput(byteArray30);
        inflater2.setInput(byteArray30);
        inflater1.setDictionary(byteArray30);
        boolean boolean36 = inflater1.finished();
        long long37 = inflater1.getBytesWritten();
        byte[] byteArray38 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setDictionary(byteArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.needsDictionary();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        inflater0.reset();
        int int3 = inflater0.getAdler();
        boolean boolean4 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getAdler();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        inflater10.setInput(byteArray24);
        inflater5.setInput(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray24, (int) (byte) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getRemaining();
        boolean boolean18 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        int int23 = inflater19.getTotalIn();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        inflater24.end();
        boolean boolean28 = inflater24.needsInput();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        inflater24.setInput(byteArray31);
        inflater19.setInput(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = inflater0.inflate(byteArray31, 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.needsInput();
        boolean boolean11 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        long long16 = inflater12.getBytesRead();
        boolean boolean17 = inflater12.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        long long22 = inflater18.getBytesWritten();
        inflater18.reset();
        long long24 = inflater18.getBytesWritten();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        int int43 = inflater25.inflate(byteArray41);
        inflater18.setInput(byteArray41);
        int int45 = inflater12.inflate(byteArray41);
        inflater0.setInput(byteArray41, 0, (int) (byte) 0);
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.needsDictionary();
        boolean boolean53 = inflater49.needsInput();
        int int54 = inflater49.getRemaining();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater55.setInput(byteArray65);
        int int67 = inflater49.inflate(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = inflater0.inflate(byteArray65, 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        int int10 = inflater0.getTotalIn();
        int int11 = inflater0.getRemaining();
        int int12 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        int int17 = inflater13.getTotalIn();
        int int18 = inflater13.getTotalOut();
        int int19 = inflater13.getAdler();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        int int24 = inflater20.getTotalIn();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        inflater25.end();
        boolean boolean29 = inflater25.needsInput();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        inflater25.setInput(byteArray32);
        inflater20.setInput(byteArray32);
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        int int40 = inflater36.getTotalIn();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int50 = inflater41.inflate(byteArray49);
        int int51 = inflater36.inflate(byteArray49);
        int int52 = inflater36.getTotalOut();
        int int53 = inflater36.getTotalOut();
        long long54 = inflater36.getBytesRead();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        long long59 = inflater55.getBytesRead();
        boolean boolean60 = inflater55.finished();
        long long61 = inflater55.getBytesRead();
        boolean boolean62 = inflater55.needsDictionary();
        boolean boolean63 = inflater55.needsDictionary();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.needsDictionary();
        int int66 = inflater64.getTotalOut();
        int int67 = inflater64.getTotalOut();
        boolean boolean68 = inflater64.needsInput();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        byte[] byteArray71 = new byte[] { (byte) 1 };
        int int72 = inflater69.inflate(byteArray71);
        inflater69.reset();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        byte[] byteArray76 = new byte[] { (byte) 1 };
        int int77 = inflater74.inflate(byteArray76);
        int int78 = inflater74.getTotalIn();
        java.util.zip.Inflater inflater79 = new java.util.zip.Inflater();
        byte[] byteArray81 = new byte[] { (byte) 1 };
        int int82 = inflater79.inflate(byteArray81);
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int88 = inflater79.inflate(byteArray87);
        int int89 = inflater74.inflate(byteArray87);
        inflater69.setInput(byteArray87);
        inflater64.setInput(byteArray87);
        int int92 = inflater55.inflate(byteArray87);
        inflater36.setInput(byteArray87);
        inflater20.setInput(byteArray87);
        int int95 = inflater13.inflate(byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getTotalOut();
        int int41 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        inflater42.reset();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        int int51 = inflater47.getTotalIn();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        int int55 = inflater52.inflate(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int61 = inflater52.inflate(byteArray60);
        int int62 = inflater47.inflate(byteArray60);
        inflater42.setInput(byteArray60);
        int int64 = inflater0.inflate(byteArray60);
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.finished();
        int int67 = inflater65.getRemaining();
        boolean boolean68 = inflater65.finished();
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater65.setInput(byteArray75);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray75, 4, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        int int13 = inflater10.getTotalOut();
        inflater10.reset();
        boolean boolean15 = inflater10.needsInput();
        int int16 = inflater10.getRemaining();
        boolean boolean17 = inflater10.finished();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        boolean boolean22 = inflater18.finished();
        inflater18.end();
        inflater18.end();
        boolean boolean25 = inflater18.needsDictionary();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsInput();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        inflater26.setInput(byteArray40);
        inflater18.setInput(byteArray40);
        int int46 = inflater10.inflate(byteArray40, 6, (int) (short) 0);
        int int47 = inflater7.inflate(byteArray40);
        inflater0.setInput(byteArray40, (int) (byte) 0, (int) (byte) 1);
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        byte[] byteArray53 = new byte[] { (byte) 1 };
        int int54 = inflater51.inflate(byteArray53);
        boolean boolean55 = inflater51.finished();
        inflater51.end();
        inflater51.end();
        boolean boolean58 = inflater51.needsDictionary();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.needsInput();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.finished();
        int int65 = inflater63.getRemaining();
        boolean boolean66 = inflater63.finished();
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater63.setInput(byteArray73);
        inflater59.setInput(byteArray73);
        inflater51.setInput(byteArray73);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray73, (int) '4', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        inflater0.reset();
        boolean boolean2 = inflater0.needsInput();
        int int3 = inflater0.getTotalIn();
        java.lang.Class<?> wildcardClass4 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        long long23 = inflater0.getBytesWritten();
        int int24 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        long long29 = inflater25.getBytesRead();
        boolean boolean30 = inflater25.needsInput();
        int int31 = inflater25.getTotalOut();
        long long32 = inflater25.getBytesRead();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        inflater33.reset();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        inflater33.setInput(byteArray50);
        int int55 = inflater25.inflate(byteArray50, 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = inflater0.inflate(byteArray50, (int) (byte) 1, 1);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: incorrect header check");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsInput();
        boolean boolean8 = inflater0.needsInput();
        long long9 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsDictionary();
        long long14 = inflater10.getBytesRead();
        boolean boolean15 = inflater10.needsInput();
        int int16 = inflater10.getTotalOut();
        long long17 = inflater10.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        int int24 = inflater20.getTotalIn();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        inflater25.end();
        boolean boolean29 = inflater25.needsInput();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        inflater25.setInput(byteArray32);
        inflater20.setInput(byteArray32);
        inflater18.setInput(byteArray32);
        int int37 = inflater10.inflate(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray32, (int) 'a', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsInput();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        inflater56.setInput(byteArray70);
        int int73 = inflater0.inflate(byteArray70);
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        byte[] byteArray78 = new byte[] { (byte) 1 };
        int int79 = inflater76.inflate(byteArray78);
        int int80 = inflater76.getTotalIn();
        java.util.zip.Inflater inflater81 = new java.util.zip.Inflater();
        boolean boolean82 = inflater81.finished();
        int int83 = inflater81.getRemaining();
        inflater81.end();
        boolean boolean85 = inflater81.needsInput();
        java.util.zip.Inflater inflater86 = new java.util.zip.Inflater();
        byte[] byteArray88 = new byte[] { (byte) 1 };
        int int89 = inflater86.inflate(byteArray88);
        inflater81.setInput(byteArray88);
        inflater76.setInput(byteArray88);
        inflater74.setInput(byteArray88);
        inflater0.setInput(byteArray88);
        java.lang.Class<?> wildcardClass94 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        long long9 = inflater5.getBytesWritten();
        inflater5.reset();
        long long11 = inflater5.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        boolean boolean16 = inflater12.needsInput();
        int int17 = inflater12.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        int int30 = inflater12.inflate(byteArray28);
        inflater5.setInput(byteArray28);
        inflater0.setInput(byteArray28);
        int int33 = inflater0.getTotalIn();
        java.lang.Class<?> wildcardClass34 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        boolean boolean10 = inflater6.finished();
        inflater6.end();
        inflater6.end();
        boolean boolean13 = inflater6.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        int int32 = inflater14.inflate(byteArray30);
        boolean boolean33 = inflater14.finished();
        int int34 = inflater14.getAdler();
        boolean boolean35 = inflater14.finished();
        int int36 = inflater14.getAdler();
        boolean boolean37 = inflater14.needsInput();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        int int42 = inflater38.getTotalIn();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        byte[] byteArray45 = new byte[] { (byte) 1 };
        int int46 = inflater43.inflate(byteArray45);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int52 = inflater43.inflate(byteArray51);
        int int53 = inflater38.inflate(byteArray51);
        int int54 = inflater14.inflate(byteArray51);
        inflater6.setInput(byteArray51, (int) (byte) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray51, 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        int int6 = inflater0.getAdler();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        int int11 = inflater7.getTotalIn();
        long long12 = inflater7.getBytesWritten();
        int int13 = inflater7.getAdler();
        int int14 = inflater7.getAdler();
        long long15 = inflater7.getBytesRead();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int25 = inflater16.inflate(byteArray24);
        boolean boolean26 = inflater16.needsInput();
        boolean boolean27 = inflater16.needsDictionary();
        int int28 = inflater16.getTotalOut();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        int int47 = inflater29.inflate(byteArray45);
        boolean boolean48 = inflater29.finished();
        int int49 = inflater29.getTotalOut();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.needsDictionary();
        long long54 = inflater50.getBytesRead();
        boolean boolean55 = inflater50.needsDictionary();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        byte[] byteArray58 = new byte[] { (byte) 1 };
        int int59 = inflater56.inflate(byteArray58);
        long long60 = inflater56.getBytesWritten();
        inflater56.reset();
        long long62 = inflater56.getBytesWritten();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.finished();
        int int65 = inflater63.getRemaining();
        boolean boolean66 = inflater63.needsDictionary();
        boolean boolean67 = inflater63.needsInput();
        int int68 = inflater63.getRemaining();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.finished();
        byte[] byteArray79 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater69.setInput(byteArray79);
        int int81 = inflater63.inflate(byteArray79);
        inflater56.setInput(byteArray79);
        inflater50.setInput(byteArray79);
        int int84 = inflater29.inflate(byteArray79);
        int int85 = inflater16.inflate(byteArray79);
        inflater7.setInput(byteArray79, 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray79, 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        long long9 = inflater5.getBytesWritten();
        inflater5.reset();
        long long11 = inflater5.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        boolean boolean16 = inflater12.needsInput();
        int int17 = inflater12.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        int int30 = inflater12.inflate(byteArray28);
        inflater5.setInput(byteArray28);
        inflater0.setInput(byteArray28);
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        inflater33.setInput(byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = inflater0.inflate(byteArray47, (int) (short) -1, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        boolean boolean27 = inflater0.needsInput();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        inflater28.reset();
        boolean boolean35 = inflater28.needsDictionary();
        int int36 = inflater28.getTotalIn();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.needsDictionary();
        boolean boolean41 = inflater37.needsInput();
        int int42 = inflater37.getRemaining();
        inflater37.reset();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        boolean boolean48 = inflater44.needsInput();
        int int49 = inflater44.getRemaining();
        inflater44.reset();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater51.setInput(byteArray61);
        inflater44.setInput(byteArray61);
        int int66 = inflater37.inflate(byteArray61, 0, (int) (byte) 0);
        int int67 = inflater28.inflate(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray61, (int) (byte) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        long long11 = inflater7.getBytesRead();
        boolean boolean12 = inflater7.needsInput();
        int int13 = inflater7.getTotalOut();
        long long14 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        boolean boolean19 = inflater15.finished();
        int int20 = inflater15.getRemaining();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        int int27 = inflater23.getTotalIn();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        inflater28.end();
        boolean boolean32 = inflater28.needsInput();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        inflater28.setInput(byteArray35);
        inflater23.setInput(byteArray35);
        inflater21.setInput(byteArray35);
        int int40 = inflater15.inflate(byteArray35);
        inflater7.setInput(byteArray35);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray35, 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getAdler();
        boolean boolean4 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass5 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getTotalIn();
        long long29 = inflater24.getBytesWritten();
        long long30 = inflater24.getBytesRead();
        int int31 = inflater24.getAdler();
        int int32 = inflater24.getTotalOut();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        inflater33.end();
        boolean boolean37 = inflater33.needsInput();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        long long42 = inflater38.getBytesRead();
        boolean boolean43 = inflater38.needsInput();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        int int47 = inflater44.inflate(byteArray46);
        long long48 = inflater44.getBytesWritten();
        inflater44.reset();
        long long50 = inflater44.getBytesWritten();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.needsDictionary();
        boolean boolean55 = inflater51.needsInput();
        int int56 = inflater51.getRemaining();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.finished();
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater57.setInput(byteArray67);
        int int69 = inflater51.inflate(byteArray67);
        inflater44.setInput(byteArray67);
        int int71 = inflater38.inflate(byteArray67);
        inflater33.setInput(byteArray67);
        inflater24.setInput(byteArray67);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        int int5 = inflater0.getRemaining();
        int int6 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater(true);
        int int9 = inflater8.getRemaining();
        long long10 = inflater8.getBytesRead();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        inflater11.end();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater11.setInput(byteArray25);
        inflater8.setInput(byteArray25, (int) (byte) 1, (int) (short) 1);
        int int31 = inflater8.getTotalIn();
        boolean boolean32 = inflater8.finished();
        boolean boolean33 = inflater8.needsDictionary();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        long long38 = inflater34.getBytesRead();
        boolean boolean39 = inflater34.finished();
        long long40 = inflater34.getBytesRead();
        boolean boolean41 = inflater34.needsDictionary();
        boolean boolean42 = inflater34.needsDictionary();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.needsDictionary();
        int int45 = inflater43.getTotalOut();
        int int46 = inflater43.getTotalOut();
        boolean boolean47 = inflater43.needsInput();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        byte[] byteArray50 = new byte[] { (byte) 1 };
        int int51 = inflater48.inflate(byteArray50);
        inflater48.reset();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        byte[] byteArray55 = new byte[] { (byte) 1 };
        int int56 = inflater53.inflate(byteArray55);
        int int57 = inflater53.getTotalIn();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        byte[] byteArray60 = new byte[] { (byte) 1 };
        int int61 = inflater58.inflate(byteArray60);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int67 = inflater58.inflate(byteArray66);
        int int68 = inflater53.inflate(byteArray66);
        inflater48.setInput(byteArray66);
        inflater43.setInput(byteArray66);
        int int71 = inflater34.inflate(byteArray66);
        inflater8.setDictionary(byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray66, 4, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        int int10 = inflater0.getTotalIn();
        int int11 = inflater0.getTotalOut();
        java.lang.Class<?> wildcardClass12 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        inflater7.end();
        boolean boolean11 = inflater7.needsInput();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        inflater7.setInput(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray14, 6, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsDictionary();
        long long24 = inflater0.getBytesRead();
        int int25 = inflater0.getTotalIn();
        java.lang.Class<?> wildcardClass26 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        int int19 = inflater0.inflate(byteArray17);
        int int20 = inflater0.getTotalOut();
        int int21 = inflater0.getTotalOut();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        inflater6.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater6.setInput(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = inflater0.inflate(byteArray34, 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsInput();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        inflater56.setInput(byteArray70);
        int int73 = inflater0.inflate(byteArray70);
        int int74 = inflater0.getRemaining();
        long long75 = inflater0.getBytesRead();
        long long76 = inflater0.getBytesWritten();
        java.lang.Class<?> wildcardClass77 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        int int8 = inflater1.inflate(byteArray6);
        boolean boolean9 = inflater1.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.finished();
        long long14 = inflater10.getBytesRead();
        inflater10.reset();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.needsDictionary();
        boolean boolean20 = inflater16.needsInput();
        boolean boolean21 = inflater16.needsDictionary();
        boolean boolean22 = inflater16.needsDictionary();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        int int35 = inflater16.inflate(byteArray33);
        int int36 = inflater10.inflate(byteArray33);
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        int int41 = inflater37.getAdler();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsInput();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        inflater42.setInput(byteArray56);
        inflater37.setInput(byteArray56);
        inflater10.setInput(byteArray56);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray56, 4, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        long long23 = inflater0.getBytesWritten();
        int int24 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater(true);
        int int27 = inflater26.getRemaining();
        long long28 = inflater26.getBytesRead();
        boolean boolean29 = inflater26.needsInput();
        inflater26.reset();
        long long31 = inflater26.getBytesRead();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        boolean boolean36 = inflater32.finished();
        inflater32.end();
        inflater32.end();
        boolean boolean39 = inflater32.needsInput();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        int int58 = inflater40.inflate(byteArray56);
        boolean boolean59 = inflater40.finished();
        int int60 = inflater40.getAdler();
        boolean boolean61 = inflater40.finished();
        int int62 = inflater40.getAdler();
        boolean boolean63 = inflater40.needsInput();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        int int68 = inflater64.getTotalIn();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        byte[] byteArray71 = new byte[] { (byte) 1 };
        int int72 = inflater69.inflate(byteArray71);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int78 = inflater69.inflate(byteArray77);
        int int79 = inflater64.inflate(byteArray77);
        int int80 = inflater40.inflate(byteArray77);
        inflater32.setInput(byteArray77, (int) (byte) 0, (int) (short) 1);
        inflater26.setDictionary(byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = inflater0.inflate(byteArray77);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: incorrect header check");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getTotalIn();
        java.lang.Class<?> wildcardClass6 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        boolean boolean3 = inflater0.finished();
        inflater0.reset();
        long long5 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater(true);
        int int8 = inflater7.getRemaining();
        long long9 = inflater7.getBytesRead();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater7.inflate(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        long long23 = inflater0.getBytesWritten();
        java.lang.Class<?> wildcardClass24 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        long long12 = inflater8.getBytesRead();
        int int13 = inflater8.getTotalOut();
        int int14 = inflater8.getAdler();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater(true);
        int int17 = inflater16.getRemaining();
        long long18 = inflater16.getBytesRead();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        int int23 = inflater16.inflate(byteArray21);
        int int26 = inflater8.inflate(byteArray21, (int) (short) 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = inflater0.inflate(byteArray21, (int) (byte) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater(true);
        int int10 = inflater9.getRemaining();
        long long11 = inflater9.getBytesRead();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        int int16 = inflater9.inflate(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        int int8 = inflater1.inflate(byteArray6);
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        boolean boolean13 = inflater9.finished();
        inflater9.end();
        inflater9.end();
        boolean boolean16 = inflater9.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        inflater17.reset();
        boolean boolean24 = inflater17.needsDictionary();
        int int25 = inflater17.getTotalIn();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        boolean boolean30 = inflater26.needsInput();
        int int31 = inflater26.getRemaining();
        inflater26.reset();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        inflater33.reset();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        inflater33.setInput(byteArray50);
        int int55 = inflater26.inflate(byteArray50, 0, (int) (byte) 0);
        int int56 = inflater17.inflate(byteArray50);
        inflater9.setInput(byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray50, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesWritten();
        boolean boolean8 = inflater0.finished();
        java.lang.Class<?> wildcardClass9 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1 };
        inflater0.setInput(byteArray6);
        inflater0.end();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        inflater9.reset();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.needsDictionary();
        boolean boolean20 = inflater16.needsInput();
        int int21 = inflater16.getRemaining();
        inflater16.reset();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        inflater16.setInput(byteArray33);
        int int38 = inflater9.inflate(byteArray33, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray33, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        int int10 = inflater5.getRemaining();
        inflater5.reset();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        inflater5.setInput(byteArray22);
        inflater0.setInput(byteArray22);
        java.lang.Class<?> wildcardClass26 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        long long10 = inflater6.getBytesWritten();
        inflater6.reset();
        long long12 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        inflater6.setInput(byteArray29);
        int int33 = inflater0.inflate(byteArray29);
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        long long38 = inflater34.getBytesWritten();
        inflater34.reset();
        long long40 = inflater34.getBytesWritten();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.needsDictionary();
        boolean boolean45 = inflater41.needsInput();
        int int46 = inflater41.getRemaining();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.finished();
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater47.setInput(byteArray57);
        int int59 = inflater41.inflate(byteArray57);
        inflater34.setInput(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray57, (int) (byte) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalOut();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.finished();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getAdler();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater17.setInput(byteArray27);
        inflater13.setInput(byteArray27);
        inflater8.setInput(byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = inflater0.inflate(byteArray27, (int) (byte) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        inflater0.end();
        inflater0.end();
        boolean boolean24 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater8.setInput(byteArray25);
        int int30 = inflater0.inflate(byteArray25, 1, (int) (short) 1);
        int int31 = inflater0.getTotalIn();
        boolean boolean32 = inflater0.needsDictionary();
        int int33 = inflater0.getAdler();
        inflater0.reset();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        boolean boolean39 = inflater35.needsInput();
        int int40 = inflater35.getRemaining();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.finished();
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater41.setInput(byteArray51);
        int int53 = inflater35.inflate(byteArray51);
        boolean boolean54 = inflater35.finished();
        int int55 = inflater35.getTotalIn();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsDictionary();
        boolean boolean60 = inflater56.needsInput();
        int int61 = inflater56.getRemaining();
        inflater56.reset();
        boolean boolean63 = inflater56.needsDictionary();
        int int64 = inflater56.getTotalIn();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.finished();
        int int67 = inflater65.getRemaining();
        boolean boolean68 = inflater65.needsDictionary();
        boolean boolean69 = inflater65.needsInput();
        int int70 = inflater65.getRemaining();
        inflater65.reset();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        boolean boolean73 = inflater72.finished();
        int int74 = inflater72.getRemaining();
        boolean boolean75 = inflater72.needsDictionary();
        boolean boolean76 = inflater72.needsInput();
        int int77 = inflater72.getRemaining();
        inflater72.reset();
        java.util.zip.Inflater inflater79 = new java.util.zip.Inflater();
        boolean boolean80 = inflater79.finished();
        int int81 = inflater79.getRemaining();
        boolean boolean82 = inflater79.finished();
        byte[] byteArray89 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater79.setInput(byteArray89);
        inflater72.setInput(byteArray89);
        int int94 = inflater65.inflate(byteArray89, 0, (int) (byte) 0);
        int int95 = inflater56.inflate(byteArray89);
        int int96 = inflater35.inflate(byteArray89);
        // The following exception was thrown during execution in test generation
        try {
            int int99 = inflater0.inflate(byteArray89, (int) (byte) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getRemaining();
        int int7 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        int int27 = inflater9.inflate(byteArray25);
        boolean boolean28 = inflater9.finished();
        int int29 = inflater9.getTotalOut();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        long long34 = inflater30.getBytesRead();
        boolean boolean35 = inflater30.needsDictionary();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        long long40 = inflater36.getBytesWritten();
        inflater36.reset();
        long long42 = inflater36.getBytesWritten();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.needsDictionary();
        boolean boolean47 = inflater43.needsInput();
        int int48 = inflater43.getRemaining();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.finished();
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater49.setInput(byteArray59);
        int int61 = inflater43.inflate(byteArray59);
        inflater36.setInput(byteArray59);
        inflater30.setInput(byteArray59);
        int int64 = inflater9.inflate(byteArray59);
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.finished();
        int int67 = inflater65.getRemaining();
        boolean boolean68 = inflater65.needsInput();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.finished();
        byte[] byteArray79 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater69.setInput(byteArray79);
        inflater65.setInput(byteArray79);
        int int82 = inflater9.inflate(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray79, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsInput();
        byte[] byteArray22 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray22, (int) '4', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        int int5 = inflater0.getRemaining();
        long long6 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        long long11 = inflater7.getBytesRead();
        inflater7.reset();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        boolean boolean18 = inflater13.needsDictionary();
        boolean boolean19 = inflater13.needsDictionary();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        int int32 = inflater13.inflate(byteArray30);
        int int33 = inflater7.inflate(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray30, 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        boolean boolean20 = inflater0.finished();
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        boolean boolean41 = inflater0.needsInput();
        java.lang.Class<?> wildcardClass42 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        inflater0.reset();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater5.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int24 = inflater15.inflate(byteArray23);
        int int25 = inflater10.inflate(byteArray23);
        inflater5.setInput(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray23, 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.needsDictionary();
        boolean boolean8 = inflater4.needsInput();
        int int9 = inflater4.getRemaining();
        inflater4.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater11.setInput(byteArray21);
        inflater4.setInput(byteArray21);
        int int24 = inflater4.getTotalOut();
        boolean boolean25 = inflater4.needsDictionary();
        long long26 = inflater4.getBytesWritten();
        int int27 = inflater4.getRemaining();
        int int28 = inflater4.getRemaining();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        boolean boolean33 = inflater29.finished();
        inflater29.end();
        inflater29.end();
        boolean boolean36 = inflater29.needsDictionary();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.needsInput();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.finished();
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater41.setInput(byteArray51);
        inflater37.setInput(byteArray51);
        inflater29.setInput(byteArray51);
        inflater4.setInput(byteArray51);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray51, 4, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getAdler();
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getRemaining();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        boolean boolean26 = inflater7.finished();
        int int27 = inflater7.getAdler();
        boolean boolean28 = inflater7.finished();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        long long33 = inflater29.getBytesRead();
        boolean boolean34 = inflater29.needsDictionary();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        long long39 = inflater35.getBytesWritten();
        inflater35.reset();
        long long41 = inflater35.getBytesWritten();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        boolean boolean46 = inflater42.needsInput();
        int int47 = inflater42.getRemaining();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater48.setInput(byteArray58);
        int int60 = inflater42.inflate(byteArray58);
        inflater35.setInput(byteArray58);
        inflater29.setInput(byteArray58);
        inflater7.setInput(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray58, 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        boolean boolean17 = inflater0.needsDictionary();
        boolean boolean18 = inflater0.finished();
        int int19 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        boolean boolean3 = inflater0.finished();
        inflater0.reset();
        long long5 = inflater0.getBytesRead();
        int int6 = inflater0.getRemaining();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        inflater7.reset();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        inflater7.setInput(byteArray24);
        int int27 = inflater7.getTotalOut();
        boolean boolean28 = inflater7.needsDictionary();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        int int47 = inflater29.inflate(byteArray45);
        boolean boolean48 = inflater29.finished();
        int int49 = inflater29.getAdler();
        boolean boolean50 = inflater29.finished();
        int int51 = inflater29.getAdler();
        boolean boolean52 = inflater29.needsInput();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        byte[] byteArray55 = new byte[] { (byte) 1 };
        int int56 = inflater53.inflate(byteArray55);
        int int57 = inflater53.getTotalIn();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        byte[] byteArray60 = new byte[] { (byte) 1 };
        int int61 = inflater58.inflate(byteArray60);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int67 = inflater58.inflate(byteArray66);
        int int68 = inflater53.inflate(byteArray66);
        int int69 = inflater29.inflate(byteArray66);
        inflater7.setInput(byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray66, (int) (short) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }
}

