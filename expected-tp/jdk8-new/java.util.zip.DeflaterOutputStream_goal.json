[
  {
    "signature": "java.util.zip.DeflaterOutputStream(java.io.OutputStream out, java.util.zip.Deflater def, int size, boolean syncFlush)",
    "name": "java.util.zip.DeflaterOutputStream",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterOutputStream",
      "name": "DeflaterOutputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterOutputStream",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.OutputStream",
          "name": "OutputStream",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "java.util.zip.Deflater",
          "name": "Deflater",
          "isArray": false
        },
        "name": "def"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "size"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "syncFlush"
      }
    ],
    "protocol": {
      "member": "java.util.zip.DeflaterOutputStream(java.io.OutputStream out, java.util.zip.Deflater def, int size, boolean syncFlush)",
      "comment": "Creates a new output stream with the specified compressor, buffer size and flush mode.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.zip.DeflaterOutputStream(java.io.OutputStream out, java.util.zip.Deflater def, int size)",
    "name": "java.util.zip.DeflaterOutputStream",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterOutputStream",
      "name": "DeflaterOutputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterOutputStream",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.OutputStream",
          "name": "OutputStream",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "java.util.zip.Deflater",
          "name": "Deflater",
          "isArray": false
        },
        "name": "def"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "size"
      }
    ],
    "protocol": {
      "member": "java.util.zip.DeflaterOutputStream(java.io.OutputStream out, java.util.zip.Deflater def, int size)",
      "comment": "Creates a new output stream with the specified compressor and buffer size. The new output stream instance is created as if by invoking the 4-argument constructor method_0",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.zip.DeflaterOutputStream(java.io.OutputStream out, java.util.zip.Deflater def, boolean syncFlush)",
    "name": "java.util.zip.DeflaterOutputStream",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterOutputStream",
      "name": "DeflaterOutputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterOutputStream",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.OutputStream",
          "name": "OutputStream",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "java.util.zip.Deflater",
          "name": "Deflater",
          "isArray": false
        },
        "name": "def"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "syncFlush"
      }
    ],
    "protocol": {
      "member": "java.util.zip.DeflaterOutputStream(java.io.OutputStream out, java.util.zip.Deflater def, boolean syncFlush)",
      "comment": "Creates a new output stream with the specified compressor, flush mode and a default buffer size.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.zip.DeflaterOutputStream(java.io.OutputStream out, java.util.zip.Deflater def)",
    "name": "java.util.zip.DeflaterOutputStream",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterOutputStream",
      "name": "DeflaterOutputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterOutputStream",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.OutputStream",
          "name": "OutputStream",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "java.util.zip.Deflater",
          "name": "Deflater",
          "isArray": false
        },
        "name": "def"
      }
    ],
    "protocol": {
      "member": "java.util.zip.DeflaterOutputStream(java.io.OutputStream out, java.util.zip.Deflater def)",
      "comment": "Creates a new output stream with the specified compressor and a default buffer size. The new output stream instance is created as if by invoking the 3-argument constructor method_0",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.zip.DeflaterOutputStream(java.io.OutputStream out, boolean syncFlush)",
    "name": "java.util.zip.DeflaterOutputStream",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterOutputStream",
      "name": "DeflaterOutputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterOutputStream",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.OutputStream",
          "name": "OutputStream",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "syncFlush"
      }
    ],
    "protocol": {
      "member": "java.util.zip.DeflaterOutputStream(java.io.OutputStream out, boolean syncFlush)",
      "comment": "Creates a new output stream with a default compressor, a default buffer size and the specified flush mode.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.zip.DeflaterOutputStream(java.io.OutputStream out)",
    "name": "java.util.zip.DeflaterOutputStream",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterOutputStream",
      "name": "DeflaterOutputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterOutputStream",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.OutputStream",
          "name": "OutputStream",
          "isArray": false
        },
        "name": "out"
      }
    ],
    "protocol": {
      "member": "java.util.zip.DeflaterOutputStream(java.io.OutputStream out)",
      "comment": "Creates a new output stream with a default compressor and buffer size. The new output stream instance is created as if by invoking the 2-argument constructor method_0",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "write(int b)",
    "name": "write",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterOutputStream",
      "name": "DeflaterOutputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterOutputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "protocol": {
      "member": "write(int b)",
      "comment": "Writes a byte to the compressed output stream. This method will block until the byte can be written.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "write(byte[] b, int off, int len)",
    "name": "write",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterOutputStream",
      "name": "DeflaterOutputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterOutputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "off"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "len"
      }
    ],
    "protocol": {
      "member": "write(byte[] b, int off, int len)",
      "comment": "Writes an array of bytes to the compressed output stream. This method will block until all the bytes are written.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "finish()",
    "name": "finish",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterOutputStream",
      "name": "DeflaterOutputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterOutputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "finish()",
      "comment": "Finishes writing compressed data to the output stream without closing the underlying stream. Use this method when applying multiple filters in succession to the same output stream. @exception IOException if an I/O error has occurred",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "close()",
    "name": "close",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterOutputStream",
      "name": "DeflaterOutputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterOutputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "close()",
      "comment": "Writes remaining compressed data to the output stream and closes the underlying stream. @exception IOException if an I/O error has occurred",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "deflate()",
    "name": "deflate",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterOutputStream",
      "name": "DeflaterOutputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterOutputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "deflate()",
      "comment": "Writes next block of compressed data to the output stream.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "flush()",
    "name": "flush",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterOutputStream",
      "name": "DeflaterOutputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterOutputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "flush()",
      "comment": "Flushes the compressed output stream. If method_0 syncFlush is true when this compressed output stream is constructed, this method first flushes the underlying compressor with the flush mode method_2 to force all pending data to be flushed out to the output stream and then flushes the output stream. Otherwise this method only flushes the output stream without flushing the compressor.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]