import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test4501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4501");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        deflater2.finish();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        deflater5.reset();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater5.setDictionary(byteArray18);
        int int21 = deflater5.getAdler();
        int int22 = deflater5.getAdler();
        deflater5.reset();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        long long26 = deflater25.getBytesWritten();
        long long27 = deflater25.getBytesWritten();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        deflater29.setDictionary(byteArray64);
        deflater25.setInput(byteArray64);
        deflater5.setInput(byteArray64);
        int int71 = deflater2.deflate(byteArray64);
        int int72 = deflater2.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 87360012 + "'", int21 == 87360012);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 87360012 + "'", int22 == 87360012);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[3, 0, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test4502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4502");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        deflater1.finish();
        deflater1.finish();
        long long10 = deflater1.getBytesWritten();
        int int11 = deflater1.getTotalOut();
        int int12 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4503");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        deflater1.finish();
        long long64 = deflater1.getBytesRead();
        int int65 = deflater1.getTotalOut();
        int int66 = deflater1.getAdler();
        java.lang.Class<?> wildcardClass67 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 118882828 + "'", int66 == 118882828);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test4504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4504");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        int int53 = deflater1.deflate(byteArray51);
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        int int58 = deflater55.getTotalIn();
        int int59 = deflater55.getTotalIn();
        int int60 = deflater55.getTotalOut();
        deflater55.finish();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater63.setInput(byteArray72);
        deflater63.finish();
        long long75 = deflater63.getBytesRead();
        deflater63.reset();
        int int77 = deflater63.getAdler();
        byte[] byteArray79 = new byte[] { (byte) 10 };
        deflater63.setDictionary(byteArray79);
        deflater55.setDictionary(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10]");
    }

    @Test
    public void test4505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4505");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        int int4 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater6.finish();
        long long18 = deflater6.getBytesRead();
        deflater6.reset();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater6.setInput(byteArray26, (int) (short) 0, (int) (short) 1);
        boolean boolean30 = deflater6.needsInput();
        deflater6.reset();
        boolean boolean32 = deflater6.needsInput();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (short) 1, false);
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater40.setInput(byteArray52);
        deflater38.setInput(byteArray52);
        int int56 = deflater35.deflate(byteArray52);
        int int57 = deflater6.deflate(byteArray52);
        int int61 = deflater1.deflate(byteArray52, 2, (int) (short) 0, 0);
        long long62 = deflater1.getBytesWritten();
        boolean boolean63 = deflater1.finished();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test4506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4506");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        long long2 = deflater1.getBytesWritten();
        deflater1.finish();
        long long4 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(126419322);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test4507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4507");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        long long16 = deflater1.getBytesWritten();
        int int17 = deflater1.getTotalIn();
        int int18 = deflater1.getTotalIn();
        int int19 = deflater1.getTotalOut();
        long long20 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test4508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4508");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesRead();
        long long3 = deflater1.getBytesRead();
        long long4 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater6.finish();
        long long18 = deflater6.getBytesRead();
        deflater6.reset();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater6.setInput(byteArray26, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray26);
        boolean boolean31 = deflater1.finished();
        boolean boolean32 = deflater1.finished();
        long long33 = deflater1.getBytesRead();
        long long34 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test4509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4509");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        long long22 = deflater1.getBytesWritten();
        deflater1.finish();
        int int24 = deflater1.getTotalOut();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test4510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4510");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        long long8 = deflater1.getBytesWritten();
        boolean boolean9 = deflater1.finished();
        deflater1.reset();
        boolean boolean11 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test4511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4511");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, false);
        deflater2.setLevel((int) (short) 0);
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        boolean boolean9 = deflater6.finished();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater11.setInput(byteArray23);
        deflater11.setLevel((int) (byte) -1);
        deflater11.finish();
        long long29 = deflater11.getBytesRead();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater31.finish();
        long long43 = deflater31.getBytesRead();
        deflater31.reset();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater31.setInput(byteArray51, (int) (short) 0, (int) (short) 1);
        deflater31.reset();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater((int) (byte) 1);
        deflater57.reset();
        int int59 = deflater57.getTotalIn();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater57.setInput(byteArray66);
        deflater57.finish();
        long long69 = deflater57.getBytesRead();
        deflater57.reset();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater57.setInput(byteArray77, (int) (short) 0, (int) (short) 1);
        int int81 = deflater31.deflate(byteArray77);
        int int85 = deflater11.deflate(byteArray77, (int) (short) 1, 3, 0);
        int int86 = deflater6.deflate(byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = deflater2.deflate(byteArray77, (int) (byte) 100, 196610);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test4512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4512");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(8, true);
        long long3 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater(0);
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((-1), true);
        long long9 = deflater8.getBytesWritten();
        deflater8.setLevel(2);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater13.finish();
        long long25 = deflater13.getBytesRead();
        deflater13.reset();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater28.setInput(byteArray48, (int) (short) 0, (int) (short) 1);
        deflater13.setDictionary(byteArray48);
        deflater8.setInput(byteArray48);
        long long54 = deflater8.getBytesRead();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        deflater56.reset();
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        int int62 = deflater60.getTotalIn();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater60.setInput(byteArray69);
        deflater56.setDictionary(byteArray69);
        deflater8.setInput(byteArray69);
        deflater5.setDictionary(byteArray69, 1, (int) (byte) 1);
        int int76 = deflater2.deflate(byteArray69);
        java.lang.Class<?> wildcardClass77 = byteArray69.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test4513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4513");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        deflater1.finish();
        long long64 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        int int69 = deflater66.getTotalIn();
        deflater66.finish();
        deflater66.reset();
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater((int) (byte) 1);
        deflater73.reset();
        int int75 = deflater73.getTotalIn();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater73.setInput(byteArray82);
        deflater66.setInput(byteArray82);
        int int85 = deflater1.deflate(byteArray82);
        int int86 = deflater1.getAdler();
        boolean boolean87 = deflater1.needsInput();
        long long88 = deflater1.getBytesRead();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[120, 63, 7, 22, 2, 12]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 6 + "'", int85 == 6);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 87360012 + "'", int86 == 87360012);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 6L + "'", long88 == 6L);
    }

    @Test
    public void test4514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4514");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        int int13 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater16.setInput(byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = deflater1.deflate(byteArray28, (int) (byte) 10, 720907, 720907);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test4515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4515");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        deflater2.finish();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        deflater5.reset();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater5.setDictionary(byteArray18);
        int int21 = deflater5.getAdler();
        int int22 = deflater5.getAdler();
        deflater5.reset();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        long long26 = deflater25.getBytesWritten();
        long long27 = deflater25.getBytesWritten();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        deflater29.setDictionary(byteArray64);
        deflater25.setInput(byteArray64);
        deflater5.setInput(byteArray64);
        int int71 = deflater2.deflate(byteArray64);
        int int72 = deflater2.getTotalIn();
        long long73 = deflater2.getBytesRead();
        boolean boolean74 = deflater2.needsInput();
        byte[] byteArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 87360012 + "'", int21 == 87360012);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 87360012 + "'", int22 == 87360012);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[3, 0, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test4516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4516");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        deflater2.finish();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        deflater5.reset();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater5.setDictionary(byteArray18);
        int int21 = deflater5.getAdler();
        int int22 = deflater5.getAdler();
        deflater5.reset();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        long long26 = deflater25.getBytesWritten();
        long long27 = deflater25.getBytesWritten();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        deflater29.setDictionary(byteArray64);
        deflater25.setInput(byteArray64);
        deflater5.setInput(byteArray64);
        int int71 = deflater2.deflate(byteArray64);
        int int72 = deflater2.getTotalIn();
        long long73 = deflater2.getBytesRead();
        boolean boolean74 = deflater2.needsInput();
        long long75 = deflater2.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 87360012 + "'", int21 == 87360012);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 87360012 + "'", int22 == 87360012);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[3, 0, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 2L + "'", long75 == 2L);
    }

    @Test
    public void test4517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4517");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater1.setInput(byteArray15);
        int int18 = deflater1.getTotalIn();
        int int19 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        int int24 = deflater21.getTotalIn();
        int int25 = deflater21.getTotalIn();
        deflater21.end();
        boolean boolean27 = deflater21.needsInput();
        deflater21.finish();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        int int33 = deflater30.getTotalIn();
        int int34 = deflater30.getTotalIn();
        deflater30.setLevel((int) (short) 1);
        deflater30.setLevel((int) (byte) 1);
        boolean boolean39 = deflater30.finished();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (short) -1, false);
        int int43 = deflater42.getTotalIn();
        int int44 = deflater42.getTotalIn();
        boolean boolean45 = deflater42.finished();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        long long48 = deflater47.getBytesWritten();
        int int49 = deflater47.getTotalIn();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater66.finish();
        long long78 = deflater66.getBytesRead();
        deflater66.reset();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater66.setInput(byteArray86, (int) (short) 0, (int) (short) 1);
        deflater51.setDictionary(byteArray86);
        int int91 = deflater47.deflate(byteArray86);
        deflater42.setDictionary(byteArray86);
        int int93 = deflater30.deflate(byteArray86);
        deflater21.setInput(byteArray86);
        int int95 = deflater1.deflate(byteArray86);
        deflater1.setLevel(6);
        long long98 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 6 + "'", int95 == 6);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 6L + "'", long98 == 6L);
    }

    @Test
    public void test4518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4518");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesRead();
        long long3 = deflater1.getBytesRead();
        boolean boolean4 = deflater1.finished();
        long long5 = deflater1.getBytesWritten();
        long long6 = deflater1.getBytesWritten();
        boolean boolean7 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test4519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4519");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        deflater1.finish();
        deflater1.finish();
        long long10 = deflater1.getBytesWritten();
        int int11 = deflater1.getTotalOut();
        deflater1.end();
        boolean boolean13 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test4520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4520");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        deflater1.setLevel((int) (short) 0);
        int int9 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (short) -1, false);
        int int13 = deflater12.getTotalIn();
        int int14 = deflater12.getTotalIn();
        boolean boolean15 = deflater12.finished();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        long long18 = deflater17.getBytesWritten();
        int int19 = deflater17.getTotalIn();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        deflater21.setDictionary(byteArray56);
        int int61 = deflater17.deflate(byteArray56);
        deflater12.setDictionary(byteArray56);
        int int63 = deflater1.deflate(byteArray56);
        deflater1.finish();
        deflater1.finish();
        deflater1.reset();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test4521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4521");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater5.setInput(byteArray25, (int) (short) 0, (int) (short) 1);
        deflater5.reset();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean32 = deflater31.finished();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater48.finish();
        long long60 = deflater48.getBytesRead();
        deflater48.reset();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater63.setInput(byteArray72);
        deflater63.finish();
        long long75 = deflater63.getBytesRead();
        deflater63.reset();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater63.setInput(byteArray83, (int) (short) 0, (int) (short) 1);
        deflater48.setDictionary(byteArray83);
        int int88 = deflater34.deflate(byteArray83);
        int int91 = deflater31.deflate(byteArray83, (int) (byte) 1, 2);
        int int92 = deflater5.deflate(byteArray83);
        deflater1.setDictionary(byteArray83, 0, 1);
        long long96 = deflater1.getBytesRead();
        int int97 = deflater1.getTotalOut();
        int int98 = deflater1.getTotalOut();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 6 + "'", int88 == 6);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test4522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4522");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        boolean boolean8 = deflater1.needsInput();
        int int9 = deflater1.getTotalIn();
        int int10 = deflater1.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(720907);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test4523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4523");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.needsInput();
        long long14 = deflater1.getBytesWritten();
        deflater1.finish();
        long long16 = deflater1.getBytesRead();
        int int17 = deflater1.getAdler();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        long long20 = deflater19.getBytesWritten();
        deflater19.setLevel((int) (short) 0);
        deflater19.setLevel(2);
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater26.finish();
        long long38 = deflater26.getBytesRead();
        deflater26.reset();
        int int40 = deflater26.getAdler();
        boolean boolean41 = deflater26.needsInput();
        int int42 = deflater26.getTotalIn();
        int int43 = deflater26.getTotalIn();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        int int62 = deflater60.getTotalIn();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater60.setInput(byteArray69);
        deflater60.finish();
        long long72 = deflater60.getBytesRead();
        deflater60.reset();
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater60.setInput(byteArray80, (int) (short) 0, (int) (short) 1);
        int int84 = deflater45.deflate(byteArray80);
        deflater26.setDictionary(byteArray80);
        deflater19.setInput(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray80, 118882828, 16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test4524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4524");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(9);
        java.util.zip.Deflater deflater3 = new java.util.zip.Deflater((int) (byte) 1);
        long long4 = deflater3.getBytesWritten();
        long long5 = deflater3.getBytesWritten();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean8 = deflater7.finished();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.finish();
        long long22 = deflater10.getBytesRead();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater39.finish();
        long long51 = deflater39.getBytesRead();
        deflater39.reset();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater39.setInput(byteArray59, (int) (short) 0, (int) (short) 1);
        deflater24.setDictionary(byteArray59);
        int int64 = deflater10.deflate(byteArray59);
        int int67 = deflater7.deflate(byteArray59, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        deflater69.finish();
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        int int76 = deflater74.getTotalIn();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater74.setInput(byteArray83);
        deflater69.setInput(byteArray83);
        deflater7.setInput(byteArray83);
        int int87 = deflater3.deflate(byteArray83);
        int int88 = deflater1.deflate(byteArray83);
        boolean boolean89 = deflater1.finished();
        int int90 = deflater1.getTotalIn();
        deflater1.setStrategy(2);
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test4525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4525");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        int int8 = deflater1.getAdler();
        boolean boolean9 = deflater1.needsInput();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        long long12 = deflater11.getBytesWritten();
        int int13 = deflater11.getTotalOut();
        long long14 = deflater11.getBytesWritten();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        deflater16.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater16.setDictionary(byteArray29);
        deflater11.setDictionary(byteArray29);
        int int35 = deflater1.deflate(byteArray29, 2, (int) (byte) 1);
        deflater1.setLevel(3);
        int int38 = deflater1.getAdler();
        long long39 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test4526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4526");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        int int2 = deflater1.getAdler();
        boolean boolean3 = deflater1.needsInput();
        boolean boolean4 = deflater1.finished();
        long long5 = deflater1.getBytesRead();
        boolean boolean6 = deflater1.finished();
        int int7 = deflater1.getAdler();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        int int12 = deflater9.getTotalIn();
        int int13 = deflater9.getTotalIn();
        int int14 = deflater9.getTotalOut();
        deflater9.finish();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        int int31 = deflater17.getAdler();
        byte[] byteArray33 = new byte[] { (byte) 10 };
        deflater17.setDictionary(byteArray33);
        deflater9.setDictionary(byteArray33);
        long long36 = deflater9.getBytesRead();
        deflater9.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (short) -1, false);
        int int41 = deflater40.getTotalIn();
        int int42 = deflater40.getTotalIn();
        boolean boolean43 = deflater40.finished();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        long long46 = deflater45.getBytesWritten();
        int int47 = deflater45.getTotalIn();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        int int66 = deflater64.getTotalIn();
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater64.setInput(byteArray73);
        deflater64.finish();
        long long76 = deflater64.getBytesRead();
        deflater64.reset();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater64.setInput(byteArray84, (int) (short) 0, (int) (short) 1);
        deflater49.setDictionary(byteArray84);
        int int89 = deflater45.deflate(byteArray84);
        deflater40.setDictionary(byteArray84);
        int int91 = deflater9.deflate(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray84, 9, 87360012);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test4527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4527");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) -1, true);
        long long3 = deflater2.getBytesRead();
        long long4 = deflater2.getBytesRead();
        long long5 = deflater2.getBytesWritten();
        int int6 = deflater2.getTotalOut();
        int int7 = deflater2.getAdler();
        boolean boolean8 = deflater2.needsInput();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.reset();
        boolean boolean22 = deflater10.needsInput();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        int int35 = deflater10.deflate(byteArray33);
        deflater2.setInput(byteArray33);
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((-1), true);
        deflater39.finish();
        deflater39.finish();
        boolean boolean42 = deflater39.finished();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (short) -1, false);
        long long46 = deflater45.getBytesWritten();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater45.setDictionary(byteArray57);
        deflater39.setInput(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = deflater2.deflate(byteArray57, 0, 12, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test4528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4528");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        boolean boolean25 = deflater1.needsInput();
        deflater1.reset();
        boolean boolean27 = deflater1.needsInput();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (short) 1, false);
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater35.setInput(byteArray47);
        deflater33.setInput(byteArray47);
        int int51 = deflater30.deflate(byteArray47);
        int int52 = deflater1.deflate(byteArray47);
        boolean boolean53 = deflater1.finished();
        int int54 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test4529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4529");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) 0, true);
        boolean boolean3 = deflater2.needsInput();
        long long4 = deflater2.getBytesWritten();
        deflater2.setLevel(9);
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        int int11 = deflater8.getTotalIn();
        int int12 = deflater8.getTotalIn();
        long long13 = deflater8.getBytesWritten();
        int int14 = deflater8.getTotalOut();
        boolean boolean15 = deflater8.needsInput();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        long long18 = deflater17.getBytesWritten();
        int int19 = deflater17.getTotalIn();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        deflater21.setDictionary(byteArray56);
        int int61 = deflater17.deflate(byteArray56);
        deflater8.setInput(byteArray56);
        deflater2.setDictionary(byteArray56);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test4530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4530");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        long long48 = deflater2.getBytesWritten();
        deflater2.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getAdler();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater51.setInput(byteArray64, 0, 0);
        long long69 = deflater51.getBytesRead();
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater((int) (byte) 1);
        deflater71.reset();
        int int73 = deflater71.getTotalIn();
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater71.setInput(byteArray80);
        deflater71.finish();
        long long83 = deflater71.getBytesRead();
        deflater71.reset();
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater71.setInput(byteArray91, (int) (short) 0, (int) (short) 1);
        deflater51.setDictionary(byteArray91);
        deflater2.setDictionary(byteArray91);
        int int97 = deflater2.getTotalIn();
        deflater2.finish();
        long long99 = deflater2.getBytesRead();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test4531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4531");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalOut();
        long long5 = deflater1.getBytesRead();
        boolean boolean6 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((-1));
        boolean boolean9 = deflater8.finished();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater11.setInput(byteArray23);
        int int26 = deflater11.getTotalIn();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        long long29 = deflater28.getBytesRead();
        long long30 = deflater28.getBytesRead();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        int int46 = deflater32.getAdler();
        boolean boolean47 = deflater32.needsInput();
        int int48 = deflater32.getTotalIn();
        int int49 = deflater32.getTotalIn();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater66.finish();
        long long78 = deflater66.getBytesRead();
        deflater66.reset();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater66.setInput(byteArray86, (int) (short) 0, (int) (short) 1);
        int int90 = deflater51.deflate(byteArray86);
        deflater32.setDictionary(byteArray86);
        deflater28.setInput(byteArray86);
        deflater11.setDictionary(byteArray86);
        deflater8.setDictionary(byteArray86);
        deflater1.setInput(byteArray86);
        int int96 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test4532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4532");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        long long17 = deflater1.getBytesWritten();
        deflater1.setStrategy(0);
        int int20 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        int int36 = deflater22.getTotalIn();
        deflater22.finish();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater(3, true);
        int int41 = deflater40.getAdler();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((-1), true);
        long long45 = deflater44.getBytesWritten();
        deflater44.setLevel(2);
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        int int66 = deflater64.getTotalIn();
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater64.setInput(byteArray73);
        deflater64.finish();
        long long76 = deflater64.getBytesRead();
        deflater64.reset();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater64.setInput(byteArray84, (int) (short) 0, (int) (short) 1);
        deflater49.setDictionary(byteArray84);
        deflater44.setInput(byteArray84);
        deflater40.setDictionary(byteArray84);
        deflater22.setInput(byteArray84);
        int int92 = deflater1.deflate(byteArray84);
        boolean boolean93 = deflater1.finished();
        int int94 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[120, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
    }

    @Test
    public void test4533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4533");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setDictionary(byteArray14);
        long long17 = deflater1.getBytesWritten();
        deflater1.reset();
        int int19 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test4534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4534");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        deflater2.finish();
        long long7 = deflater2.getBytesRead();
        deflater2.end();
        deflater2.end();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getAdler();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater14.setInput(byteArray27, 0, 0);
        int int32 = deflater12.deflate(byteArray27);
        deflater12.reset();
        long long34 = deflater12.getBytesWritten();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        deflater36.finish();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater36.setInput(byteArray50);
        deflater12.setDictionary(byteArray50);
        deflater2.setInput(byteArray50);
        boolean boolean55 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test4535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4535");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy(0);
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean9 = deflater8.needsInput();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater14.setInput(byteArray26);
        deflater12.setInput(byteArray26);
        deflater12.setStrategy(0);
        boolean boolean32 = deflater12.needsInput();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater37.setInput(byteArray49);
        deflater35.setInput(byteArray49);
        deflater12.setInput(byteArray49);
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater55.finish();
        long long67 = deflater55.getBytesRead();
        deflater55.reset();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater55.setInput(byteArray75, (int) (short) 0, (int) (short) 1);
        deflater12.setInput(byteArray75);
        int int80 = deflater8.deflate(byteArray75);
        deflater2.setInput(byteArray75, 2, 0);
        boolean boolean84 = deflater2.needsInput();
        long long85 = deflater2.getBytesWritten();
        int int86 = deflater2.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test4536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4536");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        deflater1.reset();
        int int9 = deflater1.getAdler();
        deflater1.reset();
        boolean boolean11 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test4537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4537");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        deflater2.reset();
        boolean boolean24 = deflater2.finished();
        boolean boolean25 = deflater2.needsInput();
        long long26 = deflater2.getBytesRead();
        long long27 = deflater2.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test4538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4538");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        deflater1.reset();
        deflater1.reset();
        deflater1.finish();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater10.setInput(byteArray22);
        deflater8.setInput(byteArray22);
        deflater8.setStrategy(0);
        boolean boolean28 = deflater8.needsInput();
        long long29 = deflater8.getBytesRead();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        long long32 = deflater31.getBytesWritten();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater49.setInput(byteArray69, (int) (short) 0, (int) (short) 1);
        deflater34.setDictionary(byteArray69);
        deflater31.setInput(byteArray69);
        int int75 = deflater8.deflate(byteArray69);
        deflater1.setInput(byteArray69);
        deflater1.setLevel(0);
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test4539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4539");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        int int7 = deflater1.getTotalIn();
        int int8 = deflater1.getTotalIn();
        int int9 = deflater1.getTotalOut();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test4540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4540");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        boolean boolean1 = deflater0.needsInput();
        java.util.zip.Deflater deflater3 = new java.util.zip.Deflater((int) (byte) 1);
        deflater3.reset();
        int int5 = deflater3.getTotalIn();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater3.setInput(byteArray12);
        deflater3.finish();
        long long15 = deflater3.getBytesRead();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((-1), true);
        long long19 = deflater18.getBytesWritten();
        deflater18.setLevel(2);
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater38.setInput(byteArray58, (int) (short) 0, (int) (short) 1);
        deflater23.setDictionary(byteArray58);
        deflater18.setInput(byteArray58);
        deflater3.setInput(byteArray58, 3, 1);
        boolean boolean67 = deflater3.finished();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater();
        deflater68.reset();
        long long70 = deflater68.getBytesWritten();
        int int71 = deflater68.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 1 };
        deflater68.setInput(byteArray74);
        int int76 = deflater3.deflate(byteArray74);
        deflater0.setInput(byteArray74, (int) (short) 0, 0);
        boolean boolean80 = deflater0.finished();
        int int81 = deflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[120, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test4541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4541");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        deflater1.setLevel(3);
        deflater1.setStrategy(2);
        int int60 = deflater1.getAdler();
        long long61 = deflater1.getBytesWritten();
        long long62 = deflater1.getBytesRead();
        int int63 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 87360012 + "'", int60 == 87360012);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 6L + "'", long61 == 6L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 6L + "'", long62 == 6L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 87360012 + "'", int63 == 87360012);
    }

    @Test
    public void test4542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4542");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater1.setInput(byteArray15);
        int int18 = deflater1.getTotalIn();
        boolean boolean19 = deflater1.finished();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4543");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        int int2 = deflater1.getAdler();
        boolean boolean3 = deflater1.needsInput();
        boolean boolean4 = deflater1.finished();
        long long5 = deflater1.getBytesRead();
        boolean boolean6 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        long long10 = deflater9.getBytesWritten();
        long long11 = deflater9.getBytesWritten();
        deflater9.setLevel((int) (byte) 0);
        long long14 = deflater9.getBytesWritten();
        int int15 = deflater9.getAdler();
        int int16 = deflater9.getAdler();
        boolean boolean17 = deflater9.needsInput();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater19.setInput(byteArray31);
        deflater19.setLevel((int) (byte) -1);
        deflater19.finish();
        int int37 = deflater19.getTotalOut();
        int int38 = deflater19.getAdler();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getAdler();
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        int int62 = deflater60.getTotalIn();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater60.setInput(byteArray69);
        deflater56.setInput(byteArray69, 0, 0);
        int int74 = deflater54.deflate(byteArray69);
        deflater40.setDictionary(byteArray69, (int) (byte) 0, 2);
        deflater19.setDictionary(byteArray69, 0, (int) (byte) 0);
        int int81 = deflater9.deflate(byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray69, (int) (byte) -1, 720907);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test4544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4544");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        boolean boolean4 = deflater1.needsInput();
        long long5 = deflater1.getBytesRead();
        int int6 = deflater1.getAdler();
        boolean boolean7 = deflater1.needsInput();
        java.lang.Class<?> wildcardClass8 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test4545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4545");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 0);
        long long2 = deflater1.getBytesRead();
        boolean boolean3 = deflater1.needsInput();
        deflater1.setLevel(1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test4546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4546");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        deflater1.setStrategy((int) (byte) 0);
        deflater1.end();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test4547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4547");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        long long5 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.reset();
        boolean boolean19 = deflater7.needsInput();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        int int32 = deflater7.deflate(byteArray30);
        int int33 = deflater1.deflate(byteArray30);
        boolean boolean34 = deflater1.finished();
        deflater1.setLevel((int) (byte) 1);
        deflater1.setLevel(8);
        deflater1.setLevel(8);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test4548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4548");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        deflater1.finish();
        long long4 = deflater1.getBytesRead();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test4549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4549");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (short) 1);
        int int2 = deflater1.getAdler();
        boolean boolean3 = deflater1.finished();
        long long4 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test4550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4550");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        deflater1.setStrategy((int) (short) 0);
        deflater1.finish();
        boolean boolean10 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test4551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4551");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesRead();
        int int4 = deflater1.getTotalOut();
        int int5 = deflater1.getAdler();
        deflater1.reset();
        int int7 = deflater1.getAdler();
        boolean boolean8 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test4552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4552");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        deflater1.finish();
        deflater1.setLevel(6);
        boolean boolean66 = deflater1.needsInput();
        int int67 = deflater1.getTotalIn();
        long long68 = deflater1.getBytesWritten();
        int int69 = deflater1.getAdler();
        long long70 = deflater1.getBytesRead();
        java.lang.Class<?> wildcardClass71 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 118882828 + "'", int69 == 118882828);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test4553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4553");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        deflater20.finish();
        int int24 = deflater20.getTotalOut();
        boolean boolean25 = deflater20.needsInput();
        long long26 = deflater20.getBytesRead();
        deflater20.finish();
        deflater20.setLevel(9);
        deflater20.finish();
        deflater20.finish();
        boolean boolean32 = deflater20.needsInput();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        int int38 = deflater35.getTotalIn();
        deflater35.finish();
        deflater35.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater35.setInput(byteArray51);
        long long54 = deflater35.getBytesWritten();
        deflater35.reset();
        int int56 = deflater35.getAdler();
        java.util.zip.Deflater deflater58 = new java.util.zip.Deflater((int) (byte) 1);
        deflater58.reset();
        int int60 = deflater58.getTotalIn();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater58.setInput(byteArray67);
        deflater58.finish();
        long long70 = deflater58.getBytesRead();
        deflater58.reset();
        int int72 = deflater58.getAdler();
        byte[] byteArray74 = new byte[] { (byte) 10 };
        deflater58.setDictionary(byteArray74);
        deflater35.setDictionary(byteArray74);
        deflater20.setDictionary(byteArray74);
        int int78 = deflater1.deflate(byteArray74);
        boolean boolean79 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test4554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4554");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        long long5 = deflater4.getBytesRead();
        deflater4.finish();
        int int7 = deflater4.getAdler();
        long long8 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        int int13 = deflater10.getTotalIn();
        deflater10.finish();
        deflater10.reset();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater10.setInput(byteArray26);
        deflater10.finish();
        int int30 = deflater10.getAdler();
        int int31 = deflater10.getTotalIn();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((-1), true);
        long long35 = deflater34.getBytesWritten();
        deflater34.setLevel(2);
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater39.finish();
        long long51 = deflater39.getBytesRead();
        deflater39.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater54.finish();
        long long66 = deflater54.getBytesRead();
        deflater54.reset();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater54.setInput(byteArray74, (int) (short) 0, (int) (short) 1);
        deflater39.setDictionary(byteArray74);
        deflater34.setInput(byteArray74);
        deflater10.setDictionary(byteArray74);
        deflater4.setInput(byteArray74, 6, (int) (short) 0);
        deflater2.setInput(byteArray74);
        int int85 = deflater2.getTotalOut();
        deflater2.reset();
        long long87 = deflater2.getBytesRead();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
    }

    @Test
    public void test4555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4555");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater1.setInput(byteArray15);
        int int18 = deflater1.getAdler();
        boolean boolean19 = deflater1.needsInput();
        deflater1.setStrategy(0);
        deflater1.end();
        boolean boolean23 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test4556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4556");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        long long4 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        deflater6.reset();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater6.setDictionary(byteArray19);
        deflater1.setDictionary(byteArray19);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater(0);
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((-1), true);
        long long28 = deflater27.getBytesWritten();
        deflater27.setLevel(2);
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater47.setInput(byteArray67, (int) (short) 0, (int) (short) 1);
        deflater32.setDictionary(byteArray67);
        deflater27.setInput(byteArray67);
        long long73 = deflater27.getBytesRead();
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater((int) (byte) 1);
        deflater75.reset();
        deflater75.reset();
        java.util.zip.Deflater deflater79 = new java.util.zip.Deflater((int) (byte) 1);
        deflater79.reset();
        int int81 = deflater79.getTotalIn();
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater79.setInput(byteArray88);
        deflater75.setDictionary(byteArray88);
        deflater27.setInput(byteArray88);
        deflater24.setDictionary(byteArray88, 1, (int) (byte) 1);
        deflater1.setInput(byteArray88);
        long long96 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
    }

    @Test
    public void test4557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4557");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        deflater1.reset();
        deflater1.reset();
        deflater1.finish();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater10.setInput(byteArray22);
        deflater8.setInput(byteArray22);
        deflater8.setStrategy(0);
        boolean boolean28 = deflater8.needsInput();
        long long29 = deflater8.getBytesRead();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        long long32 = deflater31.getBytesWritten();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater49.setInput(byteArray69, (int) (short) 0, (int) (short) 1);
        deflater34.setDictionary(byteArray69);
        deflater31.setInput(byteArray69);
        int int75 = deflater8.deflate(byteArray69);
        deflater1.setInput(byteArray69);
        long long77 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test4558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4558");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        int int18 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        int int59 = deflater20.deflate(byteArray55);
        deflater1.setDictionary(byteArray55);
        long long61 = deflater1.getBytesWritten();
        int int62 = deflater1.getAdler();
        int int63 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 118882828 + "'", int63 == 118882828);
    }

    @Test
    public void test4559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4559");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        long long60 = deflater1.getBytesRead();
        boolean boolean61 = deflater1.finished();
        deflater1.finish();
        int int63 = deflater1.getAdler();
        int int64 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test4560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4560");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getTotalIn();
        deflater2.reset();
        long long50 = deflater2.getBytesRead();
        int int51 = deflater2.getTotalIn();
        int int52 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test4561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4561");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((-1), true);
        long long17 = deflater16.getBytesWritten();
        deflater16.setLevel(2);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        deflater21.setDictionary(byteArray56);
        deflater16.setInput(byteArray56);
        deflater1.setInput(byteArray56, 3, 1);
        boolean boolean65 = deflater1.finished();
        int int66 = deflater1.getTotalIn();
        int int67 = deflater1.getAdler();
        int int68 = deflater1.getAdler();
        int int69 = deflater1.getTotalOut();
        int int70 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test4562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4562");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        deflater1.finish();
        deflater1.finish();
        long long10 = deflater1.getBytesWritten();
        int int11 = deflater1.getTotalIn();
        long long12 = deflater1.getBytesRead();
        boolean boolean13 = deflater1.finished();
        deflater1.end();
        java.lang.Class<?> wildcardClass15 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4563");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.finished();
        boolean boolean14 = deflater1.finished();
        boolean boolean15 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test4564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4564");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        int int18 = deflater1.getTotalIn();
        deflater1.reset();
        long long20 = deflater1.getBytesRead();
        int int21 = deflater1.getTotalOut();
        boolean boolean22 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test4565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4565");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        deflater2.reset();
        deflater2.end();
        deflater2.finish();
        boolean boolean6 = deflater2.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        long long9 = deflater8.getBytesWritten();
        int int10 = deflater8.getTotalIn();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.finish();
        long long24 = deflater12.getBytesRead();
        deflater12.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater27.setInput(byteArray47, (int) (short) 0, (int) (short) 1);
        deflater12.setDictionary(byteArray47);
        int int52 = deflater8.deflate(byteArray47);
        boolean boolean53 = deflater8.needsInput();
        int int54 = deflater8.getTotalIn();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        int int59 = deflater56.getTotalIn();
        deflater56.finish();
        deflater56.reset();
        boolean boolean62 = deflater56.finished();
        deflater56.finish();
        deflater56.finish();
        long long65 = deflater56.getBytesWritten();
        int int66 = deflater56.getTotalOut();
        deflater56.reset();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (short) -1, false);
        long long71 = deflater70.getBytesWritten();
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater((int) (byte) 1);
        deflater73.reset();
        int int75 = deflater73.getTotalIn();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater73.setInput(byteArray82);
        deflater70.setDictionary(byteArray82);
        int int85 = deflater56.deflate(byteArray82);
        int int86 = deflater8.deflate(byteArray82);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = deflater2.deflate(byteArray82, 16777472, 1, 196610);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test4566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4566");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        long long17 = deflater1.getBytesWritten();
        deflater1.setStrategy(0);
        int int20 = deflater1.getTotalOut();
        long long21 = deflater1.getBytesWritten();
        int int22 = deflater1.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test4567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4567");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater2.setDictionary(byteArray14);
        int int17 = deflater2.getTotalOut();
        long long18 = deflater2.getBytesRead();
        deflater2.finish();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getAdler();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater37.setInput(byteArray50, 0, 0);
        int int55 = deflater35.deflate(byteArray50);
        deflater21.setDictionary(byteArray50, (int) (byte) 0, 2);
        int int59 = deflater2.deflate(byteArray50);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, -69, 5, 53, 2, 12]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
    }

    @Test
    public void test4568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4568");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        deflater1.end();
        deflater1.end();
        java.lang.Class<?> wildcardClass5 = deflater1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test4569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4569");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        long long4 = deflater2.getBytesWritten();
        boolean boolean5 = deflater2.finished();
        boolean boolean6 = deflater2.finished();
        deflater2.finish();
        int int8 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test4570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4570");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        int int53 = deflater1.deflate(byteArray51);
        deflater1.finish();
        int int55 = deflater1.getAdler();
        java.lang.Class<?> wildcardClass56 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 118882828 + "'", int55 == 118882828);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test4571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4571");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        long long5 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater10.setInput(byteArray22);
        deflater8.setInput(byteArray22);
        deflater8.setStrategy(0);
        boolean boolean28 = deflater8.needsInput();
        long long29 = deflater8.getBytesWritten();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        long long32 = deflater31.getBytesWritten();
        int int33 = deflater31.getTotalIn();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater50.finish();
        long long62 = deflater50.getBytesRead();
        deflater50.reset();
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater50.setInput(byteArray70, (int) (short) 0, (int) (short) 1);
        deflater35.setDictionary(byteArray70);
        int int75 = deflater31.deflate(byteArray70);
        deflater8.setInput(byteArray70, (int) (short) 1, (int) (byte) 0);
        deflater2.setDictionary(byteArray70, 0, 3);
        boolean boolean82 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test4572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4572");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.finished();
        boolean boolean14 = deflater1.finished();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        int int27 = deflater16.getAdler();
        deflater16.reset();
        int int29 = deflater16.getAdler();
        long long30 = deflater16.getBytesWritten();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater(0);
        int int33 = deflater32.getAdler();
        boolean boolean34 = deflater32.needsInput();
        long long35 = deflater32.getBytesWritten();
        long long36 = deflater32.getBytesRead();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean40 = deflater39.needsInput();
        int int41 = deflater39.getTotalOut();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        long long44 = deflater43.getBytesWritten();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater46.finish();
        long long58 = deflater46.getBytesRead();
        deflater46.reset();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater((int) (byte) 1);
        deflater61.reset();
        int int63 = deflater61.getTotalIn();
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater61.setInput(byteArray70);
        deflater61.finish();
        long long73 = deflater61.getBytesRead();
        deflater61.reset();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater61.setInput(byteArray81, (int) (short) 0, (int) (short) 1);
        deflater46.setDictionary(byteArray81);
        deflater43.setInput(byteArray81);
        deflater39.setDictionary(byteArray81);
        int int88 = deflater32.deflate(byteArray81);
        deflater16.setDictionary(byteArray81);
        deflater1.setDictionary(byteArray81);
        int int91 = deflater1.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test4573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4573");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater8.setInput(byteArray20);
        deflater6.setInput(byteArray20);
        deflater6.setStrategy(0);
        boolean boolean26 = deflater6.needsInput();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater31.setInput(byteArray43);
        deflater29.setInput(byteArray43);
        deflater6.setInput(byteArray43);
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater49.setInput(byteArray69, (int) (short) 0, (int) (short) 1);
        deflater6.setInput(byteArray69);
        int int74 = deflater2.deflate(byteArray69);
        deflater2.reset();
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test4574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4574");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalIn();
        int int6 = deflater1.getAdler();
        deflater1.finish();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater(1, true);
        deflater10.finish();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        deflater13.reset();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater13.setDictionary(byteArray26);
        int int29 = deflater13.getAdler();
        int int30 = deflater13.getAdler();
        deflater13.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        long long34 = deflater33.getBytesWritten();
        long long35 = deflater33.getBytesWritten();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getTotalIn();
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater52.setInput(byteArray61);
        deflater52.finish();
        long long64 = deflater52.getBytesRead();
        deflater52.reset();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater52.setInput(byteArray72, (int) (short) 0, (int) (short) 1);
        deflater37.setDictionary(byteArray72);
        deflater33.setInput(byteArray72);
        deflater13.setInput(byteArray72);
        int int79 = deflater10.deflate(byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            int int83 = deflater1.deflate(byteArray72, (int) (short) 1, (int) '#', 196610);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 87360012 + "'", int29 == 87360012);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 87360012 + "'", int30 == 87360012);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[3, 0, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
    }

    @Test
    public void test4575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4575");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater2.setDictionary(byteArray14);
        boolean boolean17 = deflater2.needsInput();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getAdler();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater22.setInput(byteArray35, 0, 0);
        int int40 = deflater20.deflate(byteArray35);
        deflater2.setInput(byteArray35);
        int int42 = deflater2.getAdler();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        long long45 = deflater44.getBytesWritten();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater62.finish();
        long long74 = deflater62.getBytesRead();
        deflater62.reset();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater62.setInput(byteArray82, (int) (short) 0, (int) (short) 1);
        deflater47.setDictionary(byteArray82);
        deflater44.setInput(byteArray82);
        deflater2.setDictionary(byteArray82);
        int int89 = deflater2.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel(48693373);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 87360012 + "'", int42 == 87360012);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test4576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4576");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        deflater1.finish();
        long long64 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        int int69 = deflater66.getTotalIn();
        deflater66.finish();
        deflater66.reset();
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater((int) (byte) 1);
        deflater73.reset();
        int int75 = deflater73.getTotalIn();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater73.setInput(byteArray82);
        deflater66.setInput(byteArray82);
        int int85 = deflater1.deflate(byteArray82);
        int int86 = deflater1.getAdler();
        boolean boolean87 = deflater1.needsInput();
        deflater1.setStrategy(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[120, 63, 7, 22, 2, 12]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 6 + "'", int85 == 6);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 87360012 + "'", int86 == 87360012);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test4577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4577");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        int int18 = deflater1.getTotalIn();
        int int19 = deflater1.getTotalOut();
        long long20 = deflater1.getBytesWritten();
        deflater1.reset();
        deflater1.reset();
        long long23 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test4578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4578");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        int int58 = deflater1.getTotalIn();
        deflater1.end();
        boolean boolean60 = deflater1.needsInput();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test4579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4579");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        deflater1.setDictionary(byteArray40);
        boolean boolean46 = deflater1.needsInput();
        deflater1.reset();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test4580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4580");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        int int2 = deflater1.getAdler();
        boolean boolean3 = deflater1.needsInput();
        boolean boolean4 = deflater1.finished();
        long long5 = deflater1.getBytesRead();
        boolean boolean6 = deflater1.finished();
        deflater1.setStrategy(1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test4581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4581");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater24.setInput(byteArray36);
        deflater22.setInput(byteArray36);
        deflater22.setStrategy(0);
        boolean boolean42 = deflater22.needsInput();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater47.setInput(byteArray59);
        deflater45.setInput(byteArray59);
        deflater22.setInput(byteArray59);
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater22.setInput(byteArray85);
        int int90 = deflater2.deflate(byteArray85);
        deflater2.setStrategy((int) (short) 1);
        deflater2.reset();
        int int94 = deflater2.getTotalOut();
        boolean boolean95 = deflater2.needsInput();
        deflater2.end();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test4582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4582");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        long long8 = deflater1.getBytesWritten();
        boolean boolean9 = deflater1.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test4583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4583");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.needsInput();
        deflater2.reset();
        long long5 = deflater2.getBytesWritten();
        deflater2.setStrategy(2);
        long long8 = deflater2.getBytesRead();
        boolean boolean9 = deflater2.needsInput();
        int int10 = deflater2.getTotalOut();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test4584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4584");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        int int5 = deflater2.getTotalIn();
        deflater2.finish();
        long long7 = deflater2.getBytesRead();
        long long8 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((-1), true);
        long long12 = deflater11.getBytesWritten();
        deflater11.setLevel(2);
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater16.finish();
        long long28 = deflater16.getBytesRead();
        deflater16.reset();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater31.finish();
        long long43 = deflater31.getBytesRead();
        deflater31.reset();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater31.setInput(byteArray51, (int) (short) 0, (int) (short) 1);
        deflater16.setDictionary(byteArray51);
        deflater11.setInput(byteArray51);
        int int57 = deflater2.deflate(byteArray51);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 1, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
    }

    @Test
    public void test4585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4585");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        long long5 = deflater1.getBytesWritten();
        int int6 = deflater1.getTotalIn();
        int int7 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test4586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4586");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        int int6 = deflater1.getTotalOut();
        int int7 = deflater1.getTotalOut();
        long long8 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.finish();
        long long22 = deflater10.getBytesRead();
        deflater10.reset();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater10.setInput(byteArray30, (int) (short) 0, (int) (short) 1);
        boolean boolean34 = deflater10.needsInput();
        deflater10.reset();
        boolean boolean36 = deflater10.needsInput();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (short) 1, false);
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater44.setInput(byteArray56);
        deflater42.setInput(byteArray56);
        int int60 = deflater39.deflate(byteArray56);
        int int61 = deflater10.deflate(byteArray56);
        deflater10.finish();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        java.util.zip.Deflater deflater67 = new java.util.zip.Deflater((int) (byte) 1);
        deflater67.reset();
        int int69 = deflater67.getTotalIn();
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater67.setInput(byteArray76);
        deflater64.setInput(byteArray76);
        int int79 = deflater64.getTotalIn();
        long long80 = deflater64.getBytesWritten();
        java.util.zip.Deflater deflater82 = new java.util.zip.Deflater((int) (byte) 1);
        deflater82.reset();
        int int84 = deflater82.getTotalIn();
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater82.setInput(byteArray91);
        deflater64.setDictionary(byteArray91);
        deflater10.setDictionary(byteArray91);
        // The following exception was thrown during execution in test generation
        try {
            int int98 = deflater1.deflate(byteArray91, 126419322, 1, 87360012);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test4587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4587");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater5.setInput(byteArray25, (int) (short) 0, (int) (short) 1);
        deflater5.reset();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean32 = deflater31.finished();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater48.finish();
        long long60 = deflater48.getBytesRead();
        deflater48.reset();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater63.setInput(byteArray72);
        deflater63.finish();
        long long75 = deflater63.getBytesRead();
        deflater63.reset();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater63.setInput(byteArray83, (int) (short) 0, (int) (short) 1);
        deflater48.setDictionary(byteArray83);
        int int88 = deflater34.deflate(byteArray83);
        int int91 = deflater31.deflate(byteArray83, (int) (byte) 1, 2);
        int int92 = deflater5.deflate(byteArray83);
        deflater1.setDictionary(byteArray83, 0, 1);
        long long96 = deflater1.getBytesRead();
        boolean boolean97 = deflater1.finished();
        boolean boolean98 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 6 + "'", int88 == 6);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test4588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4588");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        boolean boolean3 = deflater2.needsInput();
        deflater2.end();
        java.lang.Class<?> wildcardClass5 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test4589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4589");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        boolean boolean5 = deflater2.needsInput();
        long long6 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater8.reset();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater21.setInput(byteArray41, (int) (short) 0, (int) (short) 1);
        deflater8.setInput(byteArray41);
        boolean boolean46 = deflater8.finished();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater51.setInput(byteArray63);
        deflater49.setInput(byteArray63);
        deflater49.setStrategy(0);
        boolean boolean69 = deflater49.needsInput();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        java.util.zip.Deflater deflater77 = new java.util.zip.Deflater((int) (byte) 1);
        deflater77.reset();
        int int79 = deflater77.getTotalIn();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater77.setInput(byteArray86);
        deflater74.setInput(byteArray86);
        deflater72.setInput(byteArray86);
        deflater49.setInput(byteArray86);
        deflater8.setDictionary(byteArray86, (int) (short) 0, (int) (byte) 0);
        deflater2.setInput(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel(118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test4590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4590");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        long long5 = deflater2.getBytesWritten();
        int int6 = deflater2.getTotalOut();
        boolean boolean7 = deflater2.finished();
        int int8 = deflater2.getTotalOut();
        long long9 = deflater2.getBytesRead();
        java.lang.Class<?> wildcardClass10 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test4591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4591");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesRead();
        long long3 = deflater1.getBytesRead();
        boolean boolean4 = deflater1.finished();
        deflater1.finish();
        deflater1.end();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test4592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4592");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((-1), true);
        long long5 = deflater4.getBytesWritten();
        deflater4.setLevel(2);
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        deflater9.setDictionary(byteArray44);
        deflater4.setInput(byteArray44);
        long long50 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        deflater52.reset();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater52.setDictionary(byteArray65);
        deflater4.setInput(byteArray65);
        deflater1.setDictionary(byteArray65, 1, (int) (byte) 1);
        int int72 = deflater1.getTotalIn();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test4593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4593");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        boolean boolean8 = deflater1.needsInput();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        long long11 = deflater10.getBytesWritten();
        int int12 = deflater10.getTotalIn();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater29.setInput(byteArray49, (int) (short) 0, (int) (short) 1);
        deflater14.setDictionary(byteArray49);
        int int54 = deflater10.deflate(byteArray49);
        deflater1.setInput(byteArray49);
        deflater1.end();
        deflater1.end();
        java.lang.Class<?> wildcardClass58 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test4594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4594");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        long long19 = deflater18.getBytesRead();
        long long20 = deflater18.getBytesRead();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        int int36 = deflater22.getAdler();
        boolean boolean37 = deflater22.needsInput();
        int int38 = deflater22.getTotalIn();
        int int39 = deflater22.getTotalIn();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater41.finish();
        long long53 = deflater41.getBytesRead();
        deflater41.reset();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater56.finish();
        long long68 = deflater56.getBytesRead();
        deflater56.reset();
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater56.setInput(byteArray76, (int) (short) 0, (int) (short) 1);
        int int80 = deflater41.deflate(byteArray76);
        deflater22.setDictionary(byteArray76);
        deflater18.setInput(byteArray76);
        deflater1.setDictionary(byteArray76);
        int int84 = deflater1.getAdler();
        deflater1.setLevel((int) (byte) -1);
        long long87 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 118882828 + "'", int84 == 118882828);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
    }

    @Test
    public void test4595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4595");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        long long16 = deflater1.getBytesRead();
        int int17 = deflater1.getAdler();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater(2, true);
        int int21 = deflater20.getTotalIn();
        int int22 = deflater20.getTotalOut();
        int int23 = deflater20.getTotalIn();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        deflater25.finish();
        int int29 = deflater25.getTotalOut();
        boolean boolean30 = deflater25.needsInput();
        long long31 = deflater25.getBytesRead();
        int int32 = deflater25.getAdler();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        int int35 = deflater34.getTotalOut();
        int int36 = deflater34.getTotalOut();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater38.setInput(byteArray58, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getAdler();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater70.setInput(byteArray79);
        deflater66.setInput(byteArray79, 0, 0);
        int int84 = deflater64.deflate(byteArray79);
        deflater38.setInput(byteArray79);
        deflater34.setDictionary(byteArray79);
        deflater25.setDictionary(byteArray79, 6, 0);
        int int90 = deflater20.deflate(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = deflater1.deflate(byteArray79, (int) (short) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test4596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4596");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        long long19 = deflater18.getBytesRead();
        long long20 = deflater18.getBytesRead();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        int int36 = deflater22.getAdler();
        boolean boolean37 = deflater22.needsInput();
        int int38 = deflater22.getTotalIn();
        int int39 = deflater22.getTotalIn();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater41.finish();
        long long53 = deflater41.getBytesRead();
        deflater41.reset();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater56.finish();
        long long68 = deflater56.getBytesRead();
        deflater56.reset();
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater56.setInput(byteArray76, (int) (short) 0, (int) (short) 1);
        int int80 = deflater41.deflate(byteArray76);
        deflater22.setDictionary(byteArray76);
        deflater18.setInput(byteArray76);
        deflater1.setDictionary(byteArray76);
        int int84 = deflater1.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 118882828 + "'", int84 == 118882828);
    }

    @Test
    public void test4597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4597");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        long long4 = deflater2.getBytesWritten();
        int int5 = deflater2.getTotalIn();
        deflater2.finish();
        int int7 = deflater2.getAdler();
        deflater2.reset();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.finish();
        long long22 = deflater10.getBytesRead();
        deflater10.reset();
        int int24 = deflater10.getAdler();
        boolean boolean25 = deflater10.needsInput();
        int int26 = deflater10.getTotalIn();
        deflater10.reset();
        int int28 = deflater10.getAdler();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        deflater30.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater30.setDictionary(byteArray43);
        deflater10.setInput(byteArray43);
        deflater2.setInput(byteArray43);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test4598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4598");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        java.util.zip.Deflater deflater3 = new java.util.zip.Deflater((int) (byte) 1);
        deflater3.reset();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater3.setInput(byteArray15);
        boolean boolean18 = deflater3.needsInput();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater38.setInput(byteArray50);
        deflater36.setInput(byteArray50);
        deflater36.setStrategy(0);
        boolean boolean56 = deflater36.needsInput();
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater((int) (byte) 1);
        deflater61.reset();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        int int66 = deflater64.getTotalIn();
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater64.setInput(byteArray73);
        deflater61.setInput(byteArray73);
        deflater59.setInput(byteArray73);
        deflater36.setInput(byteArray73);
        deflater20.setDictionary(byteArray73);
        int int79 = deflater3.deflate(byteArray73);
        int int80 = deflater1.deflate(byteArray73);
        deflater1.finish();
        boolean boolean82 = deflater1.finished();
        boolean boolean83 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test4599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4599");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        boolean boolean10 = deflater1.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (short) -1, false);
        int int14 = deflater13.getTotalIn();
        int int15 = deflater13.getTotalIn();
        boolean boolean16 = deflater13.finished();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        long long19 = deflater18.getBytesWritten();
        int int20 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater37.setInput(byteArray57, (int) (short) 0, (int) (short) 1);
        deflater22.setDictionary(byteArray57);
        int int62 = deflater18.deflate(byteArray57);
        deflater13.setDictionary(byteArray57);
        int int64 = deflater1.deflate(byteArray57);
        int int65 = deflater1.getTotalIn();
        deflater1.reset();
        int int67 = deflater1.getAdler();
        int int68 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test4600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4600");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalIn();
        long long5 = deflater2.getBytesRead();
        deflater2.finish();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        long long9 = deflater8.getBytesWritten();
        int int10 = deflater8.getTotalOut();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.finish();
        long long24 = deflater12.getBytesRead();
        deflater12.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater27.setInput(byteArray47, (int) (short) 0, (int) (short) 1);
        deflater12.setDictionary(byteArray47);
        deflater8.setDictionary(byteArray47);
        deflater2.setDictionary(byteArray47);
        deflater2.finish();
        int int55 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test4601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4601");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        int int3 = deflater2.getAdler();
        long long4 = deflater2.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel(196610);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test4602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4602");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        boolean boolean1 = deflater0.needsInput();
        deflater0.setLevel((int) (short) -1);
        deflater0.setStrategy((int) (byte) 1);
        boolean boolean6 = deflater0.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater0.setStrategy(16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test4603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4603");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.finished();
        int int4 = deflater2.getAdler();
        int int5 = deflater2.getTotalOut();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        deflater7.reset();
        boolean boolean11 = deflater7.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        deflater13.finish();
        int int17 = deflater13.getTotalOut();
        boolean boolean18 = deflater13.finished();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        long long21 = deflater20.getBytesWritten();
        int int22 = deflater20.getTotalOut();
        long long23 = deflater20.getBytesWritten();
        deflater20.reset();
        deflater20.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        int int30 = deflater27.getTotalIn();
        int int31 = deflater27.getTotalIn();
        long long32 = deflater27.getBytesWritten();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater34.setInput(byteArray54, (int) (short) 0, (int) (short) 1);
        deflater34.reset();
        deflater34.reset();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater((int) (byte) 1);
        long long62 = deflater61.getBytesWritten();
        int int63 = deflater61.getTotalOut();
        long long64 = deflater61.getBytesWritten();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        deflater66.reset();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater70.setInput(byteArray79);
        deflater66.setDictionary(byteArray79);
        deflater61.setDictionary(byteArray79);
        deflater34.setInput(byteArray79);
        deflater27.setDictionary(byteArray79, 2, (int) (short) 0);
        int int87 = deflater20.deflate(byteArray79);
        deflater13.setDictionary(byteArray79);
        deflater7.setDictionary(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = deflater2.deflate(byteArray79, 10, (int) (short) 100, 118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test4604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4604");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        long long17 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater1.setDictionary(byteArray28);
        long long31 = deflater1.getBytesWritten();
        java.lang.Class<?> wildcardClass32 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test4605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4605");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        deflater1.finish();
        deflater1.setLevel(9);
        deflater1.finish();
        deflater1.end();
        boolean boolean13 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        deflater16.finish();
        int int20 = deflater16.getTotalIn();
        int int21 = deflater16.getAdler();
        boolean boolean22 = deflater16.finished();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        deflater24.reset();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater24.setDictionary(byteArray37);
        int int40 = deflater16.deflate(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = deflater1.deflate(byteArray37, 131074, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
    }

    @Test
    public void test4606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4606");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        long long8 = deflater1.getBytesWritten();
        long long9 = deflater1.getBytesRead();
        boolean boolean10 = deflater1.finished();
        long long11 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(139789087);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test4607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4607");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((-1), true);
        long long5 = deflater4.getBytesWritten();
        deflater4.setLevel(2);
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        deflater9.setDictionary(byteArray44);
        deflater4.setInput(byteArray44);
        long long50 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        deflater52.reset();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater52.setDictionary(byteArray65);
        deflater4.setInput(byteArray65);
        deflater1.setDictionary(byteArray65, 1, (int) (byte) 1);
        long long72 = deflater1.getBytesWritten();
        boolean boolean73 = deflater1.finished();
        int int74 = deflater1.getTotalOut();
        deflater1.setStrategy(0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test4608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4608");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        boolean boolean25 = deflater1.needsInput();
        deflater1.reset();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test4609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4609");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        deflater1.finish();
        deflater1.setLevel(6);
        int int66 = deflater1.getTotalIn();
        boolean boolean67 = deflater1.needsInput();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test4610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4610");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        long long2 = deflater1.getBytesRead();
        long long3 = deflater1.getBytesRead();
        deflater1.reset();
        boolean boolean5 = deflater1.needsInput();
        boolean boolean6 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test4611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4611");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        deflater1.setStrategy(2);
        int int7 = deflater1.getAdler();
        int int8 = deflater1.getTotalOut();
        deflater1.reset();
        long long10 = deflater1.getBytesRead();
        java.lang.Class<?> wildcardClass11 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test4612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4612");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getAdler();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater26.setInput(byteArray39, 0, 0);
        long long44 = deflater26.getBytesRead();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater46.finish();
        long long58 = deflater46.getBytesRead();
        deflater46.reset();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater46.setInput(byteArray66, (int) (short) 0, (int) (short) 1);
        deflater26.setDictionary(byteArray66);
        int int71 = deflater2.deflate(byteArray66);
        deflater2.setStrategy((int) (byte) 0);
        boolean boolean74 = deflater2.finished();
        long long75 = deflater2.getBytesRead();
        long long76 = deflater2.getBytesRead();
        boolean boolean77 = deflater2.needsInput();
        int int78 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 6L + "'", long75 == 6L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 6L + "'", long76 == 6L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test4613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4613");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, true);
        int int3 = deflater2.getTotalIn();
        boolean boolean4 = deflater2.needsInput();
        boolean boolean5 = deflater2.finished();
        int int6 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test4614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4614");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        long long8 = deflater7.getBytesWritten();
        int int9 = deflater7.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater11.finish();
        long long23 = deflater11.getBytesRead();
        deflater11.reset();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater26.finish();
        long long38 = deflater26.getBytesRead();
        deflater26.reset();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater26.setInput(byteArray46, (int) (short) 0, (int) (short) 1);
        deflater11.setDictionary(byteArray46);
        int int51 = deflater7.deflate(byteArray46);
        deflater2.setDictionary(byteArray46);
        deflater2.end();
        boolean boolean54 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test4615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4615");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean18 = deflater1.finished();
        long long19 = deflater1.getBytesRead();
        deflater1.setStrategy(0);
        deflater1.setLevel(0);
        deflater1.setLevel(8);
        int int26 = deflater1.getTotalOut();
        boolean boolean27 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test4616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4616");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        deflater2.reset();
        deflater2.setStrategy(0);
        deflater2.finish();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater8.setInput(byteArray21, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = deflater2.deflate(byteArray21, 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test4617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4617");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        deflater1.reset();
        deflater1.setLevel(8);
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test4618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4618");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.needsInput();
        deflater2.end();
        boolean boolean5 = deflater2.finished();
        deflater2.end();
        boolean boolean7 = deflater2.needsInput();
        boolean boolean8 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test4619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4619");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, true);
        deflater2.setLevel((-1));
        boolean boolean5 = deflater2.needsInput();
        deflater2.setLevel(0);
        deflater2.reset();
        long long9 = deflater2.getBytesRead();
        long long10 = deflater2.getBytesWritten();
        int int11 = deflater2.getTotalOut();
        boolean boolean12 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test4620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4620");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getTotalIn();
        boolean boolean9 = deflater1.finished();
        boolean boolean10 = deflater1.finished();
        int int11 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4621");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        boolean boolean4 = deflater1.needsInput();
        long long5 = deflater1.getBytesRead();
        int int6 = deflater1.getAdler();
        deflater1.end();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test4622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4622");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        deflater1.finish();
        deflater1.finish();
        long long10 = deflater1.getBytesWritten();
        int int11 = deflater1.getTotalIn();
        long long12 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (short) -1, false);
        int int16 = deflater15.getTotalIn();
        int int17 = deflater15.getTotalIn();
        boolean boolean18 = deflater15.finished();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        int int23 = deflater20.getTotalIn();
        deflater20.finish();
        deflater20.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater20.setInput(byteArray36);
        long long39 = deflater20.getBytesWritten();
        deflater20.reset();
        int int41 = deflater20.getAdler();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        int int57 = deflater43.getAdler();
        byte[] byteArray59 = new byte[] { (byte) 10 };
        deflater43.setDictionary(byteArray59);
        deflater20.setDictionary(byteArray59);
        int int62 = deflater15.deflate(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray59, 3, 87360012);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test4623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4623");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setDictionary(byteArray14);
        int int17 = deflater1.getAdler();
        int int18 = deflater1.getAdler();
        boolean boolean19 = deflater1.needsInput();
        deflater1.setLevel((int) (byte) -1);
        int int22 = deflater1.getTotalIn();
        long long23 = deflater1.getBytesWritten();
        int int24 = deflater1.getTotalIn();
        int int25 = deflater1.getTotalIn();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 87360012 + "'", int17 == 87360012);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 87360012 + "'", int18 == 87360012);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test4624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4624");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesRead();
        long long4 = deflater2.getBytesWritten();
        deflater2.end();
        java.lang.Class<?> wildcardClass6 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test4625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4625");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        int int21 = deflater20.getTotalOut();
        int int22 = deflater20.getTotalOut();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getAdler();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater52.setInput(byteArray65, 0, 0);
        int int70 = deflater50.deflate(byteArray65);
        deflater24.setInput(byteArray65);
        deflater20.setDictionary(byteArray65);
        deflater1.setInput(byteArray65);
        long long74 = deflater1.getBytesRead();
        deflater1.setLevel(9);
        int int77 = deflater1.getTotalIn();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test4626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4626");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.finish();
        int int4 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((-1), true);
        long long8 = deflater7.getBytesWritten();
        deflater7.setLevel(2);
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.finish();
        long long24 = deflater12.getBytesRead();
        deflater12.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater27.setInput(byteArray47, (int) (short) 0, (int) (short) 1);
        deflater12.setDictionary(byteArray47);
        deflater7.setInput(byteArray47);
        int int53 = deflater1.deflate(byteArray47);
        int int54 = deflater1.getTotalOut();
        deflater1.reset();
        int int56 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[120, -100, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test4627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4627");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean28 = deflater27.finished();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        int int61 = deflater59.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater59.setInput(byteArray68);
        deflater59.finish();
        long long71 = deflater59.getBytesRead();
        deflater59.reset();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater59.setInput(byteArray79, (int) (short) 0, (int) (short) 1);
        deflater44.setDictionary(byteArray79);
        int int84 = deflater30.deflate(byteArray79);
        int int87 = deflater27.deflate(byteArray79, (int) (byte) 1, 2);
        int int88 = deflater1.deflate(byteArray79);
        long long89 = deflater1.getBytesRead();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 6 + "'", int84 == 6);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
    }

    @Test
    public void test4628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4628");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalOut();
        long long5 = deflater1.getBytesWritten();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test4629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4629");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        int int7 = deflater1.getTotalIn();
        deflater1.setLevel(1);
        long long10 = deflater1.getBytesRead();
        int int11 = deflater1.getTotalIn();
        long long12 = deflater1.getBytesRead();
        boolean boolean13 = deflater1.finished();
        int int14 = deflater1.getTotalIn();
        deflater1.finish();
        byte[] byteArray16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = deflater1.deflate(byteArray16, (int) (byte) 100, (int) 'a', 118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4630");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        java.util.zip.Deflater deflater3 = new java.util.zip.Deflater();
        deflater3.reset();
        long long5 = deflater3.getBytesRead();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (short) -1, false);
        deflater8.finish();
        boolean boolean10 = deflater8.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater15.setInput(byteArray27);
        deflater13.setInput(byteArray27);
        deflater13.setStrategy(0);
        boolean boolean33 = deflater13.needsInput();
        long long34 = deflater13.getBytesWritten();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        long long37 = deflater36.getBytesWritten();
        int int38 = deflater36.getTotalIn();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater55.finish();
        long long67 = deflater55.getBytesRead();
        deflater55.reset();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater55.setInput(byteArray75, (int) (short) 0, (int) (short) 1);
        deflater40.setDictionary(byteArray75);
        int int80 = deflater36.deflate(byteArray75);
        deflater13.setInput(byteArray75, (int) (short) 1, (int) (byte) 0);
        deflater8.setDictionary(byteArray75);
        deflater3.setInput(byteArray75, 2, 0);
        deflater1.setInput(byteArray75);
        int int89 = deflater1.getTotalOut();
        long long90 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
    }

    @Test
    public void test4631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4631");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater8.finish();
        long long20 = deflater8.getBytesRead();
        deflater8.reset();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater8.setInput(byteArray28, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getAdler();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater36.setInput(byteArray49, 0, 0);
        int int54 = deflater34.deflate(byteArray49);
        deflater8.setInput(byteArray49);
        int int56 = deflater1.deflate(byteArray49);
        boolean boolean57 = deflater1.finished();
        deflater1.reset();
        boolean boolean59 = deflater1.needsInput();
        int int60 = deflater1.getTotalOut();
        boolean boolean61 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test4632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4632");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        int int19 = deflater1.getTotalOut();
        long long20 = deflater1.getBytesWritten();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        long long25 = deflater24.getBytesWritten();
        int int26 = deflater24.getTotalOut();
        long long27 = deflater24.getBytesWritten();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        deflater29.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater29.setDictionary(byteArray42);
        deflater24.setDictionary(byteArray42);
        deflater1.setDictionary(byteArray42);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test4633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4633");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        boolean boolean8 = deflater1.needsInput();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        long long11 = deflater10.getBytesWritten();
        int int12 = deflater10.getTotalIn();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater29.setInput(byteArray49, (int) (short) 0, (int) (short) 1);
        deflater14.setDictionary(byteArray49);
        int int54 = deflater10.deflate(byteArray49);
        deflater1.setInput(byteArray49);
        deflater1.finish();
        deflater1.setLevel(2);
        long long59 = deflater1.getBytesWritten();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    public void test4634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4634");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        boolean boolean10 = deflater1.finished();
        boolean boolean11 = deflater1.finished();
        int int12 = deflater1.getTotalOut();
        boolean boolean13 = deflater1.finished();
        boolean boolean14 = deflater1.needsInput();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test4635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4635");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy((int) (byte) 0);
        deflater2.setStrategy(0);
        int int8 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test4636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4636");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater2.setDictionary(byteArray14);
        boolean boolean17 = deflater2.needsInput();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getAdler();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater22.setInput(byteArray35, 0, 0);
        int int40 = deflater20.deflate(byteArray35);
        deflater2.setInput(byteArray35);
        deflater2.reset();
        int int43 = deflater2.getTotalIn();
        boolean boolean44 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test4637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4637");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getAdler();
        deflater2.finish();
        int int6 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test4638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4638");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalOut();
        int int4 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        long long7 = deflater6.getBytesWritten();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        int int12 = deflater9.getTotalIn();
        int int13 = deflater9.getTotalIn();
        deflater9.setLevel((int) (short) 1);
        int int16 = deflater9.getAdler();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        int int21 = deflater18.getTotalIn();
        int int22 = deflater18.getTotalIn();
        long long23 = deflater18.getBytesWritten();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater25.setInput(byteArray45, (int) (short) 0, (int) (short) 1);
        deflater25.reset();
        deflater25.reset();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        long long53 = deflater52.getBytesWritten();
        int int54 = deflater52.getTotalOut();
        long long55 = deflater52.getBytesWritten();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater((int) (byte) 1);
        deflater57.reset();
        deflater57.reset();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater((int) (byte) 1);
        deflater61.reset();
        int int63 = deflater61.getTotalIn();
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater61.setInput(byteArray70);
        deflater57.setDictionary(byteArray70);
        deflater52.setDictionary(byteArray70);
        deflater25.setInput(byteArray70);
        deflater18.setDictionary(byteArray70, 2, (int) (short) 0);
        deflater9.setInput(byteArray70);
        int int82 = deflater6.deflate(byteArray70, 2, 1, 3);
        deflater1.setInput(byteArray70);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 1, 120, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test4639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4639");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        deflater2.finish();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        long long6 = deflater5.getBytesWritten();
        int int7 = deflater5.getTotalOut();
        long long8 = deflater5.getBytesWritten();
        deflater5.reset();
        deflater5.reset();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        int int15 = deflater12.getTotalIn();
        int int16 = deflater12.getTotalIn();
        long long17 = deflater12.getBytesWritten();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater19.finish();
        long long31 = deflater19.getBytesRead();
        deflater19.reset();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater19.setInput(byteArray39, (int) (short) 0, (int) (short) 1);
        deflater19.reset();
        deflater19.reset();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        long long47 = deflater46.getBytesWritten();
        int int48 = deflater46.getTotalOut();
        long long49 = deflater46.getBytesWritten();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        deflater51.reset();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater51.setDictionary(byteArray64);
        deflater46.setDictionary(byteArray64);
        deflater19.setInput(byteArray64);
        deflater12.setDictionary(byteArray64, 2, (int) (short) 0);
        int int72 = deflater5.deflate(byteArray64);
        int int73 = deflater2.deflate(byteArray64);
        deflater2.setLevel((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[120, -100, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
    }

    @Test
    public void test4640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4640");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.needsInput();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (short) -1, true);
        deflater6.setLevel((-1));
        boolean boolean9 = deflater6.needsInput();
        deflater6.setLevel(0);
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater(3, true);
        int int15 = deflater14.getAdler();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((-1), true);
        long long19 = deflater18.getBytesWritten();
        deflater18.setLevel(2);
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater38.setInput(byteArray58, (int) (short) 0, (int) (short) 1);
        deflater23.setDictionary(byteArray58);
        deflater18.setInput(byteArray58);
        deflater14.setDictionary(byteArray58);
        int int68 = deflater6.deflate(byteArray58, 6, (int) (short) 0, 0);
        int int69 = deflater2.deflate(byteArray58);
        long long70 = deflater2.getBytesWritten();
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
    }

    @Test
    public void test4641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4641");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        deflater14.reset();
        deflater14.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        deflater19.reset();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater19.setDictionary(byteArray32);
        int int35 = deflater14.deflate(byteArray32);
        deflater1.setDictionary(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test4642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4642");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        long long25 = deflater2.getBytesWritten();
        deflater2.finish();
        int int27 = deflater2.getAdler();
        boolean boolean28 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test4643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4643");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setDictionary(byteArray14);
        int int17 = deflater1.getAdler();
        int int18 = deflater1.getAdler();
        long long19 = deflater1.getBytesRead();
        int int20 = deflater1.getAdler();
        int int21 = deflater1.getTotalOut();
        deflater1.end();
        java.lang.Class<?> wildcardClass23 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 87360012 + "'", int17 == 87360012);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 87360012 + "'", int18 == 87360012);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 87360012 + "'", int20 == 87360012);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test4644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4644");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalOut();
        deflater1.setLevel((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test4645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4645");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalOut();
        long long5 = deflater1.getBytesRead();
        boolean boolean6 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((-1));
        boolean boolean9 = deflater8.finished();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater11.setInput(byteArray23);
        int int26 = deflater11.getTotalIn();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        long long29 = deflater28.getBytesRead();
        long long30 = deflater28.getBytesRead();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        int int46 = deflater32.getAdler();
        boolean boolean47 = deflater32.needsInput();
        int int48 = deflater32.getTotalIn();
        int int49 = deflater32.getTotalIn();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater66.finish();
        long long78 = deflater66.getBytesRead();
        deflater66.reset();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater66.setInput(byteArray86, (int) (short) 0, (int) (short) 1);
        int int90 = deflater51.deflate(byteArray86);
        deflater32.setDictionary(byteArray86);
        deflater28.setInput(byteArray86);
        deflater11.setDictionary(byteArray86);
        deflater8.setDictionary(byteArray86);
        deflater1.setInput(byteArray86);
        int int96 = deflater1.getTotalIn();
        deflater1.setLevel((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test4646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4646");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        deflater1.finish();
        deflater1.setLevel(9);
        int int11 = deflater1.getAdler();
        long long12 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test4647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4647");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        deflater1.reset();
        deflater1.setLevel(2);
        boolean boolean13 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test4648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4648");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        deflater1.reset();
        int int9 = deflater1.getAdler();
        deflater1.reset();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.finish();
        long long24 = deflater12.getBytesRead();
        deflater12.reset();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater12.setInput(byteArray32, (int) (short) 0, (int) (short) 1);
        boolean boolean36 = deflater12.needsInput();
        deflater12.reset();
        boolean boolean38 = deflater12.needsInput();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (short) 1, false);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater46.setInput(byteArray58);
        deflater44.setInput(byteArray58);
        int int62 = deflater41.deflate(byteArray58);
        int int63 = deflater12.deflate(byteArray58);
        deflater12.finish();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater69.setInput(byteArray78);
        deflater66.setInput(byteArray78);
        int int81 = deflater66.getTotalIn();
        long long82 = deflater66.getBytesWritten();
        java.util.zip.Deflater deflater84 = new java.util.zip.Deflater((int) (byte) 1);
        deflater84.reset();
        int int86 = deflater84.getTotalIn();
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater84.setInput(byteArray93);
        deflater66.setDictionary(byteArray93);
        deflater12.setDictionary(byteArray93);
        deflater1.setDictionary(byteArray93);
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test4649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4649");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        deflater1.finish();
        long long64 = deflater1.getBytesRead();
        int int65 = deflater1.getTotalOut();
        deflater1.reset();
        int int67 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test4650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4650");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.needsInput();
        long long14 = deflater1.getBytesWritten();
        deflater1.finish();
        deflater1.reset();
        int int17 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test4651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4651");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        long long60 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 1);
        int int63 = deflater1.getTotalIn();
        int int64 = deflater1.getTotalOut();
        long long65 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
    }

    @Test
    public void test4652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4652");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater40.setInput(byteArray52);
        deflater38.setInput(byteArray52);
        deflater38.setStrategy(0);
        boolean boolean58 = deflater38.needsInput();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater63.setInput(byteArray75);
        deflater61.setInput(byteArray75);
        deflater38.setInput(byteArray75);
        deflater22.setDictionary(byteArray75);
        int int81 = deflater18.deflate(byteArray75);
        int int82 = deflater1.deflate(byteArray75);
        boolean boolean83 = deflater1.needsInput();
        boolean boolean84 = deflater1.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test4653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4653");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        long long17 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater1.setDictionary(byteArray28);
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test4654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4654");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalOut();
        long long58 = deflater1.getBytesRead();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 6L + "'", long58 == 6L);
    }

    @Test
    public void test4655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4655");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getTotalIn();
        boolean boolean49 = deflater2.needsInput();
        deflater2.end();
        deflater2.finish();
        deflater2.end();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel(720907);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test4656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4656");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        long long16 = deflater1.getBytesWritten();
        int int17 = deflater1.getAdler();
        int int18 = deflater1.getTotalOut();
        boolean boolean19 = deflater1.needsInput();
        int int20 = deflater1.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test4657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4657");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getAdler();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater4.setInput(byteArray17, 0, 0);
        int int22 = deflater2.deflate(byteArray17);
        boolean boolean23 = deflater2.finished();
        deflater2.finish();
        int int25 = deflater2.getTotalIn();
        boolean boolean26 = deflater2.finished();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        deflater28.reset();
        boolean boolean32 = deflater28.finished();
        deflater28.setLevel((int) (short) 1);
        int int35 = deflater28.getAdler();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        int int51 = deflater37.getAdler();
        byte[] byteArray53 = new byte[] { (byte) 10 };
        deflater37.setDictionary(byteArray53);
        deflater28.setDictionary(byteArray53);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = deflater2.deflate(byteArray53, 139789087, 0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10]");
    }

    @Test
    public void test4658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4658");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, true);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalIn();
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test4659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4659");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater40.setInput(byteArray52);
        deflater38.setInput(byteArray52);
        deflater38.setStrategy(0);
        boolean boolean58 = deflater38.needsInput();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater63.setInput(byteArray75);
        deflater61.setInput(byteArray75);
        deflater38.setInput(byteArray75);
        deflater22.setDictionary(byteArray75);
        int int81 = deflater18.deflate(byteArray75);
        int int82 = deflater1.deflate(byteArray75);
        boolean boolean83 = deflater1.needsInput();
        deflater1.reset();
        int int85 = deflater1.getAdler();
        boolean boolean86 = deflater1.finished();
        int int87 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test4660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4660");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        long long8 = deflater1.getBytesRead();
        long long9 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        deflater11.setInput(byteArray50);
        deflater1.setInput(byteArray50);
        deflater1.finish();
        java.lang.Class<?> wildcardClass58 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test4661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4661");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        deflater2.reset();
        boolean boolean4 = deflater2.needsInput();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater6.finish();
        long long18 = deflater6.getBytesRead();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        int int60 = deflater6.deflate(byteArray55);
        boolean boolean61 = deflater6.finished();
        int int62 = deflater6.getTotalIn();
        int int63 = deflater6.getTotalIn();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        deflater68.finish();
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater((int) (byte) 1);
        deflater73.reset();
        int int75 = deflater73.getTotalIn();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater73.setInput(byteArray82);
        deflater68.setInput(byteArray82);
        int int85 = deflater65.deflate(byteArray82);
        int int86 = deflater6.deflate(byteArray82);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = deflater2.deflate(byteArray82, (int) (byte) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-1, -97, 17, 0, 5, 53]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 6 + "'", int86 == 6);
    }

    @Test
    public void test4662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4662");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        deflater1.reset();
        long long14 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        deflater16.reset();
        deflater16.reset();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        deflater21.reset();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater21.setDictionary(byteArray34);
        int int37 = deflater16.deflate(byteArray34);
        deflater1.setDictionary(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test4663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4663");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater1.setInput(byteArray15);
        int int18 = deflater1.getAdler();
        boolean boolean19 = deflater1.needsInput();
        long long20 = deflater1.getBytesWritten();
        int int21 = deflater1.getTotalIn();
        deflater1.reset();
        deflater1.finish();
        int int24 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test4664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4664");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        int int8 = deflater5.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater13.setInput(byteArray25);
        deflater11.setInput(byteArray25);
        deflater11.setStrategy(0);
        boolean boolean31 = deflater11.needsInput();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater36.setInput(byteArray48);
        deflater34.setInput(byteArray48);
        deflater11.setInput(byteArray48);
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater54.finish();
        long long66 = deflater54.getBytesRead();
        deflater54.reset();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater54.setInput(byteArray74, (int) (short) 0, (int) (short) 1);
        deflater11.setInput(byteArray74);
        int int79 = deflater5.deflate(byteArray74);
        deflater2.setInput(byteArray74);
        int int81 = deflater2.getAdler();
        long long82 = deflater2.getBytesWritten();
        deflater2.reset();
        int int84 = deflater2.getTotalOut();
        deflater2.finish();
        boolean boolean86 = deflater2.needsInput();
        long long87 = deflater2.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
    }

    @Test
    public void test4665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4665");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.setLevel(0);
        long long20 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test4666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4666");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        deflater2.finish();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        int int11 = deflater8.getTotalIn();
        deflater8.finish();
        deflater8.reset();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater8.setInput(byteArray24);
        deflater8.finish();
        int int28 = deflater8.getAdler();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater48.setInput(byteArray60);
        deflater46.setInput(byteArray60);
        deflater46.setStrategy(0);
        boolean boolean66 = deflater46.needsInput();
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater((int) (byte) 1);
        deflater71.reset();
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        int int76 = deflater74.getTotalIn();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater74.setInput(byteArray83);
        deflater71.setInput(byteArray83);
        deflater69.setInput(byteArray83);
        deflater46.setInput(byteArray83);
        deflater30.setDictionary(byteArray83);
        deflater8.setDictionary(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray83, 9, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test4667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4667");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        long long4 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        int int9 = deflater6.getTotalIn();
        int int10 = deflater6.getTotalIn();
        long long11 = deflater6.getBytesWritten();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater13.finish();
        long long25 = deflater13.getBytesRead();
        deflater13.reset();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater13.setInput(byteArray33, (int) (short) 0, (int) (short) 1);
        deflater13.reset();
        deflater13.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        long long41 = deflater40.getBytesWritten();
        int int42 = deflater40.getTotalOut();
        long long43 = deflater40.getBytesWritten();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        deflater45.reset();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater45.setDictionary(byteArray58);
        deflater40.setDictionary(byteArray58);
        deflater13.setInput(byteArray58);
        deflater6.setDictionary(byteArray58, 2, (int) (short) 0);
        deflater2.setInput(byteArray58);
        deflater2.setLevel(0);
        int int69 = deflater2.getAdler();
        boolean boolean70 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test4668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4668");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 1, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy(0);
        int int6 = deflater2.getTotalIn();
        long long7 = deflater2.getBytesRead();
        long long8 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        int int13 = deflater10.getTotalIn();
        int int14 = deflater10.getTotalIn();
        long long15 = deflater10.getBytesWritten();
        int int16 = deflater10.getTotalOut();
        long long17 = deflater10.getBytesWritten();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater22.setInput(byteArray34);
        deflater20.setInput(byteArray34);
        int int38 = deflater10.deflate(byteArray34);
        deflater2.setInput(byteArray34);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test4669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4669");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesRead();
        long long3 = deflater1.getBytesRead();
        deflater1.reset();
        long long5 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (short) -1, true);
        deflater8.setLevel((-1));
        boolean boolean11 = deflater8.needsInput();
        deflater8.setLevel(0);
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater(3, true);
        int int17 = deflater16.getAdler();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((-1), true);
        long long21 = deflater20.getBytesWritten();
        deflater20.setLevel(2);
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater40.setInput(byteArray60, (int) (short) 0, (int) (short) 1);
        deflater25.setDictionary(byteArray60);
        deflater20.setInput(byteArray60);
        deflater16.setDictionary(byteArray60);
        int int70 = deflater8.deflate(byteArray60, 6, (int) (short) 0, 0);
        deflater1.setInput(byteArray60);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test4670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4670");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        int int58 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        deflater63.finish();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater63.setInput(byteArray77);
        int int80 = deflater60.deflate(byteArray77);
        int int81 = deflater1.deflate(byteArray77);
        boolean boolean82 = deflater1.finished();
        boolean boolean83 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1, -97, 17, 0, 5, 53]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 6 + "'", int81 == 6);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test4671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4671");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        long long4 = deflater2.getBytesWritten();
        deflater2.finish();
        boolean boolean6 = deflater2.needsInput();
        long long7 = deflater2.getBytesWritten();
        int int8 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test4672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4672");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater8.setInput(byteArray21, 0, 0);
        int int26 = deflater6.deflate(byteArray21);
        deflater6.end();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        long long30 = deflater29.getBytesWritten();
        int int31 = deflater29.getTotalIn();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater48.finish();
        long long60 = deflater48.getBytesRead();
        deflater48.reset();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater48.setInput(byteArray68, (int) (short) 0, (int) (short) 1);
        deflater33.setDictionary(byteArray68);
        int int73 = deflater29.deflate(byteArray68);
        deflater6.setInput(byteArray68);
        int int75 = deflater1.deflate(byteArray68);
        int int76 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test4673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4673");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        deflater2.setLevel(1);
        long long27 = deflater2.getBytesWritten();
        boolean boolean28 = deflater2.needsInput();
        int int29 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater31.finish();
        long long43 = deflater31.getBytesRead();
        deflater31.reset();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater31.setInput(byteArray51, (int) (short) 0, (int) (short) 1);
        deflater31.reset();
        deflater31.reset();
        boolean boolean57 = deflater31.finished();
        long long58 = deflater31.getBytesRead();
        int int59 = deflater31.getAdler();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((-1), true);
        deflater62.finish();
        deflater62.finish();
        boolean boolean65 = deflater62.finished();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (short) -1, false);
        long long69 = deflater68.getBytesWritten();
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater((int) (byte) 1);
        deflater71.reset();
        int int73 = deflater71.getTotalIn();
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater71.setInput(byteArray80);
        deflater68.setDictionary(byteArray80);
        deflater62.setInput(byteArray80);
        deflater31.setDictionary(byteArray80);
        int int85 = deflater2.deflate(byteArray80);
        deflater2.reset();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test4674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4674");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, false);
        deflater2.setStrategy((int) (short) 1);
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        int int9 = deflater6.getTotalIn();
        int int10 = deflater6.getTotalIn();
        deflater6.setLevel((int) (short) 1);
        deflater6.setLevel((int) (byte) 1);
        boolean boolean15 = deflater6.finished();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (short) -1, false);
        int int19 = deflater18.getTotalIn();
        int int20 = deflater18.getTotalIn();
        boolean boolean21 = deflater18.finished();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        long long24 = deflater23.getBytesWritten();
        int int25 = deflater23.getTotalIn();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater42.finish();
        long long54 = deflater42.getBytesRead();
        deflater42.reset();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater42.setInput(byteArray62, (int) (short) 0, (int) (short) 1);
        deflater27.setDictionary(byteArray62);
        int int67 = deflater23.deflate(byteArray62);
        deflater18.setDictionary(byteArray62);
        int int69 = deflater6.deflate(byteArray62);
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater((int) (byte) 1);
        deflater71.reset();
        int int73 = deflater71.getTotalIn();
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater71.setInput(byteArray80);
        deflater71.finish();
        long long83 = deflater71.getBytesRead();
        deflater71.reset();
        int int85 = deflater71.getAdler();
        byte[] byteArray87 = new byte[] { (byte) 10 };
        deflater71.setDictionary(byteArray87);
        deflater6.setDictionary(byteArray87);
        deflater2.setInput(byteArray87);
        int int91 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test4675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4675");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        deflater1.reset();
        boolean boolean14 = deflater1.needsInput();
        boolean boolean15 = deflater1.needsInput();
        int int16 = deflater1.getTotalIn();
        int int17 = deflater1.getTotalOut();
        int int18 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        int int31 = deflater20.getAdler();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater(1, true);
        boolean boolean36 = deflater35.needsInput();
        int int37 = deflater35.getAdler();
        deflater35.reset();
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 10, (byte) 10, (byte) 100, (byte) 1, (byte) 1 };
        deflater35.setInput(byteArray45, 1, 0);
        deflater20.setDictionary(byteArray45);
        int int50 = deflater1.deflate(byteArray45);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10, 10, 100, 1, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test4676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4676");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        boolean boolean25 = deflater1.needsInput();
        deflater1.reset();
        boolean boolean27 = deflater1.needsInput();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (short) 1, false);
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater35.setInput(byteArray47);
        deflater33.setInput(byteArray47);
        int int51 = deflater30.deflate(byteArray47);
        int int52 = deflater1.deflate(byteArray47);
        long long53 = deflater1.getBytesRead();
        int int54 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test4677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4677");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((-1), true);
        long long24 = deflater23.getBytesWritten();
        deflater23.setLevel(2);
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater28.setDictionary(byteArray63);
        deflater23.setInput(byteArray63);
        deflater9.setDictionary(byteArray63);
        boolean boolean70 = deflater9.finished();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        int int74 = deflater72.getTotalIn();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater72.setInput(byteArray81);
        deflater72.finish();
        long long84 = deflater72.getBytesRead();
        deflater72.reset();
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater72.setInput(byteArray92, (int) (short) 0, (int) (short) 1);
        deflater9.setInput(byteArray92);
        deflater1.setDictionary(byteArray92);
        int int98 = deflater1.getAdler();
        int int99 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 118882828 + "'", int98 == 118882828);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test4678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4678");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        long long5 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.reset();
        boolean boolean19 = deflater7.needsInput();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        int int32 = deflater7.deflate(byteArray30);
        int int33 = deflater1.deflate(byteArray30);
        int int34 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
    }

    @Test
    public void test4679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4679");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        deflater1.finish();
        deflater1.setLevel(9);
        long long11 = deflater1.getBytesRead();
        long long12 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test4680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4680");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, true);
        deflater2.setLevel((-1));
        boolean boolean5 = deflater2.needsInput();
        deflater2.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy(126419322);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test4681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4681");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(1);
        deflater1.reset();
        deflater1.finish();
        deflater1.setLevel((int) (byte) 1);
        int int6 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test4682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4682");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        deflater2.finish();
        long long6 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean9 = deflater8.finished();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater11.finish();
        long long23 = deflater11.getBytesRead();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater40.setInput(byteArray60, (int) (short) 0, (int) (short) 1);
        deflater25.setDictionary(byteArray60);
        int int65 = deflater11.deflate(byteArray60);
        int int68 = deflater8.deflate(byteArray60, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        deflater70.finish();
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater((int) (byte) 1);
        deflater75.reset();
        int int77 = deflater75.getTotalIn();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater75.setInput(byteArray84);
        deflater70.setInput(byteArray84);
        deflater8.setInput(byteArray84);
        deflater2.setInput(byteArray84);
        deflater2.reset();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test4683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4683");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        long long40 = deflater1.getBytesRead();
        deflater1.setStrategy(0);
        long long43 = deflater1.getBytesWritten();
        int int44 = deflater1.getTotalIn();
        boolean boolean45 = deflater1.needsInput();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test4684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4684");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getTotalIn();
        boolean boolean49 = deflater2.needsInput();
        deflater2.end();
        deflater2.finish();
        deflater2.end();
        boolean boolean53 = deflater2.finished();
        java.lang.Class<?> wildcardClass54 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test4685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4685");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        long long8 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater(2, true);
        int int12 = deflater11.getTotalIn();
        int int13 = deflater11.getTotalOut();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater15.setInput(byteArray27);
        boolean boolean30 = deflater15.needsInput();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater((int) (byte) 1);
        deflater53.reset();
        int int55 = deflater53.getTotalIn();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater53.setInput(byteArray62);
        deflater50.setInput(byteArray62);
        deflater48.setInput(byteArray62);
        deflater48.setStrategy(0);
        boolean boolean68 = deflater48.needsInput();
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater((int) (byte) 1);
        deflater73.reset();
        java.util.zip.Deflater deflater76 = new java.util.zip.Deflater((int) (byte) 1);
        deflater76.reset();
        int int78 = deflater76.getTotalIn();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater76.setInput(byteArray85);
        deflater73.setInput(byteArray85);
        deflater71.setInput(byteArray85);
        deflater48.setInput(byteArray85);
        deflater32.setDictionary(byteArray85);
        int int91 = deflater15.deflate(byteArray85);
        int int92 = deflater11.deflate(byteArray85);
        deflater1.setInput(byteArray85);
        long long94 = deflater1.getBytesWritten();
        int int95 = deflater1.getTotalOut();
        boolean boolean96 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test4686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4686");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        deflater1.end();
        boolean boolean20 = deflater1.needsInput();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (short) -1, false);
        deflater23.finish();
        boolean boolean25 = deflater23.finished();
        boolean boolean26 = deflater23.needsInput();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater(3, true);
        deflater29.reset();
        deflater29.setStrategy(0);
        int int33 = deflater29.getAdler();
        deflater29.setLevel(2);
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater37.setInput(byteArray57, (int) (short) 0, (int) (short) 1);
        int int61 = deflater29.deflate(byteArray57);
        int int62 = deflater23.deflate(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = deflater1.deflate(byteArray57, (int) ' ', (int) (byte) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[120, -100, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
    }

    @Test
    public void test4687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4687");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        int int2 = deflater1.getTotalIn();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        long long6 = deflater5.getBytesWritten();
        int int7 = deflater5.getTotalOut();
        long long8 = deflater5.getBytesWritten();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        deflater10.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater10.setDictionary(byteArray23);
        deflater5.setDictionary(byteArray23);
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        long long29 = deflater28.getBytesWritten();
        long long30 = deflater28.getBytesWritten();
        deflater28.setLevel((int) (byte) 0);
        deflater28.reset();
        int int34 = deflater28.getTotalIn();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        deflater36.reset();
        boolean boolean40 = deflater36.finished();
        int int41 = deflater36.getTotalOut();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater43.reset();
        deflater43.reset();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        long long71 = deflater70.getBytesWritten();
        int int72 = deflater70.getTotalOut();
        long long73 = deflater70.getBytesWritten();
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater((int) (byte) 1);
        deflater75.reset();
        deflater75.reset();
        java.util.zip.Deflater deflater79 = new java.util.zip.Deflater((int) (byte) 1);
        deflater79.reset();
        int int81 = deflater79.getTotalIn();
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater79.setInput(byteArray88);
        deflater75.setDictionary(byteArray88);
        deflater70.setDictionary(byteArray88);
        deflater43.setInput(byteArray88);
        deflater36.setDictionary(byteArray88);
        deflater28.setDictionary(byteArray88);
        int int95 = deflater5.deflate(byteArray88);
        deflater1.setInput(byteArray88);
        deflater1.setLevel((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test4688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4688");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.reset();
        boolean boolean4 = deflater1.finished();
        int int5 = deflater1.getAdler();
        long long6 = deflater1.getBytesRead();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test4689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4689");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) -1, false);
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getAdler();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater7.setInput(byteArray20, 0, 0);
        int int25 = deflater5.deflate(byteArray20);
        deflater5.reset();
        int int27 = deflater5.getTotalIn();
        boolean boolean28 = deflater5.needsInput();
        boolean boolean29 = deflater5.finished();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (short) -1, false);
        int int33 = deflater32.getTotalIn();
        int int34 = deflater32.getTotalIn();
        boolean boolean35 = deflater32.finished();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        long long38 = deflater37.getBytesWritten();
        int int39 = deflater37.getTotalIn();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater41.finish();
        long long53 = deflater41.getBytesRead();
        deflater41.reset();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater56.finish();
        long long68 = deflater56.getBytesRead();
        deflater56.reset();
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater56.setInput(byteArray76, (int) (short) 0, (int) (short) 1);
        deflater41.setDictionary(byteArray76);
        int int81 = deflater37.deflate(byteArray76);
        deflater32.setDictionary(byteArray76);
        deflater5.setInput(byteArray76);
        deflater2.setDictionary(byteArray76);
        boolean boolean85 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test4690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4690");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        long long8 = deflater1.getBytesRead();
        long long9 = deflater1.getBytesWritten();
        int int10 = deflater1.getTotalIn();
        int int11 = deflater1.getAdler();
        int int12 = deflater1.getTotalOut();
        deflater1.setStrategy(1);
        deflater1.end();
        boolean boolean16 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test4691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4691");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (short) -1, false);
        int int16 = deflater15.getTotalIn();
        int int17 = deflater15.getTotalIn();
        boolean boolean18 = deflater15.finished();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getAdler();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater20.setInput(byteArray33, 0, 0);
        int int38 = deflater15.deflate(byteArray33);
        int int41 = deflater1.deflate(byteArray33, 0, (int) (short) 0);
        boolean boolean42 = deflater1.finished();
        int int43 = deflater1.getTotalOut();
        int int44 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test4692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4692");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater1.setInput(byteArray15);
        int int18 = deflater1.getAdler();
        boolean boolean19 = deflater1.needsInput();
        long long20 = deflater1.getBytesWritten();
        int int21 = deflater1.getTotalIn();
        deflater1.reset();
        long long23 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test4693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4693");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        int int46 = deflater1.getTotalIn();
        long long47 = deflater1.getBytesRead();
        int int48 = deflater1.getTotalIn();
        long long49 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    @Test
    public void test4694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4694");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        boolean boolean10 = deflater1.finished();
        boolean boolean11 = deflater1.finished();
        int int12 = deflater1.getTotalOut();
        boolean boolean13 = deflater1.finished();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test4695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4695");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, true);
        int int3 = deflater2.getAdler();
        int int4 = deflater2.getAdler();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        long long7 = deflater6.getBytesRead();
        long long8 = deflater6.getBytesRead();
        deflater6.reset();
        boolean boolean10 = deflater6.needsInput();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.finish();
        long long24 = deflater12.getBytesRead();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((-1), true);
        long long28 = deflater27.getBytesWritten();
        deflater27.setLevel(2);
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater47.setInput(byteArray67, (int) (short) 0, (int) (short) 1);
        deflater32.setDictionary(byteArray67);
        deflater27.setInput(byteArray67);
        deflater12.setInput(byteArray67, 3, 1);
        deflater6.setDictionary(byteArray67);
        deflater2.setInput(byteArray67);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test4696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4696");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater8.finish();
        long long20 = deflater8.getBytesRead();
        deflater8.reset();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater8.setInput(byteArray28, (int) (short) 0, (int) (short) 1);
        deflater8.reset();
        deflater8.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        long long36 = deflater35.getBytesWritten();
        int int37 = deflater35.getTotalOut();
        long long38 = deflater35.getBytesWritten();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        deflater40.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater40.setDictionary(byteArray53);
        deflater35.setDictionary(byteArray53);
        deflater8.setInput(byteArray53);
        deflater1.setDictionary(byteArray53, 2, (int) (short) 0);
        int int61 = deflater1.getTotalOut();
        long long62 = deflater1.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
    }

    @Test
    public void test4697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4697");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 1, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy(0);
        int int6 = deflater2.getAdler();
        deflater2.reset();
        int int8 = deflater2.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test4698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4698");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        boolean boolean25 = deflater1.needsInput();
        deflater1.finish();
        int int27 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test4699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4699");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.finished();
        deflater2.reset();
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test4700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4700");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, true);
        deflater2.setLevel((-1));
        boolean boolean5 = deflater2.needsInput();
        deflater2.finish();
        deflater2.reset();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater38.setInput(byteArray58, (int) (short) 0, (int) (short) 1);
        deflater23.setDictionary(byteArray58);
        int int63 = deflater9.deflate(byteArray58);
        boolean boolean64 = deflater9.finished();
        int int65 = deflater9.getTotalIn();
        int int66 = deflater9.getTotalIn();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater68.finish();
        long long80 = deflater68.getBytesRead();
        deflater68.reset();
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater68.setInput(byteArray88, (int) (short) 0, (int) (short) 1);
        int int92 = deflater9.deflate(byteArray88);
        deflater2.setDictionary(byteArray88);
        boolean boolean94 = deflater2.needsInput();
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 6 + "'", int66 == 6);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-1, -97, 17, 0, 5, 53]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test4701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4701");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.needsInput();
        long long14 = deflater1.getBytesWritten();
        deflater1.finish();
        long long16 = deflater1.getBytesRead();
        deflater1.finish();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        long long20 = deflater19.getBytesWritten();
        int int21 = deflater19.getTotalIn();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater38.setInput(byteArray58, (int) (short) 0, (int) (short) 1);
        deflater23.setDictionary(byteArray58);
        int int63 = deflater19.deflate(byteArray58);
        deflater1.setDictionary(byteArray58);
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test4702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4702");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        boolean boolean46 = deflater1.needsInput();
        deflater1.reset();
        boolean boolean48 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test4703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4703");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        int int6 = deflater1.getTotalOut();
        deflater1.finish();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        int int23 = deflater9.getAdler();
        byte[] byteArray25 = new byte[] { (byte) 10 };
        deflater9.setDictionary(byteArray25);
        deflater1.setDictionary(byteArray25);
        deflater1.finish();
        long long29 = deflater1.getBytesWritten();
        long long30 = deflater1.getBytesRead();
        deflater1.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        int int36 = deflater33.getTotalIn();
        deflater33.finish();
        deflater33.reset();
        boolean boolean39 = deflater33.finished();
        deflater33.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater46.finish();
        long long58 = deflater46.getBytesRead();
        deflater46.reset();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater((int) (byte) 1);
        deflater61.reset();
        int int63 = deflater61.getTotalIn();
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater61.setInput(byteArray70);
        deflater61.finish();
        long long73 = deflater61.getBytesRead();
        deflater61.reset();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater61.setInput(byteArray81, (int) (short) 0, (int) (short) 1);
        deflater46.setDictionary(byteArray81);
        deflater42.setInput(byteArray81);
        int int87 = deflater33.deflate(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray81, 196610, 118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test4704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4704");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        deflater1.setLevel((int) (short) 1);
        int int8 = deflater1.getAdler();
        deflater1.finish();
        deflater1.setLevel((int) (byte) 1);
        int int12 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4705");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        long long2 = deflater1.getBytesRead();
        long long3 = deflater1.getBytesRead();
        boolean boolean4 = deflater1.finished();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater();
        deflater5.reset();
        long long7 = deflater5.getBytesWritten();
        int int8 = deflater5.getTotalIn();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean11 = deflater10.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater13.finish();
        long long25 = deflater13.getBytesRead();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater42.finish();
        long long54 = deflater42.getBytesRead();
        deflater42.reset();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater42.setInput(byteArray62, (int) (short) 0, (int) (short) 1);
        deflater27.setDictionary(byteArray62);
        int int67 = deflater13.deflate(byteArray62);
        int int70 = deflater10.deflate(byteArray62, (int) (byte) 1, 2);
        int int73 = deflater5.deflate(byteArray62, 0, 1);
        boolean boolean74 = deflater5.finished();
        int int75 = deflater5.getAdler();
        deflater5.finish();
        int int77 = deflater5.getTotalIn();
        int int78 = deflater5.getAdler();
        java.util.zip.Deflater deflater80 = new java.util.zip.Deflater((int) (byte) 1);
        deflater80.reset();
        deflater80.reset();
        java.util.zip.Deflater deflater84 = new java.util.zip.Deflater((int) (byte) 1);
        deflater84.reset();
        int int86 = deflater84.getTotalIn();
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater84.setInput(byteArray93);
        deflater80.setDictionary(byteArray93);
        deflater5.setInput(byteArray93);
        deflater1.setDictionary(byteArray93);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test4706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4706");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        int int19 = deflater1.getTotalOut();
        long long20 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(131074);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test4707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4707");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        long long2 = deflater1.getBytesWritten();
        deflater1.finish();
        boolean boolean4 = deflater1.finished();
        long long5 = deflater1.getBytesWritten();
        long long6 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test4708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4708");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        deflater1.finish();
        deflater1.finish();
        long long10 = deflater1.getBytesWritten();
        int int11 = deflater1.getTotalIn();
        long long12 = deflater1.getBytesRead();
        boolean boolean13 = deflater1.finished();
        boolean boolean14 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test4709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4709");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        long long4 = deflater2.getBytesWritten();
        deflater2.end();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((-1), true);
        long long9 = deflater8.getBytesWritten();
        deflater8.setLevel(2);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater13.finish();
        long long25 = deflater13.getBytesRead();
        deflater13.reset();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater28.setInput(byteArray48, (int) (short) 0, (int) (short) 1);
        deflater13.setDictionary(byteArray48);
        deflater8.setInput(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray48, 48693373, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test4710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4710");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        long long60 = deflater1.getBytesWritten();
        boolean boolean61 = deflater1.needsInput();
        boolean boolean62 = deflater1.needsInput();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater67 = new java.util.zip.Deflater((int) (byte) 1);
        deflater67.reset();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater70.setInput(byteArray79);
        deflater67.setInput(byteArray79);
        deflater65.setInput(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = deflater1.deflate(byteArray79, 48693373, (int) (byte) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test4711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4711");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        long long2 = deflater1.getBytesWritten();
        deflater1.finish();
        boolean boolean4 = deflater1.finished();
        boolean boolean5 = deflater1.finished();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test4712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4712");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) -1, true);
        long long3 = deflater2.getBytesRead();
        long long4 = deflater2.getBytesRead();
        long long5 = deflater2.getBytesWritten();
        int int6 = deflater2.getTotalOut();
        int int7 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test4713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4713");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesRead();
        long long4 = deflater1.getBytesRead();
        long long5 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test4714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4714");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        long long9 = deflater8.getBytesWritten();
        int int10 = deflater8.getTotalOut();
        long long11 = deflater8.getBytesWritten();
        deflater8.reset();
        deflater8.reset();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        int int18 = deflater15.getTotalIn();
        int int19 = deflater15.getTotalIn();
        long long20 = deflater15.getBytesWritten();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater22.reset();
        deflater22.reset();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        long long50 = deflater49.getBytesWritten();
        int int51 = deflater49.getTotalOut();
        long long52 = deflater49.getBytesWritten();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        deflater54.reset();
        java.util.zip.Deflater deflater58 = new java.util.zip.Deflater((int) (byte) 1);
        deflater58.reset();
        int int60 = deflater58.getTotalIn();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater58.setInput(byteArray67);
        deflater54.setDictionary(byteArray67);
        deflater49.setDictionary(byteArray67);
        deflater22.setInput(byteArray67);
        deflater15.setDictionary(byteArray67, 2, (int) (short) 0);
        int int75 = deflater8.deflate(byteArray67);
        deflater1.setDictionary(byteArray67);
        boolean boolean77 = deflater1.needsInput();
        java.lang.Class<?> wildcardClass78 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test4715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4715");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater(3, true);
        int int20 = deflater19.getAdler();
        deflater19.setStrategy(0);
        int int23 = deflater19.getTotalOut();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        long long26 = deflater25.getBytesWritten();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        int int42 = deflater28.getAdler();
        boolean boolean43 = deflater28.needsInput();
        int int44 = deflater28.getTotalIn();
        int int45 = deflater28.getTotalIn();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater62.finish();
        long long74 = deflater62.getBytesRead();
        deflater62.reset();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater62.setInput(byteArray82, (int) (short) 0, (int) (short) 1);
        int int86 = deflater47.deflate(byteArray82);
        deflater28.setDictionary(byteArray82);
        deflater25.setInput(byteArray82);
        int int91 = deflater19.deflate(byteArray82, (int) (byte) 1, 3);
        int int92 = deflater1.deflate(byteArray82);
        long long93 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 6L + "'", long93 == 6L);
    }

    @Test
    public void test4716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4716");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) 0, true);
        boolean boolean3 = deflater2.needsInput();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        int int8 = deflater5.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater13.setInput(byteArray25);
        deflater11.setInput(byteArray25);
        deflater11.setStrategy(0);
        boolean boolean31 = deflater11.needsInput();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater36.setInput(byteArray48);
        deflater34.setInput(byteArray48);
        deflater11.setInput(byteArray48);
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater54.finish();
        long long66 = deflater54.getBytesRead();
        deflater54.reset();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater54.setInput(byteArray74, (int) (short) 0, (int) (short) 1);
        deflater11.setInput(byteArray74);
        int int79 = deflater5.deflate(byteArray74);
        deflater2.setInput(byteArray74);
        deflater2.setLevel(6);
        int int83 = deflater2.getTotalOut();
        int int84 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test4717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4717");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        int int3 = deflater1.getTotalOut();
        long long4 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test4718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4718");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        boolean boolean5 = deflater2.needsInput();
        long long6 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater8.reset();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater21.setInput(byteArray41, (int) (short) 0, (int) (short) 1);
        deflater8.setInput(byteArray41);
        boolean boolean46 = deflater8.finished();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater51.setInput(byteArray63);
        deflater49.setInput(byteArray63);
        deflater49.setStrategy(0);
        boolean boolean69 = deflater49.needsInput();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        java.util.zip.Deflater deflater77 = new java.util.zip.Deflater((int) (byte) 1);
        deflater77.reset();
        int int79 = deflater77.getTotalIn();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater77.setInput(byteArray86);
        deflater74.setInput(byteArray86);
        deflater72.setInput(byteArray86);
        deflater49.setInput(byteArray86);
        deflater8.setDictionary(byteArray86, (int) (short) 0, (int) (byte) 0);
        deflater2.setInput(byteArray86);
        boolean boolean95 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test4719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4719");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        boolean boolean46 = deflater1.needsInput();
        int int47 = deflater1.getAdler();
        deflater1.setStrategy(0);
        boolean boolean50 = deflater1.needsInput();
        int int51 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test4720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4720");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater2.setDictionary(byteArray14);
        int int17 = deflater2.getTotalOut();
        boolean boolean18 = deflater2.needsInput();
        boolean boolean19 = deflater2.finished();
        long long20 = deflater2.getBytesWritten();
        long long21 = deflater2.getBytesWritten();
        boolean boolean22 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4721");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        int int8 = deflater1.getAdler();
        boolean boolean9 = deflater1.needsInput();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        long long12 = deflater11.getBytesWritten();
        int int13 = deflater11.getTotalOut();
        long long14 = deflater11.getBytesWritten();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        deflater16.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater16.setDictionary(byteArray29);
        deflater11.setDictionary(byteArray29);
        int int35 = deflater1.deflate(byteArray29, 2, (int) (byte) 1);
        deflater1.setLevel(3);
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        int int50 = deflater1.deflate(byteArray48);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test4722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4722");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesRead();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test4723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4723");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater33.setInput(byteArray53, (int) (short) 0, (int) (short) 1);
        deflater18.setDictionary(byteArray53);
        int int58 = deflater4.deflate(byteArray53);
        int int61 = deflater1.deflate(byteArray53, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        deflater63.finish();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater63.setInput(byteArray77);
        deflater1.setInput(byteArray77);
        int int81 = deflater1.getTotalOut();
        deflater1.finish();
        int int83 = deflater1.getTotalIn();
        long long84 = deflater1.getBytesRead();
        deflater1.setLevel((int) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
    }

    @Test
    public void test4724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4724");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        boolean boolean3 = deflater2.needsInput();
        boolean boolean4 = deflater2.needsInput();
        int int5 = deflater2.getTotalOut();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater();
        deflater6.reset();
        long long8 = deflater6.getBytesRead();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (short) -1, false);
        deflater11.finish();
        boolean boolean13 = deflater11.finished();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater18.setInput(byteArray30);
        deflater16.setInput(byteArray30);
        deflater16.setStrategy(0);
        boolean boolean36 = deflater16.needsInput();
        long long37 = deflater16.getBytesWritten();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        long long40 = deflater39.getBytesWritten();
        int int41 = deflater39.getTotalIn();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        java.util.zip.Deflater deflater58 = new java.util.zip.Deflater((int) (byte) 1);
        deflater58.reset();
        int int60 = deflater58.getTotalIn();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater58.setInput(byteArray67);
        deflater58.finish();
        long long70 = deflater58.getBytesRead();
        deflater58.reset();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater58.setInput(byteArray78, (int) (short) 0, (int) (short) 1);
        deflater43.setDictionary(byteArray78);
        int int83 = deflater39.deflate(byteArray78);
        deflater16.setInput(byteArray78, (int) (short) 1, (int) (byte) 0);
        deflater11.setDictionary(byteArray78);
        deflater6.setInput(byteArray78, 2, 0);
        int int91 = deflater2.deflate(byteArray78);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test4725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4725");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) -1, true);
        long long3 = deflater2.getBytesRead();
        long long4 = deflater2.getBytesRead();
        boolean boolean5 = deflater2.needsInput();
        int int6 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (short) -1, false);
        int int10 = deflater9.getTotalIn();
        int int11 = deflater9.getTotalIn();
        boolean boolean12 = deflater9.finished();
        deflater9.end();
        deflater9.setLevel((int) (short) -1);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        int int31 = deflater17.getTotalIn();
        deflater17.finish();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater(3, true);
        int int36 = deflater35.getAdler();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((-1), true);
        long long40 = deflater39.getBytesWritten();
        deflater39.setLevel(2);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        int int61 = deflater59.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater59.setInput(byteArray68);
        deflater59.finish();
        long long71 = deflater59.getBytesRead();
        deflater59.reset();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater59.setInput(byteArray79, (int) (short) 0, (int) (short) 1);
        deflater44.setDictionary(byteArray79);
        deflater39.setInput(byteArray79);
        deflater35.setDictionary(byteArray79);
        deflater17.setInput(byteArray79);
        deflater9.setInput(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray79, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test4726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4726");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.finish();
        int int4 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((-1), true);
        long long8 = deflater7.getBytesWritten();
        deflater7.setLevel(2);
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.finish();
        long long24 = deflater12.getBytesRead();
        deflater12.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater27.setInput(byteArray47, (int) (short) 0, (int) (short) 1);
        deflater12.setDictionary(byteArray47);
        deflater7.setInput(byteArray47);
        int int53 = deflater1.deflate(byteArray47);
        deflater1.reset();
        boolean boolean55 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[120, -100, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test4727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4727");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getAdler();
        long long9 = deflater1.getBytesWritten();
        boolean boolean10 = deflater1.finished();
        int int11 = deflater1.getTotalIn();
        int int12 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4728");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        boolean boolean13 = deflater1.needsInput();
        long long14 = deflater1.getBytesRead();
        java.lang.Class<?> wildcardClass15 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4729");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        int int21 = deflater20.getTotalOut();
        int int22 = deflater20.getTotalOut();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getAdler();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater52.setInput(byteArray65, 0, 0);
        int int70 = deflater50.deflate(byteArray65);
        deflater24.setInput(byteArray65);
        deflater20.setDictionary(byteArray65);
        deflater1.setInput(byteArray65);
        long long74 = deflater1.getBytesRead();
        deflater1.setLevel(9);
        long long77 = deflater1.getBytesRead();
        deflater1.finish();
        deflater1.setLevel((-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test4730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4730");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        deflater2.end();
        deflater2.setLevel((int) (short) -1);
        deflater2.end();
        boolean boolean10 = deflater2.finished();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater();
        deflater11.reset();
        long long13 = deflater11.getBytesWritten();
        int int14 = deflater11.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 1 };
        deflater11.setInput(byteArray17);
        deflater2.setInput(byteArray17);
        deflater2.setStrategy(1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 1]");
    }

    @Test
    public void test4731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4731");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        deflater1.finish();
        long long4 = deflater1.getBytesRead();
        deflater1.finish();
        boolean boolean6 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test4732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4732");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        boolean boolean10 = deflater1.finished();
        boolean boolean11 = deflater1.finished();
        int int12 = deflater1.getTotalOut();
        int int13 = deflater1.getAdler();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater17.setInput(byteArray29);
        boolean boolean32 = deflater17.needsInput();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater52.setInput(byteArray64);
        deflater50.setInput(byteArray64);
        deflater50.setStrategy(0);
        boolean boolean70 = deflater50.needsInput();
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater((int) (byte) 1);
        deflater75.reset();
        java.util.zip.Deflater deflater78 = new java.util.zip.Deflater((int) (byte) 1);
        deflater78.reset();
        int int80 = deflater78.getTotalIn();
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater78.setInput(byteArray87);
        deflater75.setInput(byteArray87);
        deflater73.setInput(byteArray87);
        deflater50.setInput(byteArray87);
        deflater34.setDictionary(byteArray87);
        int int93 = deflater17.deflate(byteArray87);
        deflater15.setInput(byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            int int97 = deflater1.deflate(byteArray87, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
    }

    @Test
    public void test4733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4733");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        boolean boolean25 = deflater1.needsInput();
        deflater1.reset();
        boolean boolean27 = deflater1.needsInput();
        deflater1.setLevel((int) (short) 1);
        java.lang.Class<?> wildcardClass30 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test4734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4734");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.needsInput();
        int int5 = deflater2.getTotalIn();
        long long6 = deflater2.getBytesWritten();
        byte[] byteArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = deflater2.deflate(byteArray7, (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test4735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4735");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater2.setDictionary(byteArray14);
        int int17 = deflater2.getTotalOut();
        boolean boolean18 = deflater2.needsInput();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((-1), true);
        deflater21.finish();
        deflater21.finish();
        boolean boolean24 = deflater21.finished();
        deflater21.finish();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater();
        deflater26.reset();
        long long28 = deflater26.getBytesWritten();
        int int29 = deflater26.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 1 };
        deflater26.setInput(byteArray32);
        deflater21.setInput(byteArray32);
        deflater2.setDictionary(byteArray32);
        boolean boolean36 = deflater2.finished();
        int int37 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test4736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4736");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getAdler();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater26.setInput(byteArray39, 0, 0);
        long long44 = deflater26.getBytesRead();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater46.finish();
        long long58 = deflater46.getBytesRead();
        deflater46.reset();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater46.setInput(byteArray66, (int) (short) 0, (int) (short) 1);
        deflater26.setDictionary(byteArray66);
        int int71 = deflater2.deflate(byteArray66);
        boolean boolean72 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test4737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4737");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        long long25 = deflater2.getBytesWritten();
        boolean boolean26 = deflater2.needsInput();
        int int27 = deflater2.getTotalOut();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test4738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4738");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        long long46 = deflater1.getBytesWritten();
        int int47 = deflater1.getTotalOut();
        int int48 = deflater1.getAdler();
        long long49 = deflater1.getBytesRead();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    @Test
    public void test4739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4739");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getAdler();
        deflater2.finish();
        deflater2.finish();
        int int51 = deflater2.getAdler();
        boolean boolean52 = deflater2.finished();
        deflater2.setLevel(9);
        int int55 = deflater2.getTotalIn();
        deflater2.reset();
        int int57 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test4740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4740");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((-1), true);
        long long17 = deflater16.getBytesWritten();
        deflater16.setLevel(2);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        deflater21.setDictionary(byteArray56);
        deflater16.setInput(byteArray56);
        deflater1.setInput(byteArray56, 3, 1);
        boolean boolean65 = deflater1.finished();
        int int66 = deflater1.getTotalOut();
        deflater1.reset();
        boolean boolean68 = deflater1.needsInput();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test4741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4741");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getAdler();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater7.setInput(byteArray20, 0, 0);
        int int25 = deflater2.deflate(byteArray20);
        int int26 = deflater2.getTotalIn();
        deflater2.reset();
        deflater2.reset();
        deflater2.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test4742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4742");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        boolean boolean62 = deflater1.finished();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        int int66 = deflater64.getTotalIn();
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater64.setInput(byteArray73);
        deflater64.finish();
        long long76 = deflater64.getBytesRead();
        deflater64.reset();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater64.setInput(byteArray84, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray84);
        int int89 = deflater1.getTotalOut();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test4743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4743");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        int int7 = deflater1.getTotalIn();
        deflater1.setLevel(1);
        long long10 = deflater1.getBytesRead();
        int int11 = deflater1.getAdler();
        long long12 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test4744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4744");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        int int6 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        int int19 = deflater8.getAdler();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (short) -1, false);
        int int23 = deflater22.getTotalIn();
        int int24 = deflater22.getTotalIn();
        boolean boolean25 = deflater22.finished();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getAdler();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater27.setInput(byteArray40, 0, 0);
        int int45 = deflater22.deflate(byteArray40);
        int int48 = deflater8.deflate(byteArray40, 0, (int) (short) 0);
        deflater1.setInput(byteArray40, 0, 2);
        deflater1.finish();
        deflater1.end();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test4745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4745");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        int int58 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        deflater63.finish();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater63.setInput(byteArray77);
        int int80 = deflater60.deflate(byteArray77);
        int int81 = deflater1.deflate(byteArray77);
        int int82 = deflater1.getAdler();
        deflater1.finish();
        int int84 = deflater1.getTotalOut();
        boolean boolean85 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1, -97, 17, 0, 5, 53]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 6 + "'", int81 == 6);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 87360012 + "'", int82 == 87360012);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 12 + "'", int84 == 12);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test4746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4746");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, true);
        long long3 = deflater2.getBytesRead();
        int int4 = deflater2.getAdler();
        deflater2.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        deflater21.setDictionary(byteArray56);
        int int61 = deflater7.deflate(byteArray56);
        boolean boolean62 = deflater7.finished();
        int int63 = deflater7.getTotalIn();
        int int64 = deflater7.getTotalIn();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater66.finish();
        long long78 = deflater66.getBytesRead();
        deflater66.reset();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater66.setInput(byteArray86, (int) (short) 0, (int) (short) 1);
        int int90 = deflater7.deflate(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray86, (int) ' ', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1, -97, 17, 0, 5, 53]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 6 + "'", int90 == 6);
    }

    @Test
    public void test4747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4747");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        deflater2.finish();
        deflater2.reset();
        int int25 = deflater2.getAdler();
        boolean boolean26 = deflater2.finished();
        int int27 = deflater2.getAdler();
        deflater2.finish();
        long long29 = deflater2.getBytesRead();
        boolean boolean30 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test4748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4748");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) -1, true);
        long long3 = deflater2.getBytesRead();
        boolean boolean4 = deflater2.finished();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        deflater6.finish();
        boolean boolean10 = deflater6.finished();
        int int11 = deflater6.getTotalIn();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean14 = deflater13.finished();
        deflater13.finish();
        deflater13.end();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater21.setInput(byteArray33);
        deflater19.setInput(byteArray33);
        deflater19.setStrategy(0);
        boolean boolean39 = deflater19.needsInput();
        long long40 = deflater19.getBytesWritten();
        long long41 = deflater19.getBytesRead();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getAdler();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater43.setInput(byteArray56, 0, 0);
        long long61 = deflater43.getBytesRead();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater63.setInput(byteArray72);
        deflater63.finish();
        long long75 = deflater63.getBytesRead();
        deflater63.reset();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater63.setInput(byteArray83, (int) (short) 0, (int) (short) 1);
        deflater43.setDictionary(byteArray83);
        int int88 = deflater19.deflate(byteArray83);
        deflater13.setInput(byteArray83);
        int int90 = deflater6.deflate(byteArray83);
        int int91 = deflater2.deflate(byteArray83);
        boolean boolean92 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 6 + "'", int90 == 6);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test4749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4749");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalIn();
        long long5 = deflater2.getBytesRead();
        deflater2.finish();
        long long7 = deflater2.getBytesWritten();
        int int8 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        long long11 = deflater10.getBytesWritten();
        long long12 = deflater10.getBytesWritten();
        long long13 = deflater10.getBytesWritten();
        boolean boolean14 = deflater10.finished();
        boolean boolean15 = deflater10.finished();
        int int16 = deflater10.getTotalIn();
        int int17 = deflater10.getTotalOut();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        deflater19.finish();
        long long23 = deflater19.getBytesRead();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.reset();
        boolean boolean37 = deflater25.needsInput();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        int int50 = deflater25.deflate(byteArray48);
        int int51 = deflater19.deflate(byteArray48);
        deflater10.setDictionary(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray48, 2, 16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
    }

    @Test
    public void test4750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4750");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        long long48 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        deflater50.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater50.setDictionary(byteArray63);
        deflater2.setInput(byteArray63);
        int int67 = deflater2.getTotalOut();
        long long68 = deflater2.getBytesWritten();
        int int69 = deflater2.getTotalIn();
        int int70 = deflater2.getAdler();
        boolean boolean71 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test4751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4751");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        int int18 = deflater1.getTotalIn();
        int int19 = deflater1.getTotalOut();
        int int20 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test4752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4752");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        deflater1.finish();
        long long64 = deflater1.getBytesRead();
        int int65 = deflater1.getTotalOut();
        int int66 = deflater1.getAdler();
        int int67 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 118882828 + "'", int66 == 118882828);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test4753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4753");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        int int8 = deflater1.getAdler();
        long long9 = deflater1.getBytesRead();
        deflater1.setLevel((int) (byte) -1);
        long long12 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test4754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4754");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        int int21 = deflater20.getTotalOut();
        int int22 = deflater20.getTotalOut();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getAdler();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater52.setInput(byteArray65, 0, 0);
        int int70 = deflater50.deflate(byteArray65);
        deflater24.setInput(byteArray65);
        deflater20.setDictionary(byteArray65);
        deflater1.setInput(byteArray65);
        long long74 = deflater1.getBytesRead();
        long long75 = deflater1.getBytesRead();
        long long76 = deflater1.getBytesWritten();
        boolean boolean77 = deflater1.finished();
        long long78 = deflater1.getBytesRead();
        int int79 = deflater1.getTotalOut();
        int int80 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test4755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4755");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 1, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy(0);
        int int6 = deflater2.getTotalIn();
        long long7 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater9.setInput(byteArray21);
        boolean boolean24 = deflater9.needsInput();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater26.finish();
        long long38 = deflater26.getBytesRead();
        deflater26.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater44.setInput(byteArray56);
        deflater42.setInput(byteArray56);
        deflater42.setStrategy(0);
        boolean boolean62 = deflater42.needsInput();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater67 = new java.util.zip.Deflater((int) (byte) 1);
        deflater67.reset();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater70.setInput(byteArray79);
        deflater67.setInput(byteArray79);
        deflater65.setInput(byteArray79);
        deflater42.setInput(byteArray79);
        deflater26.setDictionary(byteArray79);
        int int85 = deflater9.deflate(byteArray79);
        deflater2.setInput(byteArray79);
        deflater2.finish();
        int int88 = deflater2.getAdler();
        long long89 = deflater2.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
    }

    @Test
    public void test4756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4756");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        deflater2.end();
        deflater2.setLevel((int) (short) -1);
        deflater2.end();
        deflater2.end();
        byte[] byteArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test4757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4757");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), false);
        int int3 = deflater2.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((-1), true);
        long long20 = deflater19.getBytesWritten();
        deflater19.setLevel(2);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater39.finish();
        long long51 = deflater39.getBytesRead();
        deflater39.reset();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater39.setInput(byteArray59, (int) (short) 0, (int) (short) 1);
        deflater24.setDictionary(byteArray59);
        deflater19.setInput(byteArray59);
        deflater5.setDictionary(byteArray59);
        deflater2.setDictionary(byteArray59);
        deflater2.reset();
        int int68 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test4758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4758");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (short) 0);
        int int5 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        int int10 = deflater7.getTotalIn();
        deflater7.finish();
        deflater7.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater7.setInput(byteArray23);
        deflater1.setInput(byteArray23);
        int int27 = deflater1.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test4759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4759");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalIn();
        long long5 = deflater2.getBytesRead();
        deflater2.finish();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        long long9 = deflater8.getBytesWritten();
        int int10 = deflater8.getTotalOut();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.finish();
        long long24 = deflater12.getBytesRead();
        deflater12.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater27.setInput(byteArray47, (int) (short) 0, (int) (short) 1);
        deflater12.setDictionary(byteArray47);
        deflater8.setDictionary(byteArray47);
        deflater2.setDictionary(byteArray47);
        int int54 = deflater2.getAdler();
        int int55 = deflater2.getTotalOut();
        boolean boolean56 = deflater2.needsInput();
        boolean boolean57 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 118882828 + "'", int54 == 118882828);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test4760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4760");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.setLevel(0);
        long long20 = deflater1.getBytesRead();
        java.lang.Class<?> wildcardClass21 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test4761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4761");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        int int18 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        int int59 = deflater20.deflate(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int61 = deflater1.getTotalOut();
        long long62 = deflater1.getBytesRead();
        long long63 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
    }

    @Test
    public void test4762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4762");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        long long2 = deflater1.getBytesRead();
        long long3 = deflater1.getBytesRead();
        deflater1.reset();
        boolean boolean5 = deflater1.needsInput();
        int int6 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test4763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4763");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((-1), true);
        long long20 = deflater19.getBytesWritten();
        deflater19.setLevel(2);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater39.finish();
        long long51 = deflater39.getBytesRead();
        deflater39.reset();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater39.setInput(byteArray59, (int) (short) 0, (int) (short) 1);
        deflater24.setDictionary(byteArray59);
        deflater19.setInput(byteArray59);
        deflater5.setDictionary(byteArray59);
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getAdler();
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        int int76 = deflater74.getTotalIn();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater74.setInput(byteArray83);
        deflater70.setInput(byteArray83, 0, 0);
        int int88 = deflater68.deflate(byteArray83);
        deflater5.setInput(byteArray83);
        int int90 = deflater2.deflate(byteArray83);
        deflater2.reset();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test4764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4764");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        int int22 = deflater1.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            int int28 = deflater1.deflate(byteArray24, (int) (short) 1, 720907, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
    }

    @Test
    public void test4765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4765");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        long long18 = deflater1.getBytesWritten();
        long long19 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        long long22 = deflater21.getBytesRead();
        long long23 = deflater21.getBytesRead();
        deflater21.reset();
        boolean boolean25 = deflater21.needsInput();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((-1), true);
        long long43 = deflater42.getBytesWritten();
        deflater42.setLevel(2);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater62.finish();
        long long74 = deflater62.getBytesRead();
        deflater62.reset();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater62.setInput(byteArray82, (int) (short) 0, (int) (short) 1);
        deflater47.setDictionary(byteArray82);
        deflater42.setInput(byteArray82);
        deflater27.setInput(byteArray82, 3, 1);
        deflater21.setDictionary(byteArray82);
        deflater1.setInput(byteArray82, 2, (int) (short) 0);
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test4766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4766");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.finish();
        int int9 = deflater1.getAdler();
        int int10 = deflater1.getTotalOut();
        boolean boolean11 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test4767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4767");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        long long60 = deflater1.getBytesRead();
        boolean boolean61 = deflater1.finished();
        int int62 = deflater1.getTotalOut();
        boolean boolean63 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test4768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4768");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        long long60 = deflater1.getBytesRead();
        boolean boolean61 = deflater1.finished();
        int int62 = deflater1.getTotalOut();
        deflater1.reset();
        deflater1.setStrategy(0);
        deflater1.finish();
        int int67 = deflater1.getTotalIn();
        long long68 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
    }

    @Test
    public void test4769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4769");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.needsInput();
        long long14 = deflater1.getBytesWritten();
        deflater1.finish();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((-1), true);
        long long32 = deflater31.getBytesWritten();
        deflater31.setLevel(2);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater51.setInput(byteArray71, (int) (short) 0, (int) (short) 1);
        deflater36.setDictionary(byteArray71);
        deflater31.setInput(byteArray71);
        deflater17.setDictionary(byteArray71);
        deflater1.setDictionary(byteArray71);
        boolean boolean79 = deflater1.finished();
        deflater1.reset();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test4770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4770");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), false);
        deflater2.setStrategy(1);
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        long long7 = deflater6.getBytesWritten();
        int int8 = deflater6.getTotalOut();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.finish();
        long long22 = deflater10.getBytesRead();
        deflater10.reset();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater25.setInput(byteArray45, (int) (short) 0, (int) (short) 1);
        deflater10.setDictionary(byteArray45);
        deflater6.setDictionary(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = deflater2.deflate(byteArray45, (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test4771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4771");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.reset();
        int int19 = deflater1.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test4772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4772");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        long long5 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        long long8 = deflater7.getBytesRead();
        long long9 = deflater7.getBytesRead();
        long long10 = deflater7.getBytesWritten();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.finish();
        long long24 = deflater12.getBytesRead();
        deflater12.reset();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater12.setInput(byteArray32, (int) (short) 0, (int) (short) 1);
        deflater7.setInput(byteArray32);
        deflater1.setInput(byteArray32);
        deflater1.setLevel(2);
        long long40 = deflater1.getBytesWritten();
        int int41 = deflater1.getTotalIn();
        deflater1.reset();
        long long43 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
    }

    @Test
    public void test4773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4773");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), false);
        int int3 = deflater2.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((-1), true);
        long long20 = deflater19.getBytesWritten();
        deflater19.setLevel(2);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater39.finish();
        long long51 = deflater39.getBytesRead();
        deflater39.reset();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater39.setInput(byteArray59, (int) (short) 0, (int) (short) 1);
        deflater24.setDictionary(byteArray59);
        deflater19.setInput(byteArray59);
        deflater5.setDictionary(byteArray59);
        deflater2.setDictionary(byteArray59);
        deflater2.reset();
        deflater2.reset();
        int int69 = deflater2.getAdler();
        boolean boolean70 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test4774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4774");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        long long5 = deflater2.getBytesWritten();
        int int6 = deflater2.getTotalOut();
        int int7 = deflater2.getTotalIn();
        int int8 = deflater2.getTotalOut();
        deflater2.finish();
        long long10 = deflater2.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test4775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4775");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, false);
        deflater2.finish();
        int int4 = deflater2.getTotalIn();
        long long5 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        int int10 = deflater7.getTotalIn();
        deflater7.finish();
        deflater7.reset();
        boolean boolean13 = deflater7.finished();
        deflater7.finish();
        deflater7.finish();
        long long16 = deflater7.getBytesWritten();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater();
        deflater17.reset();
        long long19 = deflater17.getBytesWritten();
        int int20 = deflater17.getTotalIn();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean23 = deflater22.finished();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater39.finish();
        long long51 = deflater39.getBytesRead();
        deflater39.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater54.finish();
        long long66 = deflater54.getBytesRead();
        deflater54.reset();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater54.setInput(byteArray74, (int) (short) 0, (int) (short) 1);
        deflater39.setDictionary(byteArray74);
        int int79 = deflater25.deflate(byteArray74);
        int int82 = deflater22.deflate(byteArray74, (int) (byte) 1, 2);
        int int85 = deflater17.deflate(byteArray74, 0, 1);
        int int86 = deflater7.deflate(byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = deflater2.deflate(byteArray74, 0, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 6 + "'", int79 == 6);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 6 + "'", int86 == 6);
    }

    @Test
    public void test4776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4776");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, false);
        long long3 = deflater2.getBytesRead();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test4777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4777");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 1, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy(0);
        int int6 = deflater2.getTotalIn();
        long long7 = deflater2.getBytesRead();
        long long8 = deflater2.getBytesWritten();
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test4778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4778");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (short) -1);
        boolean boolean2 = deflater1.needsInput();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test4779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4779");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalOut();
        long long5 = deflater1.getBytesRead();
        boolean boolean6 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((-1));
        boolean boolean9 = deflater8.finished();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater11.setInput(byteArray23);
        int int26 = deflater11.getTotalIn();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        long long29 = deflater28.getBytesRead();
        long long30 = deflater28.getBytesRead();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        int int46 = deflater32.getAdler();
        boolean boolean47 = deflater32.needsInput();
        int int48 = deflater32.getTotalIn();
        int int49 = deflater32.getTotalIn();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater66.finish();
        long long78 = deflater66.getBytesRead();
        deflater66.reset();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater66.setInput(byteArray86, (int) (short) 0, (int) (short) 1);
        int int90 = deflater51.deflate(byteArray86);
        deflater32.setDictionary(byteArray86);
        deflater28.setInput(byteArray86);
        deflater11.setDictionary(byteArray86);
        deflater8.setDictionary(byteArray86);
        deflater1.setInput(byteArray86);
        boolean boolean96 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test4780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4780");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        deflater1.setLevel(3);
        deflater1.setStrategy(2);
        deflater1.reset();
        deflater1.end();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(87360012);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
    }

    @Test
    public void test4781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4781");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) -1, true);
        long long3 = deflater2.getBytesRead();
        long long4 = deflater2.getBytesRead();
        long long5 = deflater2.getBytesWritten();
        int int6 = deflater2.getTotalOut();
        deflater2.reset();
        long long8 = deflater2.getBytesWritten();
        long long9 = deflater2.getBytesWritten();
        byte[] byteArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray10, 8, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test4782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4782");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        deflater1.setDictionary(byteArray40);
        deflater1.end();
        deflater1.setLevel((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test4783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4783");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getAdler();
        int int58 = deflater1.getTotalIn();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 87360012 + "'", int57 == 87360012);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
    }

    @Test
    public void test4784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4784");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalOut();
        long long5 = deflater1.getBytesRead();
        int int6 = deflater1.getTotalIn();
        int int7 = deflater1.getAdler();
        int int8 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater10.setInput(byteArray22);
        deflater10.setLevel((int) (byte) -1);
        deflater10.finish();
        int int28 = deflater10.getTotalOut();
        deflater10.end();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (short) -1, false);
        deflater32.finish();
        boolean boolean34 = deflater32.finished();
        boolean boolean35 = deflater32.needsInput();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater(3, true);
        deflater38.reset();
        deflater38.setStrategy(0);
        int int42 = deflater38.getAdler();
        deflater38.setLevel(2);
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater46.finish();
        long long58 = deflater46.getBytesRead();
        deflater46.reset();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater46.setInput(byteArray66, (int) (short) 0, (int) (short) 1);
        int int70 = deflater38.deflate(byteArray66);
        int int71 = deflater32.deflate(byteArray66);
        deflater10.setInput(byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray66, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[120, -100, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 6 + "'", int71 == 6);
    }

    @Test
    public void test4785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4785");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        long long4 = deflater2.getBytesWritten();
        boolean boolean5 = deflater2.finished();
        boolean boolean6 = deflater2.finished();
        deflater2.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test4786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4786");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        long long4 = deflater2.getBytesWritten();
        deflater2.finish();
        boolean boolean6 = deflater2.needsInput();
        boolean boolean7 = deflater2.needsInput();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater(0, false);
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        int int13 = deflater12.getTotalOut();
        int int14 = deflater12.getTotalOut();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater16.finish();
        long long28 = deflater16.getBytesRead();
        deflater16.reset();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater16.setInput(byteArray36, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getAdler();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater44.setInput(byteArray57, 0, 0);
        int int62 = deflater42.deflate(byteArray57);
        deflater16.setInput(byteArray57);
        deflater12.setDictionary(byteArray57);
        int int65 = deflater12.getAdler();
        deflater12.reset();
        deflater12.setLevel((int) (byte) -1);
        int int69 = deflater12.getTotalIn();
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater((int) (byte) 1);
        long long72 = deflater71.getBytesRead();
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        java.util.zip.Deflater deflater77 = new java.util.zip.Deflater((int) (byte) 1);
        deflater77.reset();
        int int79 = deflater77.getTotalIn();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater77.setInput(byteArray86);
        deflater74.setInput(byteArray86);
        deflater71.setDictionary(byteArray86);
        int int90 = deflater12.deflate(byteArray86);
        deflater10.setDictionary(byteArray86);
        int int92 = deflater2.deflate(byteArray86);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 87360012 + "'", int65 == 87360012);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[120, 1, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
    }

    @Test
    public void test4787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4787");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        long long5 = deflater2.getBytesWritten();
        int int6 = deflater2.getTotalOut();
        int int7 = deflater2.getAdler();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater();
        deflater8.end();
        deflater8.end();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean13 = deflater12.finished();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        deflater29.setDictionary(byteArray64);
        int int69 = deflater15.deflate(byteArray64);
        int int72 = deflater12.deflate(byteArray64, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater();
        deflater73.reset();
        long long75 = deflater73.getBytesWritten();
        int int76 = deflater73.getTotalIn();
        byte[] byteArray79 = new byte[] { (byte) 0, (byte) 1 };
        deflater73.setInput(byteArray79);
        deflater12.setDictionary(byteArray79);
        deflater8.setInput(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = deflater2.deflate(byteArray79, 131074, 131074);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 1]");
    }

    @Test
    public void test4788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4788");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test4789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4789");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        long long46 = deflater1.getBytesWritten();
        int int47 = deflater1.getTotalOut();
        long long48 = deflater1.getBytesRead();
        java.lang.Class<?> wildcardClass49 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test4790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4790");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((-1));
        boolean boolean2 = deflater1.finished();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        int int6 = deflater5.getTotalOut();
        int int7 = deflater5.getTotalOut();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getAdler();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater12.setInput(byteArray25, 0, 0);
        int int30 = deflater10.deflate(byteArray25);
        deflater10.end();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        long long34 = deflater33.getBytesWritten();
        int int35 = deflater33.getTotalIn();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getTotalIn();
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater52.setInput(byteArray61);
        deflater52.finish();
        long long64 = deflater52.getBytesRead();
        deflater52.reset();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater52.setInput(byteArray72, (int) (short) 0, (int) (short) 1);
        deflater37.setDictionary(byteArray72);
        int int77 = deflater33.deflate(byteArray72);
        deflater10.setInput(byteArray72);
        int int79 = deflater5.deflate(byteArray72);
        deflater1.setInput(byteArray72);
        deflater1.end();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test4791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4791");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 0);
        deflater1.finish();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((-1), true);
        int int6 = deflater5.getAdler();
        boolean boolean7 = deflater5.finished();
        boolean boolean8 = deflater5.needsInput();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (short) -1, true);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        int int16 = deflater13.getTotalIn();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater21.setInput(byteArray33);
        deflater19.setInput(byteArray33);
        deflater19.setStrategy(0);
        boolean boolean39 = deflater19.needsInput();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater44.setInput(byteArray56);
        deflater42.setInput(byteArray56);
        deflater19.setInput(byteArray56);
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater62.finish();
        long long74 = deflater62.getBytesRead();
        deflater62.reset();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater62.setInput(byteArray82, (int) (short) 0, (int) (short) 1);
        deflater19.setInput(byteArray82);
        int int87 = deflater13.deflate(byteArray82);
        deflater11.setInput(byteArray82, 1, 0);
        deflater5.setDictionary(byteArray82);
        deflater1.setInput(byteArray82);
        int int93 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test4792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4792");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        deflater1.finish();
        deflater1.finish();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        int int13 = deflater12.getAdler();
        boolean boolean14 = deflater12.finished();
        deflater12.finish();
        deflater12.reset();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        deflater18.finish();
        long long22 = deflater18.getBytesWritten();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        long long25 = deflater24.getBytesRead();
        long long26 = deflater24.getBytesRead();
        long long27 = deflater24.getBytesWritten();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater29.setInput(byteArray49, (int) (short) 0, (int) (short) 1);
        deflater24.setInput(byteArray49);
        deflater18.setInput(byteArray49);
        deflater12.setDictionary(byteArray49);
        deflater1.setDictionary(byteArray49);
        long long57 = deflater1.getBytesRead();
        java.lang.Class<?> wildcardClass58 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test4793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4793");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) 0, true);
        int int3 = deflater2.getAdler();
        java.lang.Class<?> wildcardClass4 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test4794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4794");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        long long26 = deflater25.getBytesWritten();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater28.setDictionary(byteArray63);
        deflater25.setInput(byteArray63);
        int int69 = deflater2.deflate(byteArray63);
        long long70 = deflater2.getBytesWritten();
        int int71 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test4795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4795");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater1.setInput(byteArray15);
        int int18 = deflater1.getTotalIn();
        int int19 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        int int22 = deflater21.getTotalOut();
        int int23 = deflater21.getTotalOut();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getAdler();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater28.setInput(byteArray41, 0, 0);
        int int46 = deflater26.deflate(byteArray41);
        deflater26.end();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        long long50 = deflater49.getBytesWritten();
        int int51 = deflater49.getTotalIn();
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater((int) (byte) 1);
        deflater53.reset();
        int int55 = deflater53.getTotalIn();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater53.setInput(byteArray62);
        deflater53.finish();
        long long65 = deflater53.getBytesRead();
        deflater53.reset();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater68.finish();
        long long80 = deflater68.getBytesRead();
        deflater68.reset();
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater68.setInput(byteArray88, (int) (short) 0, (int) (short) 1);
        deflater53.setDictionary(byteArray88);
        int int93 = deflater49.deflate(byteArray88);
        deflater26.setInput(byteArray88);
        int int95 = deflater21.deflate(byteArray88);
        deflater1.setDictionary(byteArray88);
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test4796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4796");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        deflater2.finish();
        deflater2.finish();
        boolean boolean5 = deflater2.needsInput();
        deflater2.reset();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test4797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4797");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        long long19 = deflater1.getBytesRead();
        boolean boolean20 = deflater1.needsInput();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater22.setInput(byteArray34);
        int int37 = deflater22.getTotalIn();
        long long38 = deflater22.getBytesWritten();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater22.setDictionary(byteArray49);
        int int52 = deflater1.deflate(byteArray49);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test4798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4798");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        deflater2.reset();
        deflater2.setStrategy(0);
        deflater2.finish();
        int int7 = deflater2.getTotalOut();
        int int8 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        int int13 = deflater10.getTotalIn();
        int int14 = deflater10.getTotalIn();
        long long15 = deflater10.getBytesWritten();
        int int16 = deflater10.getTotalOut();
        boolean boolean17 = deflater10.needsInput();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        long long20 = deflater19.getBytesWritten();
        int int21 = deflater19.getTotalIn();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater38.setInput(byteArray58, (int) (short) 0, (int) (short) 1);
        deflater23.setDictionary(byteArray58);
        int int63 = deflater19.deflate(byteArray58);
        deflater10.setInput(byteArray58);
        deflater10.finish();
        deflater10.setLevel(2);
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        deflater69.reset();
        boolean boolean73 = deflater69.finished();
        int int74 = deflater69.getTotalOut();
        java.util.zip.Deflater deflater76 = new java.util.zip.Deflater((int) (byte) 1);
        deflater76.reset();
        int int78 = deflater76.getAdler();
        java.util.zip.Deflater deflater80 = new java.util.zip.Deflater((int) (byte) 1);
        deflater80.reset();
        int int82 = deflater80.getTotalIn();
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater80.setInput(byteArray89);
        deflater76.setInput(byteArray89);
        int int94 = deflater69.deflate(byteArray89, 0, 0);
        int int95 = deflater10.deflate(byteArray89);
        int int96 = deflater2.deflate(byteArray89);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[3, 0, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test4799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4799");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        long long4 = deflater2.getBytesWritten();
        deflater2.setStrategy(0);
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater11.setInput(byteArray23);
        deflater9.setInput(byteArray23);
        deflater9.setStrategy(0);
        boolean boolean29 = deflater9.needsInput();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater34.setInput(byteArray46);
        deflater32.setInput(byteArray46);
        deflater9.setInput(byteArray46);
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getTotalIn();
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater52.setInput(byteArray61);
        deflater52.finish();
        long long64 = deflater52.getBytesRead();
        deflater52.reset();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater52.setInput(byteArray72, (int) (short) 0, (int) (short) 1);
        deflater9.setInput(byteArray72);
        deflater2.setDictionary(byteArray72);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test4800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4800");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        int int2 = deflater1.getAdler();
        boolean boolean3 = deflater1.needsInput();
        boolean boolean4 = deflater1.finished();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater6.finish();
        long long18 = deflater6.getBytesRead();
        deflater6.reset();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater6.setInput(byteArray26, (int) (short) 0, (int) (short) 1);
        deflater6.reset();
        int int31 = deflater6.getTotalIn();
        boolean boolean32 = deflater6.needsInput();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        long long35 = deflater34.getBytesWritten();
        int int36 = deflater34.getTotalOut();
        long long37 = deflater34.getBytesWritten();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        deflater39.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater39.setDictionary(byteArray52);
        deflater34.setDictionary(byteArray52);
        deflater6.setInput(byteArray52);
        deflater1.setInput(byteArray52);
        int int58 = deflater1.getTotalIn();
        int int59 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test4801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4801");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.needsInput();
        long long4 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        int int9 = deflater6.getTotalIn();
        deflater6.finish();
        deflater6.reset();
        boolean boolean12 = deflater6.finished();
        long long13 = deflater6.getBytesRead();
        long long14 = deflater6.getBytesWritten();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater16.setInput(byteArray55);
        deflater6.setInput(byteArray55);
        deflater2.setDictionary(byteArray55, 2, (int) (byte) 1);
        deflater2.finish();
        int int66 = deflater2.getTotalIn();
        java.lang.Class<?> wildcardClass67 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test4802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4802");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        long long4 = deflater1.getBytesWritten();
        deflater1.reset();
        boolean boolean6 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test4803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4803");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 1, true);
        int int3 = deflater2.getTotalOut();
        deflater2.setStrategy(0);
        int int6 = deflater2.getTotalOut();
        deflater2.setLevel((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test4804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4804");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getAdler();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater4.setInput(byteArray17, 0, 0);
        int int22 = deflater2.deflate(byteArray17);
        deflater2.reset();
        int int24 = deflater2.getTotalIn();
        boolean boolean25 = deflater2.needsInput();
        boolean boolean26 = deflater2.finished();
        deflater2.reset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4805");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        deflater1.setInput(byteArray40);
        deflater1.end();
        boolean boolean47 = deflater1.needsInput();
        deflater1.setStrategy(2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test4806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4806");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        deflater1.reset();
        boolean boolean14 = deflater1.needsInput();
        boolean boolean15 = deflater1.needsInput();
        int int16 = deflater1.getTotalIn();
        int int17 = deflater1.getTotalOut();
        int int18 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getAdler();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater23.setInput(byteArray36, 0, 0);
        int int41 = deflater21.deflate(byteArray36);
        deflater21.reset();
        long long43 = deflater21.getBytesWritten();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        deflater45.finish();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater45.setInput(byteArray59);
        deflater21.setDictionary(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray59, 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test4807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4807");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        boolean boolean1 = deflater0.needsInput();
        deflater0.setLevel((int) (short) -1);
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        deflater5.reset();
        boolean boolean9 = deflater5.finished();
        int int10 = deflater5.getTotalOut();
        int int11 = deflater5.getTotalIn();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        deflater13.finish();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater13.setInput(byteArray27);
        deflater5.setDictionary(byteArray27);
        deflater0.setDictionary(byteArray27);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test4808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4808");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        int int6 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater8.finish();
        long long20 = deflater8.getBytesRead();
        deflater8.reset();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater8.setInput(byteArray28, (int) (short) 0, (int) (short) 1);
        deflater8.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater34.setInput(byteArray54, (int) (short) 0, (int) (short) 1);
        int int58 = deflater8.deflate(byteArray54);
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        int int62 = deflater60.getTotalIn();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater60.setInput(byteArray69);
        deflater8.setInput(byteArray69);
        deflater1.setInput(byteArray69);
        boolean boolean73 = deflater1.needsInput();
        long long74 = deflater1.getBytesWritten();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
    }

    @Test
    public void test4809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4809");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        long long8 = deflater1.getBytesWritten();
        deflater1.setStrategy(1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test4810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4810");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        int int6 = deflater1.getTotalOut();
        int int7 = deflater1.getTotalOut();
        long long8 = deflater1.getBytesWritten();
        deflater1.end();
        deflater1.finish();
        boolean boolean11 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test4811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4811");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((-1));
        boolean boolean2 = deflater1.finished();
        deflater1.finish();
        int int4 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test4812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4812");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater24.setInput(byteArray36);
        deflater22.setInput(byteArray36);
        deflater22.setStrategy(0);
        boolean boolean42 = deflater22.needsInput();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater47.setInput(byteArray59);
        deflater45.setInput(byteArray59);
        deflater22.setInput(byteArray59);
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater22.setInput(byteArray85);
        int int90 = deflater2.deflate(byteArray85);
        deflater2.setStrategy((int) (short) 1);
        deflater2.reset();
        int int94 = deflater2.getTotalOut();
        deflater2.setStrategy(0);
        deflater2.setLevel(9);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test4813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4813");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        int int4 = deflater1.getTotalOut();
        boolean boolean5 = deflater1.needsInput();
        int int6 = deflater1.getAdler();
        long long7 = deflater1.getBytesRead();
        int int8 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test4814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4814");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(2);
        long long2 = deflater1.getBytesRead();
        deflater1.setLevel((int) (byte) 0);
        int int5 = deflater1.getAdler();
        int int6 = deflater1.getTotalOut();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test4815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4815");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalIn();
        long long5 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((-1), true);
        long long9 = deflater8.getBytesWritten();
        deflater8.setLevel(2);
        deflater8.finish();
        deflater8.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater18.setInput(byteArray30);
        deflater16.setInput(byteArray30);
        deflater16.setStrategy(0);
        boolean boolean36 = deflater16.needsInput();
        long long37 = deflater16.getBytesRead();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        long long40 = deflater39.getBytesWritten();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater42.finish();
        long long54 = deflater42.getBytesRead();
        deflater42.reset();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater((int) (byte) 1);
        deflater57.reset();
        int int59 = deflater57.getTotalIn();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater57.setInput(byteArray66);
        deflater57.finish();
        long long69 = deflater57.getBytesRead();
        deflater57.reset();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater57.setInput(byteArray77, (int) (short) 0, (int) (short) 1);
        deflater42.setDictionary(byteArray77);
        deflater39.setInput(byteArray77);
        int int83 = deflater16.deflate(byteArray77);
        deflater8.setDictionary(byteArray77);
        deflater2.setInput(byteArray77);
        java.lang.Class<?> wildcardClass86 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test4816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4816");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        long long18 = deflater1.getBytesWritten();
        long long19 = deflater1.getBytesWritten();
        int int20 = deflater1.getTotalOut();
        deflater1.reset();
        deflater1.setStrategy((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test4817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4817");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        deflater1.reset();
        deflater1.end();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test4818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4818");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        boolean boolean25 = deflater1.needsInput();
        int int26 = deflater1.getAdler();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test4819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4819");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (short) -1, true);
        deflater8.setLevel((-1));
        boolean boolean11 = deflater8.needsInput();
        deflater8.setLevel(0);
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater(3, true);
        int int17 = deflater16.getAdler();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((-1), true);
        long long21 = deflater20.getBytesWritten();
        deflater20.setLevel(2);
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater40.setInput(byteArray60, (int) (short) 0, (int) (short) 1);
        deflater25.setDictionary(byteArray60);
        deflater20.setInput(byteArray60);
        deflater16.setDictionary(byteArray60);
        int int70 = deflater8.deflate(byteArray60, 6, (int) (short) 0, 0);
        deflater1.setDictionary(byteArray60);
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test4820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4820");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        deflater4.reset();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater4.setInput(byteArray24, (int) (short) 0, (int) (short) 1);
        deflater4.reset();
        deflater4.end();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater31.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        deflater31.setInput(byteArray64);
        boolean boolean69 = deflater31.finished();
        deflater31.finish();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        int int74 = deflater72.getTotalIn();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater72.setInput(byteArray81);
        int int83 = deflater31.deflate(byteArray81);
        deflater4.setInput(byteArray81);
        deflater1.setInput(byteArray81);
        deflater1.reset();
        deflater1.reset();
        long long88 = deflater1.getBytesWritten();
        int int89 = deflater1.getTotalIn();
        long long90 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
    }

    @Test
    public void test4821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4821");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        int int6 = deflater1.getTotalOut();
        deflater1.finish();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        int int23 = deflater9.getAdler();
        byte[] byteArray25 = new byte[] { (byte) 10 };
        deflater9.setDictionary(byteArray25);
        deflater1.setDictionary(byteArray25);
        int int28 = deflater1.getTotalIn();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test4822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4822");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater24.setInput(byteArray36);
        deflater22.setInput(byteArray36);
        deflater22.setStrategy(0);
        boolean boolean42 = deflater22.needsInput();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater47.setInput(byteArray59);
        deflater45.setInput(byteArray59);
        deflater22.setInput(byteArray59);
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater22.setInput(byteArray85);
        int int90 = deflater2.deflate(byteArray85);
        deflater2.setStrategy((int) (short) 1);
        deflater2.reset();
        int int94 = deflater2.getTotalOut();
        deflater2.setStrategy(0);
        boolean boolean97 = deflater2.needsInput();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test4823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4823");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        deflater1.setStrategy(2);
        int int7 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test4824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4824");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        long long5 = deflater2.getBytesWritten();
        int int6 = deflater2.getTotalOut();
        int int7 = deflater2.getAdler();
        int int8 = deflater2.getTotalIn();
        java.lang.Class<?> wildcardClass9 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test4825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4825");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        boolean boolean8 = deflater1.needsInput();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        long long11 = deflater10.getBytesWritten();
        int int12 = deflater10.getTotalIn();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater29.setInput(byteArray49, (int) (short) 0, (int) (short) 1);
        deflater14.setDictionary(byteArray49);
        int int54 = deflater10.deflate(byteArray49);
        deflater1.setInput(byteArray49);
        deflater1.reset();
        int int57 = deflater1.getAdler();
        int int58 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test4826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4826");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.reset();
        int int19 = deflater1.getAdler();
        long long20 = deflater1.getBytesWritten();
        deflater1.setLevel(9);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test4827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4827");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        boolean boolean4 = deflater2.needsInput();
        boolean boolean5 = deflater2.needsInput();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1, true);
        int int9 = deflater8.getTotalOut();
        boolean boolean10 = deflater8.needsInput();
        deflater8.setStrategy(0);
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        int int17 = deflater14.getTotalIn();
        deflater14.finish();
        deflater14.reset();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater14.setInput(byteArray30);
        deflater14.finish();
        int int34 = deflater14.getAdler();
        int int35 = deflater14.getTotalIn();
        int int36 = deflater14.getAdler();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        deflater38.reset();
        long long41 = deflater38.getBytesWritten();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        deflater43.finish();
        int int47 = deflater43.getTotalOut();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        deflater49.finish();
        long long53 = deflater49.getBytesWritten();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        long long56 = deflater55.getBytesRead();
        long long57 = deflater55.getBytesRead();
        long long58 = deflater55.getBytesWritten();
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        int int62 = deflater60.getTotalIn();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater60.setInput(byteArray69);
        deflater60.finish();
        long long72 = deflater60.getBytesRead();
        deflater60.reset();
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater60.setInput(byteArray80, (int) (short) 0, (int) (short) 1);
        deflater55.setInput(byteArray80);
        deflater49.setInput(byteArray80);
        deflater43.setDictionary(byteArray80);
        int int87 = deflater38.deflate(byteArray80);
        deflater14.setInput(byteArray80);
        int int91 = deflater8.deflate(byteArray80, 2, 2);
        deflater2.setDictionary(byteArray80);
        deflater2.reset();
        int int94 = deflater2.getAdler();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test4828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4828");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        long long7 = deflater6.getBytesWritten();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        deflater9.setDictionary(byteArray44);
        deflater6.setInput(byteArray44);
        deflater2.setDictionary(byteArray44);
        int int51 = deflater2.getTotalIn();
        boolean boolean52 = deflater2.needsInput();
        long long53 = deflater2.getBytesRead();
        deflater2.finish();
        deflater2.setLevel(0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
    }

    @Test
    public void test4829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4829");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getAdler();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater4.setInput(byteArray17, 0, 0);
        int int22 = deflater2.deflate(byteArray17);
        deflater2.end();
        deflater2.finish();
        boolean boolean25 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test4830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4830");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        deflater2.finish();
        long long6 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean9 = deflater8.finished();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater11.finish();
        long long23 = deflater11.getBytesRead();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater40.setInput(byteArray60, (int) (short) 0, (int) (short) 1);
        deflater25.setDictionary(byteArray60);
        int int65 = deflater11.deflate(byteArray60);
        int int68 = deflater8.deflate(byteArray60, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        deflater70.finish();
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater((int) (byte) 1);
        deflater75.reset();
        int int77 = deflater75.getTotalIn();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater75.setInput(byteArray84);
        deflater70.setInput(byteArray84);
        deflater8.setInput(byteArray84);
        deflater2.setInput(byteArray84);
        int int89 = deflater2.getTotalOut();
        long long90 = deflater2.getBytesRead();
        long long91 = deflater2.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
    }

    @Test
    public void test4831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4831");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        deflater5.reset();
        boolean boolean9 = deflater5.finished();
        int int10 = deflater5.getTotalOut();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getAdler();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater12.setInput(byteArray25);
        int int30 = deflater5.deflate(byteArray25, 0, 0);
        int int31 = deflater5.getTotalIn();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((-1));
        int int34 = deflater33.getTotalIn();
        boolean boolean35 = deflater33.finished();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        deflater37.reset();
        deflater37.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        deflater42.reset();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater42.setDictionary(byteArray55);
        int int58 = deflater37.deflate(byteArray55);
        int int59 = deflater33.deflate(byteArray55);
        deflater5.setInput(byteArray55);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = deflater1.deflate(byteArray55, 2, 6, 131074);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test4832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4832");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.reset();
        boolean boolean4 = deflater1.finished();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater6.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater19.finish();
        long long31 = deflater19.getBytesRead();
        deflater19.reset();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater19.setInput(byteArray39, (int) (short) 0, (int) (short) 1);
        deflater6.setInput(byteArray39);
        int int44 = deflater1.deflate(byteArray39);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater(1, true);
        boolean boolean48 = deflater47.needsInput();
        int int49 = deflater47.getAdler();
        deflater47.reset();
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 10, (byte) 10, (byte) 100, (byte) 1, (byte) 1 };
        deflater47.setInput(byteArray57, 1, 0);
        deflater1.setDictionary(byteArray57);
        long long62 = deflater1.getBytesWritten();
        int int63 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 10, 10, 100, 1, 1]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test4833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4833");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalIn();
        long long5 = deflater2.getBytesRead();
        deflater2.finish();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        long long9 = deflater8.getBytesWritten();
        int int10 = deflater8.getTotalOut();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.finish();
        long long24 = deflater12.getBytesRead();
        deflater12.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater27.setInput(byteArray47, (int) (short) 0, (int) (short) 1);
        deflater12.setDictionary(byteArray47);
        deflater8.setDictionary(byteArray47);
        deflater2.setDictionary(byteArray47);
        int int54 = deflater2.getAdler();
        int int55 = deflater2.getTotalOut();
        boolean boolean56 = deflater2.needsInput();
        deflater2.setLevel(3);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 118882828 + "'", int54 == 118882828);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test4834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4834");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        deflater1.reset();
        int int14 = deflater1.getAdler();
        int int15 = deflater1.getTotalOut();
        byte[] byteArray16 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray16, (int) (short) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4835");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        long long8 = deflater7.getBytesWritten();
        int int9 = deflater7.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater11.finish();
        long long23 = deflater11.getBytesRead();
        deflater11.reset();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater26.finish();
        long long38 = deflater26.getBytesRead();
        deflater26.reset();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater26.setInput(byteArray46, (int) (short) 0, (int) (short) 1);
        deflater11.setDictionary(byteArray46);
        int int51 = deflater7.deflate(byteArray46);
        deflater2.setDictionary(byteArray46);
        int int53 = deflater2.getTotalIn();
        deflater2.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test4836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4836");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (short) 0);
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        deflater1.setStrategy(0);
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test4837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4837");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        long long8 = deflater1.getBytesWritten();
        deflater1.setLevel(6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test4838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4838");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater1.setInput(byteArray15);
        int int18 = deflater1.getAdler();
        boolean boolean19 = deflater1.needsInput();
        boolean boolean20 = deflater1.finished();
        int int21 = deflater1.getAdler();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test4839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4839");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.setLevel(0);
        long long20 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        deflater22.reset();
        boolean boolean26 = deflater22.finished();
        deflater22.setLevel((int) (short) 1);
        int int29 = deflater22.getAdler();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater31.finish();
        long long43 = deflater31.getBytesRead();
        deflater31.reset();
        int int45 = deflater31.getAdler();
        byte[] byteArray47 = new byte[] { (byte) 10 };
        deflater31.setDictionary(byteArray47);
        deflater22.setDictionary(byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = deflater1.deflate(byteArray47, 9, 0, 720907);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10]");
    }

    @Test
    public void test4840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4840");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        deflater1.reset();
        int int4 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test4841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4841");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater(3, true);
        int int20 = deflater19.getAdler();
        deflater19.setStrategy(0);
        int int23 = deflater19.getTotalOut();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        long long26 = deflater25.getBytesWritten();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        int int42 = deflater28.getAdler();
        boolean boolean43 = deflater28.needsInput();
        int int44 = deflater28.getTotalIn();
        int int45 = deflater28.getTotalIn();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater62.finish();
        long long74 = deflater62.getBytesRead();
        deflater62.reset();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater62.setInput(byteArray82, (int) (short) 0, (int) (short) 1);
        int int86 = deflater47.deflate(byteArray82);
        deflater28.setDictionary(byteArray82);
        deflater25.setInput(byteArray82);
        int int91 = deflater19.deflate(byteArray82, (int) (byte) 1, 3);
        int int92 = deflater1.deflate(byteArray82);
        deflater1.setStrategy(0);
        long long95 = deflater1.getBytesRead();
        deflater1.finish();
        long long97 = deflater1.getBytesRead();
        java.lang.Class<?> wildcardClass98 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }
}

