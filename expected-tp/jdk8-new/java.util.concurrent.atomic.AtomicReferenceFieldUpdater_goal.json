[
  {
    "signature": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater()",
    "name": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
      "name": "AtomicReferenceFieldUpdater",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater()",
      "comment": "Protected do-nothing constructor for use by subclasses.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "newUpdater(java.lang.Class<U> tclass, java.lang.Class<W> vclass, java.lang.String fieldName)",
    "name": "newUpdater",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
      "name": "AtomicReferenceFieldUpdater",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater<U, W>",
      "name": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater<U, W>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "tclass"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "vclass"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "fieldName"
      }
    ],
    "protocol": {
      "member": "newUpdater(java.lang.Class<U> tclass, java.lang.Class<W> vclass, java.lang.String fieldName)",
      "comment": "Creates and returns an updater for objects with the given field. The Class arguments are needed to check that reflective types and generic types match.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "compareAndSet(T obj, V expect, V update)",
    "name": "compareAndSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
      "name": "AtomicReferenceFieldUpdater",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "expect"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "update"
      }
    ],
    "protocol": {
      "member": "compareAndSet(T obj, V expect, V update)",
      "comment": "Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value. This method is guaranteed to be atomic with respect to other calls to compareAndSet and set, but not necessarily with respect to other changes in the field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "weakCompareAndSet(T obj, V expect, V update)",
    "name": "weakCompareAndSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
      "name": "AtomicReferenceFieldUpdater",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "expect"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "update"
      }
    ],
    "protocol": {
      "member": "weakCompareAndSet(T obj, V expect, V update)",
      "comment": "Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value. This method is guaranteed to be atomic with respect to other calls to compareAndSet and set, but not necessarily with respect to other changes in the field. May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to compareAndSet.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "set(T obj, V newValue)",
    "name": "set",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
      "name": "AtomicReferenceFieldUpdater",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "newValue"
      }
    ],
    "protocol": {
      "member": "set(T obj, V newValue)",
      "comment": "Sets the field of the given object managed by this updater to the given updated value. This operation is guaranteed to act as a volatile store with respect to subsequent invocations of compareAndSet.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lazySet(T obj, V newValue)",
    "name": "lazySet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
      "name": "AtomicReferenceFieldUpdater",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "newValue"
      }
    ],
    "protocol": {
      "member": "lazySet(T obj, V newValue)",
      "comment": "Eventually sets the field of the given object managed by this updater to the given updated value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(T obj)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
      "name": "AtomicReferenceFieldUpdater",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "protocol": {
      "member": "get(T obj)",
      "comment": "Gets the current value held in the field of the given object managed by this updater.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getAndSet(T obj, V newValue)",
    "name": "getAndSet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
      "name": "AtomicReferenceFieldUpdater",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "newValue"
      }
    ],
    "protocol": {
      "member": "getAndSet(T obj, V newValue)",
      "comment": "Atomically sets the field of the given object managed by this updater to the given value and returns the old value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getAndUpdate(T obj, java.util.function.UnaryOperator<V> updateFunction)",
    "name": "getAndUpdate",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
      "name": "AtomicReferenceFieldUpdater",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.UnaryOperator",
          "name": "UnaryOperator",
          "isArray": false
        },
        "name": "updateFunction"
      }
    ],
    "protocol": {
      "member": "getAndUpdate(T obj, java.util.function.UnaryOperator<V> updateFunction)",
      "comment": "Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "updateAndGet(T obj, java.util.function.UnaryOperator<V> updateFunction)",
    "name": "updateAndGet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
      "name": "AtomicReferenceFieldUpdater",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.UnaryOperator",
          "name": "UnaryOperator",
          "isArray": false
        },
        "name": "updateFunction"
      }
    ],
    "protocol": {
      "member": "updateAndGet(T obj, java.util.function.UnaryOperator<V> updateFunction)",
      "comment": "Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getAndAccumulate(T obj, V x, java.util.function.BinaryOperator<V> accumulatorFunction)",
    "name": "getAndAccumulate",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
      "name": "AtomicReferenceFieldUpdater",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.BinaryOperator",
          "name": "BinaryOperator",
          "isArray": false
        },
        "name": "accumulatorFunction"
      }
    ],
    "protocol": {
      "member": "getAndAccumulate(T obj, V x, java.util.function.BinaryOperator<V> accumulatorFunction)",
      "comment": "Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value as its first argument, and the given update as the second argument.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "accumulateAndGet(T obj, V x, java.util.function.BinaryOperator<V> accumulatorFunction)",
    "name": "accumulateAndGet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
      "name": "AtomicReferenceFieldUpdater",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.BinaryOperator",
          "name": "BinaryOperator",
          "isArray": false
        },
        "name": "accumulatorFunction"
      }
    ],
    "protocol": {
      "member": "accumulateAndGet(T obj, V x, java.util.function.BinaryOperator<V> accumulatorFunction)",
      "comment": "Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value as its first argument, and the given update as the second argument.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]