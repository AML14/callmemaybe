[
  {
    "signature": "weka.classifiers.functions.Logistic()",
    "name": "weka.classifiers.functions.Logistic",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "weka.classifiers.functions.Logistic()",
      "comment": "Constructor that sets the default number of decimal places to 4.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "globalInfo()",
    "name": "globalInfo",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "globalInfo()",
      "comment": "Returns a string describing this classifier",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTechnicalInformation()",
    "name": "getTechnicalInformation",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.TechnicalInformation",
      "name": "weka.core.TechnicalInformation",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTechnicalInformation()",
      "comment": "Returns an instance of a TechnicalInformation object, containing detailed information about the technical background of this class, emethod_0., paper reference or book this class is based on.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listOptions()",
    "name": "listOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<weka.core.Option>",
      "name": "java.util.Enumeration<weka.core.Option>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "listOptions()",
      "comment": "Returns an enumeration describing the available options",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setOptions(java.lang.String[] options)",
    "name": "setOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "options"
      }
    ],
    "protocol": {
      "member": "setOptions(java.lang.String[] options)",
      "comment": "Parses a given list of options.   -D Turn on debugging output.   -R <ridge> Set the ridge in the log-likelihood.   -M <number> Set the maximum number of iterations (default -1, until convergence).  <!-- options-end -->",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOptions()",
    "name": "getOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getOptions()",
      "comment": "Gets the current settings of the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "debugTipText()",
    "name": "debugTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "debugTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setDebug(boolean debug)",
    "name": "setDebug",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "debug"
      }
    ],
    "protocol": {
      "member": "setDebug(boolean debug)",
      "comment": "Sets whether debugging output will be printed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDebug()",
    "name": "getDebug",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getDebug()",
      "comment": "Gets whether debugging output will be printed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "useConjugateGradientDescentTipText()",
    "name": "useConjugateGradientDescentTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "useConjugateGradientDescentTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setUseConjugateGradientDescent(boolean useConjugateGradientDescent)",
    "name": "setUseConjugateGradientDescent",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "useConjugateGradientDescent"
      }
    ],
    "protocol": {
      "member": "setUseConjugateGradientDescent(boolean useConjugateGradientDescent)",
      "comment": "Sets whether conjugate gradient descent is used.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getUseConjugateGradientDescent()",
    "name": "getUseConjugateGradientDescent",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getUseConjugateGradientDescent()",
      "comment": "Gets whether to use conjugate gradient descent rather than BFGS updates.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ridgeTipText()",
    "name": "ridgeTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "ridgeTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setRidge(double ridge)",
    "name": "setRidge",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "ridge"
      }
    ],
    "protocol": {
      "member": "setRidge(double ridge)",
      "comment": "Sets the ridge in the log-likelihood.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRidge()",
    "name": "getRidge",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRidge()",
      "comment": "Gets the ridge in the log-likelihood.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "maxItsTipText()",
    "name": "maxItsTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "maxItsTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMaxIts()",
    "name": "getMaxIts",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMaxIts()",
      "comment": "Get the value of MaxIts.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMaxIts(int newMaxIts)",
    "name": "setMaxIts",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "newMaxIts"
      }
    ],
    "protocol": {
      "member": "setMaxIts(int newMaxIts)",
      "comment": "Set the value of MaxIts.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCapabilities()",
    "name": "getCapabilities",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.Capabilities",
      "name": "weka.core.Capabilities",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getCapabilities()",
      "comment": "Returns default capabilities of the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "buildClassifier(weka.core.Instances train)",
    "name": "buildClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "train"
      }
    ],
    "protocol": {
      "member": "buildClassifier(weka.core.Instances train)",
      "comment": "Builds the classifier",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "distributionForInstance(weka.core.Instance instance)",
    "name": "distributionForInstance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "instance"
      }
    ],
    "protocol": {
      "member": "distributionForInstance(weka.core.Instance instance)",
      "comment": "Computes the distribution for a given instance",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "coefficients()",
    "name": "coefficients",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[][]",
      "name": "double[][]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "coefficients()",
      "comment": "Returns the coefficients for this logistic model. The first dimension indexes the attributes, and the second the classes.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Gets a string describing the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRevision()",
    "name": "getRevision",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRevision()",
      "comment": "Returns the revision string.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "aggregate(weka.classifiers.functions.Logistic toAggregate)",
    "name": "aggregate",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "weka.classifiers.functions.Logistic",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.classifiers.functions.Logistic",
          "name": "Logistic",
          "isArray": false
        },
        "name": "toAggregate"
      }
    ],
    "protocol": {
      "member": "aggregate(weka.classifiers.functions.Logistic toAggregate)",
      "comment": "Aggregate an object with this one",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "finalizeAggregation()",
    "name": "finalizeAggregation",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "finalizeAggregation()",
      "comment": "Call to complete the aggregation process. Allows implementers to do any final processing based on how many objects were aggregated.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "main(java.lang.String[] argv)",
    "name": "main",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "argv"
      }
    ],
    "protocol": {
      "member": "main(java.lang.String[] argv)",
      "comment": "Main method for testing this class.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toPMML(weka.core.Instances train)",
    "name": "toPMML",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.Logistic",
      "name": "Logistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.Logistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "train"
      }
    ],
    "protocol": {
      "member": "toPMML(weka.core.Instances train)",
      "comment": "Produce a PMML representation of this logistic model",
      "kind": "FreeText",
      "condition": ""
    }
  }
]