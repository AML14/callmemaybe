[
  {
    "signature": "unpark(java.lang.Thread thread)",
    "name": "unpark",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.LockSupport",
      "name": "LockSupport",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.LockSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Thread",
          "name": "Thread",
          "isArray": false
        },
        "name": "thread"
      }
    ],
    "protocol": {
      "member": "unpark(java.lang.Thread thread)",
      "comment": "Makes available the permit for the given thread, if it was not already available. If the thread was blocked on park then it will unblock. Otherwise, its next call to park is guaranteed not to block. This operation is not guaranteed to have any effect at all if the given thread has not been started.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "park(java.lang.Object blocker)",
    "name": "park",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.LockSupport",
      "name": "LockSupport",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.LockSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "blocker"
      }
    ],
    "protocol": {
      "member": "park(java.lang.Object blocker)",
      "comment": "Disables the current thread for thread scheduling purposes unless the permit is available. If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens:  <li>Some other thread invokes method_0 unpark with the current thread as the target; or <li>Some other thread method_1 interrupts the current thread; or <li>The call spuriously (that is, for no reason) returns.  This method does not report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread upon return.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parkNanos(java.lang.Object blocker, long nanos)",
    "name": "parkNanos",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.LockSupport",
      "name": "LockSupport",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.LockSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "blocker"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "nanos"
      }
    ],
    "protocol": {
      "member": "parkNanos(java.lang.Object blocker, long nanos)",
      "comment": "Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available. If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens:  <li>Some other thread invokes method_0 unpark with the current thread as the target; or <li>Some other thread method_1 interrupts the current thread; or <li>The specified waiting time elapses; or <li>The call spuriously (that is, for no reason) returns.  This method does not report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread, or the elapsed time upon return.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parkUntil(java.lang.Object blocker, long deadline)",
    "name": "parkUntil",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.LockSupport",
      "name": "LockSupport",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.LockSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "blocker"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "deadline"
      }
    ],
    "protocol": {
      "member": "parkUntil(java.lang.Object blocker, long deadline)",
      "comment": "Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available. If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens:  <li>Some other thread invokes method_0 unpark with the current thread as the target; or <li>Some other thread method_1 interrupts the current thread; or <li>The specified deadline passes; or <li>The call spuriously (that is, for no reason) returns.  This method does not report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread, or the current time upon return.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getBlocker(java.lang.Thread t)",
    "name": "getBlocker",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.LockSupport",
      "name": "LockSupport",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.LockSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Thread",
          "name": "Thread",
          "isArray": false
        },
        "name": "t"
      }
    ],
    "protocol": {
      "member": "getBlocker(java.lang.Thread t)",
      "comment": "Returns the blocker object supplied to the most recent invocation of a park method that has not yet unblocked, or null if not blocked. The value returned is just a momentary snapshot -- the thread may have since unblocked or blocked on a different blocker object.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "park()",
    "name": "park",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.LockSupport",
      "name": "LockSupport",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.LockSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "park()",
      "comment": "Disables the current thread for thread scheduling purposes unless the permit is available. If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens:  <li>Some other thread invokes method_0 unpark with the current thread as the target; or <li>Some other thread method_1 interrupts the current thread; or <li>The call spuriously (that is, for no reason) returns.  This method does not report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread upon return.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parkNanos(long nanos)",
    "name": "parkNanos",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.LockSupport",
      "name": "LockSupport",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.LockSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "nanos"
      }
    ],
    "protocol": {
      "member": "parkNanos(long nanos)",
      "comment": "Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available. If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens:  <li>Some other thread invokes method_0 unpark with the current thread as the target; or <li>Some other thread method_1 interrupts the current thread; or <li>The specified waiting time elapses; or <li>The call spuriously (that is, for no reason) returns.  This method does not report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread, or the elapsed time upon return.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parkUntil(long deadline)",
    "name": "parkUntil",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.LockSupport",
      "name": "LockSupport",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.LockSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "deadline"
      }
    ],
    "protocol": {
      "member": "parkUntil(long deadline)",
      "comment": "Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available. If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens:  <li>Some other thread invokes method_0 unpark with the current thread as the target; or <li>Some other thread method_1 interrupts the current thread; or <li>The specified deadline passes; or <li>The call spuriously (that is, for no reason) returns.  This method does not report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread, or the current time upon return.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextSecondarySeed()",
    "name": "nextSecondarySeed",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.LockSupport",
      "name": "LockSupport",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.LockSupport",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextSecondarySeed()",
      "comment": "Returns the pseudo-randomly initialized or updated secondary seed. Copied from ThreadLocalRandom due to package access restrictions.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]