[
  {
    "signature": "java.util.Properties()",
    "name": "java.util.Properties",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.Properties()",
      "comment": "Creates an empty property list with no default values.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Properties(java.util.Properties defaults)",
    "name": "java.util.Properties",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Properties",
          "name": "Properties",
          "isArray": false
        },
        "name": "defaults"
      }
    ],
    "protocol": {
      "member": "java.util.Properties(java.util.Properties defaults)",
      "comment": "Creates an empty property list with the specified defaults.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setProperty(java.lang.String key, java.lang.String value)",
    "name": "setProperty",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "setProperty(java.lang.String key, java.lang.String value)",
      "comment": "Calls the Hashtable method put. Provided for parallelism with the getProperty method. Enforces use of strings for property keys and values. The value returned is the result of the Hashtable call to put.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "load(java.io.Reader reader)",
    "name": "load",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Reader",
          "name": "Reader",
          "isArray": false
        },
        "name": "reader"
      }
    ],
    "protocol": {
      "member": "load(java.io.Reader reader)",
      "comment": "Reads a property list (key and element pairs) from the input character stream in a simple line-oriented format.  Properties are processed in terms of lines. There are two kinds of line, natural lines and logical lines. A natural line is defined as a line of characters that is terminated either by a set of line terminator characters (\\n or \\r or \\r\\n}) or by the end of the stream. A natural line may be either a blank line, a comment line, or hold all or some of a key-element pair. A logical line holds all the data of a key-element pair, which may be spread out across several adjacent natural lines by escaping the line terminator sequence with a backslash character {@code \\. Note that a comment line cannot be extended in this manner; every natural line that is a comment must have its own comment indicator, as described below. Lines are read from input until the end of the stream is reached.  A natural line that contains only white space characters is considered blank and is ignored. A comment line has an ASCII '#' or '!' as its first non-white space character; comment lines are also ignored and do not encode key-element information. In addition to line terminators, this format considers the characters space (' ', '\\u005Cu0020'}), tab ({@code '\\t', '\\u005Cu0009'}), and form feed ({@code '\\f', '\\u005Cu000C'}) to be white space.  If a logical line is spread across several natural lines, the backslash escaping the line terminator sequence, the line terminator sequence, and any white space at the start of the following line have no affect on the key or element values. The remainder of the discussion of key and element parsing (when loading) will assume all the characters constituting the key and element appear on a single natural line after line continuation characters have been removed. Note that it is not sufficient to only examine the character preceding a line terminator sequence to decide if the line terminator is escaped; there must be an odd number of contiguous backslashes for the line terminator to be escaped. Since the input is processed from left to right, a non-zero even number of 2n contiguous backslashes before a line terminator (or elsewhere) encodes n backslashes after escape processing.  The key contains all of the characters in the line starting with the first non-white space character and up to, but not including, the first unescaped {@code '=', ':', or white space character other than a line terminator. All of these key termination characters may be included in the key by escaping them with a preceding backslash character; for example, \\:\\= would be the two-character key \":=\". Line terminator characters can be included using \\r and \\n escape sequences. Any white space after the key is skipped; if the first non-white space character after the key is '=' or ':', then it is ignored and any white space characters after it are also skipped. All remaining characters on the line become part of the associated element string; if there are no remaining characters, the element is the empty string \"\". Once the raw character sequences constituting the key and element are identified, escape processing is performed as described above.  As an example, each of the following three lines specifies the key \"Truth\" and the associated element value \"Beauty\"}:  Truth = Beauty Truth:Beauty Truth :Beauty  As another example, the following three lines specify a single property:  fruits apple, banana, pear, \\ cantaloupe, watermelon, \\ kiwi, mango  The key is {@code \"fruits\" and the associated element is: \"apple, banana, pear, cantaloupe, watermelon, kiwi, mango\" Note that a space appears before each \\ so that a space will appear after each comma in the final result; the \\, line terminator, and leading white space on the continuation line are merely discarded and are not replaced by one or more other characters.  As a third example, the line: cheeses  specifies that the key is \"cheeses\" and the associated element is the empty string \"\".   Characters in keys and elements can be represented in escape sequences similar to those used for character and string literals (see sections 3method_0 and 3method_1method_2 of The Java&trade; Language Specification). The differences from the character escape sequences and Unicode escapes used for characters and strings are: <ul> <li> Octal escapes are not recognized. <li> The character sequence \\b does not represent a backspace character. <li> The method does not treat a backslash character, \\, before a non-valid escape character as an error; the backslash is silently dropped. For example, in a Java string the sequence \"\\z\" would cause a compile time error. In contrast, this method silently drops the backslash. Therefore, this method treats the two character sequence \"\\b\" as equivalent to the single character 'b'. <li> Escapes are not necessary for single and double quotes; however, by the rule above, single and double quote characters preceded by a backslash still yield single and double quote characters, respectively. <li> Only a single 'u' character is allowed in a Unicode escape sequence. </ul>  The specified stream remains open after this method returns.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "load(java.io.InputStream inStream)",
    "name": "load",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "inStream"
      }
    ],
    "protocol": {
      "member": "load(java.io.InputStream inStream)",
      "comment": "Reads a property list (key and element pairs) from the input byte stream. The input stream is in a simple line-oriented format as specified in method_1 and is assumed to use the ISO 8859-1 character encoding; that is each byte is one Latin1 character. Characters not in Latin1, and certain special characters, are represented in keys and elements using Unicode escapes as defined in section 3method_5 of The Java&trade; Language Specification.  The specified stream remains open after this method returns.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "save(java.io.OutputStream out, java.lang.String comments)",
    "name": "save",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.OutputStream",
          "name": "OutputStream",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "comments"
      }
    ],
    "protocol": {
      "member": "save(java.io.OutputStream out, java.lang.String comments)",
      "comment": "Calls the method_0 method and suppresses IOExceptions that were thrown. @deprecated This method does not throw an IOException if an I/O error occurs while saving the property list. The preferred way to save a properties list is via the method_0 method or the method_2 method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "store(java.io.Writer writer, java.lang.String comments)",
    "name": "store",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Writer",
          "name": "Writer",
          "isArray": false
        },
        "name": "writer"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "comments"
      }
    ],
    "protocol": {
      "member": "store(java.io.Writer writer, java.lang.String comments)",
      "comment": "Writes this property list (key and element pairs) in this Properties table to the output character stream in a format suitable for using the method_1 method.  Properties from the defaults table of this Properties table (if any) are not written out by this method.  If the comments argument is not null, then an ASCII # character, the comments string, and a line separator are first written to the output stream. Thus, the comments can serve as an identifying comment. Any one of a line feed ('\\n'), a carriage return ('\\r'), or a carriage return followed immediately by a line feed in comments is replaced by a line separator generated by the Writer and if the next character in comments is not character # or character ! then an ASCII # is written out after that line separator.  Next, a comment line is always written, consisting of an ASCII # character, the current date and time (as if produced by the toString method of Date for the current time), and a line separator as generated by the Writer.  Then every entry in this Properties table is written out, one per line. For each entry the key string is written, then an ASCII =, then the associated element string. For the key, all space characters are written with a preceding \\ character. For the element, leading space characters, but not embedded or trailing space characters, are written with a preceding \\ character. The key and element characters #, !, =, and : are written with a preceding backslash to ensure that they are properly loaded.  After the entries have been written, the output stream is flushed. The output stream remains open after this method returns.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "store(java.io.OutputStream out, java.lang.String comments)",
    "name": "store",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.OutputStream",
          "name": "OutputStream",
          "isArray": false
        },
        "name": "out"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "comments"
      }
    ],
    "protocol": {
      "member": "store(java.io.OutputStream out, java.lang.String comments)",
      "comment": "Writes this property list (key and element pairs) in this Properties table to the output stream in a format suitable for loading into a Properties table using the method_0 method.  Properties from the defaults table of this Properties table (if any) are not written out by this method.  This method outputs the comments, properties keys and values in the same format as specified in method_3, with the following differences:  <li>The stream is written using the ISO 8859-1 character encoding. <li>Characters not in Latin-1 in the comments are written as \\u005Cu<i>xxxx</i> for their appropriate unicode hexadecimal value <i>xxxx</i>. <li>Characters less than \\u005Cu0020 and characters greater than \\u005Cu007E in property keys or values are written as \\u005Cu<i>xxxx</i> for the appropriate hexadecimal value <i>xxxx</i>.   After the entries have been written, the output stream is flushed. The output stream remains open after this method returns.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "loadFromXML(java.io.InputStream in)",
    "name": "loadFromXML",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "in"
      }
    ],
    "protocol": {
      "member": "loadFromXML(java.io.InputStream in)",
      "comment": "Loads all of the properties represented by the XML document on the specified input stream into this properties table. The XML document must have the following DOCTYPE declaration:  <!DOCTYPE properties SYSTEM \"http://javamethod_0method_1/dtd/propertiesmethod_2\">  Furthermore, the document must satisfy the properties DTD described above.  An implementation is required to read XML documents that use the \"{@code UTF-8}\" or \"{@code UTF-16}\" encoding. An implementation may support additional encodings. The specified stream is closed after this method returns.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "storeToXML(java.io.OutputStream os, java.lang.String comment)",
    "name": "storeToXML",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.OutputStream",
          "name": "OutputStream",
          "isArray": false
        },
        "name": "os"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "comment"
      }
    ],
    "protocol": {
      "member": "storeToXML(java.io.OutputStream os, java.lang.String comment)",
      "comment": "Emits an XML document representing all of the properties contained in this table.  An invocation of this method of the form method_0 behaves in exactly the same way as the invocation method_1;.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "storeToXML(java.io.OutputStream os, java.lang.String comment, java.lang.String encoding)",
    "name": "storeToXML",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.OutputStream",
          "name": "OutputStream",
          "isArray": false
        },
        "name": "os"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "comment"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "encoding"
      }
    ],
    "protocol": {
      "member": "storeToXML(java.io.OutputStream os, java.lang.String comment, java.lang.String encoding)",
      "comment": "Emits an XML document representing all of the properties contained in this table, using the specified encoding. The XML document will have the following DOCTYPE declaration:  <!DOCTYPE properties SYSTEM \"http://javamethod_0method_1/dtd/propertiesmethod_2\">  If the specified comment is null then no comment will be stored in the document.  An implementation is required to support writing of XML documents that use the \"{@code UTF-8}\" or \"{@code UTF-16}\" encoding. An implementation may support additional encodings. The specified stream remains open after this method returns.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getProperty(java.lang.String key)",
    "name": "getProperty",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "getProperty(java.lang.String key)",
      "comment": "Searches for the property with the specified key in this property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns null if the property is not found.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getProperty(java.lang.String key, java.lang.String defaultValue)",
    "name": "getProperty",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "defaultValue"
      }
    ],
    "protocol": {
      "member": "getProperty(java.lang.String key, java.lang.String defaultValue)",
      "comment": "Searches for the property with the specified key in this property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns the default value argument if the property is not found.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "propertyNames()",
    "name": "propertyNames",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<?>",
      "name": "java.util.Enumeration<?>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "propertyNames()",
      "comment": "Returns an enumeration of all the keys in this property list, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "stringPropertyNames()",
    "name": "stringPropertyNames",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<java.lang.String>",
      "name": "java.util.Set<java.lang.String>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "stringPropertyNames()",
      "comment": "Returns a set of keys in this property list where the key and its corresponding value are strings, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list. Properties whose key or value is not of type String are omitted.  The returned set is not backed by the Properties object. Changes to this Properties are not reflected in the set, or vice versa.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "list(java.io.PrintStream out)",
    "name": "list",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.PrintStream",
          "name": "PrintStream",
          "isArray": false
        },
        "name": "out"
      }
    ],
    "protocol": {
      "member": "list(java.io.PrintStream out)",
      "comment": "Prints this property list out to the specified output stream. This method is useful for debugging.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "list(java.io.PrintWriter out)",
    "name": "list",
    "containingClass": {
      "qualifiedName": "java.util.Properties",
      "name": "Properties",
      "isArray": false
    },
    "targetClass": "java.util.Properties",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.PrintWriter",
          "name": "PrintWriter",
          "isArray": false
        },
        "name": "out"
      }
    ],
    "protocol": {
      "member": "list(java.io.PrintWriter out)",
      "comment": "Prints this property list out to the specified output stream. This method is useful for debugging.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]