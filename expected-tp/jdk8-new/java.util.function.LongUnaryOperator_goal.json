[
  {
    "signature": "applyAsLong(long operand)",
    "name": "applyAsLong",
    "containingClass": {
      "qualifiedName": "java.util.function.LongUnaryOperator",
      "name": "LongUnaryOperator",
      "isArray": false
    },
    "targetClass": "java.util.function.LongUnaryOperator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "operand"
      }
    ],
    "protocol": {
      "member": "applyAsLong(long operand)",
      "comment": "Applies this operator to the given operand.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "compose(java.util.function.LongUnaryOperator before)",
    "name": "compose",
    "containingClass": {
      "qualifiedName": "java.util.function.LongUnaryOperator",
      "name": "LongUnaryOperator",
      "isArray": false
    },
    "targetClass": "java.util.function.LongUnaryOperator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.function.LongUnaryOperator",
      "name": "java.util.function.LongUnaryOperator",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.LongUnaryOperator",
          "name": "LongUnaryOperator",
          "isArray": false
        },
        "name": "before"
      }
    ],
    "protocol": {
      "member": "compose(java.util.function.LongUnaryOperator before)",
      "comment": "Returns a composed operator that first applies the before operator to its input, and then applies this operator to the result. If evaluation of either operator throws an exception, it is relayed to the caller of the composed operator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "andThen(java.util.function.LongUnaryOperator after)",
    "name": "andThen",
    "containingClass": {
      "qualifiedName": "java.util.function.LongUnaryOperator",
      "name": "LongUnaryOperator",
      "isArray": false
    },
    "targetClass": "java.util.function.LongUnaryOperator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.function.LongUnaryOperator",
      "name": "java.util.function.LongUnaryOperator",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.LongUnaryOperator",
          "name": "LongUnaryOperator",
          "isArray": false
        },
        "name": "after"
      }
    ],
    "protocol": {
      "member": "andThen(java.util.function.LongUnaryOperator after)",
      "comment": "Returns a composed operator that first applies this operator to its input, and then applies the after operator to the result. If evaluation of either operator throws an exception, it is relayed to the caller of the composed operator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "identity()",
    "name": "identity",
    "containingClass": {
      "qualifiedName": "java.util.function.LongUnaryOperator",
      "name": "LongUnaryOperator",
      "isArray": false
    },
    "targetClass": "java.util.function.LongUnaryOperator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.function.LongUnaryOperator",
      "name": "java.util.function.LongUnaryOperator",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "identity()",
      "comment": "Returns a unary operator that always returns its input argument.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]